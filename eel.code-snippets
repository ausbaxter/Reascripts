{
    "ADDMEDIAITEMTOTRACK EEL2": {
        "prefix": "AddMediaItemToTrack",
        "scope": "eel2",
        "body": "AddMediaItemToTrack(${1:MediaTrack tr})$0",
        "description": "creates a new media item.\n\n"
    },
    "ADDPROJECTMARKER EEL2": {
        "prefix": "AddProjectMarker",
        "scope": "eel2",
        "body": "AddProjectMarker(${1:ReaProject proj}, ${2: bool isrgn}, ${3: pos}, ${4: rgnend}, ${5: name}, ${6: int wantidx})$0",
        "description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.\n\n"
    },
    "ADDPROJECTMARKER2 EEL2": {
        "prefix": "AddProjectMarker2",
        "scope": "eel2",
        "body": "AddProjectMarker2(${1:ReaProject proj}, ${2: bool isrgn}, ${3: pos}, ${4: rgnend}, ${5: name}, ${6: int wantidx}, ${7: int color})$0",
        "description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000\n\n"
    },
    "ADDREMOVEREASCRIPT EEL2": {
        "prefix": "AddRemoveReaScript",
        "scope": "eel2",
        "body": "AddRemoveReaScript(${1:bool add}, ${2: int sectionID}, ${3: scriptfn}, ${4: bool commit})$0",
        "description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.\n\n"
    },
    "ADDTAKETOMEDIAITEM EEL2": {
        "prefix": "AddTakeToMediaItem",
        "scope": "eel2",
        "body": "AddTakeToMediaItem(${1:MediaItem item})$0",
        "description": "creates a new take in an item\n\n"
    },
    "ADDTEMPOTIMESIGMARKER EEL2": {
        "prefix": "AddTempoTimeSigMarker",
        "scope": "eel2",
        "body": "AddTempoTimeSigMarker(${1:ReaProject proj}, ${2: timepos}, ${3: bpm}, ${4: int timesig_num}, ${5: int timesig_denom}, ${6: bool lineartempochange})$0",
        "description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.\n\n"
    },
    "ADJUSTZOOM EEL2": {
        "prefix": "adjustZoom",
        "scope": "eel2",
        "body": "adjustZoom(${1:amt}, ${2: int forceset}, ${3: bool doupd}, ${4: int centermode})$0",
        "description": "forceset=0,doupd=true,centermode=-1 for default\n\n"
    },
    "ANYTRACKSOLO EEL2": {
        "prefix": "AnyTrackSolo",
        "scope": "eel2",
        "body": "AnyTrackSolo(${1:ReaProject proj})$0",
        "description": ""
    },
    "APIEXISTS EEL2": {
        "prefix": "APIExists",
        "scope": "eel2",
        "body": "APIExists(${1:\"function_name\"})$0",
        "description": "Returns true if function_name exists in the REAPER API\n\n"
    },
    "APITEST EEL2": {
        "prefix": "APITest",
        "scope": "eel2",
        "body": "APITest()$0",
        "description": "Displays a message window if the API was successfully called.\n\n"
    },
    "APPLYNUDGE EEL2": {
        "prefix": "ApplyNudge",
        "scope": "eel2",
        "body": "ApplyNudge(${1:ReaProject project}, ${2: int nudgeflag}, ${3: int nudgewhat}, ${4: int nudgeunits}, ${5: value}, ${6: bool reverse}, ${7: int copies})$0",
        "description": "nudgeflag: &1=set to value (otherwise nudge by value), &2=snap\n\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\n\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\n\nvalue: amount to nudge by, or value to set to\n\nreverse: in nudge mode, nudges left (otherwise ignored)\n\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)\n\n"
    },
    "AUDIO_INIT EEL2": {
        "prefix": "Audio_Init",
        "scope": "eel2",
        "body": "Audio_Init()$0",
        "description": "open all audio and MIDI devices, if not open\n\n"
    },
    "AUDIO_ISPREBUFFER EEL2": {
        "prefix": "Audio_IsPreBuffer",
        "scope": "eel2",
        "body": "Audio_IsPreBuffer()$0",
        "description": "is in pre-buffer? threadsafe\n\n"
    },
    "AUDIO_ISRUNNING EEL2": {
        "prefix": "Audio_IsRunning",
        "scope": "eel2",
        "body": "Audio_IsRunning()$0",
        "description": "is audio running at all? threadsafe\n\n"
    },
    "AUDIO_QUIT EEL2": {
        "prefix": "Audio_Quit",
        "scope": "eel2",
        "body": "Audio_Quit()$0",
        "description": "close all audio and MIDI devices, if open\n\n"
    },
    "AUDIOACCESSORVALIDATESTATE EEL2": {
        "prefix": "AudioAccessorValidateState",
        "scope": "eel2",
        "body": "AudioAccessorValidateState(${1:AudioAccessor accessor})$0",
        "description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.\n\n"
    },
    "BYPASSFXALLTRACKS EEL2": {
        "prefix": "BypassFxAllTracks",
        "scope": "eel2",
        "body": "BypassFxAllTracks(${1:int bypass})$0",
        "description": "-1 = bypass all if not all bypassed,otherwise unbypass all\n\n"
    },
    "CLEARALLRECARMED EEL2": {
        "prefix": "ClearAllRecArmed",
        "scope": "eel2",
        "body": "ClearAllRecArmed()$0",
        "description": ""
    },
    "CLEARCONSOLE EEL2": {
        "prefix": "ClearConsole",
        "scope": "eel2",
        "body": "ClearConsole()$0",
        "description": "Clear the ReaScript console. See ShowConsoleMsg\n\n"
    },
    "CLEARPEAKCACHE EEL2": {
        "prefix": "ClearPeakCache",
        "scope": "eel2",
        "body": "ClearPeakCache()$0",
        "description": "resets the global peak caches\n\n"
    },
    "COLORFROMNATIVE EEL2": {
        "prefix": "ColorFromNative",
        "scope": "eel2",
        "body": "ColorFromNative(${1:int col}, ${2:r}, ${3:g}, ${4:b})$0",
        "description": "Extract RGB values from an OS dependent color. See ColorToNative.\n\n"
    },
    "COLORTONATIVE EEL2": {
        "prefix": "ColorToNative",
        "scope": "eel2",
        "body": "ColorToNative(${1:int r}, ${2: int g}, ${3: int b})$0",
        "description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.\n\n"
    },
    "COUNTAUTOMATIONITEMS EEL2": {
        "prefix": "CountAutomationItems",
        "scope": "eel2",
        "body": "CountAutomationItems(${1:TrackEnvelope env})$0",
        "description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo\n\n"
    },
    "COUNTENVELOPEPOINTS EEL2": {
        "prefix": "CountEnvelopePoints",
        "scope": "eel2",
        "body": "CountEnvelopePoints(${1:TrackEnvelope envelope})$0",
        "description": "Returns the number of points in the envelope.\n\n"
    },
    "COUNTENVELOPEPOINTSEX EEL2": {
        "prefix": "CountEnvelopePointsEx",
        "scope": "eel2",
        "body": "CountEnvelopePointsEx(${1:TrackEnvelope envelope}, ${2: int autoitem_idx})$0",
        "description": "Returns the number of points in the envelope. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\n\n"
    },
    "COUNTMEDIAITEMS EEL2": {
        "prefix": "CountMediaItems",
        "scope": "eel2",
        "body": "CountMediaItems(${1:ReaProject proj})$0",
        "description": "count the number of items in the project (proj=0 for active project)\n\n"
    },
    "COUNTPROJECTMARKERS EEL2": {
        "prefix": "CountProjectMarkers",
        "scope": "eel2",
        "body": "CountProjectMarkers(${1:ReaProject proj}, ${2:num_markers}, ${3:num_regions})$0",
        "description": "num_markersOut and num_regionsOut may be NULL.\n\n"
    },
    "COUNTSELECTEDMEDIAITEMS EEL2": {
        "prefix": "CountSelectedMediaItems",
        "scope": "eel2",
        "body": "CountSelectedMediaItems(${1:ReaProject proj})$0",
        "description": "count the number of selected items in the project (proj=0 for active project)\n\n"
    },
    "COUNTSELECTEDTRACKS EEL2": {
        "prefix": "CountSelectedTracks",
        "scope": "eel2",
        "body": "CountSelectedTracks(${1:ReaProject proj})$0",
        "description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.\n\n"
    },
    "COUNTSELECTEDTRACKS2 EEL2": {
        "prefix": "CountSelectedTracks2",
        "scope": "eel2",
        "body": "CountSelectedTracks2(${1:ReaProject proj}, ${2: bool wantmaster})$0",
        "description": "Count the number of selected tracks in the project (proj=0 for active project).\n\n"
    },
    "COUNTTAKEENVELOPES EEL2": {
        "prefix": "CountTakeEnvelopes",
        "scope": "eel2",
        "body": "CountTakeEnvelopes(${1:MediaItem_Take take})$0",
        "description": "See GetTakeEnvelope\n\n"
    },
    "COUNTTAKES EEL2": {
        "prefix": "CountTakes",
        "scope": "eel2",
        "body": "CountTakes(${1:MediaItem item})$0",
        "description": "count the number of takes in the item\n\n"
    },
    "COUNTTCPFXPARMS EEL2": {
        "prefix": "CountTCPFXParms",
        "scope": "eel2",
        "body": "CountTCPFXParms(${1:ReaProject project}, ${2: MediaTrack track})$0",
        "description": "Count the number of FX parameter knobs displayed on the track control panel.\n\n"
    },
    "COUNTTEMPOTIMESIGMARKERS EEL2": {
        "prefix": "CountTempoTimeSigMarkers",
        "scope": "eel2",
        "body": "CountTempoTimeSigMarkers(${1:ReaProject proj})$0",
        "description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "COUNTTRACKENVELOPES EEL2": {
        "prefix": "CountTrackEnvelopes",
        "scope": "eel2",
        "body": "CountTrackEnvelopes(${1:MediaTrack track})$0",
        "description": "see GetTrackEnvelope\n\n"
    },
    "COUNTTRACKMEDIAITEMS EEL2": {
        "prefix": "CountTrackMediaItems",
        "scope": "eel2",
        "body": "CountTrackMediaItems(${1:MediaTrack track})$0",
        "description": "count the number of items in the track\n\n"
    },
    "COUNTTRACKS EEL2": {
        "prefix": "CountTracks",
        "scope": "eel2",
        "body": "CountTracks(${1:ReaProject proj})$0",
        "description": "count the number of tracks in the project (proj=0 for active project)\n\n"
    },
    "CREATENEWMIDIITEMINPROJ EEL2": {
        "prefix": "CreateNewMIDIItemInProj",
        "scope": "eel2",
        "body": "CreateNewMIDIItemInProj(${1:MediaTrack track}, ${2: starttime}, ${3: endtime}, ${4: optional bool qnIn})$0",
        "description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.\n\n"
    },
    "CREATETAKEAUDIOACCESSOR EEL2": {
        "prefix": "CreateTakeAudioAccessor",
        "scope": "eel2",
        "body": "CreateTakeAudioAccessor(${1:MediaItem_Take take})$0",
        "description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "CREATETRACKAUDIOACCESSOR EEL2": {
        "prefix": "CreateTrackAudioAccessor",
        "scope": "eel2",
        "body": "CreateTrackAudioAccessor(${1:MediaTrack track})$0",
        "description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "CREATETRACKSEND EEL2": {
        "prefix": "CreateTrackSend",
        "scope": "eel2",
        "body": "CreateTrackSend(${1:MediaTrack tr}, ${2: MediaTrack desttrIn})$0",
        "description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.\n\n"
    },
    "CSURF_FLUSHUNDO EEL2": {
        "prefix": "CSurf_FlushUndo",
        "scope": "eel2",
        "body": "CSurf_FlushUndo(${1:bool force})$0",
        "description": "call this to force flushing of the undo states after using CSurf_On*Change()\n\n"
    },
    "CSURF_GETTOUCHSTATE EEL2": {
        "prefix": "CSurf_GetTouchState",
        "scope": "eel2",
        "body": "CSurf_GetTouchState(${1:MediaTrack trackid}, ${2: int isPan})$0",
        "description": ""
    },
    "CSURF_GOEND EEL2": {
        "prefix": "CSurf_GoEnd",
        "scope": "eel2",
        "body": "CSurf_GoEnd()$0",
        "description": ""
    },
    "CSURF_GOSTART EEL2": {
        "prefix": "CSurf_GoStart",
        "scope": "eel2",
        "body": "CSurf_GoStart()$0",
        "description": ""
    },
    "CSURF_NUMTRACKS EEL2": {
        "prefix": "CSurf_NumTracks",
        "scope": "eel2",
        "body": "CSurf_NumTracks(${1:bool mcpView})$0",
        "description": ""
    },
    "CSURF_ONARROW EEL2": {
        "prefix": "CSurf_OnArrow",
        "scope": "eel2",
        "body": "CSurf_OnArrow(${1:int whichdir}, ${2: bool wantzoom})$0",
        "description": ""
    },
    "CSURF_ONFWD EEL2": {
        "prefix": "CSurf_OnFwd",
        "scope": "eel2",
        "body": "CSurf_OnFwd(${1:int seekplay})$0",
        "description": ""
    },
    "CSURF_ONFXCHANGE EEL2": {
        "prefix": "CSurf_OnFXChange",
        "scope": "eel2",
        "body": "CSurf_OnFXChange(${1:MediaTrack trackid}, ${2: int en})$0",
        "description": ""
    },
    "CSURF_ONINPUTMONITORCHANGE EEL2": {
        "prefix": "CSurf_OnInputMonitorChange",
        "scope": "eel2",
        "body": "CSurf_OnInputMonitorChange(${1:MediaTrack trackid}, ${2: int monitor})$0",
        "description": ""
    },
    "CSURF_ONINPUTMONITORCHANGEEX EEL2": {
        "prefix": "CSurf_OnInputMonitorChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnInputMonitorChangeEx(${1:MediaTrack trackid}, ${2: int monitor}, ${3: bool allowgang})$0",
        "description": ""
    },
    "CSURF_ONMUTECHANGE EEL2": {
        "prefix": "CSurf_OnMuteChange",
        "scope": "eel2",
        "body": "CSurf_OnMuteChange(${1:MediaTrack trackid}, ${2: int mute})$0",
        "description": ""
    },
    "CSURF_ONMUTECHANGEEX EEL2": {
        "prefix": "CSurf_OnMuteChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnMuteChangeEx(${1:MediaTrack trackid}, ${2: int mute}, ${3: bool allowgang})$0",
        "description": ""
    },
    "CSURF_ONPANCHANGE EEL2": {
        "prefix": "CSurf_OnPanChange",
        "scope": "eel2",
        "body": "CSurf_OnPanChange(${1:MediaTrack trackid}, ${2: pan}, ${3: bool relative})$0",
        "description": ""
    },
    "CSURF_ONPANCHANGEEX EEL2": {
        "prefix": "CSurf_OnPanChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnPanChangeEx(${1:MediaTrack trackid}, ${2: pan}, ${3: bool relative}, ${4: bool allowGang})$0",
        "description": ""
    },
    "CSURF_ONPAUSE EEL2": {
        "prefix": "CSurf_OnPause",
        "scope": "eel2",
        "body": "CSurf_OnPause()$0",
        "description": ""
    },
    "CSURF_ONPLAY EEL2": {
        "prefix": "CSurf_OnPlay",
        "scope": "eel2",
        "body": "CSurf_OnPlay()$0",
        "description": ""
    },
    "CSURF_ONPLAYRATECHANGE EEL2": {
        "prefix": "CSurf_OnPlayRateChange",
        "scope": "eel2",
        "body": "CSurf_OnPlayRateChange(${1:playrate})$0",
        "description": ""
    },
    "CSURF_ONRECARMCHANGE EEL2": {
        "prefix": "CSurf_OnRecArmChange",
        "scope": "eel2",
        "body": "CSurf_OnRecArmChange(${1:MediaTrack trackid}, ${2: int recarm})$0",
        "description": ""
    },
    "CSURF_ONRECARMCHANGEEX EEL2": {
        "prefix": "CSurf_OnRecArmChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnRecArmChangeEx(${1:MediaTrack trackid}, ${2: int recarm}, ${3: bool allowgang})$0",
        "description": ""
    },
    "CSURF_ONRECORD EEL2": {
        "prefix": "CSurf_OnRecord",
        "scope": "eel2",
        "body": "CSurf_OnRecord()$0",
        "description": ""
    },
    "CSURF_ONRECVPANCHANGE EEL2": {
        "prefix": "CSurf_OnRecvPanChange",
        "scope": "eel2",
        "body": "CSurf_OnRecvPanChange(${1:MediaTrack trackid}, ${2: int recv_index}, ${3: pan}, ${4: bool relative})$0",
        "description": ""
    },
    "CSURF_ONRECVVOLUMECHANGE EEL2": {
        "prefix": "CSurf_OnRecvVolumeChange",
        "scope": "eel2",
        "body": "CSurf_OnRecvVolumeChange(${1:MediaTrack trackid}, ${2: int recv_index}, ${3: volume}, ${4: bool relative})$0",
        "description": ""
    },
    "CSURF_ONREW EEL2": {
        "prefix": "CSurf_OnRew",
        "scope": "eel2",
        "body": "CSurf_OnRew(${1:int seekplay})$0",
        "description": ""
    },
    "CSURF_ONREWFWD EEL2": {
        "prefix": "CSurf_OnRewFwd",
        "scope": "eel2",
        "body": "CSurf_OnRewFwd(${1:int seekplay}, ${2: int dir})$0",
        "description": ""
    },
    "CSURF_ONSCROLL EEL2": {
        "prefix": "CSurf_OnScroll",
        "scope": "eel2",
        "body": "CSurf_OnScroll(${1:int xdir}, ${2: int ydir})$0",
        "description": ""
    },
    "CSURF_ONSELECTEDCHANGE EEL2": {
        "prefix": "CSurf_OnSelectedChange",
        "scope": "eel2",
        "body": "CSurf_OnSelectedChange(${1:MediaTrack trackid}, ${2: int selected})$0",
        "description": ""
    },
    "CSURF_ONSENDPANCHANGE EEL2": {
        "prefix": "CSurf_OnSendPanChange",
        "scope": "eel2",
        "body": "CSurf_OnSendPanChange(${1:MediaTrack trackid}, ${2: int send_index}, ${3: pan}, ${4: bool relative})$0",
        "description": ""
    },
    "CSURF_ONSENDVOLUMECHANGE EEL2": {
        "prefix": "CSurf_OnSendVolumeChange",
        "scope": "eel2",
        "body": "CSurf_OnSendVolumeChange(${1:MediaTrack trackid}, ${2: int send_index}, ${3: volume}, ${4: bool relative})$0",
        "description": ""
    },
    "CSURF_ONSOLOCHANGE EEL2": {
        "prefix": "CSurf_OnSoloChange",
        "scope": "eel2",
        "body": "CSurf_OnSoloChange(${1:MediaTrack trackid}, ${2: int solo})$0",
        "description": ""
    },
    "CSURF_ONSOLOCHANGEEX EEL2": {
        "prefix": "CSurf_OnSoloChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnSoloChangeEx(${1:MediaTrack trackid}, ${2: int solo}, ${3: bool allowgang})$0",
        "description": ""
    },
    "CSURF_ONSTOP EEL2": {
        "prefix": "CSurf_OnStop",
        "scope": "eel2",
        "body": "CSurf_OnStop()$0",
        "description": ""
    },
    "CSURF_ONTEMPOCHANGE EEL2": {
        "prefix": "CSurf_OnTempoChange",
        "scope": "eel2",
        "body": "CSurf_OnTempoChange(${1:bpm})$0",
        "description": ""
    },
    "CSURF_ONTRACKSELECTION EEL2": {
        "prefix": "CSurf_OnTrackSelection",
        "scope": "eel2",
        "body": "CSurf_OnTrackSelection(${1:MediaTrack trackid})$0",
        "description": ""
    },
    "CSURF_ONVOLUMECHANGE EEL2": {
        "prefix": "CSurf_OnVolumeChange",
        "scope": "eel2",
        "body": "CSurf_OnVolumeChange(${1:MediaTrack trackid}, ${2: volume}, ${3: bool relative})$0",
        "description": ""
    },
    "CSURF_ONVOLUMECHANGEEX EEL2": {
        "prefix": "CSurf_OnVolumeChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnVolumeChangeEx(${1:MediaTrack trackid}, ${2: volume}, ${3: bool relative}, ${4: bool allowGang})$0",
        "description": ""
    },
    "CSURF_ONWIDTHCHANGE EEL2": {
        "prefix": "CSurf_OnWidthChange",
        "scope": "eel2",
        "body": "CSurf_OnWidthChange(${1:MediaTrack trackid}, ${2: width}, ${3: bool relative})$0",
        "description": ""
    },
    "CSURF_ONWIDTHCHANGEEX EEL2": {
        "prefix": "CSurf_OnWidthChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnWidthChangeEx(${1:MediaTrack trackid}, ${2: width}, ${3: bool relative}, ${4: bool allowGang})$0",
        "description": ""
    },
    "CSURF_ONZOOM EEL2": {
        "prefix": "CSurf_OnZoom",
        "scope": "eel2",
        "body": "CSurf_OnZoom(${1:int xdir}, ${2: int ydir})$0",
        "description": ""
    },
    "CSURF_RESETALLCACHEDVOLPANSTATES EEL2": {
        "prefix": "CSurf_ResetAllCachedVolPanStates",
        "scope": "eel2",
        "body": "CSurf_ResetAllCachedVolPanStates()$0",
        "description": ""
    },
    "CSURF_SCRUBAMT EEL2": {
        "prefix": "CSurf_ScrubAmt",
        "scope": "eel2",
        "body": "CSurf_ScrubAmt(${1:amt})$0",
        "description": ""
    },
    "CSURF_SETAUTOMODE EEL2": {
        "prefix": "CSurf_SetAutoMode",
        "scope": "eel2",
        "body": "CSurf_SetAutoMode(${1:int mode}, ${2: IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETPLAYSTATE EEL2": {
        "prefix": "CSurf_SetPlayState",
        "scope": "eel2",
        "body": "CSurf_SetPlayState(${1:bool play}, ${2: bool pause}, ${3: bool rec}, ${4: IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETREPEATSTATE EEL2": {
        "prefix": "CSurf_SetRepeatState",
        "scope": "eel2",
        "body": "CSurf_SetRepeatState(${1:bool rep}, ${2: IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACEMUTE EEL2": {
        "prefix": "CSurf_SetSurfaceMute",
        "scope": "eel2",
        "body": "CSurf_SetSurfaceMute(${1:MediaTrack trackid}, ${2: bool mute}, ${3: IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACEPAN EEL2": {
        "prefix": "CSurf_SetSurfacePan",
        "scope": "eel2",
        "body": "CSurf_SetSurfacePan(${1:MediaTrack trackid}, ${2: pan}, ${3: IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACERECARM EEL2": {
        "prefix": "CSurf_SetSurfaceRecArm",
        "scope": "eel2",
        "body": "CSurf_SetSurfaceRecArm(${1:MediaTrack trackid}, ${2: bool recarm}, ${3: IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACESELECTED EEL2": {
        "prefix": "CSurf_SetSurfaceSelected",
        "scope": "eel2",
        "body": "CSurf_SetSurfaceSelected(${1:MediaTrack trackid}, ${2: bool selected}, ${3: IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACESOLO EEL2": {
        "prefix": "CSurf_SetSurfaceSolo",
        "scope": "eel2",
        "body": "CSurf_SetSurfaceSolo(${1:MediaTrack trackid}, ${2: bool solo}, ${3: IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACEVOLUME EEL2": {
        "prefix": "CSurf_SetSurfaceVolume",
        "scope": "eel2",
        "body": "CSurf_SetSurfaceVolume(${1:MediaTrack trackid}, ${2: volume}, ${3: IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETTRACKLISTCHANGE EEL2": {
        "prefix": "CSurf_SetTrackListChange",
        "scope": "eel2",
        "body": "CSurf_SetTrackListChange()$0",
        "description": ""
    },
    "CSURF_TRACKFROMID EEL2": {
        "prefix": "CSurf_TrackFromID",
        "scope": "eel2",
        "body": "CSurf_TrackFromID(${1:int idx}, ${2: bool mcpView})$0",
        "description": ""
    },
    "CSURF_TRACKTOID EEL2": {
        "prefix": "CSurf_TrackToID",
        "scope": "eel2",
        "body": "CSurf_TrackToID(${1:MediaTrack track}, ${2: bool mcpView})$0",
        "description": ""
    },
    "DB2SLIDER EEL2": {
        "prefix": "DB2SLIDER",
        "scope": "eel2",
        "body": "DB2SLIDER(${1:x})$0",
        "description": ""
    },
    "DELETEENVELOPEPOINTRANGE EEL2": {
        "prefix": "DeleteEnvelopePointRange",
        "scope": "eel2",
        "body": "DeleteEnvelopePointRange(${1:TrackEnvelope envelope}, ${2: time_start}, ${3: time_end})$0",
        "description": "Delete a range of envelope points.\n\n"
    },
    "DELETEENVELOPEPOINTRANGEEX EEL2": {
        "prefix": "DeleteEnvelopePointRangeEx",
        "scope": "eel2",
        "body": "DeleteEnvelopePointRangeEx(${1:TrackEnvelope envelope}, ${2: int autoitem_idx}, ${3: time_start}, ${4: time_end})$0",
        "description": "Delete a range of envelope points. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\n\n"
    },
    "DELETEEXTSTATE EEL2": {
        "prefix": "DeleteExtState",
        "scope": "eel2",
        "body": "DeleteExtState(${1:\"section\"}, ${2: key}, ${3: bool persist})$0",
        "description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState.\n\n"
    },
    "DELETEPROJECTMARKER EEL2": {
        "prefix": "DeleteProjectMarker",
        "scope": "eel2",
        "body": "DeleteProjectMarker(${1:ReaProject proj}, ${2: int markrgnindexnumber}, ${3: bool isrgn})$0",
        "description": "Delete a marker. proj==NULL for the active project.\n\n"
    },
    "DELETEPROJECTMARKERBYINDEX EEL2": {
        "prefix": "DeleteProjectMarkerByIndex",
        "scope": "eel2",
        "body": "DeleteProjectMarkerByIndex(${1:ReaProject proj}, ${2: int markrgnidx})$0",
        "description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).\n\n"
    },
    "DELETETAKESTRETCHMARKERS EEL2": {
        "prefix": "DeleteTakeStretchMarkers",
        "scope": "eel2",
        "body": "DeleteTakeStretchMarkers(${1:MediaItem_Take take}, ${2: int idx}, ${3: optional int countIn})$0",
        "description": "Deletes one or more stretch markers. Returns number of stretch markers deleted.\n\n"
    },
    "DELETETEMPOTIMESIGMARKER EEL2": {
        "prefix": "DeleteTempoTimeSigMarker",
        "scope": "eel2",
        "body": "DeleteTempoTimeSigMarker(${1:ReaProject project}, ${2: int markerindex})$0",
        "description": "Delete a tempo/time signature marker.\n\n"
    },
    "DELETETRACK EEL2": {
        "prefix": "DeleteTrack",
        "scope": "eel2",
        "body": "DeleteTrack(${1:MediaTrack tr})$0",
        "description": "deletes a track\n\n"
    },
    "DELETETRACKMEDIAITEM EEL2": {
        "prefix": "DeleteTrackMediaItem",
        "scope": "eel2",
        "body": "DeleteTrackMediaItem(${1:MediaTrack tr}, ${2: MediaItem it})$0",
        "description": ""
    },
    "DESTROYAUDIOACCESSOR EEL2": {
        "prefix": "DestroyAudioAccessor",
        "scope": "eel2",
        "body": "DestroyAudioAccessor(${1:AudioAccessor accessor})$0",
        "description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples. \n\n"
    },
    "DOCK_UPDATEDOCKID EEL2": {
        "prefix": "Dock_UpdateDockID",
        "scope": "eel2",
        "body": "Dock_UpdateDockID(${1:\"ident_str\"}, ${2: int whichDock})$0",
        "description": "updates preference for docker window ident_str to be in dock whichDock on next open\n\n"
    },
    "DOCKISCHILDOFDOCK EEL2": {
        "prefix": "DockIsChildOfDock",
        "scope": "eel2",
        "body": "DockIsChildOfDock(${1:HWND hwnd}, ${2:isFloatingDocker})$0",
        "description": "returns dock index that contains hwnd, or -1\n\n"
    },
    "DOCKWINDOWACTIVATE EEL2": {
        "prefix": "DockWindowActivate",
        "scope": "eel2",
        "body": "DockWindowActivate(${1:HWND hwnd})$0",
        "description": ""
    },
    "DOCKWINDOWADD EEL2": {
        "prefix": "DockWindowAdd",
        "scope": "eel2",
        "body": "DockWindowAdd(${1:HWND hwnd}, ${2: name}, ${3: int pos}, ${4: bool allowShow})$0",
        "description": ""
    },
    "DOCKWINDOWADDEX EEL2": {
        "prefix": "DockWindowAddEx",
        "scope": "eel2",
        "body": "DockWindowAddEx(${1:HWND hwnd}, ${2: name}, ${3: identstr}, ${4: bool allowShow})$0",
        "description": ""
    },
    "DOCKWINDOWREFRESH EEL2": {
        "prefix": "DockWindowRefresh",
        "scope": "eel2",
        "body": "DockWindowRefresh()$0",
        "description": ""
    },
    "DOCKWINDOWREFRESHFORHWND EEL2": {
        "prefix": "DockWindowRefreshForHWND",
        "scope": "eel2",
        "body": "DockWindowRefreshForHWND(${1:HWND hwnd})$0",
        "description": ""
    },
    "DOCKWINDOWREMOVE EEL2": {
        "prefix": "DockWindowRemove",
        "scope": "eel2",
        "body": "DockWindowRemove(${1:HWND hwnd})$0",
        "description": ""
    },
    "EDITTEMPOTIMESIGMARKER EEL2": {
        "prefix": "EditTempoTimeSigMarker",
        "scope": "eel2",
        "body": "EditTempoTimeSigMarker(${1:ReaProject project}, ${2: int markerindex})$0",
        "description": "Open the tempo/time signature marker editor dialog.\n\n"
    },
    "ENSURENOTCOMPLETELYOFFSCREEN EEL2": {
        "prefix": "EnsureNotCompletelyOffscreen",
        "scope": "eel2",
        "body": "EnsureNotCompletelyOffscreen(${1:rIn.left}, ${2:rIn.top}, ${3:rIn.right}, ${4:rIn.bot})$0",
        "description": "call with a saved window rect for your window and it'll correct any positioning info.\n\n"
    },
    "ENUMERATEFILES EEL2": {
        "prefix": "EnumerateFiles",
        "scope": "eel2",
        "body": "EnumerateFiles(${1:retval}, ${2: path}, ${3: int fileindex})$0",
        "description": "List the files in the \"path\" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See EnumerateSubdirectories\n\n"
    },
    "ENUMERATESUBDIRECTORIES EEL2": {
        "prefix": "EnumerateSubdirectories",
        "scope": "eel2",
        "body": "EnumerateSubdirectories(${1:retval}, ${2: path}, ${3: int subdirindex})$0",
        "description": "List the subdirectories in the \"path\" directory. Returns NULL (or empty string, in Lua) when all subdirectories have been listed. See EnumerateFiles\n\n"
    },
    "ENUMPITCHSHIFTMODES EEL2": {
        "prefix": "EnumPitchShiftModes",
        "scope": "eel2",
        "body": "EnumPitchShiftModes(${1:int mode}, ${2:str})$0",
        "description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported\n\n"
    },
    "ENUMPITCHSHIFTSUBMODES EEL2": {
        "prefix": "EnumPitchShiftSubModes",
        "scope": "eel2",
        "body": "EnumPitchShiftSubModes(${1:retval}, ${2: int mode}, ${3: int submode})$0",
        "description": "Returns submode name, or NULL\n\n"
    },
    "ENUMPROJECTMARKERS EEL2": {
        "prefix": "EnumProjectMarkers",
        "scope": "eel2",
        "body": "EnumProjectMarkers(${1:int idx}, ${2:isrgn}, ${3:pos}, ${4:rgnend}, ${5:name}, ${6:markrgnindexnumber})$0",
        "description": ""
    },
    "ENUMPROJECTMARKERS2 EEL2": {
        "prefix": "EnumProjectMarkers2",
        "scope": "eel2",
        "body": "EnumProjectMarkers2(${1:ReaProject proj}, ${2: int idx}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name}, ${7:markrgnindexnumber})$0",
        "description": ""
    },
    "ENUMPROJECTMARKERS3 EEL2": {
        "prefix": "EnumProjectMarkers3",
        "scope": "eel2",
        "body": "EnumProjectMarkers3(${1:ReaProject proj}, ${2: int idx}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name}, ${7:markrgnindexnumber}, ${8:color})$0",
        "description": ""
    },
    "ENUMPROJECTS EEL2": {
        "prefix": "EnumProjects",
        "scope": "eel2",
        "body": "EnumProjects(${1:int idx}, ${2:projfn})$0",
        "description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.\n\n"
    },
    "ENUMPROJEXTSTATE EEL2": {
        "prefix": "EnumProjExtState",
        "scope": "eel2",
        "body": "EnumProjExtState(${1:ReaProject proj}, ${2: extname}, ${3: int idx}, ${4:key}, ${5:val})$0",
        "description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.\n\n"
    },
    "ENUMREGIONRENDERMATRIX EEL2": {
        "prefix": "EnumRegionRenderMatrix",
        "scope": "eel2",
        "body": "EnumRegionRenderMatrix(${1:ReaProject proj}, ${2: int regionindex}, ${3: int rendertrack})$0",
        "description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.\n\n"
    },
    "ENUMTRACKMIDIPROGRAMNAMES EEL2": {
        "prefix": "EnumTrackMIDIProgramNames",
        "scope": "eel2",
        "body": "EnumTrackMIDIProgramNames(${1:int track}, ${2: int programNumber}, ${3:programName})$0",
        "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
    },
    "ENUMTRACKMIDIPROGRAMNAMESEX EEL2": {
        "prefix": "EnumTrackMIDIProgramNamesEx",
        "scope": "eel2",
        "body": "EnumTrackMIDIProgramNamesEx(${1:ReaProject proj}, ${2: MediaTrack track}, ${3: int programNumber}, ${4:programName})$0",
        "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
    },
    "ENVELOPE_EVALUATE EEL2": {
        "prefix": "Envelope_Evaluate",
        "scope": "eel2",
        "body": "Envelope_Evaluate(${1:TrackEnvelope envelope}, ${2: time}, ${3: samplerate}, ${4: int samplesRequested}, ${5:value}, ${6:dVdS}, ${7:ddVdS}, ${8:dddVdS})$0",
        "description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the seond derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.\n\n"
    },
    "ENVELOPE_FORMATVALUE EEL2": {
        "prefix": "Envelope_FormatValue",
        "scope": "eel2",
        "body": "Envelope_FormatValue(${1:TrackEnvelope env}, ${2: value}, ${3:buf})$0",
        "description": "Formats the value of an envelope to a user-readable form\n\n"
    },
    "ENVELOPE_GETPARENTTAKE EEL2": {
        "prefix": "Envelope_GetParentTake",
        "scope": "eel2",
        "body": "Envelope_GetParentTake(${1:TrackEnvelope env}, ${2:index}, ${3:index2})$0",
        "description": "If take envelope, gets the take from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.\n\n"
    },
    "ENVELOPE_GETPARENTTRACK EEL2": {
        "prefix": "Envelope_GetParentTrack",
        "scope": "eel2",
        "body": "Envelope_GetParentTrack(${1:TrackEnvelope env}, ${2:index}, ${3:index2})$0",
        "description": "If track envelope, gets the track from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.\n\n"
    },
    "ENVELOPE_SORTPOINTS EEL2": {
        "prefix": "Envelope_SortPoints",
        "scope": "eel2",
        "body": "Envelope_SortPoints(${1:TrackEnvelope envelope})$0",
        "description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
    },
    "ENVELOPE_SORTPOINTSEX EEL2": {
        "prefix": "Envelope_SortPointsEx",
        "scope": "eel2",
        "body": "Envelope_SortPointsEx(${1:TrackEnvelope envelope}, ${2: int autoitem_idx})$0",
        "description": "Sort envelope points by time. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
    },
    "EXECPROCESS EEL2": {
        "prefix": "ExecProcess",
        "scope": "eel2",
        "body": "ExecProcess(${1:retval}, ${2: cmdline}, ${3: int timeoutmsec})$0",
        "description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize\n\n"
    },
    "FILE_EXISTS EEL2": {
        "prefix": "file_exists",
        "scope": "eel2",
        "body": "file_exists(${1:\"path\"})$0",
        "description": "returns true if path points to a valid, readable file\n\n"
    },
    "FINDTEMPOTIMESIGMARKER EEL2": {
        "prefix": "FindTempoTimeSigMarker",
        "scope": "eel2",
        "body": "FindTempoTimeSigMarker(${1:ReaProject project}, ${2: time})$0",
        "description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).\n\n"
    },
    "FORMAT_TIMESTR EEL2": {
        "prefix": "format_timestr",
        "scope": "eel2",
        "body": "format_timestr(${1:tpos}, ${2:buf})$0",
        "description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.\n\n"
    },
    "FORMAT_TIMESTR_LEN EEL2": {
        "prefix": "format_timestr_len",
        "scope": "eel2",
        "body": "format_timestr_len(${1:tpos}, ${2:buf}, ${3: offset}, ${4: int modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\noffset is start of where the length will be calculated from\n\n"
    },
    "FORMAT_TIMESTR_POS EEL2": {
        "prefix": "format_timestr_pos",
        "scope": "eel2",
        "body": "format_timestr_pos(${1:tpos}, ${2:buf}, ${3: int modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "GENGUID EEL2": {
        "prefix": "genGuid",
        "scope": "eel2",
        "body": "genGuid(${1:gGUID})$0",
        "description": ""
    },
    "GET_INI_FILE EEL2": {
        "prefix": "get_ini_file",
        "scope": "eel2",
        "body": "get_ini_file(${1:retval})$0",
        "description": "Get reaper.ini full filename.\n\n"
    },
    "GETACTIVETAKE EEL2": {
        "prefix": "GetActiveTake",
        "scope": "eel2",
        "body": "GetActiveTake(${1:MediaItem item})$0",
        "description": "get the active take in this item\n\n"
    },
    "GETALLPROJECTPLAYSTATES EEL2": {
        "prefix": "GetAllProjectPlayStates",
        "scope": "eel2",
        "body": "GetAllProjectPlayStates(${1:ReaProject ignoreProject})$0",
        "description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)\n\n"
    },
    "GETAPPVERSION EEL2": {
        "prefix": "GetAppVersion",
        "scope": "eel2",
        "body": "GetAppVersion(${1:retval})$0",
        "description": ""
    },
    "GETAUDIOACCESSORENDTIME EEL2": {
        "prefix": "GetAudioAccessorEndTime",
        "scope": "eel2",
        "body": "GetAudioAccessorEndTime(${1:AudioAccessor accessor})$0",
        "description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorSamples.\n\n"
    },
    "GETAUDIOACCESSORHASH EEL2": {
        "prefix": "GetAudioAccessorHash",
        "scope": "eel2",
        "body": "GetAudioAccessorHash(${1:AudioAccessor accessor}, ${2:hashNeed128})$0",
        "description": "Get a short hash string (128 chars or less) that will change only if the underlying samples change. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "GETAUDIOACCESSORSAMPLES EEL2": {
        "prefix": "GetAudioAccessorSamples",
        "scope": "eel2",
        "body": "GetAudioAccessorSamples(${1:AudioAccessor accessor}, ${2: int samplerate}, ${3: int numchannels}, ${4: starttime_sec}, ${5: int numsamplesperchannel}, ${6: buffer_ptr samplebuffer})$0",
        "description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\n\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\n\ntr = RPR_GetTrack(0, 0)\n\naa = RPR_CreateTrackAudioAccessor(tr)\n\nbuf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\n\npos = 0.0\n\n(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n\n# buf now holds the first 2*1024 audio samples from the track.\n\n# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.\n\n"
    },
    "GETAUDIOACCESSORSTARTTIME EEL2": {
        "prefix": "GetAudioAccessorStartTime",
        "scope": "eel2",
        "body": "GetAudioAccessorStartTime(${1:AudioAccessor accessor})$0",
        "description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "GETCONFIGWANTSDOCK EEL2": {
        "prefix": "GetConfigWantsDock",
        "scope": "eel2",
        "body": "GetConfigWantsDock(${1:\"ident_str\"})$0",
        "description": "gets the dock ID desired by ident_str, if any\n\n"
    },
    "GETCURRENTPROJECTINLOADSAVE EEL2": {
        "prefix": "GetCurrentProjectInLoadSave",
        "scope": "eel2",
        "body": "GetCurrentProjectInLoadSave()$0",
        "description": "returns current project if in load/save (usually only used from project_config_extension_t)\n\n"
    },
    "GETCURSORCONTEXT EEL2": {
        "prefix": "GetCursorContext",
        "scope": "eel2",
        "body": "GetCursorContext()$0",
        "description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown\n\n"
    },
    "GETCURSORCONTEXT2 EEL2": {
        "prefix": "GetCursorContext2",
        "scope": "eel2",
        "body": "GetCursorContext2(${1:bool want_last_valid})$0",
        "description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)\n\n"
    },
    "GETCURSORPOSITION EEL2": {
        "prefix": "GetCursorPosition",
        "scope": "eel2",
        "body": "GetCursorPosition()$0",
        "description": "edit cursor position\n\n"
    },
    "GETCURSORPOSITIONEX EEL2": {
        "prefix": "GetCursorPositionEx",
        "scope": "eel2",
        "body": "GetCursorPositionEx(${1:ReaProject proj})$0",
        "description": "edit cursor position\n\n"
    },
    "GETDISPLAYEDMEDIAITEMCOLOR EEL2": {
        "prefix": "GetDisplayedMediaItemColor",
        "scope": "eel2",
        "body": "GetDisplayedMediaItemColor(${1:MediaItem item})$0",
        "description": "see GetDisplayedMediaItemColor2.\n\n"
    },
    "GETDISPLAYEDMEDIAITEMCOLOR2 EEL2": {
        "prefix": "GetDisplayedMediaItemColor2",
        "scope": "eel2",
        "body": "GetDisplayedMediaItemColor2(${1:MediaItem item}, ${2: MediaItem_Take take})$0",
        "description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not black.\n\n"
    },
    "GETENVELOPENAME EEL2": {
        "prefix": "GetEnvelopeName",
        "scope": "eel2",
        "body": "GetEnvelopeName(${1:TrackEnvelope env}, ${2:buf})$0",
        "description": ""
    },
    "GETENVELOPEPOINT EEL2": {
        "prefix": "GetEnvelopePoint",
        "scope": "eel2",
        "body": "GetEnvelopePoint(${1:TrackEnvelope envelope}, ${2: int ptidx}, ${3:time}, ${4:value}, ${5:shape}, ${6:tension}, ${7:selected})$0",
        "description": "Get the attributes of an envelope point. See GetEnvelopePointByTime, SetEnvelopePoint.\n\n"
    },
    "GETENVELOPEPOINTBYTIME EEL2": {
        "prefix": "GetEnvelopePointByTime",
        "scope": "eel2",
        "body": "GetEnvelopePointByTime(${1:TrackEnvelope envelope}, ${2: time})$0",
        "description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate.\n\n"
    },
    "GETENVELOPEPOINTBYTIMEEX EEL2": {
        "prefix": "GetEnvelopePointByTimeEx",
        "scope": "eel2",
        "body": "GetEnvelopePointByTimeEx(${1:TrackEnvelope envelope}, ${2: int autoitem_idx}, ${3: time})$0",
        "description": "Returns the envelope point at or immediately prior to the given time position. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate.\n\n"
    },
    "GETENVELOPEPOINTEX EEL2": {
        "prefix": "GetEnvelopePointEx",
        "scope": "eel2",
        "body": "GetEnvelopePointEx(${1:TrackEnvelope envelope}, ${2: int autoitem_idx}, ${3: int ptidx}, ${4:time}, ${5:value}, ${6:shape}, ${7:tension}, ${8:selected})$0",
        "description": "Get the attributes of an envelope point. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePointByTime, SetEnvelopePoint.\n\n"
    },
    "GETENVELOPESCALINGMODE EEL2": {
        "prefix": "GetEnvelopeScalingMode",
        "scope": "eel2",
        "body": "GetEnvelopeScalingMode(${1:TrackEnvelope env})$0",
        "description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.\n\n"
    },
    "GETENVELOPESTATECHUNK EEL2": {
        "prefix": "GetEnvelopeStateChunk",
        "scope": "eel2",
        "body": "GetEnvelopeStateChunk(${1:TrackEnvelope env}, ${2:str}, ${3: bool isundo})$0",
        "description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "GETEXEPATH EEL2": {
        "prefix": "GetExePath",
        "scope": "eel2",
        "body": "GetExePath(${1:retval})$0",
        "description": "returns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER\n\n"
    },
    "GETEXTSTATE EEL2": {
        "prefix": "GetExtState",
        "scope": "eel2",
        "body": "GetExtState(${1:retval}, ${2: section}, ${3: key})$0",
        "description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.\n\n"
    },
    "GETFOCUSEDFX EEL2": {
        "prefix": "GetFocusedFX",
        "scope": "eel2",
        "body": "GetFocusedFX(${1:tracknumber}, ${2:itemnumber}, ${3:fxnumber})$0",
        "description": "Returns 1 if a track FX window has focus, 2 if an item FX window has focus, 0 if no FX window has focus. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber and fxnumber are zero-based. If item FX, fxnumber will have the high word be the take index, the low word the FX index. See GetLastTouchedFX.\n\n"
    },
    "GETFREEDISKSPACEFORRECORDPATH EEL2": {
        "prefix": "GetFreeDiskSpaceForRecordPath",
        "scope": "eel2",
        "body": "GetFreeDiskSpaceForRecordPath(${1:ReaProject proj}, ${2: int pathidx})$0",
        "description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.\n\n"
    },
    "GETFXENVELOPE EEL2": {
        "prefix": "GetFXEnvelope",
        "scope": "eel2",
        "body": "GetFXEnvelope(${1:MediaTrack track}, ${2: int fxindex}, ${3: int parameterindex}, ${4: bool create})$0",
        "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
    },
    "GETGLOBALAUTOMATIONOVERRIDE EEL2": {
        "prefix": "GetGlobalAutomationOverride",
        "scope": "eel2",
        "body": "GetGlobalAutomationOverride()$0",
        "description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass\n\n"
    },
    "GETHZOOMLEVEL EEL2": {
        "prefix": "GetHZoomLevel",
        "scope": "eel2",
        "body": "GetHZoomLevel()$0",
        "description": "returns pixels/second\n\n"
    },
    "GETINPUTCHANNELNAME EEL2": {
        "prefix": "GetInputChannelName",
        "scope": "eel2",
        "body": "GetInputChannelName(${1:retval}, ${2: int channelIndex})$0",
        "description": ""
    },
    "GETINPUTOUTPUTLATENCY EEL2": {
        "prefix": "GetInputOutputLatency",
        "scope": "eel2",
        "body": "GetInputOutputLatency(${1:inputlatency}, ${2:outputLatency})$0",
        "description": "Gets the audio device input/output latency in samples\n\n"
    },
    "GETITEMEDITINGTIME2 EEL2": {
        "prefix": "GetItemEditingTime2",
        "scope": "eel2",
        "body": "GetItemEditingTime2(${1:which_item}, ${2:flags})$0",
        "description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move\n\n"
    },
    "GETITEMPROJECTCONTEXT EEL2": {
        "prefix": "GetItemProjectContext",
        "scope": "eel2",
        "body": "GetItemProjectContext(${1:MediaItem item})$0",
        "description": ""
    },
    "GETITEMSTATECHUNK EEL2": {
        "prefix": "GetItemStateChunk",
        "scope": "eel2",
        "body": "GetItemStateChunk(${1:MediaItem item}, ${2:str}, ${3: bool isundo})$0",
        "description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "GETLASTCOLORTHEMEFILE EEL2": {
        "prefix": "GetLastColorThemeFile",
        "scope": "eel2",
        "body": "GetLastColorThemeFile(${1:retval})$0",
        "description": ""
    },
    "GETLASTMARKERANDCURREGION EEL2": {
        "prefix": "GetLastMarkerAndCurRegion",
        "scope": "eel2",
        "body": "GetLastMarkerAndCurRegion(${1:ReaProject proj}, ${2: time}, ${3:markeridx}, ${4:regionidx})$0",
        "description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers.\n\n"
    },
    "GETLASTTOUCHEDFX EEL2": {
        "prefix": "GetLastTouchedFX",
        "scope": "eel2",
        "body": "GetLastTouchedFX(${1:tracknumber}, ${2:fxnumber}, ${3:paramnumber})$0",
        "description": "Returns true if the last touched FX parameter is valid, false otherwise. tracknumber==0 means the master track, 1 means track 1, etc. fxnumber and paramnumber are zero-based. See GetFocusedFX.\n\n"
    },
    "GETLASTTOUCHEDTRACK EEL2": {
        "prefix": "GetLastTouchedTrack",
        "scope": "eel2",
        "body": "GetLastTouchedTrack()$0",
        "description": ""
    },
    "GETMAINHWND EEL2": {
        "prefix": "GetMainHwnd",
        "scope": "eel2",
        "body": "GetMainHwnd()$0",
        "description": ""
    },
    "GETMASTERMUTESOLOFLAGS EEL2": {
        "prefix": "GetMasterMuteSoloFlags",
        "scope": "eel2",
        "body": "GetMasterMuteSoloFlags()$0",
        "description": "&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.\n\n"
    },
    "GETMASTERTRACK EEL2": {
        "prefix": "GetMasterTrack",
        "scope": "eel2",
        "body": "GetMasterTrack(${1:ReaProject proj})$0",
        "description": ""
    },
    "GETMASTERTRACKVISIBILITY EEL2": {
        "prefix": "GetMasterTrackVisibility",
        "scope": "eel2",
        "body": "GetMasterTrackVisibility()$0",
        "description": "returns &1 if the master track is visible in the TCP, &2 if visible in the mixer. See SetMasterTrackVisibility.\n\n"
    },
    "GETMAXMIDIINPUTS EEL2": {
        "prefix": "GetMaxMidiInputs",
        "scope": "eel2",
        "body": "GetMaxMidiInputs()$0",
        "description": "returns max dev for midi inputs/outputs\n\n"
    },
    "GETMAXMIDIOUTPUTS EEL2": {
        "prefix": "GetMaxMidiOutputs",
        "scope": "eel2",
        "body": "GetMaxMidiOutputs()$0",
        "description": ""
    },
    "GETMEDIAITEM EEL2": {
        "prefix": "GetMediaItem",
        "scope": "eel2",
        "body": "GetMediaItem(${1:ReaProject proj}, ${2: int itemidx})$0",
        "description": "get an item from a project by item count (zero-based) (proj=0 for active project)\n\n"
    },
    "GETMEDIAITEM_TRACK EEL2": {
        "prefix": "GetMediaItem_Track",
        "scope": "eel2",
        "body": "GetMediaItem_Track(${1:MediaItem item})$0",
        "description": "Get parent track of media item\n\n"
    },
    "GETMEDIAITEMINFO_VALUE EEL2": {
        "prefix": "GetMediaItemInfo_Value",
        "scope": "eel2",
        "body": "GetMediaItemInfo_Value(${1:MediaItem item}, ${2: parmname})$0",
        "description": "Get media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (&1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)\n\n"
    },
    "GETMEDIAITEMNUMTAKES EEL2": {
        "prefix": "GetMediaItemNumTakes",
        "scope": "eel2",
        "body": "GetMediaItemNumTakes(${1:MediaItem item})$0",
        "description": ""
    },
    "GETMEDIAITEMTAKE EEL2": {
        "prefix": "GetMediaItemTake",
        "scope": "eel2",
        "body": "GetMediaItemTake(${1:MediaItem item}, ${2: int tk})$0",
        "description": ""
    },
    "GETMEDIAITEMTAKE_ITEM EEL2": {
        "prefix": "GetMediaItemTake_Item",
        "scope": "eel2",
        "body": "GetMediaItemTake_Item(${1:MediaItem_Take take})$0",
        "description": "Get parent item of media item take\n\n"
    },
    "GETMEDIAITEMTAKE_PEAKS EEL2": {
        "prefix": "GetMediaItemTake_Peaks",
        "scope": "eel2",
        "body": "GetMediaItemTake_Peaks(${1:MediaItem_Take take}, ${2: peakrate}, ${3: starttime}, ${4: int numchannels}, ${5: int numsamplesperchannel}, ${6: int want_extra_type}, ${7: buffer_ptr buf})$0",
        "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
    },
    "GETMEDIAITEMTAKE_SOURCE EEL2": {
        "prefix": "GetMediaItemTake_Source",
        "scope": "eel2",
        "body": "GetMediaItemTake_Source(${1:MediaItem_Take take})$0",
        "description": "Get media source of media item take\n\n"
    },
    "GETMEDIAITEMTAKE_TRACK EEL2": {
        "prefix": "GetMediaItemTake_Track",
        "scope": "eel2",
        "body": "GetMediaItemTake_Track(${1:MediaItem_Take take})$0",
        "description": "Get parent track of media item take\n\n"
    },
    "GETMEDIAITEMTAKEBYGUID EEL2": {
        "prefix": "GetMediaItemTakeByGUID",
        "scope": "eel2",
        "body": "GetMediaItemTakeByGUID(${1:ReaProject project}, ${2: guidGUID})$0",
        "description": ""
    },
    "GETMEDIAITEMTAKEINFO_VALUE EEL2": {
        "prefix": "GetMediaItemTakeInfo_Value",
        "scope": "eel2",
        "body": "GetMediaItemTakeInfo_Value(${1:MediaItem_Take take}, ${2: parmname})$0",
        "description": "Get media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)\n\n"
    },
    "GETMEDIAITEMTRACK EEL2": {
        "prefix": "GetMediaItemTrack",
        "scope": "eel2",
        "body": "GetMediaItemTrack(${1:MediaItem item})$0",
        "description": ""
    },
    "GETMEDIASOURCEFILENAME EEL2": {
        "prefix": "GetMediaSourceFileName",
        "scope": "eel2",
        "body": "GetMediaSourceFileName(${1:PCM_source source}, ${2:filenamebuf})$0",
        "description": "Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.\n\n"
    },
    "GETMEDIASOURCELENGTH EEL2": {
        "prefix": "GetMediaSourceLength",
        "scope": "eel2",
        "body": "GetMediaSourceLength(${1:PCM_source source}, ${2:lengthIsQN})$0",
        "description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.\n\n"
    },
    "GETMEDIASOURCENUMCHANNELS EEL2": {
        "prefix": "GetMediaSourceNumChannels",
        "scope": "eel2",
        "body": "GetMediaSourceNumChannels(${1:PCM_source source})$0",
        "description": "Returns the number of channels in the source media.\n\n"
    },
    "GETMEDIASOURCEPARENT EEL2": {
        "prefix": "GetMediaSourceParent",
        "scope": "eel2",
        "body": "GetMediaSourceParent(${1:PCM_source src})$0",
        "description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.\n\n"
    },
    "GETMEDIASOURCESAMPLERATE EEL2": {
        "prefix": "GetMediaSourceSampleRate",
        "scope": "eel2",
        "body": "GetMediaSourceSampleRate(${1:PCM_source source})$0",
        "description": "Returns the sample rate. MIDI source media will return zero.\n\n"
    },
    "GETMEDIASOURCETYPE EEL2": {
        "prefix": "GetMediaSourceType",
        "scope": "eel2",
        "body": "GetMediaSourceType(${1:PCM_source source}, ${2:typebuf})$0",
        "description": "copies the media source type (\"WAV\", \"MIDI\", etc) to typebuf\n\n"
    },
    "GETMEDIATRACKINFO_VALUE EEL2": {
        "prefix": "GetMediaTrackInfo_Value",
        "scope": "eel2",
        "body": "GetMediaTrackInfo_Value(${1:MediaTrack tr}, ${2: parmname})$0",
        "description": "Get track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (&1=no media buffering, &2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)\n\n"
    },
    "GETMIDIINPUTNAME EEL2": {
        "prefix": "GetMIDIInputName",
        "scope": "eel2",
        "body": "GetMIDIInputName(${1:int dev}, ${2:nameout})$0",
        "description": "returns true if device present\n\n"
    },
    "GETMIDIOUTPUTNAME EEL2": {
        "prefix": "GetMIDIOutputName",
        "scope": "eel2",
        "body": "GetMIDIOutputName(${1:int dev}, ${2:nameout})$0",
        "description": "returns true if device present\n\n"
    },
    "GETMIXERSCROLL EEL2": {
        "prefix": "GetMixerScroll",
        "scope": "eel2",
        "body": "GetMixerScroll()$0",
        "description": "Get the leftmost track visible in the mixer\n\n"
    },
    "GETMOUSEMODIFIER EEL2": {
        "prefix": "GetMouseModifier",
        "scope": "eel2",
        "body": "GetMouseModifier(${1:\"context\"}, ${2: int modifier_flag}, ${3:action})$0",
        "description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\naction will be filled in with the command ID number for a built-in mouse modifier\n\nor built-in REAPER command ID, or the custom action ID string.\n\nSee SetMouseModifier for more information.\n\n"
    },
    "GETMOUSEPOSITION EEL2": {
        "prefix": "GetMousePosition",
        "scope": "eel2",
        "body": "GetMousePosition(${1:x}, ${2:y})$0",
        "description": "get mouse position in screen coordinates\n\n"
    },
    "GETNUMAUDIOINPUTS EEL2": {
        "prefix": "GetNumAudioInputs",
        "scope": "eel2",
        "body": "GetNumAudioInputs()$0",
        "description": "Return number of normal audio hardware inputs available\n\n"
    },
    "GETNUMAUDIOOUTPUTS EEL2": {
        "prefix": "GetNumAudioOutputs",
        "scope": "eel2",
        "body": "GetNumAudioOutputs()$0",
        "description": "Return number of normal audio hardware outputs available\n\n"
    },
    "GETNUMMIDIINPUTS EEL2": {
        "prefix": "GetNumMIDIInputs",
        "scope": "eel2",
        "body": "GetNumMIDIInputs()$0",
        "description": "returns max number of real midi hardware inputs\n\n"
    },
    "GETNUMMIDIOUTPUTS EEL2": {
        "prefix": "GetNumMIDIOutputs",
        "scope": "eel2",
        "body": "GetNumMIDIOutputs()$0",
        "description": "returns max number of real midi hardware outputs\n\n"
    },
    "GETNUMTRACKS EEL2": {
        "prefix": "GetNumTracks",
        "scope": "eel2",
        "body": "GetNumTracks()$0",
        "description": ""
    },
    "GETOS EEL2": {
        "prefix": "GetOS",
        "scope": "eel2",
        "body": "GetOS(${1:retval})$0",
        "description": "Returns \"Win32\", \"Win64\", \"OSX32\", \"OSX64\", or \"Other\".\n\n"
    },
    "GETOUTPUTCHANNELNAME EEL2": {
        "prefix": "GetOutputChannelName",
        "scope": "eel2",
        "body": "GetOutputChannelName(${1:retval}, ${2: int channelIndex})$0",
        "description": ""
    },
    "GETOUTPUTLATENCY EEL2": {
        "prefix": "GetOutputLatency",
        "scope": "eel2",
        "body": "GetOutputLatency()$0",
        "description": "returns output latency in seconds\n\n"
    },
    "GETPARENTTRACK EEL2": {
        "prefix": "GetParentTrack",
        "scope": "eel2",
        "body": "GetParentTrack(${1:MediaTrack track})$0",
        "description": ""
    },
    "GETPEAKFILENAME EEL2": {
        "prefix": "GetPeakFileName",
        "scope": "eel2",
        "body": "GetPeakFileName(${1:\"fn\"}, ${2:buf})$0",
        "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
    },
    "GETPEAKFILENAMEEX EEL2": {
        "prefix": "GetPeakFileNameEx",
        "scope": "eel2",
        "body": "GetPeakFileNameEx(${1:\"fn\"}, ${2:buf}, ${3: bool forWrite})$0",
        "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
    },
    "GETPEAKFILENAMEEX2 EEL2": {
        "prefix": "GetPeakFileNameEx2",
        "scope": "eel2",
        "body": "GetPeakFileNameEx2(${1:\"fn\"}, ${2:buf}, ${3: bool forWrite}, ${4: peaksfileextension})$0",
        "description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as \".reapeaks\"\n\n"
    },
    "GETPLAYPOSITION EEL2": {
        "prefix": "GetPlayPosition",
        "scope": "eel2",
        "body": "GetPlayPosition()$0",
        "description": "returns latency-compensated actual-what-you-hear position\n\n"
    },
    "GETPLAYPOSITION2 EEL2": {
        "prefix": "GetPlayPosition2",
        "scope": "eel2",
        "body": "GetPlayPosition2()$0",
        "description": "returns position of next audio block being processed\n\n"
    },
    "GETPLAYPOSITION2EX EEL2": {
        "prefix": "GetPlayPosition2Ex",
        "scope": "eel2",
        "body": "GetPlayPosition2Ex(${1:ReaProject proj})$0",
        "description": "returns position of next audio block being processed\n\n"
    },
    "GETPLAYPOSITIONEX EEL2": {
        "prefix": "GetPlayPositionEx",
        "scope": "eel2",
        "body": "GetPlayPositionEx(${1:ReaProject proj})$0",
        "description": "returns latency-compensated actual-what-you-hear position\n\n"
    },
    "GETPLAYSTATE EEL2": {
        "prefix": "GetPlayState",
        "scope": "eel2",
        "body": "GetPlayState()$0",
        "description": "&1=playing,&2=pause,&=4 is recording\n\n"
    },
    "GETPLAYSTATEEX EEL2": {
        "prefix": "GetPlayStateEx",
        "scope": "eel2",
        "body": "GetPlayStateEx(${1:ReaProject proj})$0",
        "description": "&1=playing,&2=pause,&=4 is recording\n\n"
    },
    "GETPROJECTLENGTH EEL2": {
        "prefix": "GetProjectLength",
        "scope": "eel2",
        "body": "GetProjectLength(${1:ReaProject proj})$0",
        "description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map\n\n"
    },
    "GETPROJECTNAME EEL2": {
        "prefix": "GetProjectName",
        "scope": "eel2",
        "body": "GetProjectName(${1:ReaProject proj}, ${2:buf})$0",
        "description": ""
    },
    "GETPROJECTPATH EEL2": {
        "prefix": "GetProjectPath",
        "scope": "eel2",
        "body": "GetProjectPath(${1:buf})$0",
        "description": ""
    },
    "GETPROJECTPATHEX EEL2": {
        "prefix": "GetProjectPathEx",
        "scope": "eel2",
        "body": "GetProjectPathEx(${1:ReaProject proj}, ${2:buf})$0",
        "description": ""
    },
    "GETPROJECTSTATECHANGECOUNT EEL2": {
        "prefix": "GetProjectStateChangeCount",
        "scope": "eel2",
        "body": "GetProjectStateChangeCount(${1:ReaProject proj})$0",
        "description": "returns an integer that changes when the project state changes\n\n"
    },
    "GETPROJECTTIMEOFFSET EEL2": {
        "prefix": "GetProjectTimeOffset",
        "scope": "eel2",
        "body": "GetProjectTimeOffset(${1:ReaProject proj}, ${2: bool rndframe})$0",
        "description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size.\n\n"
    },
    "GETPROJECTTIMESIGNATURE EEL2": {
        "prefix": "GetProjectTimeSignature",
        "scope": "eel2",
        "body": "GetProjectTimeSignature(${1:bpm}, ${2:bpi})$0",
        "description": "deprecated\n\n"
    },
    "GETPROJECTTIMESIGNATURE2 EEL2": {
        "prefix": "GetProjectTimeSignature2",
        "scope": "eel2",
        "body": "GetProjectTimeSignature2(${1:ReaProject proj}, ${2:bpm}, ${3:bpi})$0",
        "description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\n\nthis does not reflect tempo envelopes but is purely what is set in the project settings.\n\n"
    },
    "GETPROJEXTSTATE EEL2": {
        "prefix": "GetProjExtState",
        "scope": "eel2",
        "body": "GetProjExtState(${1:ReaProject proj}, ${2: extname}, ${3: key}, ${4:val})$0",
        "description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.\n\n"
    },
    "GETRESOURCEPATH EEL2": {
        "prefix": "GetResourcePath",
        "scope": "eel2",
        "body": "GetResourcePath(${1:retval})$0",
        "description": "returns path where ini files are stored, other things are in subdirectories.\n\n"
    },
    "GETSELECTEDENVELOPE EEL2": {
        "prefix": "GetSelectedEnvelope",
        "scope": "eel2",
        "body": "GetSelectedEnvelope(${1:ReaProject proj})$0",
        "description": "get the currently selected envelope, returns 0 if no envelope is selected\n\n"
    },
    "GETSELECTEDMEDIAITEM EEL2": {
        "prefix": "GetSelectedMediaItem",
        "scope": "eel2",
        "body": "GetSelectedMediaItem(${1:ReaProject proj}, ${2: int selitem})$0",
        "description": "get a selected item by selected item count (zero-based) (proj=0 for active project)\n\n"
    },
    "GETSELECTEDTRACK EEL2": {
        "prefix": "GetSelectedTrack",
        "scope": "eel2",
        "body": "GetSelectedTrack(${1:ReaProject proj}, ${2: int seltrackidx})$0",
        "description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2.\n\n"
    },
    "GETSELECTEDTRACK2 EEL2": {
        "prefix": "GetSelectedTrack2",
        "scope": "eel2",
        "body": "GetSelectedTrack2(${1:ReaProject proj}, ${2: int seltrackidx}, ${3: bool wantmaster})$0",
        "description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).\n\n"
    },
    "GETSELECTEDTRACKENVELOPE EEL2": {
        "prefix": "GetSelectedTrackEnvelope",
        "scope": "eel2",
        "body": "GetSelectedTrackEnvelope(${1:ReaProject proj})$0",
        "description": "get the currently selected track envelope, returns 0 if no envelope is selected\n\n"
    },
    "GETSET_ARRANGEVIEW2 EEL2": {
        "prefix": "GetSet_ArrangeView2",
        "scope": "eel2",
        "body": "GetSet_ArrangeView2(${1:ReaProject proj}, ${2: bool isSet}, ${3: int screen_x_start}, ${4: int screen_x_end}, ${5:start_time}, ${6:end_time})$0",
        "description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time\n\n"
    },
    "GETSET_LOOPTIMERANGE EEL2": {
        "prefix": "GetSet_LoopTimeRange",
        "scope": "eel2",
        "body": "GetSet_LoopTimeRange(${1:bool isSet}, ${2: bool isLoop}, ${3:start}, ${4:end}, ${5: bool allowautoseek})$0",
        "description": ""
    },
    "GETSET_LOOPTIMERANGE2 EEL2": {
        "prefix": "GetSet_LoopTimeRange2",
        "scope": "eel2",
        "body": "GetSet_LoopTimeRange2(${1:ReaProject proj}, ${2: bool isSet}, ${3: bool isLoop}, ${4:start}, ${5:end}, ${6: bool allowautoseek})$0",
        "description": ""
    },
    "GETSETAUTOMATIONITEMINFO EEL2": {
        "prefix": "GetSetAutomationItemInfo",
        "scope": "eel2",
        "body": "GetSetAutomationItemInfo(${1:TrackEnvelope env}, ${2: int autoitem_idx}, ${3: desc}, ${4: value}, ${5: bool is_set})$0",
        "description": "Get or set automation item information. autoitem_idx==0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\n\nD_POOL_ID: double *, automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\n\nD_POSITION: double *, automation item timeline position in seconds\n\nD_LENGTH: double *, automation item length in seconds\n\nD_STARTOFFS: double *, automation item start offset in seconds\n\nD_PLAYRATE: double *, automation item playback rate\n\nD_BASELINE: double *, automation item baseline value in the range [0,1]\n\nD_AMPLITUDE: double *, automation item amplitude in the range [-1,1]\n\nD_LOOPSRC: double *, nonzero if the automation item contents are looped\n\nD_UISEL: double *, nonzero if the automation item is selected in the arrange view\n\n"
    },
    "GETSETENVELOPESTATE EEL2": {
        "prefix": "GetSetEnvelopeState",
        "scope": "eel2",
        "body": "GetSetEnvelopeState(${1:TrackEnvelope env}, ${2:str})$0",
        "description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
    },
    "GETSETENVELOPESTATE2 EEL2": {
        "prefix": "GetSetEnvelopeState2",
        "scope": "eel2",
        "body": "GetSetEnvelopeState2(${1:TrackEnvelope env}, ${2:str}, ${3: bool isundo})$0",
        "description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
    },
    "GETSETITEMSTATE EEL2": {
        "prefix": "GetSetItemState",
        "scope": "eel2",
        "body": "GetSetItemState(${1:MediaItem item}, ${2:str})$0",
        "description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
    },
    "GETSETITEMSTATE2 EEL2": {
        "prefix": "GetSetItemState2",
        "scope": "eel2",
        "body": "GetSetItemState2(${1:MediaItem item}, ${2:str}, ${3: bool isundo})$0",
        "description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
    },
    "GETSETMEDIAITEMTAKEINFO_STRING EEL2": {
        "prefix": "GetSetMediaItemTakeInfo_String",
        "scope": "eel2",
        "body": "GetSetMediaItemTakeInfo_String(${1:MediaItem_Take tk}, ${2: parmname}, ${3:stringNeedBig}, ${4: bool setNewValue})$0",
        "description": "P_NAME : char * to take name\n\n"
    },
    "GETSETMEDIATRACKINFO_STRING EEL2": {
        "prefix": "GetSetMediaTrackInfo_String",
        "scope": "eel2",
        "body": "GetSetMediaTrackInfo_String(${1:MediaTrack tr}, ${2: parmname}, ${3:stringNeedBig}, ${4: bool setNewValue})$0",
        "description": "Get or set track string attributes.\n\nP_NAME : char * : track name (on master returns NULL)\n\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\n\nP_MCP_LAYOUT : const char * : layout name\n\nP_TCP_LAYOUT : const char * : layout name\n\n"
    },
    "GETSETPROJECTAUTHOR EEL2": {
        "prefix": "GetSetProjectAuthor",
        "scope": "eel2",
        "body": "GetSetProjectAuthor(${1:ReaProject proj}, ${2: bool set}, ${3:author})$0",
        "description": "gets or sets project author, author_sz is ignored when setting\n\n"
    },
    "GETSETPROJECTGRID EEL2": {
        "prefix": "GetSetProjectGrid",
        "scope": "eel2",
        "body": "GetSetProjectGrid(${1:ReaProject project}, ${2: bool set}, ${3:divisionIn}, ${4:swingmodeIn}, ${5:swingamtIn})$0",
        "description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. Returns grid configuration flags\n\n"
    },
    "GETSETPROJECTNOTES EEL2": {
        "prefix": "GetSetProjectNotes",
        "scope": "eel2",
        "body": "GetSetProjectNotes(${1:ReaProject proj}, ${2: bool set}, ${3:notes})$0",
        "description": "gets or sets project notes, notesNeedBig_sz is ignored when setting\n\n"
    },
    "GETSETREPEAT EEL2": {
        "prefix": "GetSetRepeat",
        "scope": "eel2",
        "body": "GetSetRepeat(${1:int val})$0",
        "description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
    },
    "GETSETREPEATEX EEL2": {
        "prefix": "GetSetRepeatEx",
        "scope": "eel2",
        "body": "GetSetRepeatEx(${1:ReaProject proj}, ${2: int val})$0",
        "description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
    },
    "GETSETTRACKGROUPMEMBERSHIP EEL2": {
        "prefix": "GetSetTrackGroupMembership",
        "scope": "eel2",
        "body": "GetSetTrackGroupMembership(${1:MediaTrack tr}, ${2: groupname}, ${3: uint setmask}, ${4: uint setvalue})$0",
        "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX\n\n"
    },
    "GETSETTRACKGROUPMEMBERSHIPHIGH EEL2": {
        "prefix": "GetSetTrackGroupMembershipHigh",
        "scope": "eel2",
        "body": "GetSetTrackGroupMembershipHigh(${1:MediaTrack tr}, ${2: groupname}, ${3: uint setmask}, ${4: uint setvalue})$0",
        "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX\n\n"
    },
    "GETSETTRACKSTATE EEL2": {
        "prefix": "GetSetTrackState",
        "scope": "eel2",
        "body": "GetSetTrackState(${1:MediaTrack track}, ${2:str})$0",
        "description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
    },
    "GETSETTRACKSTATE2 EEL2": {
        "prefix": "GetSetTrackState2",
        "scope": "eel2",
        "body": "GetSetTrackState2(${1:MediaTrack track}, ${2:str}, ${3: bool isundo})$0",
        "description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
    },
    "GETSUBPROJECTFROMSOURCE EEL2": {
        "prefix": "GetSubProjectFromSource",
        "scope": "eel2",
        "body": "GetSubProjectFromSource(${1:PCM_source src})$0",
        "description": ""
    },
    "GETTAKE EEL2": {
        "prefix": "GetTake",
        "scope": "eel2",
        "body": "GetTake(${1:MediaItem item}, ${2: int takeidx})$0",
        "description": "get a take from an item by take count (zero-based)\n\n"
    },
    "GETTAKEENVELOPE EEL2": {
        "prefix": "GetTakeEnvelope",
        "scope": "eel2",
        "body": "GetTakeEnvelope(${1:MediaItem_Take take}, ${2: int envidx})$0",
        "description": ""
    },
    "GETTAKEENVELOPEBYNAME EEL2": {
        "prefix": "GetTakeEnvelopeByName",
        "scope": "eel2",
        "body": "GetTakeEnvelopeByName(${1:MediaItem_Take take}, ${2: envname})$0",
        "description": ""
    },
    "GETTAKENAME EEL2": {
        "prefix": "GetTakeName",
        "scope": "eel2",
        "body": "GetTakeName(${1:retval}, ${2: MediaItem_Take take})$0",
        "description": "returns NULL if the take is not valid\n\n"
    },
    "GETTAKENUMSTRETCHMARKERS EEL2": {
        "prefix": "GetTakeNumStretchMarkers",
        "scope": "eel2",
        "body": "GetTakeNumStretchMarkers(${1:MediaItem_Take take})$0",
        "description": "Returns number of stretch markers in take\n\n"
    },
    "GETTAKESTRETCHMARKER EEL2": {
        "prefix": "GetTakeStretchMarker",
        "scope": "eel2",
        "body": "GetTakeStretchMarker(${1:MediaItem_Take take}, ${2: int idx}, ${3:pos}, ${4:srcpos})$0",
        "description": "Gets information on a stretch marker, idx is 0..n. Returns false if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, next marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated.\n\n"
    },
    "GETTAKESTRETCHMARKERSLOPE EEL2": {
        "prefix": "GetTakeStretchMarkerSlope",
        "scope": "eel2",
        "body": "GetTakeStretchMarkerSlope(${1:MediaItem_Take take}, ${2: int idx})$0",
        "description": "See SetTakeStretchMarkerSlope\n\n"
    },
    "GETTCPFXPARM EEL2": {
        "prefix": "GetTCPFXParm",
        "scope": "eel2",
        "body": "GetTCPFXParm(${1:ReaProject project}, ${2: MediaTrack track}, ${3: int index}, ${4:fxindex}, ${5:parmidx})$0",
        "description": "Get information about a specific FX parameter knob (see CountTCPFXParms).\n\n"
    },
    "GETTEMPOMATCHPLAYRATE EEL2": {
        "prefix": "GetTempoMatchPlayRate",
        "scope": "eel2",
        "body": "GetTempoMatchPlayRate(${1:PCM_source source}, ${2: srcscale}, ${3: position}, ${4: mult}, ${5:rate}, ${6:targetlen})$0",
        "description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256\n\n"
    },
    "GETTEMPOTIMESIGMARKER EEL2": {
        "prefix": "GetTempoTimeSigMarker",
        "scope": "eel2",
        "body": "GetTempoTimeSigMarker(${1:ReaProject proj}, ${2: int ptidx}, ${3:timepos}, ${4:measurepos}, ${5:beatpos}, ${6:bpm}, ${7:timesig_num}, ${8:timesig_denom}, ${9:lineartempo})$0",
        "description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "GETTOGGLECOMMANDSTATE EEL2": {
        "prefix": "GetToggleCommandState",
        "scope": "eel2",
        "body": "GetToggleCommandState(${1:int command_id})$0",
        "description": "See GetToggleCommandStateEx.\n\n"
    },
    "GETTOGGLECOMMANDSTATEEX EEL2": {
        "prefix": "GetToggleCommandStateEx",
        "scope": "eel2",
        "body": "GetToggleCommandStateEx(${1:int section_id}, ${2: int command_id})$0",
        "description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned.\n\n"
    },
    "GETTOOLTIPWINDOW EEL2": {
        "prefix": "GetTooltipWindow",
        "scope": "eel2",
        "body": "GetTooltipWindow()$0",
        "description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL.\n\n"
    },
    "GETTRACK EEL2": {
        "prefix": "GetTrack",
        "scope": "eel2",
        "body": "GetTrack(${1:ReaProject proj}, ${2: int trackidx})$0",
        "description": "get a track from a project by track count (zero-based) (proj=0 for active project)\n\n"
    },
    "GETTRACKAUTOMATIONMODE EEL2": {
        "prefix": "GetTrackAutomationMode",
        "scope": "eel2",
        "body": "GetTrackAutomationMode(${1:MediaTrack tr})$0",
        "description": "return the track mode, regardless of global override\n\n"
    },
    "GETTRACKCOLOR EEL2": {
        "prefix": "GetTrackColor",
        "scope": "eel2",
        "body": "GetTrackColor(${1:MediaTrack track})$0",
        "description": "Returns the track custom color as OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no color setting is returned as 0.\n\n"
    },
    "GETTRACKDEPTH EEL2": {
        "prefix": "GetTrackDepth",
        "scope": "eel2",
        "body": "GetTrackDepth(${1:MediaTrack track})$0",
        "description": ""
    },
    "GETTRACKENVELOPE EEL2": {
        "prefix": "GetTrackEnvelope",
        "scope": "eel2",
        "body": "GetTrackEnvelope(${1:MediaTrack track}, ${2: int envidx})$0",
        "description": ""
    },
    "GETTRACKENVELOPEBYCHUNKNAME EEL2": {
        "prefix": "GetTrackEnvelopeByChunkName",
        "scope": "eel2",
        "body": "GetTrackEnvelopeByChunkName(${1:MediaTrack tr}, ${2: cfgchunkname})$0",
        "description": "Gets a built-in track envelope by configuration chunk name, e.g. \"<VOLENV\".\n\n"
    },
    "GETTRACKENVELOPEBYNAME EEL2": {
        "prefix": "GetTrackEnvelopeByName",
        "scope": "eel2",
        "body": "GetTrackEnvelopeByName(${1:MediaTrack track}, ${2: envname})$0",
        "description": ""
    },
    "GETTRACKGUID EEL2": {
        "prefix": "GetTrackGUID",
        "scope": "eel2",
        "body": "GetTrackGUID(${1:retguid}, ${2: MediaTrack tr})$0",
        "description": ""
    },
    "GETTRACKMEDIAITEM EEL2": {
        "prefix": "GetTrackMediaItem",
        "scope": "eel2",
        "body": "GetTrackMediaItem(${1:MediaTrack tr}, ${2: int itemidx})$0",
        "description": ""
    },
    "GETTRACKMIDILYRICS EEL2": {
        "prefix": "GetTrackMIDILyrics",
        "scope": "eel2",
        "body": "GetTrackMIDILyrics(${1:MediaTrack track}, ${2: int flag}, ${3:bufWant16384})$0",
        "description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t\u0002.1.1\\tLyric for measure 2 beat 1\t\"). See SetTrackMIDILyrics\n\n"
    },
    "GETTRACKMIDINOTENAME EEL2": {
        "prefix": "GetTrackMIDINoteName",
        "scope": "eel2",
        "body": "GetTrackMIDINoteName(${1:retval}, ${2: int track}, ${3: int pitch}, ${4: int chan})$0",
        "description": "see GetTrackMIDINoteNameEx\n\n"
    },
    "GETTRACKMIDINOTENAMEEX EEL2": {
        "prefix": "GetTrackMIDINoteNameEx",
        "scope": "eel2",
        "body": "GetTrackMIDINoteNameEx(${1:retval}, ${2: ReaProject proj}, ${3: MediaTrack track}, ${4: int pitch}, ${5: int chan})$0",
        "description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx\n\n"
    },
    "GETTRACKMIDINOTERANGE EEL2": {
        "prefix": "GetTrackMIDINoteRange",
        "scope": "eel2",
        "body": "GetTrackMIDINoteRange(${1:ReaProject proj}, ${2: MediaTrack track}, ${3:note_lo}, ${4:note_hi})$0",
        "description": ""
    },
    "GETTRACKNAME EEL2": {
        "prefix": "GetTrackName",
        "scope": "eel2",
        "body": "GetTrackName(${1:MediaTrack track}, ${2:buf})$0",
        "description": "Returns \"MASTER\" for master track, \"Track N\" if track has no name.\n\n"
    },
    "GETTRACKNUMMEDIAITEMS EEL2": {
        "prefix": "GetTrackNumMediaItems",
        "scope": "eel2",
        "body": "GetTrackNumMediaItems(${1:MediaTrack tr})$0",
        "description": ""
    },
    "GETTRACKNUMSENDS EEL2": {
        "prefix": "GetTrackNumSends",
        "scope": "eel2",
        "body": "GetTrackNumSends(${1:MediaTrack tr}, ${2: int category})$0",
        "description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs\n\n"
    },
    "GETTRACKRECEIVENAME EEL2": {
        "prefix": "GetTrackReceiveName",
        "scope": "eel2",
        "body": "GetTrackReceiveName(${1:MediaTrack track}, ${2: int recv_index}, ${3:buf})$0",
        "description": "See GetTrackSendName.\n\n"
    },
    "GETTRACKRECEIVEUIMUTE EEL2": {
        "prefix": "GetTrackReceiveUIMute",
        "scope": "eel2",
        "body": "GetTrackReceiveUIMute(${1:MediaTrack track}, ${2: int recv_index}, ${3:mute})$0",
        "description": "See GetTrackSendUIMute.\n\n"
    },
    "GETTRACKRECEIVEUIVOLPAN EEL2": {
        "prefix": "GetTrackReceiveUIVolPan",
        "scope": "eel2",
        "body": "GetTrackReceiveUIVolPan(${1:MediaTrack track}, ${2: int recv_index}, ${3:volume}, ${4:pan})$0",
        "description": "See GetTrackSendUIVolPan.\n\n"
    },
    "GETTRACKSENDINFO_VALUE EEL2": {
        "prefix": "GetTrackSendInfo_Value",
        "scope": "eel2",
        "body": "GetTrackSendInfo_Value(${1:MediaTrack tr}, ${2: int category}, ${3: int sendidx}, ${4: parmname})$0",
        "description": "Get send/receive/hardware output numerical-value attributes.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,&1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\n\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
    },
    "GETTRACKSENDNAME EEL2": {
        "prefix": "GetTrackSendName",
        "scope": "eel2",
        "body": "GetTrackSendName(${1:MediaTrack track}, ${2: int send_index}, ${3:buf})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.\n\n"
    },
    "GETTRACKSENDUIMUTE EEL2": {
        "prefix": "GetTrackSendUIMute",
        "scope": "eel2",
        "body": "GetTrackSendUIMute(${1:MediaTrack track}, ${2: int send_index}, ${3:mute})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.\n\n"
    },
    "GETTRACKSENDUIVOLPAN EEL2": {
        "prefix": "GetTrackSendUIVolPan",
        "scope": "eel2",
        "body": "GetTrackSendUIVolPan(${1:MediaTrack track}, ${2: int send_index}, ${3:volume}, ${4:pan})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.\n\n"
    },
    "GETTRACKSTATE EEL2": {
        "prefix": "GetTrackState",
        "scope": "eel2",
        "body": "GetTrackState(${1:retval}, ${2: MediaTrack track}, ${3:flags})$0",
        "description": "Gets track state, returns track name.\n\nflags will be set to:\n\n&1=folder\n\n&2=selected\n\n&4=has fx enabled\n\n&8=muted\n\n&16=soloed\n\n&32=SIP'd (with &16)\n\n&64=rec armed\n\n&128=rec monitoring on\n\n&256=rec monitoring auto\n\n&512=hide from TCP\n\n&1024=hide from MCP\n\n"
    },
    "GETTRACKSTATECHUNK EEL2": {
        "prefix": "GetTrackStateChunk",
        "scope": "eel2",
        "body": "GetTrackStateChunk(${1:MediaTrack track}, ${2:str}, ${3: bool isundo})$0",
        "description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "GETTRACKUIMUTE EEL2": {
        "prefix": "GetTrackUIMute",
        "scope": "eel2",
        "body": "GetTrackUIMute(${1:MediaTrack track}, ${2:mute})$0",
        "description": ""
    },
    "GETTRACKUIPAN EEL2": {
        "prefix": "GetTrackUIPan",
        "scope": "eel2",
        "body": "GetTrackUIPan(${1:MediaTrack track}, ${2:pan1}, ${3:pan2}, ${4:panmode})$0",
        "description": ""
    },
    "GETTRACKUIVOLPAN EEL2": {
        "prefix": "GetTrackUIVolPan",
        "scope": "eel2",
        "body": "GetTrackUIVolPan(${1:MediaTrack track}, ${2:volume}, ${3:pan})$0",
        "description": ""
    },
    "GETUNDERRUNTIME EEL2": {
        "prefix": "GetUnderrunTime",
        "scope": "eel2",
        "body": "GetUnderrunTime(${1:audio_xrun}, ${2:media_xrun}, ${3:curtime})$0",
        "description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)\n\n"
    },
    "GETUSERFILENAMEFORREAD EEL2": {
        "prefix": "GetUserFileNameForRead",
        "scope": "eel2",
        "body": "GetUserFileNameForRead(${1:filenameNeed4096}, ${2: title}, ${3: defext})$0",
        "description": "returns true if the user selected a valid file, false if the user canceled the dialog\n\n"
    },
    "GETUSERINPUTS EEL2": {
        "prefix": "GetUserInputs",
        "scope": "eel2",
        "body": "GetUserInputs(${1:\"title\"}, ${2: int num_inputs}, ${3: captions_csv}, ${4:retvals_csv})$0",
        "description": "Get values from the user.\n\nIf a caption begins with *, for example \"*password\", the edit field will not display the input text.\n\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. To increase text field width, add an extra caption field, and specify extrawidth=xyz\n\n"
    },
    "GOTOMARKER EEL2": {
        "prefix": "GoToMarker",
        "scope": "eel2",
        "body": "GoToMarker(${1:ReaProject proj}, ${2: int marker_index}, ${3: bool use_timeline_order})$0",
        "description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline. If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1.\n\n"
    },
    "GOTOREGION EEL2": {
        "prefix": "GoToRegion",
        "scope": "eel2",
        "body": "GoToRegion(${1:ReaProject proj}, ${2: int region_index}, ${3: bool use_timeline_order})$0",
        "description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline. If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1.\n\n"
    },
    "GR_SELECTCOLOR EEL2": {
        "prefix": "GR_SelectColor",
        "scope": "eel2",
        "body": "GR_SelectColor(${1:HWND hwnd}, ${2:color})$0",
        "description": "Runs the system color chooser dialog. Returns 0 if the user cancels the dialog.\n\n"
    },
    "GSC_MAINWND EEL2": {
        "prefix": "GSC_mainwnd",
        "scope": "eel2",
        "body": "GSC_mainwnd(${1:int t})$0",
        "description": "this is just like win32 GetSysColor() but can have overrides.\n\n"
    },
    "GUIDTOSTRING EEL2": {
        "prefix": "guidToString",
        "scope": "eel2",
        "body": "guidToString(${1:\"gGUID\"}, ${2:destNeed64})$0",
        "description": "dest should be at least 64 chars long to be safe\n\n"
    },
    "HASEXTSTATE EEL2": {
        "prefix": "HasExtState",
        "scope": "eel2",
        "body": "HasExtState(${1:\"section\"}, ${2: key})$0",
        "description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.\n\n"
    },
    "HASTRACKMIDIPROGRAMS EEL2": {
        "prefix": "HasTrackMIDIPrograms",
        "scope": "eel2",
        "body": "HasTrackMIDIPrograms(${1:retval}, ${2: int track})$0",
        "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
    },
    "HASTRACKMIDIPROGRAMSEX EEL2": {
        "prefix": "HasTrackMIDIProgramsEx",
        "scope": "eel2",
        "body": "HasTrackMIDIProgramsEx(${1:retval}, ${2: ReaProject proj}, ${3: MediaTrack track})$0",
        "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
    },
    "HELP_SET EEL2": {
        "prefix": "Help_Set",
        "scope": "eel2",
        "body": "Help_Set(${1:\"helpstring\"}, ${2: bool is_temporary_help})$0",
        "description": ""
    },
    "IMAGE_RESOLVE_FN EEL2": {
        "prefix": "image_resolve_fn",
        "scope": "eel2",
        "body": "image_resolve_fn(${1:\"in\"}, ${2:out})$0",
        "description": ""
    },
    "INSERTAUTOMATIONITEM EEL2": {
        "prefix": "InsertAutomationItem",
        "scope": "eel2",
        "body": "InsertAutomationItem(${1:TrackEnvelope env}, ${2: int pool_id}, ${3: position}, ${4: length})$0",
        "description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; otherwise, the automation item will be a new instance of an existing pool. Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.\n\n"
    },
    "INSERTENVELOPEPOINT EEL2": {
        "prefix": "InsertEnvelopePoint",
        "scope": "eel2",
        "body": "InsertEnvelopePoint(${1:TrackEnvelope envelope}, ${2: time}, ${3: value}, ${4: int shape}, ${5: tension}, ${6: bool selected}, ${7: optional bool noSortIn})$0",
        "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "INSERTENVELOPEPOINTEX EEL2": {
        "prefix": "InsertEnvelopePointEx",
        "scope": "eel2",
        "body": "InsertEnvelopePointEx(${1:TrackEnvelope envelope}, ${2: int autoitem_idx}, ${3: time}, ${4: value}, ${5: int shape}, ${6: tension}, ${7: bool selected}, ${8: optional bool noSortIn})$0",
        "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "INSERTMEDIA EEL2": {
        "prefix": "InsertMedia",
        "scope": "eel2",
        "body": "InsertMedia(${1:\"file\"}, ${2: int mode})$0",
        "description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items. &512=use high word as absolute track index if mode&3==0.\n\n"
    },
    "INSERTMEDIASECTION EEL2": {
        "prefix": "InsertMediaSection",
        "scope": "eel2",
        "body": "InsertMediaSection(${1:\"file\"}, ${2: int mode}, ${3: startpct}, ${4: endpct}, ${5: pitchshift})$0",
        "description": ""
    },
    "INSERTTRACKATINDEX EEL2": {
        "prefix": "InsertTrackAtIndex",
        "scope": "eel2",
        "body": "InsertTrackAtIndex(${1:int idx}, ${2: bool wantDefaults})$0",
        "description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env\n\n"
    },
    "ISMEDIAEXTENSION EEL2": {
        "prefix": "IsMediaExtension",
        "scope": "eel2",
        "body": "IsMediaExtension(${1:\"ext\"}, ${2: bool wantOthers})$0",
        "description": "Tests a file extension (i.e. \"wav\" or \"mid\") to see if it's a media extension.\n\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also pass.\n\n"
    },
    "ISMEDIAITEMSELECTED EEL2": {
        "prefix": "IsMediaItemSelected",
        "scope": "eel2",
        "body": "IsMediaItemSelected(${1:MediaItem item})$0",
        "description": ""
    },
    "ISPROJECTDIRTY EEL2": {
        "prefix": "IsProjectDirty",
        "scope": "eel2",
        "body": "IsProjectDirty(${1:ReaProject proj})$0",
        "description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.\n\n"
    },
    "ISTRACKSELECTED EEL2": {
        "prefix": "IsTrackSelected",
        "scope": "eel2",
        "body": "IsTrackSelected(${1:MediaTrack track})$0",
        "description": ""
    },
    "ISTRACKVISIBLE EEL2": {
        "prefix": "IsTrackVisible",
        "scope": "eel2",
        "body": "IsTrackVisible(${1:MediaTrack track}, ${2: bool mixer})$0",
        "description": "If mixer==true, returns true if the track is visible in the mixer. If mixer==false, returns true if the track is visible in the track control panel.\n\n"
    },
    "JOYSTICK_CREATE EEL2": {
        "prefix": "joystick_create",
        "scope": "eel2",
        "body": "joystick_create(${1:\"guidGUID\"})$0",
        "description": "creates a joystick device\n\n"
    },
    "JOYSTICK_DESTROY EEL2": {
        "prefix": "joystick_destroy",
        "scope": "eel2",
        "body": "joystick_destroy(${1:joystick_device device})$0",
        "description": "destroys a joystick device\n\n"
    },
    "JOYSTICK_ENUM EEL2": {
        "prefix": "joystick_enum",
        "scope": "eel2",
        "body": "joystick_enum(${1:retval}, ${2: int index}, ${3:namestr})$0",
        "description": "enumerates installed devices, returns GUID as a string\n\n"
    },
    "JOYSTICK_GETAXIS EEL2": {
        "prefix": "joystick_getaxis",
        "scope": "eel2",
        "body": "joystick_getaxis(${1:joystick_device dev}, ${2: int axis})$0",
        "description": "returns axis value (-1..1)\n\n"
    },
    "JOYSTICK_GETBUTTONMASK EEL2": {
        "prefix": "joystick_getbuttonmask",
        "scope": "eel2",
        "body": "joystick_getbuttonmask(${1:joystick_device dev})$0",
        "description": "returns button pressed mask, 1=first button, 2=second...\n\n"
    },
    "JOYSTICK_GETINFO EEL2": {
        "prefix": "joystick_getinfo",
        "scope": "eel2",
        "body": "joystick_getinfo(${1:joystick_device dev}, ${2:axes}, ${3:povs})$0",
        "description": "returns button count\n\n"
    },
    "JOYSTICK_GETPOV EEL2": {
        "prefix": "joystick_getpov",
        "scope": "eel2",
        "body": "joystick_getpov(${1:joystick_device dev}, ${2: int pov})$0",
        "description": "returns POV value (usually 0..655.35, or 655.35 on error)\n\n"
    },
    "JOYSTICK_UPDATE EEL2": {
        "prefix": "joystick_update",
        "scope": "eel2",
        "body": "joystick_update(${1:joystick_device dev})$0",
        "description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)\n\n"
    },
    "LICE_CLIPLINE EEL2": {
        "prefix": "LICE_ClipLine",
        "scope": "eel2",
        "body": "LICE_ClipLine(${1:pX1}, ${2:pY1}, ${3:pX2}, ${4:pY2}, ${5: int xLo}, ${6: int yLo}, ${7: int xHi}, ${8: int yHi})$0",
        "description": "Returns false if the line is entirely offscreen.\n\n"
    },
    "LOOP_ONARROW EEL2": {
        "prefix": "Loop_OnArrow",
        "scope": "eel2",
        "body": "Loop_OnArrow(${1:ReaProject project}, ${2: int direction})$0",
        "description": "Move the loop selection left or right. Returns true if snap is enabled.\n\n"
    },
    "MAIN_ONCOMMAND EEL2": {
        "prefix": "Main_OnCommand",
        "scope": "eel2",
        "body": "Main_OnCommand(${1:int command}, ${2: int flag})$0",
        "description": "See Main_OnCommandEx.\n\n"
    },
    "MAIN_ONCOMMANDEX EEL2": {
        "prefix": "Main_OnCommandEx",
        "scope": "eel2",
        "body": "Main_OnCommandEx(${1:int command}, ${2: int flag}, ${3: ReaProject proj})$0",
        "description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().\n\n"
    },
    "MAIN_OPENPROJECT EEL2": {
        "prefix": "Main_openProject",
        "scope": "eel2",
        "body": "Main_openProject(${1:\"name\"})$0",
        "description": "opens a project. will prompt the user to save, etc.\n\nif you pass a .RTrackTemplate file then it adds that to the project instead.\n\n"
    },
    "MAIN_SAVEPROJECT EEL2": {
        "prefix": "Main_SaveProject",
        "scope": "eel2",
        "body": "Main_SaveProject(${1:ReaProject proj}, ${2: bool forceSaveAsIn})$0",
        "description": "Save the project.\n\n"
    },
    "MAIN_UPDATELOOPINFO EEL2": {
        "prefix": "Main_UpdateLoopInfo",
        "scope": "eel2",
        "body": "Main_UpdateLoopInfo(${1:int ignoremask})$0",
        "description": ""
    },
    "MARKPROJECTDIRTY EEL2": {
        "prefix": "MarkProjectDirty",
        "scope": "eel2",
        "body": "MarkProjectDirty(${1:ReaProject proj})$0",
        "description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.\n\n"
    },
    "MARKTRACKITEMSDIRTY EEL2": {
        "prefix": "MarkTrackItemsDirty",
        "scope": "eel2",
        "body": "MarkTrackItemsDirty(${1:MediaTrack track}, ${2: MediaItem item})$0",
        "description": "If track is supplied, item is ignored\n\n"
    },
    "MASTER_GETPLAYRATE EEL2": {
        "prefix": "Master_GetPlayRate",
        "scope": "eel2",
        "body": "Master_GetPlayRate(${1:ReaProject project})$0",
        "description": ""
    },
    "MASTER_GETPLAYRATEATTIME EEL2": {
        "prefix": "Master_GetPlayRateAtTime",
        "scope": "eel2",
        "body": "Master_GetPlayRateAtTime(${1:time_s}, ${2: ReaProject proj})$0",
        "description": ""
    },
    "MASTER_GETTEMPO EEL2": {
        "prefix": "Master_GetTempo",
        "scope": "eel2",
        "body": "Master_GetTempo()$0",
        "description": ""
    },
    "MASTER_NORMALIZEPLAYRATE EEL2": {
        "prefix": "Master_NormalizePlayRate",
        "scope": "eel2",
        "body": "Master_NormalizePlayRate(${1:playrate}, ${2: bool isnormalized})$0",
        "description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.\n\n"
    },
    "MASTER_NORMALIZETEMPO EEL2": {
        "prefix": "Master_NormalizeTempo",
        "scope": "eel2",
        "body": "Master_NormalizeTempo(${1:bpm}, ${2: bool isnormalized})$0",
        "description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.\n\n"
    },
    "MB EEL2": {
        "prefix": "MB",
        "scope": "eel2",
        "body": "MB(${1:\"msg\"}, ${2: title}, ${3: int type})$0",
        "description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\n"
    },
    "MEDIAITEMDESCENDSFROMTRACK EEL2": {
        "prefix": "MediaItemDescendsFromTrack",
        "scope": "eel2",
        "body": "MediaItemDescendsFromTrack(${1:MediaItem item}, ${2: MediaTrack track})$0",
        "description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.\n\n"
    },
    "MIDI_COUNTEVTS EEL2": {
        "prefix": "MIDI_CountEvts",
        "scope": "eel2",
        "body": "MIDI_CountEvts(${1:MediaItem_Take take}, ${2:notecnt}, ${3:ccevtcnt}, ${4:textsyxevtcnt})$0",
        "description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item.\n\n"
    },
    "MIDI_DELETECC EEL2": {
        "prefix": "MIDI_DeleteCC",
        "scope": "eel2",
        "body": "MIDI_DeleteCC(${1:MediaItem_Take take}, ${2: int ccidx})$0",
        "description": "Delete a MIDI CC event.\n\n"
    },
    "MIDI_DELETEEVT EEL2": {
        "prefix": "MIDI_DeleteEvt",
        "scope": "eel2",
        "body": "MIDI_DeleteEvt(${1:MediaItem_Take take}, ${2: int evtidx})$0",
        "description": "Delete a MIDI event.\n\n"
    },
    "MIDI_DELETENOTE EEL2": {
        "prefix": "MIDI_DeleteNote",
        "scope": "eel2",
        "body": "MIDI_DeleteNote(${1:MediaItem_Take take}, ${2: int noteidx})$0",
        "description": "Delete a MIDI note.\n\n"
    },
    "MIDI_DELETETEXTSYSEXEVT EEL2": {
        "prefix": "MIDI_DeleteTextSysexEvt",
        "scope": "eel2",
        "body": "MIDI_DeleteTextSysexEvt(${1:MediaItem_Take take}, ${2: int textsyxevtidx})$0",
        "description": "Delete a MIDI text or sysex event.\n\n"
    },
    "MIDI_ENUMSELCC EEL2": {
        "prefix": "MIDI_EnumSelCC",
        "scope": "eel2",
        "body": "MIDI_EnumSelCC(${1:MediaItem_Take take}, ${2: int ccidx})$0",
        "description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).\n\n"
    },
    "MIDI_ENUMSELEVTS EEL2": {
        "prefix": "MIDI_EnumSelEvts",
        "scope": "eel2",
        "body": "MIDI_EnumSelEvts(${1:MediaItem_Take take}, ${2: int evtidx})$0",
        "description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).\n\n"
    },
    "MIDI_ENUMSELNOTES EEL2": {
        "prefix": "MIDI_EnumSelNotes",
        "scope": "eel2",
        "body": "MIDI_EnumSelNotes(${1:MediaItem_Take take}, ${2: int noteidx})$0",
        "description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).\n\n"
    },
    "MIDI_ENUMSELTEXTSYSEXEVTS EEL2": {
        "prefix": "MIDI_EnumSelTextSysexEvts",
        "scope": "eel2",
        "body": "MIDI_EnumSelTextSysexEvts(${1:MediaItem_Take take}, ${2: int textsyxidx})$0",
        "description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).\n\n"
    },
    "MIDI_GETALLEVTS EEL2": {
        "prefix": "MIDI_GetAllEvts",
        "scope": "eel2",
        "body": "MIDI_GetAllEvts(${1:MediaItem_Take take}, ${2:buf})$0",
        "description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: &1=selected &2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_SetAllEvts.\n\n"
    },
    "MIDI_GETCC EEL2": {
        "prefix": "MIDI_GetCC",
        "scope": "eel2",
        "body": "MIDI_GetCC(${1:MediaItem_Take take}, ${2: int ccidx}, ${3:selected}, ${4:muted}, ${5:ppqpos}, ${6:chanmsg}, ${7:chan}, ${8:msg2}, ${9:msg3})$0",
        "description": "Get MIDI CC event properties.\n\n"
    },
    "MIDI_GETEVT EEL2": {
        "prefix": "MIDI_GetEvt",
        "scope": "eel2",
        "body": "MIDI_GetEvt(${1:MediaItem_Take take}, ${2: int evtidx}, ${3:selected}, ${4:muted}, ${5:ppqpos}, ${6:msg})$0",
        "description": "Get MIDI event properties.\n\n"
    },
    "MIDI_GETGRID EEL2": {
        "prefix": "MIDI_GetGrid",
        "scope": "eel2",
        "body": "MIDI_GetGrid(${1:MediaItem_Take take}, ${2:swing}, ${3:noteLen})$0",
        "description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.\n\n"
    },
    "MIDI_GETHASH EEL2": {
        "prefix": "MIDI_GetHash",
        "scope": "eel2",
        "body": "MIDI_GetHash(${1:MediaItem_Take take}, ${2: bool notesonly}, ${3:hash})$0",
        "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash\n\n"
    },
    "MIDI_GETNOTE EEL2": {
        "prefix": "MIDI_GetNote",
        "scope": "eel2",
        "body": "MIDI_GetNote(${1:MediaItem_Take take}, ${2: int noteidx}, ${3:selected}, ${4:muted}, ${5:startppqpos}, ${6:endppqpos}, ${7:chan}, ${8:pitch}, ${9:vel})$0",
        "description": "Get MIDI note properties.\n\n"
    },
    "MIDI_GETPPQPOS_ENDOFMEASURE EEL2": {
        "prefix": "MIDI_GetPPQPos_EndOfMeasure",
        "scope": "eel2",
        "body": "MIDI_GetPPQPos_EndOfMeasure(${1:MediaItem_Take take}, ${2: ppqpos})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure.\n\n"
    },
    "MIDI_GETPPQPOS_STARTOFMEASURE EEL2": {
        "prefix": "MIDI_GetPPQPos_StartOfMeasure",
        "scope": "eel2",
        "body": "MIDI_GetPPQPos_StartOfMeasure(${1:MediaItem_Take take}, ${2: ppqpos})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure.\n\n"
    },
    "MIDI_GETPPQPOSFROMPROJQN EEL2": {
        "prefix": "MIDI_GetPPQPosFromProjQN",
        "scope": "eel2",
        "body": "MIDI_GetPPQPosFromProjQN(${1:MediaItem_Take take}, ${2: projqn})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.\n\n"
    },
    "MIDI_GETPPQPOSFROMPROJTIME EEL2": {
        "prefix": "MIDI_GetPPQPosFromProjTime",
        "scope": "eel2",
        "body": "MIDI_GetPPQPosFromProjTime(${1:MediaItem_Take take}, ${2: projtime})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.\n\n"
    },
    "MIDI_GETPROJQNFROMPPQPOS EEL2": {
        "prefix": "MIDI_GetProjQNFromPPQPos",
        "scope": "eel2",
        "body": "MIDI_GetProjQNFromPPQPos(${1:MediaItem_Take take}, ${2: ppqpos})$0",
        "description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.\n\n"
    },
    "MIDI_GETPROJTIMEFROMPPQPOS EEL2": {
        "prefix": "MIDI_GetProjTimeFromPPQPos",
        "scope": "eel2",
        "body": "MIDI_GetProjTimeFromPPQPos(${1:MediaItem_Take take}, ${2: ppqpos})$0",
        "description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.\n\n"
    },
    "MIDI_GETSCALE EEL2": {
        "prefix": "MIDI_GetScale",
        "scope": "eel2",
        "body": "MIDI_GetScale(${1:MediaItem_Take take}, ${2:root}, ${3:scale}, ${4:name})$0",
        "description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc.\n\n"
    },
    "MIDI_GETTEXTSYSEXEVT EEL2": {
        "prefix": "MIDI_GetTextSysexEvt",
        "scope": "eel2",
        "body": "MIDI_GetTextSysexEvt(${1:MediaItem_Take take}, ${2: int textsyxevtidx}, ${3:selected}, ${4:muted}, ${5:ppqpos}, ${6:type}, ${7:msg})$0",
        "description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.\n\n"
    },
    "MIDI_GETTRACKHASH EEL2": {
        "prefix": "MIDI_GetTrackHash",
        "scope": "eel2",
        "body": "MIDI_GetTrackHash(${1:MediaTrack track}, ${2: bool notesonly}, ${3:hash})$0",
        "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash\n\n"
    },
    "MIDI_INSERTCC EEL2": {
        "prefix": "MIDI_InsertCC",
        "scope": "eel2",
        "body": "MIDI_InsertCC(${1:MediaItem_Take take}, ${2: bool selected}, ${3: bool muted}, ${4: ppqpos}, ${5: int chanmsg}, ${6: int chan}, ${7: int msg2}, ${8: int msg3})$0",
        "description": "Insert a new MIDI CC event.\n\n"
    },
    "MIDI_INSERTEVT EEL2": {
        "prefix": "MIDI_InsertEvt",
        "scope": "eel2",
        "body": "MIDI_InsertEvt(${1:MediaItem_Take take}, ${2: bool selected}, ${3: bool muted}, ${4: ppqpos}, ${5: bytestr})$0",
        "description": "Insert a new MIDI event.\n\n"
    },
    "MIDI_INSERTNOTE EEL2": {
        "prefix": "MIDI_InsertNote",
        "scope": "eel2",
        "body": "MIDI_InsertNote(${1:MediaItem_Take take}, ${2: bool selected}, ${3: bool muted}, ${4: startppqpos}, ${5: endppqpos}, ${6: int chan}, ${7: int pitch}, ${8: int vel}, ${9: optional bool noSortIn})$0",
        "description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "MIDI_INSERTTEXTSYSEXEVT EEL2": {
        "prefix": "MIDI_InsertTextSysexEvt",
        "scope": "eel2",
        "body": "MIDI_InsertTextSysexEvt(${1:MediaItem_Take take}, ${2: bool selected}, ${3: bool muted}, ${4: ppqpos}, ${5: int type}, ${6: bytestr})$0",
        "description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.\n\n"
    },
    "MIDI_REINIT EEL2": {
        "prefix": "midi_reinit",
        "scope": "eel2",
        "body": "midi_reinit()$0",
        "description": "Reset all MIDI devices\n\n"
    },
    "MIDI_SELECTALL EEL2": {
        "prefix": "MIDI_SelectAll",
        "scope": "eel2",
        "body": "MIDI_SelectAll(${1:MediaItem_Take take}, ${2: bool select})$0",
        "description": "Select or deselect all MIDI content.\n\n"
    },
    "MIDI_SETALLEVTS EEL2": {
        "prefix": "MIDI_SetAllEvts",
        "scope": "eel2",
        "body": "MIDI_SetAllEvts(${1:MediaItem_Take take}, ${2: buf})$0",
        "description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: &1=selected &2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_GetAllEvts.\n\n"
    },
    "MIDI_SETCC EEL2": {
        "prefix": "MIDI_SetCC",
        "scope": "eel2",
        "body": "MIDI_SetCC(${1:MediaItem_Take take}, ${2: int ccidx}, ${3: optional bool selectedIn}, ${4: optional bool mutedIn}, ${5: optional ppqposIn}, ${6: optional int chanmsgIn}, ${7: optional int chanIn}, ${8: optional int msg2In}, ${9: optional int msg3In}, ${10: optional bool noSortIn})$0",
        "description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "MIDI_SETEVT EEL2": {
        "prefix": "MIDI_SetEvt",
        "scope": "eel2",
        "body": "MIDI_SetEvt(${1:MediaItem_Take take}, ${2: int evtidx}, ${3: optional bool selectedIn}, ${4: optional bool mutedIn}, ${5: optional ppqposIn}, ${6: optional msg}, ${7: optional bool noSortIn})$0",
        "description": "Set MIDI event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "MIDI_SETITEMEXTENTS EEL2": {
        "prefix": "MIDI_SetItemExtents",
        "scope": "eel2",
        "body": "MIDI_SetItemExtents(${1:MediaItem item}, ${2: startQN}, ${3: endQN})$0",
        "description": "Set the start/end positions of a media item that contains a MIDI take.\n\n"
    },
    "MIDI_SETNOTE EEL2": {
        "prefix": "MIDI_SetNote",
        "scope": "eel2",
        "body": "MIDI_SetNote(${1:MediaItem_Take take}, ${2: int noteidx}, ${3: optional bool selectedIn}, ${4: optional bool mutedIn}, ${5: optional startppqposIn}, ${6: optional endppqposIn}, ${7: optional int chanIn}, ${8: optional int pitchIn}, ${9: optional int velIn}, ${10: optional bool noSortIn})$0",
        "description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.\n\n"
    },
    "MIDI_SETTEXTSYSEXEVT EEL2": {
        "prefix": "MIDI_SetTextSysexEvt",
        "scope": "eel2",
        "body": "MIDI_SetTextSysexEvt(${1:MediaItem_Take take}, ${2: int textsyxevtidx}, ${3: optional bool selectedIn}, ${4: optional bool mutedIn}, ${5: optional ppqposIn}, ${6: optional int typeIn}, ${7: optional msg}, ${8: optional bool noSortIn})$0",
        "description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "MIDI_SORT EEL2": {
        "prefix": "MIDI_Sort",
        "scope": "eel2",
        "body": "MIDI_Sort(${1:MediaItem_Take take})$0",
        "description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.\n\n"
    },
    "MIDIEDITOR_GETACTIVE EEL2": {
        "prefix": "MIDIEditor_GetActive",
        "scope": "eel2",
        "body": "MIDIEditor_GetActive()$0",
        "description": "get a pointer to the focused MIDI editor window\n\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand\n\n"
    },
    "MIDIEDITOR_GETMODE EEL2": {
        "prefix": "MIDIEditor_GetMode",
        "scope": "eel2",
        "body": "MIDIEditor_GetMode(${1:HWND midieditor})$0",
        "description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\n\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand\n\n"
    },
    "MIDIEDITOR_GETSETTING_INT EEL2": {
        "prefix": "MIDIEditor_GetSetting_int",
        "scope": "eel2",
        "body": "MIDIEditor_GetSetting_int(${1:HWND midieditor}, ${2: setting_desc})$0",
        "description": "Get settings from a MIDI editor. setting_desc can be:\n\nsnap_enabled: returns 0 or 1\n\nactive_note_row: returns 0-127\n\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity\n\ndefault_note_vel: returns 0-127\n\ndefault_note_chan: returns 0-15\n\ndefault_note_len: returns default length in MIDI ticks\n\nscale_enabled: returns 0-1\n\nscale_root: returns 0-12 (0=C)\n\nif setting_desc is unsupported, the function returns -1.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_str\n\n"
    },
    "MIDIEDITOR_GETSETTING_STR EEL2": {
        "prefix": "MIDIEditor_GetSetting_str",
        "scope": "eel2",
        "body": "MIDIEditor_GetSetting_str(${1:HWND midieditor}, ${2: setting_desc}, ${3:buf})$0",
        "description": "Get settings from a MIDI editor. setting_desc can be:\n\nlast_clicked_cc_lane: returns text description (\"velocity\", \"pitch\", etc)\n\nscale: returns the scale record, for example \"102034050607\" for a major scale\n\nif setting_desc is unsupported, the function returns false.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int\n\n"
    },
    "MIDIEDITOR_GETTAKE EEL2": {
        "prefix": "MIDIEditor_GetTake",
        "scope": "eel2",
        "body": "MIDIEditor_GetTake(${1:HWND midieditor})$0",
        "description": "get the take that is currently being edited in this MIDI editor\n\n"
    },
    "MIDIEDITOR_LASTFOCUSED_ONCOMMAND EEL2": {
        "prefix": "MIDIEditor_LastFocused_OnCommand",
        "scope": "eel2",
        "body": "MIDIEditor_LastFocused_OnCommand(${1:int command_id}, ${2: bool islistviewcommand})$0",
        "description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\n\nsee MIDIEditor_OnCommand\n\n"
    },
    "MIDIEDITOR_ONCOMMAND EEL2": {
        "prefix": "MIDIEditor_OnCommand",
        "scope": "eel2",
        "body": "MIDIEditor_OnCommand(${1:HWND midieditor}, ${2: int command_id})$0",
        "description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\n\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand\n\n"
    },
    "MKPANSTR EEL2": {
        "prefix": "mkpanstr",
        "scope": "eel2",
        "body": "mkpanstr(${1:strNeed64}, ${2: pan})$0",
        "description": ""
    },
    "MKVOLPANSTR EEL2": {
        "prefix": "mkvolpanstr",
        "scope": "eel2",
        "body": "mkvolpanstr(${1:strNeed64}, ${2: vol}, ${3: pan})$0",
        "description": ""
    },
    "MKVOLSTR EEL2": {
        "prefix": "mkvolstr",
        "scope": "eel2",
        "body": "mkvolstr(${1:strNeed64}, ${2: vol})$0",
        "description": ""
    },
    "MOVEEDITCURSOR EEL2": {
        "prefix": "MoveEditCursor",
        "scope": "eel2",
        "body": "MoveEditCursor(${1:adjamt}, ${2: bool dosel})$0",
        "description": ""
    },
    "MOVEMEDIAITEMTOTRACK EEL2": {
        "prefix": "MoveMediaItemToTrack",
        "scope": "eel2",
        "body": "MoveMediaItemToTrack(${1:MediaItem item}, ${2: MediaTrack desttr})$0",
        "description": "returns TRUE if move succeeded\n\n"
    },
    "MUTEALLTRACKS EEL2": {
        "prefix": "MuteAllTracks",
        "scope": "eel2",
        "body": "MuteAllTracks(${1:bool mute})$0",
        "description": ""
    },
    "MY_GETVIEWPORT EEL2": {
        "prefix": "my_getViewport",
        "scope": "eel2",
        "body": "my_getViewport(${1:r.left}, ${2:r.top}, ${3:r.right}, ${4:r.bot}, ${5: int sr.left}, ${6: int sr.top}, ${7: int sr.right}, ${8: int sr.bot}, ${9: bool wantWorkArea})$0",
        "description": ""
    },
    "NAMEDCOMMANDLOOKUP EEL2": {
        "prefix": "NamedCommandLookup",
        "scope": "eel2",
        "body": "NamedCommandLookup(${1:\"command_name\"})$0",
        "description": "Get the command ID number for named command that was registered by an extension such as \"_SWS_ABOUT\" or \"_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a custom action.\n\n"
    },
    "ONPAUSEBUTTON EEL2": {
        "prefix": "OnPauseButton",
        "scope": "eel2",
        "body": "OnPauseButton()$0",
        "description": "direct way to simulate pause button hit\n\n"
    },
    "ONPAUSEBUTTONEX EEL2": {
        "prefix": "OnPauseButtonEx",
        "scope": "eel2",
        "body": "OnPauseButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate pause button hit\n\n"
    },
    "ONPLAYBUTTON EEL2": {
        "prefix": "OnPlayButton",
        "scope": "eel2",
        "body": "OnPlayButton()$0",
        "description": "direct way to simulate play button hit\n\n"
    },
    "ONPLAYBUTTONEX EEL2": {
        "prefix": "OnPlayButtonEx",
        "scope": "eel2",
        "body": "OnPlayButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate play button hit\n\n"
    },
    "ONSTOPBUTTON EEL2": {
        "prefix": "OnStopButton",
        "scope": "eel2",
        "body": "OnStopButton()$0",
        "description": "direct way to simulate stop button hit\n\n"
    },
    "ONSTOPBUTTONEX EEL2": {
        "prefix": "OnStopButtonEx",
        "scope": "eel2",
        "body": "OnStopButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate stop button hit\n\n"
    },
    "OPENCOLORTHEMEFILE EEL2": {
        "prefix": "OpenColorThemeFile",
        "scope": "eel2",
        "body": "OpenColorThemeFile(${1:\"fn\"})$0",
        "description": ""
    },
    "OPENMEDIAEXPLORER EEL2": {
        "prefix": "OpenMediaExplorer",
        "scope": "eel2",
        "body": "OpenMediaExplorer(${1:\"mediafn\"}, ${2: bool play})$0",
        "description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it.\n\n"
    },
    "OSCLOCALMESSAGETOHOST EEL2": {
        "prefix": "OscLocalMessageToHost",
        "scope": "eel2",
        "body": "OscLocalMessageToHost(${1:\"message\"}, ${2: optional valueIn})$0",
        "description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns. Only supported if control surface support was enabled when installing REAPER.\n\n"
    },
    "PARSE_TIMESTR EEL2": {
        "prefix": "parse_timestr",
        "scope": "eel2",
        "body": "parse_timestr(${1:\"buf\"})$0",
        "description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.\n\n"
    },
    "PARSE_TIMESTR_LEN EEL2": {
        "prefix": "parse_timestr_len",
        "scope": "eel2",
        "body": "parse_timestr_len(${1:\"buf\"}, ${2: offset}, ${3: int modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "PARSE_TIMESTR_POS EEL2": {
        "prefix": "parse_timestr_pos",
        "scope": "eel2",
        "body": "parse_timestr_pos(${1:\"buf\"}, ${2: int modeoverride})$0",
        "description": "Parse time string, time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "PARSEPANSTR EEL2": {
        "prefix": "parsepanstr",
        "scope": "eel2",
        "body": "parsepanstr(${1:\"str\"})$0",
        "description": ""
    },
    "PCM_SINK_ENUM EEL2": {
        "prefix": "PCM_Sink_Enum",
        "scope": "eel2",
        "body": "PCM_Sink_Enum(${1:int idx}, ${2:descstr})$0",
        "description": ""
    },
    "PCM_SINK_GETEXTENSION EEL2": {
        "prefix": "PCM_Sink_GetExtension",
        "scope": "eel2",
        "body": "PCM_Sink_GetExtension(${1:retval}, ${2: data})$0",
        "description": ""
    },
    "PCM_SINK_SHOWCONFIG EEL2": {
        "prefix": "PCM_Sink_ShowConfig",
        "scope": "eel2",
        "body": "PCM_Sink_ShowConfig(${1:\"cfg\"}, ${2: HWND hwndParent})$0",
        "description": ""
    },
    "PCM_SOURCE_CREATEFROMFILE EEL2": {
        "prefix": "PCM_Source_CreateFromFile",
        "scope": "eel2",
        "body": "PCM_Source_CreateFromFile(${1:\"filename\"})$0",
        "description": "See PCM_Source_CreateFromFileEx.\n\n"
    },
    "PCM_SOURCE_CREATEFROMFILEEX EEL2": {
        "prefix": "PCM_Source_CreateFromFileEx",
        "scope": "eel2",
        "body": "PCM_Source_CreateFromFileEx(${1:\"filename\"}, ${2: bool forcenoMidiImp})$0",
        "description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.\n\n"
    },
    "PCM_SOURCE_CREATEFROMTYPE EEL2": {
        "prefix": "PCM_Source_CreateFromType",
        "scope": "eel2",
        "body": "PCM_Source_CreateFromType(${1:\"sourcetype\"})$0",
        "description": "Create a PCM_source from a \"type\" (use this if you're going to load its state via LoadState/ProjectStateContext).\n\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well.\n\n"
    },
    "PCM_SOURCE_DESTROY EEL2": {
        "prefix": "PCM_Source_Destroy",
        "scope": "eel2",
        "body": "PCM_Source_Destroy(${1:PCM_source src})$0",
        "description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source\n\n"
    },
    "PCM_SOURCE_GETPEAKS EEL2": {
        "prefix": "PCM_Source_GetPeaks",
        "scope": "eel2",
        "body": "PCM_Source_GetPeaks(${1:PCM_source src}, ${2: peakrate}, ${3: starttime}, ${4: int numchannels}, ${5: int numsamplesperchannel}, ${6: int want_extra_type}, ${7: buffer_ptr buf})$0",
        "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
    },
    "PCM_SOURCE_GETSECTIONINFO EEL2": {
        "prefix": "PCM_Source_GetSectionInfo",
        "scope": "eel2",
        "body": "PCM_Source_GetSectionInfo(${1:PCM_source src}, ${2:offs}, ${3:len}, ${4:rev})$0",
        "description": "If a section/reverse block, retrieves offset/len/reverse. return true if success\n\n"
    },
    "PLUGINWANTSALWAYSRUNFX EEL2": {
        "prefix": "PluginWantsAlwaysRunFx",
        "scope": "eel2",
        "body": "PluginWantsAlwaysRunFx(${1:int amt})$0",
        "description": ""
    },
    "PREVENTUIREFRESH EEL2": {
        "prefix": "PreventUIRefresh",
        "scope": "eel2",
        "body": "PreventUIRefresh(${1:int prevent_count})$0",
        "description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur\n\n"
    },
    "REASCRIPTERROR EEL2": {
        "prefix": "ReaScriptError",
        "scope": "eel2",
        "body": "ReaScriptError(${1:\"errmsg\"})$0",
        "description": "Causes REAPER to display the error message after the current ReaScript finishes.\n\n"
    },
    "RECURSIVECREATEDIRECTORY EEL2": {
        "prefix": "RecursiveCreateDirectory",
        "scope": "eel2",
        "body": "RecursiveCreateDirectory(${1:\"path\"}, ${2: size_t ignored})$0",
        "description": "returns positive value on success, 0 on failure.\n\n"
    },
    "REFRESHTOOLBAR EEL2": {
        "prefix": "RefreshToolbar",
        "scope": "eel2",
        "body": "RefreshToolbar(${1:int command_id})$0",
        "description": "See RefreshToolbar2.\n\n"
    },
    "REFRESHTOOLBAR2 EEL2": {
        "prefix": "RefreshToolbar2",
        "scope": "eel2",
        "body": "RefreshToolbar2(${1:int section_id}, ${2: int command_id})$0",
        "description": "Refresh the toolbar button states of a toggle action.\n\n"
    },
    "RELATIVE_FN EEL2": {
        "prefix": "relative_fn",
        "scope": "eel2",
        "body": "relative_fn(${1:\"in\"}, ${2:out})$0",
        "description": "Makes a filename \"in\" relative to the current project, if any.\n\n"
    },
    "REMOVETRACKSEND EEL2": {
        "prefix": "RemoveTrackSend",
        "scope": "eel2",
        "body": "RemoveTrackSend(${1:MediaTrack tr}, ${2: int category}, ${3: int sendidx})$0",
        "description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.\n\n"
    },
    "RENDERFILESECTION EEL2": {
        "prefix": "RenderFileSection",
        "scope": "eel2",
        "body": "RenderFileSection(${1:\"source_filename\"}, ${2: target_filename}, ${3: start_percent}, ${4: end_percent}, ${5: playrate})$0",
        "description": "Not available while playing back.\n\n"
    },
    "REORDERSELECTEDTRACKS EEL2": {
        "prefix": "ReorderSelectedTracks",
        "scope": "eel2",
        "body": "ReorderSelectedTracks(${1:int beforeTrackIdx}, ${2: int makePrevFolder})$0",
        "description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder\n\n"
    },
    "RESAMPLE_ENUMMODES EEL2": {
        "prefix": "Resample_EnumModes",
        "scope": "eel2",
        "body": "Resample_EnumModes(${1:retval}, ${2: int mode})$0",
        "description": ""
    },
    "RESOLVE_FN EEL2": {
        "prefix": "resolve_fn",
        "scope": "eel2",
        "body": "resolve_fn(${1:\"in\"}, ${2:out})$0",
        "description": "See resolve_fn2.\n\n"
    },
    "RESOLVE_FN2 EEL2": {
        "prefix": "resolve_fn2",
        "scope": "eel2",
        "body": "resolve_fn2(${1:\"in\"}, ${2:out}, ${3: optional checkSubDir})$0",
        "description": "Resolves a filename \"in\" by using project settings etc. If no file found, out will be a copy of in.\n\n"
    },
    "REVERSENAMEDCOMMANDLOOKUP EEL2": {
        "prefix": "ReverseNamedCommandLookup",
        "scope": "eel2",
        "body": "ReverseNamedCommandLookup(${1:retval}, ${2: int command_id})$0",
        "description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action.\n\n"
    },
    "SCALEFROMENVELOPEMODE EEL2": {
        "prefix": "ScaleFromEnvelopeMode",
        "scope": "eel2",
        "body": "ScaleFromEnvelopeMode(${1:int scaling_mode}, ${2: val})$0",
        "description": "See GetEnvelopeScalingMode.\n\n"
    },
    "SCALETOENVELOPEMODE EEL2": {
        "prefix": "ScaleToEnvelopeMode",
        "scope": "eel2",
        "body": "ScaleToEnvelopeMode(${1:int scaling_mode}, ${2: val})$0",
        "description": "See GetEnvelopeScalingMode.\n\n"
    },
    "SELECTALLMEDIAITEMS EEL2": {
        "prefix": "SelectAllMediaItems",
        "scope": "eel2",
        "body": "SelectAllMediaItems(${1:ReaProject proj}, ${2: bool selected})$0",
        "description": ""
    },
    "SELECTPROJECTINSTANCE EEL2": {
        "prefix": "SelectProjectInstance",
        "scope": "eel2",
        "body": "SelectProjectInstance(${1:ReaProject proj})$0",
        "description": ""
    },
    "SETACTIVETAKE EEL2": {
        "prefix": "SetActiveTake",
        "scope": "eel2",
        "body": "SetActiveTake(${1:MediaItem_Take take})$0",
        "description": "set this take active in this media item\n\n"
    },
    "SETAUTOMATIONMODE EEL2": {
        "prefix": "SetAutomationMode",
        "scope": "eel2",
        "body": "SetAutomationMode(${1:int mode}, ${2: bool onlySel})$0",
        "description": "sets all or selected tracks to mode.\n\n"
    },
    "SETCURRENTBPM EEL2": {
        "prefix": "SetCurrentBPM",
        "scope": "eel2",
        "body": "SetCurrentBPM(${1:ReaProject __proj}, ${2: bpm}, ${3: bool wantUndo})$0",
        "description": "set current BPM in project, set wantUndo=true to add undo point\n\n"
    },
    "SETCURSORCONTEXT EEL2": {
        "prefix": "SetCursorContext",
        "scope": "eel2",
        "body": "SetCursorContext(${1:int mode}, ${2: TrackEnvelope envIn})$0",
        "description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)\n\n"
    },
    "SETEDITCURPOS EEL2": {
        "prefix": "SetEditCurPos",
        "scope": "eel2",
        "body": "SetEditCurPos(${1:time}, ${2: bool moveview}, ${3: bool seekplay})$0",
        "description": ""
    },
    "SETEDITCURPOS2 EEL2": {
        "prefix": "SetEditCurPos2",
        "scope": "eel2",
        "body": "SetEditCurPos2(${1:ReaProject proj}, ${2: time}, ${3: bool moveview}, ${4: bool seekplay})$0",
        "description": ""
    },
    "SETENVELOPEPOINT EEL2": {
        "prefix": "SetEnvelopePoint",
        "scope": "eel2",
        "body": "SetEnvelopePoint(${1:TrackEnvelope envelope}, ${2: int ptidx}, ${3: optional timeIn}, ${4: optional valueIn}, ${5: optional int shapeIn}, ${6: optional tensionIn}, ${7: optional bool selectedIn}, ${8: optional bool noSortIn})$0",
        "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "SETENVELOPEPOINTEX EEL2": {
        "prefix": "SetEnvelopePointEx",
        "scope": "eel2",
        "body": "SetEnvelopePointEx(${1:TrackEnvelope envelope}, ${2: int autoitem_idx}, ${3: int ptidx}, ${4: optional timeIn}, ${5: optional valueIn}, ${6: optional int shapeIn}, ${7: optional tensionIn}, ${8: optional bool selectedIn}, ${9: optional bool noSortIn})$0",
        "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. Tautoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "SETENVELOPESTATECHUNK EEL2": {
        "prefix": "SetEnvelopeStateChunk",
        "scope": "eel2",
        "body": "SetEnvelopeStateChunk(${1:TrackEnvelope env}, ${2: str}, ${3: bool isundo})$0",
        "description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "SETEXTSTATE EEL2": {
        "prefix": "SetExtState",
        "scope": "eel2",
        "body": "SetExtState(${1:\"section\"}, ${2: key}, ${3: value}, ${4: bool persist})$0",
        "description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState.\n\n"
    },
    "SETGLOBALAUTOMATIONOVERRIDE EEL2": {
        "prefix": "SetGlobalAutomationOverride",
        "scope": "eel2",
        "body": "SetGlobalAutomationOverride(${1:int mode})$0",
        "description": "mode: see GetGlobalAutomationOverride\n\n"
    },
    "SETITEMSTATECHUNK EEL2": {
        "prefix": "SetItemStateChunk",
        "scope": "eel2",
        "body": "SetItemStateChunk(${1:MediaItem item}, ${2: str}, ${3: bool isundo})$0",
        "description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "SETMASTERTRACKVISIBILITY EEL2": {
        "prefix": "SetMasterTrackVisibility",
        "scope": "eel2",
        "body": "SetMasterTrackVisibility(${1:int flag})$0",
        "description": "set &1 to show the master track in the TCP, &2 to show in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.\n\n"
    },
    "SETMEDIAITEMINFO_VALUE EEL2": {
        "prefix": "SetMediaItemInfo_Value",
        "scope": "eel2",
        "body": "SetMediaItemInfo_Value(${1:MediaItem item}, ${2: parmname}, ${3: newvalue})$0",
        "description": "Set media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (&1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)\n\n"
    },
    "SETMEDIAITEMLENGTH EEL2": {
        "prefix": "SetMediaItemLength",
        "scope": "eel2",
        "body": "SetMediaItemLength(${1:MediaItem item}, ${2: length}, ${3: bool refreshUI})$0",
        "description": "Redraws the screen only if refreshUI == true.\n\n"
    },
    "UPDATEARRANGE EEL2": {
        "prefix": "UpdateArrange",
        "scope": "eel2",
        "body": "UpdateArrange()$0",
        "description": "Redraw the arrange view\n\n"
    },
    "SETMEDIAITEMPOSITION EEL2": {
        "prefix": "SetMediaItemPosition",
        "scope": "eel2",
        "body": "SetMediaItemPosition(${1:MediaItem item}, ${2: position}, ${3: bool refreshUI})$0",
        "description": "Redraws the screen only if refreshUI == true.\n\n"
    },
    "SETMEDIAITEMSELECTED EEL2": {
        "prefix": "SetMediaItemSelected",
        "scope": "eel2",
        "body": "SetMediaItemSelected(${1:MediaItem item}, ${2: bool selected})$0",
        "description": ""
    },
    "SETMEDIAITEMTAKE_SOURCE EEL2": {
        "prefix": "SetMediaItemTake_Source",
        "scope": "eel2",
        "body": "SetMediaItemTake_Source(${1:MediaItem_Take take}, ${2: PCM_source source})$0",
        "description": "Set media source of media item take\n\n"
    },
    "SETMEDIAITEMTAKEINFO_VALUE EEL2": {
        "prefix": "SetMediaItemTakeInfo_Value",
        "scope": "eel2",
        "body": "SetMediaItemTakeInfo_Value(${1:MediaItem_Take take}, ${2: parmname}, ${3: newvalue})$0",
        "description": "Set media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)\n\n"
    },
    "SETMEDIATRACKINFO_VALUE EEL2": {
        "prefix": "SetMediaTrackInfo_Value",
        "scope": "eel2",
        "body": "SetMediaTrackInfo_Value(${1:MediaTrack tr}, ${2: parmname}, ${3: newvalue})$0",
        "description": "Set track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (&1=no media buffering, &2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)\n\n"
    },
    "SETMIDIEDITORGRID EEL2": {
        "prefix": "SetMIDIEditorGrid",
        "scope": "eel2",
        "body": "SetMIDIEditorGrid(${1:ReaProject project}, ${2: division})$0",
        "description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.\n\n"
    },
    "SETMIXERSCROLL EEL2": {
        "prefix": "SetMixerScroll",
        "scope": "eel2",
        "body": "SetMixerScroll(${1:MediaTrack leftmosttrack})$0",
        "description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.\n\n"
    },
    "SETMOUSEMODIFIER EEL2": {
        "prefix": "SetMouseModifier",
        "scope": "eel2",
        "body": "SetMouseModifier(${1:\"context\"}, ${2: int modifier_flag}, ${3: action})$0",
        "description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\nContext is a string like \"MM_CTX_ITEM\". Find these strings by modifying an assignment in \n\nPreferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\n\nFor left-click and double-click contexts, the action can be any built-in command ID number\n\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n\n(enable \"show action IDs\" in the context menu), and find custom action ID strings in reaper-kb.ini.\n\nFor built-in mouse modifier behaviors, find action IDs (which will be low numbers)\n\nby modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nAssigning an action of -1 will reset that mouse modifier behavior to factory default.\n\nSee GetMouseModifier.\n\n"
    },
    "SETONLYTRACKSELECTED EEL2": {
        "prefix": "SetOnlyTrackSelected",
        "scope": "eel2",
        "body": "SetOnlyTrackSelected(${1:MediaTrack track})$0",
        "description": "Set exactly one track selected, deselect all others\n\n"
    },
    "SETPROJECTGRID EEL2": {
        "prefix": "SetProjectGrid",
        "scope": "eel2",
        "body": "SetProjectGrid(${1:ReaProject project}, ${2: division})$0",
        "description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.\n\n"
    },
    "SETPROJECTMARKER EEL2": {
        "prefix": "SetProjectMarker",
        "scope": "eel2",
        "body": "SetProjectMarker(${1:int markrgnindexnumber}, ${2: bool isrgn}, ${3: pos}, ${4: rgnend}, ${5: name})$0",
        "description": ""
    },
    "SETPROJECTMARKER2 EEL2": {
        "prefix": "SetProjectMarker2",
        "scope": "eel2",
        "body": "SetProjectMarker2(${1:ReaProject proj}, ${2: int markrgnindexnumber}, ${3: bool isrgn}, ${4: pos}, ${5: rgnend}, ${6: name})$0",
        "description": ""
    },
    "SETPROJECTMARKER3 EEL2": {
        "prefix": "SetProjectMarker3",
        "scope": "eel2",
        "body": "SetProjectMarker3(${1:ReaProject proj}, ${2: int markrgnindexnumber}, ${3: bool isrgn}, ${4: pos}, ${5: rgnend}, ${6: name}, ${7: int color})$0",
        "description": ""
    },
    "SETPROJECTMARKER4 EEL2": {
        "prefix": "SetProjectMarker4",
        "scope": "eel2",
        "body": "SetProjectMarker4(${1:ReaProject proj}, ${2: int markrgnindexnumber}, ${3: bool isrgn}, ${4: pos}, ${5: rgnend}, ${6: name}, ${7: int color}, ${8: int flags})$0",
        "description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name\n\n"
    },
    "SETPROJECTMARKERBYINDEX EEL2": {
        "prefix": "SetProjectMarkerByIndex",
        "scope": "eel2",
        "body": "SetProjectMarkerByIndex(${1:ReaProject proj}, ${2: int markrgnidx}, ${3: bool isrgn}, ${4: pos}, ${5: rgnend}, ${6: int IDnumber}, ${7: name}, ${8: int color})$0",
        "description": "See SetProjectMarkerByIndex2.\n\n"
    },
    "SETPROJECTMARKERBYINDEX2 EEL2": {
        "prefix": "SetProjectMarkerByIndex2",
        "scope": "eel2",
        "body": "SetProjectMarkerByIndex2(${1:ReaProject proj}, ${2: int markrgnidx}, ${3: bool isrgn}, ${4: pos}, ${5: rgnend}, ${6: int IDnumber}, ${7: name}, ${8: int color}, ${9: int flags})$0",
        "description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&1 to clear name.\n\n"
    },
    "SETPROJEXTSTATE EEL2": {
        "prefix": "SetProjExtState",
        "scope": "eel2",
        "body": "SetProjExtState(${1:ReaProject proj}, ${2: extname}, ${3: key}, ${4: value})$0",
        "description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or \"\", all extended data for that extname will be deleted. If val is NULL or \"\", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState.\n\n"
    },
    "SETREGIONRENDERMATRIX EEL2": {
        "prefix": "SetRegionRenderMatrix",
        "scope": "eel2",
        "body": "SetRegionRenderMatrix(${1:ReaProject proj}, ${2: int regionindex}, ${3: MediaTrack track}, ${4: int addorremove})$0",
        "description": "Add (addorremove > 0) or remove (addorremove < 0) a track from this region when using the region render matrix.\n\n"
    },
    "SETTAKESTRETCHMARKER EEL2": {
        "prefix": "SetTakeStretchMarker",
        "scope": "eel2",
        "body": "SetTakeStretchMarker(${1:MediaItem_Take take}, ${2: int idx}, ${3: pos}, ${4: optional srcposIn})$0",
        "description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).\n\n"
    },
    "SETTAKESTRETCHMARKERSLOPE EEL2": {
        "prefix": "SetTakeStretchMarkerSlope",
        "scope": "eel2",
        "body": "SetTakeStretchMarkerSlope(${1:MediaItem_Take take}, ${2: int idx}, ${3: slope})$0",
        "description": "See GetTakeStretchMarkerSlope\n\n"
    },
    "SETTEMPOTIMESIGMARKER EEL2": {
        "prefix": "SetTempoTimeSigMarker",
        "scope": "eel2",
        "body": "SetTempoTimeSigMarker(${1:ReaProject proj}, ${2: int ptidx}, ${3: timepos}, ${4: int measurepos}, ${5: beatpos}, ${6: bpm}, ${7: int timesig_num}, ${8: int timesig_denom}, ${9: bool lineartempo})$0",
        "description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "SETTOGGLECOMMANDSTATE EEL2": {
        "prefix": "SetToggleCommandState",
        "scope": "eel2",
        "body": "SetToggleCommandState(${1:int section_id}, ${2: int command_id}, ${3: int state})$0",
        "description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.\n\n"
    },
    "SETTRACKAUTOMATIONMODE EEL2": {
        "prefix": "SetTrackAutomationMode",
        "scope": "eel2",
        "body": "SetTrackAutomationMode(${1:MediaTrack tr}, ${2: int mode})$0",
        "description": ""
    },
    "SETTRACKCOLOR EEL2": {
        "prefix": "SetTrackColor",
        "scope": "eel2",
        "body": "SetTrackColor(${1:MediaTrack track}, ${2: int color})$0",
        "description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b).\n\n"
    },
    "SETTRACKMIDILYRICS EEL2": {
        "prefix": "SetTrackMIDILyrics",
        "scope": "eel2",
        "body": "SetTrackMIDILyrics(${1:MediaTrack track}, ${2: int flag}, ${3: str})$0",
        "description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t\u0002.1.1\\tLyric for measure 2 beat 1\t\"). See GetTrackMIDILyrics\n\n"
    },
    "SETTRACKMIDINOTENAME EEL2": {
        "prefix": "SetTrackMIDINoteName",
        "scope": "eel2",
        "body": "SetTrackMIDINoteName(${1:int track}, ${2: int pitch}, ${3: int chan}, ${4: name})$0",
        "description": "channel < 0 assigns these note names to all channels.\n\n"
    },
    "SETTRACKMIDINOTENAMEEX EEL2": {
        "prefix": "SetTrackMIDINoteNameEx",
        "scope": "eel2",
        "body": "SetTrackMIDINoteNameEx(${1:ReaProject proj}, ${2: MediaTrack track}, ${3: int pitch}, ${4: int chan}, ${5: name})$0",
        "description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.\n\n"
    },
    "SETTRACKSELECTED EEL2": {
        "prefix": "SetTrackSelected",
        "scope": "eel2",
        "body": "SetTrackSelected(${1:MediaTrack track}, ${2: bool selected})$0",
        "description": ""
    },
    "SETTRACKSENDINFO_VALUE EEL2": {
        "prefix": "SetTrackSendInfo_Value",
        "scope": "eel2",
        "body": "SetTrackSendInfo_Value(${1:MediaTrack tr}, ${2: int category}, ${3: int sendidx}, ${4: parmname}, ${5: newvalue})$0",
        "description": "Set send/receive/hardware output numerical-value attributes, return true on success.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,&1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\n\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
    },
    "SETTRACKSENDUIPAN EEL2": {
        "prefix": "SetTrackSendUIPan",
        "scope": "eel2",
        "body": "SetTrackSendUIPan(${1:MediaTrack track}, ${2: int send_idx}, ${3: pan}, ${4: int isend})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
    },
    "SETTRACKSENDUIVOL EEL2": {
        "prefix": "SetTrackSendUIVol",
        "scope": "eel2",
        "body": "SetTrackSendUIVol(${1:MediaTrack track}, ${2: int send_idx}, ${3: vol}, ${4: int isend})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
    },
    "SETTRACKSTATECHUNK EEL2": {
        "prefix": "SetTrackStateChunk",
        "scope": "eel2",
        "body": "SetTrackStateChunk(${1:MediaTrack track}, ${2: str}, ${3: bool isundo})$0",
        "description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "SHOWACTIONLIST EEL2": {
        "prefix": "ShowActionList",
        "scope": "eel2",
        "body": "ShowActionList(${1:KbdSectionInfo caller}, ${2: HWND callerWnd})$0",
        "description": ""
    },
    "SHOWCONSOLEMSG EEL2": {
        "prefix": "ShowConsoleMsg",
        "scope": "eel2",
        "body": "ShowConsoleMsg(${1:\"msg\"})$0",
        "description": "Show a message to the user (also useful for debugging). Send \"\\n\" for newline, \"\" to clear the console. See ClearConsole\n\n"
    },
    "SHOWMESSAGEBOX EEL2": {
        "prefix": "ShowMessageBox",
        "scope": "eel2",
        "body": "ShowMessageBox(${1:\"msg\"}, ${2: title}, ${3: int type})$0",
        "description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\nShowPopupMenu(\"name\", int x, int y, HWND hwndParent, void* ctx, int ctx2, int ctx3)\n\nshows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)\n\n"
    },
    "SLIDER2DB EEL2": {
        "prefix": "SLIDER2DB",
        "scope": "eel2",
        "body": "SLIDER2DB(${1:y})$0",
        "description": ""
    },
    "SNAPTOGRID EEL2": {
        "prefix": "SnapToGrid",
        "scope": "eel2",
        "body": "SnapToGrid(${1:ReaProject project}, ${2: time_pos})$0",
        "description": ""
    },
    "SOLOALLTRACKS EEL2": {
        "prefix": "SoloAllTracks",
        "scope": "eel2",
        "body": "SoloAllTracks(${1:int solo})$0",
        "description": "solo=2 for SIP\n\n"
    },
    "SPLASH_GETWND EEL2": {
        "prefix": "Splash_GetWnd",
        "scope": "eel2",
        "body": "Splash_GetWnd()$0",
        "description": "gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed.\n\n"
    },
    "SPLITMEDIAITEM EEL2": {
        "prefix": "SplitMediaItem",
        "scope": "eel2",
        "body": "SplitMediaItem(${1:MediaItem item}, ${2: position})$0",
        "description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)\n\n"
    },
    "STRINGTOGUID EEL2": {
        "prefix": "stringToGuid",
        "scope": "eel2",
        "body": "stringToGuid(${1:\"str\"}, ${2:gGUID})$0",
        "description": ""
    },
    "STUFFMIDIMESSAGE EEL2": {
        "prefix": "StuffMIDIMessage",
        "scope": "eel2",
        "body": "StuffMIDIMessage(${1:int mode}, ${2: int msg1}, ${3: int msg2}, ${4: int msg3})$0",
        "description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.\n\n"
    },
    "TAKEFX_ADDBYNAME EEL2": {
        "prefix": "TakeFX_AddByName",
        "scope": "eel2",
        "body": "TakeFX_AddByName(${1:MediaItem_Take take}, ${2: fxname}, ${3: int instantiate})$0",
        "description": "Adds or queries the position of a named FX in a take. Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found.\n\n"
    },
    "TAKEFX_ENDPARAMEDIT EEL2": {
        "prefix": "TakeFX_EndParamEdit",
        "scope": "eel2",
        "body": "TakeFX_EndParamEdit(${1:MediaItem_Take take}, ${2: int fx}, ${3: int param})$0",
        "description": ""
    },
    "TAKEFX_FORMATPARAMVALUE EEL2": {
        "prefix": "TakeFX_FormatParamValue",
        "scope": "eel2",
        "body": "TakeFX_FormatParamValue(${1:MediaItem_Take take}, ${2: int fx}, ${3: int param}, ${4: val}, ${5:buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "TAKEFX_FORMATPARAMVALUENORMALIZED EEL2": {
        "prefix": "TakeFX_FormatParamValueNormalized",
        "scope": "eel2",
        "body": "TakeFX_FormatParamValueNormalized(${1:MediaItem_Take take}, ${2: int fx}, ${3: int param}, ${4: value}, ${5:buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "TAKEFX_GETCHAINVISIBLE EEL2": {
        "prefix": "TakeFX_GetChainVisible",
        "scope": "eel2",
        "body": "TakeFX_GetChainVisible(${1:MediaItem_Take take})$0",
        "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "TAKEFX_GETCOUNT EEL2": {
        "prefix": "TakeFX_GetCount",
        "scope": "eel2",
        "body": "TakeFX_GetCount(${1:MediaItem_Take take})$0",
        "description": ""
    },
    "TAKEFX_GETENABLED EEL2": {
        "prefix": "TakeFX_GetEnabled",
        "scope": "eel2",
        "body": "TakeFX_GetEnabled(${1:MediaItem_Take take}, ${2: int fx})$0",
        "description": "See TakeFX_SetEnabled\n\n"
    },
    "TAKEFX_GETENVELOPE EEL2": {
        "prefix": "TakeFX_GetEnvelope",
        "scope": "eel2",
        "body": "TakeFX_GetEnvelope(${1:MediaItem_Take take}, ${2: int fxindex}, ${3: int parameterindex}, ${4: bool create})$0",
        "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
    },
    "TAKEFX_GETFLOATINGWINDOW EEL2": {
        "prefix": "TakeFX_GetFloatingWindow",
        "scope": "eel2",
        "body": "TakeFX_GetFloatingWindow(${1:MediaItem_Take take}, ${2: int index})$0",
        "description": "returns HWND of floating window for effect index, if any\n\n"
    },
    "TAKEFX_GETFORMATTEDPARAMVALUE EEL2": {
        "prefix": "TakeFX_GetFormattedParamValue",
        "scope": "eel2",
        "body": "TakeFX_GetFormattedParamValue(${1:MediaItem_Take take}, ${2: int fx}, ${3: int param}, ${4:buf})$0",
        "description": ""
    },
    "TAKEFX_GETFXGUID EEL2": {
        "prefix": "TakeFX_GetFXGUID",
        "scope": "eel2",
        "body": "TakeFX_GetFXGUID(${1:retguid}, ${2: MediaItem_Take take}, ${3: int fx})$0",
        "description": ""
    },
    "TAKEFX_GETFXNAME EEL2": {
        "prefix": "TakeFX_GetFXName",
        "scope": "eel2",
        "body": "TakeFX_GetFXName(${1:MediaItem_Take take}, ${2: int fx}, ${3:buf})$0",
        "description": ""
    },
    "TAKEFX_GETIOSIZE EEL2": {
        "prefix": "TakeFX_GetIOSize",
        "scope": "eel2",
        "body": "TakeFX_GetIOSize(${1:MediaItem_Take take}, ${2: int fx}, ${3:inputPins}, ${4:outputPins})$0",
        "description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
    },
    "TAKEFX_GETNAMEDCONFIGPARM EEL2": {
        "prefix": "TakeFX_GetNamedConfigParm",
        "scope": "eel2",
        "body": "TakeFX_GetNamedConfigParm(${1:MediaItem_Take take}, ${2: int fx}, ${3: parmname}, ${4:buf})$0",
        "description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm\n\n"
    },
    "TAKEFX_GETNUMPARAMS EEL2": {
        "prefix": "TakeFX_GetNumParams",
        "scope": "eel2",
        "body": "TakeFX_GetNumParams(${1:MediaItem_Take take}, ${2: int fx})$0",
        "description": ""
    },
    "TAKEFX_GETOPEN EEL2": {
        "prefix": "TakeFX_GetOpen",
        "scope": "eel2",
        "body": "TakeFX_GetOpen(${1:MediaItem_Take take}, ${2: int fx})$0",
        "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen\n\n"
    },
    "TAKEFX_GETPARAM EEL2": {
        "prefix": "TakeFX_GetParam",
        "scope": "eel2",
        "body": "TakeFX_GetParam(${1:MediaItem_Take take}, ${2: int fx}, ${3: int param}, ${4:minval}, ${5:maxval})$0",
        "description": ""
    },
    "TAKEFX_GETPARAMETERSTEPSIZES EEL2": {
        "prefix": "TakeFX_GetParameterStepSizes",
        "scope": "eel2",
        "body": "TakeFX_GetParameterStepSizes(${1:MediaItem_Take take}, ${2: int fx}, ${3: int param}, ${4:step}, ${5:smallstep}, ${6:largestep}, ${7:istoggle})$0",
        "description": ""
    },
    "TAKEFX_GETPARAMEX EEL2": {
        "prefix": "TakeFX_GetParamEx",
        "scope": "eel2",
        "body": "TakeFX_GetParamEx(${1:MediaItem_Take take}, ${2: int fx}, ${3: int param}, ${4:minval}, ${5:maxval}, ${6:midval})$0",
        "description": ""
    },
    "TAKEFX_GETPARAMNAME EEL2": {
        "prefix": "TakeFX_GetParamName",
        "scope": "eel2",
        "body": "TakeFX_GetParamName(${1:MediaItem_Take take}, ${2: int fx}, ${3: int param}, ${4:buf})$0",
        "description": ""
    },
    "TAKEFX_GETPARAMNORMALIZED EEL2": {
        "prefix": "TakeFX_GetParamNormalized",
        "scope": "eel2",
        "body": "TakeFX_GetParamNormalized(${1:MediaItem_Take take}, ${2: int fx}, ${3: int param})$0",
        "description": ""
    },
    "TAKEFX_GETPINMAPPINGS EEL2": {
        "prefix": "TakeFX_GetPinMappings",
        "scope": "eel2",
        "body": "TakeFX_GetPinMappings(${1:MediaItem_Take tr}, ${2: int fx}, ${3: int is}, ${4: int pin}, ${5:high32})$0",
        "description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits\n\n"
    },
    "TAKEFX_GETPRESET EEL2": {
        "prefix": "TakeFX_GetPreset",
        "scope": "eel2",
        "body": "TakeFX_GetPreset(${1:MediaItem_Take take}, ${2: int fx}, ${3:presetname})$0",
        "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TakeFX_SetPreset.\n\n"
    },
    "TAKEFX_GETPRESETINDEX EEL2": {
        "prefix": "TakeFX_GetPresetIndex",
        "scope": "eel2",
        "body": "TakeFX_GetPresetIndex(${1:MediaItem_Take take}, ${2: int fx}, ${3:numberOfPresets})$0",
        "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex\n\n"
    },
    "TAKEFX_GETUSERPRESETFILENAME EEL2": {
        "prefix": "TakeFX_GetUserPresetFilename",
        "scope": "eel2",
        "body": "TakeFX_GetUserPresetFilename(${1:MediaItem_Take take}, ${2: int fx}, ${3:fn})$0",
        "description": ""
    },
    "TAKEFX_NAVIGATEPRESETS EEL2": {
        "prefix": "TakeFX_NavigatePresets",
        "scope": "eel2",
        "body": "TakeFX_NavigatePresets(${1:MediaItem_Take take}, ${2: int fx}, ${3: int presetmove})$0",
        "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
    },
    "TAKEFX_SETENABLED EEL2": {
        "prefix": "TakeFX_SetEnabled",
        "scope": "eel2",
        "body": "TakeFX_SetEnabled(${1:MediaItem_Take take}, ${2: int fx}, ${3: bool enabled})$0",
        "description": "See TakeFX_GetEnabled\n\n"
    },
    "TAKEFX_SETNAMEDCONFIGPARM EEL2": {
        "prefix": "TakeFX_SetNamedConfigParm",
        "scope": "eel2",
        "body": "TakeFX_SetNamedConfigParm(${1:MediaItem_Take take}, ${2: int fx}, ${3: parmname}, ${4: value})$0",
        "description": "gets plug-in specific named configuration value (returns true on success)\n\n"
    },
    "TAKEFX_SETOPEN EEL2": {
        "prefix": "TakeFX_SetOpen",
        "scope": "eel2",
        "body": "TakeFX_SetOpen(${1:MediaItem_Take take}, ${2: int fx}, ${3: bool open})$0",
        "description": "Open this FX UI. See TakeFX_GetOpen\n\n"
    },
    "TAKEFX_SETPARAM EEL2": {
        "prefix": "TakeFX_SetParam",
        "scope": "eel2",
        "body": "TakeFX_SetParam(${1:MediaItem_Take take}, ${2: int fx}, ${3: int param}, ${4: val})$0",
        "description": ""
    },
    "TAKEFX_SETPARAMNORMALIZED EEL2": {
        "prefix": "TakeFX_SetParamNormalized",
        "scope": "eel2",
        "body": "TakeFX_SetParamNormalized(${1:MediaItem_Take take}, ${2: int fx}, ${3: int param}, ${4: value})$0",
        "description": ""
    },
    "TAKEFX_SETPINMAPPINGS EEL2": {
        "prefix": "TakeFX_SetPinMappings",
        "scope": "eel2",
        "body": "TakeFX_SetPinMappings(${1:MediaItem_Take tr}, ${2: int fx}, ${3: int is}, ${4: int pin}, ${5: int low32bits}, ${6: int hi32bits})$0",
        "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
    },
    "TAKEFX_SETPRESET EEL2": {
        "prefix": "TakeFX_SetPreset",
        "scope": "eel2",
        "body": "TakeFX_SetPreset(${1:MediaItem_Take take}, ${2: int fx}, ${3: presetname})$0",
        "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset.\n\n"
    },
    "TAKEFX_SETPRESETBYINDEX EEL2": {
        "prefix": "TakeFX_SetPresetByIndex",
        "scope": "eel2",
        "body": "TakeFX_SetPresetByIndex(${1:MediaItem_Take take}, ${2: int fx}, ${3: int idx})$0",
        "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex.\n\n"
    },
    "TAKEFX_SHOW EEL2": {
        "prefix": "TakeFX_Show",
        "scope": "eel2",
        "body": "TakeFX_Show(${1:MediaItem_Take take}, ${2: int index}, ${3: int showFlag})$0",
        "description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
    },
    "TAKEISMIDI EEL2": {
        "prefix": "TakeIsMIDI",
        "scope": "eel2",
        "body": "TakeIsMIDI(${1:MediaItem_Take take})$0",
        "description": "Returns true if the active take contains MIDI.\n\nGets a precise system timestamp in seconds\n\n"
    },
    "TIMEMAP2_BEATSTOTIME EEL2": {
        "prefix": "TimeMap2_beatsToTime",
        "scope": "eel2",
        "body": "TimeMap2_beatsToTime(${1:ReaProject proj}, ${2: tpos}, ${3: optional int measuresIn})$0",
        "description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.\n\n"
    },
    "TIMEMAP2_GETDIVIDEDBPMATTIME EEL2": {
        "prefix": "TimeMap2_GetDividedBpmAtTime",
        "scope": "eel2",
        "body": "TimeMap2_GetDividedBpmAtTime(${1:ReaProject proj}, ${2: time})$0",
        "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
    },
    "TIMEMAP2_GETNEXTCHANGETIME EEL2": {
        "prefix": "TimeMap2_GetNextChangeTime",
        "scope": "eel2",
        "body": "TimeMap2_GetNextChangeTime(${1:ReaProject proj}, ${2: time})$0",
        "description": "when does the next time map (tempo or time sig) change occur\n\n"
    },
    "TIMEMAP2_QNTOTIME EEL2": {
        "prefix": "TimeMap2_QNToTime",
        "scope": "eel2",
        "body": "TimeMap2_QNToTime(${1:ReaProject proj}, ${2: qn})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "TIMEMAP2_TIMETOBEATS EEL2": {
        "prefix": "TimeMap2_timeToBeats",
        "scope": "eel2",
        "body": "TimeMap2_timeToBeats(${1:ReaProject proj}, ${2: tpos}, ${3:measures}, ${4:cml}, ${5:fullbeats}, ${6:cdenom})$0",
        "description": "convert a time into beats.\n\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\n\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\n\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\n\nif cdenom is non-NULL, will be set to the current time signature denominator.\n\n"
    },
    "TIMEMAP2_TIMETOQN EEL2": {
        "prefix": "TimeMap2_timeToQN",
        "scope": "eel2",
        "body": "TimeMap2_timeToQN(${1:ReaProject proj}, ${2: tpos})$0",
        "description": "converts project time position to QN position.\n\n"
    },
    "TIMEMAP_CURFRAMERATE EEL2": {
        "prefix": "TimeMap_curFrameRate",
        "scope": "eel2",
        "body": "TimeMap_curFrameRate(${1:ReaProject proj}, ${2:dropFrame})$0",
        "description": "Gets project framerate, and optionally whether it is drop-frame timecode\n\n"
    },
    "TIMEMAP_GETDIVIDEDBPMATTIME EEL2": {
        "prefix": "TimeMap_GetDividedBpmAtTime",
        "scope": "eel2",
        "body": "TimeMap_GetDividedBpmAtTime(${1:time})$0",
        "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
    },
    "TIMEMAP_GETMEASUREINFO EEL2": {
        "prefix": "TimeMap_GetMeasureInfo",
        "scope": "eel2",
        "body": "TimeMap_GetMeasureInfo(${1:ReaProject proj}, ${2: int measure}, ${3:qn_start}, ${4:qn_end}, ${5:timesig_num}, ${6:timesig_denom}, ${7:tempo})$0",
        "description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.\n\n"
    },
    "TIMEMAP_GETMETRONOMEPATTERN EEL2": {
        "prefix": "TimeMap_GetMetronomePattern",
        "scope": "eel2",
        "body": "TimeMap_GetMetronomePattern(${1:ReaProject proj}, ${2: time}, ${3:pattern})$0",
        "description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\". The length of the string is the time signature numerator, and the function returns the time signature denominator.\n\n"
    },
    "TIMEMAP_GETTIMESIGATTIME EEL2": {
        "prefix": "TimeMap_GetTimeSigAtTime",
        "scope": "eel2",
        "body": "TimeMap_GetTimeSigAtTime(${1:ReaProject proj}, ${2: time}, ${3:timesig_num}, ${4:timesig_denom}, ${5:tempo})$0",
        "description": "get the effective time signature and tempo\n\n"
    },
    "TIMEMAP_QNTOMEASURES EEL2": {
        "prefix": "TimeMap_QNToMeasures",
        "scope": "eel2",
        "body": "TimeMap_QNToMeasures(${1:ReaProject proj}, ${2: qn}, ${3:qnMeasureStart}, ${4:qnMeasureEnd})$0",
        "description": "Find which measure the given QN position falls in.\n\n"
    },
    "TIMEMAP_QNTOTIME EEL2": {
        "prefix": "TimeMap_QNToTime",
        "scope": "eel2",
        "body": "TimeMap_QNToTime(${1:qn})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "TIMEMAP_QNTOTIME_ABS EEL2": {
        "prefix": "TimeMap_QNToTime_abs",
        "scope": "eel2",
        "body": "TimeMap_QNToTime_abs(${1:ReaProject proj}, ${2: qn})$0",
        "description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime\n\n"
    },
    "TIMEMAP_TIMETOQN EEL2": {
        "prefix": "TimeMap_timeToQN",
        "scope": "eel2",
        "body": "TimeMap_timeToQN(${1:tpos})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "TIMEMAP_TIMETOQN_ABS EEL2": {
        "prefix": "TimeMap_timeToQN_abs",
        "scope": "eel2",
        "body": "TimeMap_timeToQN_abs(${1:ReaProject proj}, ${2: tpos})$0",
        "description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN\n\n"
    },
    "TOGGLETRACKSENDUIMUTE EEL2": {
        "prefix": "ToggleTrackSendUIMute",
        "scope": "eel2",
        "body": "ToggleTrackSendUIMute(${1:MediaTrack track}, ${2: int send_idx})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.\n\n"
    },
    "TRACK_GETPEAKHOLDDB EEL2": {
        "prefix": "Track_GetPeakHoldDB",
        "scope": "eel2",
        "body": "Track_GetPeakHoldDB(${1:MediaTrack track}, ${2: int channel}, ${3: bool clear})$0",
        "description": ""
    },
    "TRACK_GETPEAKINFO EEL2": {
        "prefix": "Track_GetPeakInfo",
        "scope": "eel2",
        "body": "Track_GetPeakInfo(${1:MediaTrack track}, ${2: int channel})$0",
        "description": ""
    },
    "TRACKCTL_SETTOOLTIP EEL2": {
        "prefix": "TrackCtl_SetToolTip",
        "scope": "eel2",
        "body": "TrackCtl_SetToolTip(${1:\"fmt\"}, ${2: int xpos}, ${3: int ypos}, ${4: bool topmost})$0",
        "description": "displays tooltip at location, or removes if empty string\n\n"
    },
    "TRACKFX_ADDBYNAME EEL2": {
        "prefix": "TrackFX_AddByName",
        "scope": "eel2",
        "body": "TrackFX_AddByName(${1:MediaTrack track}, ${2: fxname}, ${3: bool recFX}, ${4: int instantiate})$0",
        "description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:.\n\n"
    },
    "TRACKFX_ENDPARAMEDIT EEL2": {
        "prefix": "TrackFX_EndParamEdit",
        "scope": "eel2",
        "body": "TrackFX_EndParamEdit(${1:MediaTrack track}, ${2: int fx}, ${3: int param})$0",
        "description": ""
    },
    "TRACKFX_FORMATPARAMVALUE EEL2": {
        "prefix": "TrackFX_FormatParamValue",
        "scope": "eel2",
        "body": "TrackFX_FormatParamValue(${1:MediaTrack track}, ${2: int fx}, ${3: int param}, ${4: val}, ${5:buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "TRACKFX_FORMATPARAMVALUENORMALIZED EEL2": {
        "prefix": "TrackFX_FormatParamValueNormalized",
        "scope": "eel2",
        "body": "TrackFX_FormatParamValueNormalized(${1:MediaTrack track}, ${2: int fx}, ${3: int param}, ${4: value}, ${5:buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "TRACKFX_GETBYNAME EEL2": {
        "prefix": "TrackFX_GetByName",
        "scope": "eel2",
        "body": "TrackFX_GetByName(${1:MediaTrack track}, ${2: fxname}, ${3: bool instantiate})$0",
        "description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.\n\n"
    },
    "TRACKFX_GETCHAINVISIBLE EEL2": {
        "prefix": "TrackFX_GetChainVisible",
        "scope": "eel2",
        "body": "TrackFX_GetChainVisible(${1:MediaTrack track})$0",
        "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "TRACKFX_GETCOUNT EEL2": {
        "prefix": "TrackFX_GetCount",
        "scope": "eel2",
        "body": "TrackFX_GetCount(${1:MediaTrack track})$0",
        "description": ""
    },
    "TRACKFX_GETENABLED EEL2": {
        "prefix": "TrackFX_GetEnabled",
        "scope": "eel2",
        "body": "TrackFX_GetEnabled(${1:MediaTrack track}, ${2: int fx})$0",
        "description": "See TrackFX_SetEnabled\n\n"
    },
    "TRACKFX_GETEQ EEL2": {
        "prefix": "TrackFX_GetEQ",
        "scope": "eel2",
        "body": "TrackFX_GetEQ(${1:MediaTrack track}, ${2: bool instantiate})$0",
        "description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.\n\n"
    },
    "TRACKFX_GETEQBANDENABLED EEL2": {
        "prefix": "TrackFX_GetEQBandEnabled",
        "scope": "eel2",
        "body": "TrackFX_GetEQBandEnabled(${1:MediaTrack track}, ${2: int fxidx}, ${3: int bandtype}, ${4: int bandidx})$0",
        "description": "Returns true if the EQ band is enabled.\n\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled.\n\n"
    },
    "TRACKFX_GETEQPARAM EEL2": {
        "prefix": "TrackFX_GetEQParam",
        "scope": "eel2",
        "body": "TrackFX_GetEQParam(${1:MediaTrack track}, ${2: int fxidx}, ${3: int paramidx}, ${4:bandtype}, ${5:bandidx}, ${6:paramtype}, ${7:normval})$0",
        "description": "Returns false if track/fxidx is not ReaEQ.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
    },
    "TRACKFX_GETFLOATINGWINDOW EEL2": {
        "prefix": "TrackFX_GetFloatingWindow",
        "scope": "eel2",
        "body": "TrackFX_GetFloatingWindow(${1:MediaTrack track}, ${2: int index})$0",
        "description": "returns HWND of floating window for effect index, if any\n\n"
    },
    "TRACKFX_GETFORMATTEDPARAMVALUE EEL2": {
        "prefix": "TrackFX_GetFormattedParamValue",
        "scope": "eel2",
        "body": "TrackFX_GetFormattedParamValue(${1:MediaTrack track}, ${2: int fx}, ${3: int param}, ${4:buf})$0",
        "description": ""
    },
    "TRACKFX_GETFXGUID EEL2": {
        "prefix": "TrackFX_GetFXGUID",
        "scope": "eel2",
        "body": "TrackFX_GetFXGUID(${1:retguid}, ${2: MediaTrack track}, ${3: int fx})$0",
        "description": ""
    },
    "TRACKFX_GETFXNAME EEL2": {
        "prefix": "TrackFX_GetFXName",
        "scope": "eel2",
        "body": "TrackFX_GetFXName(${1:MediaTrack track}, ${2: int fx}, ${3:buf})$0",
        "description": ""
    },
    "TRACKFX_GETINSTRUMENT EEL2": {
        "prefix": "TrackFX_GetInstrument",
        "scope": "eel2",
        "body": "TrackFX_GetInstrument(${1:MediaTrack track})$0",
        "description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.\n\n"
    },
    "TRACKFX_GETIOSIZE EEL2": {
        "prefix": "TrackFX_GetIOSize",
        "scope": "eel2",
        "body": "TrackFX_GetIOSize(${1:MediaTrack track}, ${2: int fx}, ${3:inputPins}, ${4:outputPins})$0",
        "description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
    },
    "TRACKFX_GETNAMEDCONFIGPARM EEL2": {
        "prefix": "TrackFX_GetNamedConfigParm",
        "scope": "eel2",
        "body": "TrackFX_GetNamedConfigParm(${1:MediaTrack track}, ${2: int fx}, ${3: parmname}, ${4:buf})$0",
        "description": "gets plug-in specific named configuration value (returns true on success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns name of first input pin (if available), 'out_pin_0' returns name of first output pin (if available), etc.\n\n"
    },
    "TRACKFX_GETNUMPARAMS EEL2": {
        "prefix": "TrackFX_GetNumParams",
        "scope": "eel2",
        "body": "TrackFX_GetNumParams(${1:MediaTrack track}, ${2: int fx})$0",
        "description": ""
    },
    "TRACKFX_GETOPEN EEL2": {
        "prefix": "TrackFX_GetOpen",
        "scope": "eel2",
        "body": "TrackFX_GetOpen(${1:MediaTrack track}, ${2: int fx})$0",
        "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen\n\n"
    },
    "TRACKFX_GETPARAM EEL2": {
        "prefix": "TrackFX_GetParam",
        "scope": "eel2",
        "body": "TrackFX_GetParam(${1:MediaTrack track}, ${2: int fx}, ${3: int param}, ${4:minval}, ${5:maxval})$0",
        "description": ""
    },
    "TRACKFX_GETPARAMETERSTEPSIZES EEL2": {
        "prefix": "TrackFX_GetParameterStepSizes",
        "scope": "eel2",
        "body": "TrackFX_GetParameterStepSizes(${1:MediaTrack track}, ${2: int fx}, ${3: int param}, ${4:step}, ${5:smallstep}, ${6:largestep}, ${7:istoggle})$0",
        "description": ""
    },
    "TRACKFX_GETPARAMEX EEL2": {
        "prefix": "TrackFX_GetParamEx",
        "scope": "eel2",
        "body": "TrackFX_GetParamEx(${1:MediaTrack track}, ${2: int fx}, ${3: int param}, ${4:minval}, ${5:maxval}, ${6:midval})$0",
        "description": ""
    },
    "TRACKFX_GETPARAMNAME EEL2": {
        "prefix": "TrackFX_GetParamName",
        "scope": "eel2",
        "body": "TrackFX_GetParamName(${1:MediaTrack track}, ${2: int fx}, ${3: int param}, ${4:buf})$0",
        "description": ""
    },
    "TRACKFX_GETPARAMNORMALIZED EEL2": {
        "prefix": "TrackFX_GetParamNormalized",
        "scope": "eel2",
        "body": "TrackFX_GetParamNormalized(${1:MediaTrack track}, ${2: int fx}, ${3: int param})$0",
        "description": ""
    },
    "TRACKFX_GETPINMAPPINGS EEL2": {
        "prefix": "TrackFX_GetPinMappings",
        "scope": "eel2",
        "body": "TrackFX_GetPinMappings(${1:MediaTrack tr}, ${2: int fx}, ${3: int is}, ${4: int pin}, ${5:high32})$0",
        "description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits\n\n"
    },
    "TRACKFX_GETPRESET EEL2": {
        "prefix": "TrackFX_GetPreset",
        "scope": "eel2",
        "body": "TrackFX_GetPreset(${1:MediaTrack track}, ${2: int fx}, ${3:presetname})$0",
        "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TrackFX_SetPreset.\n\n"
    },
    "TRACKFX_GETPRESETINDEX EEL2": {
        "prefix": "TrackFX_GetPresetIndex",
        "scope": "eel2",
        "body": "TrackFX_GetPresetIndex(${1:MediaTrack track}, ${2: int fx}, ${3:numberOfPresets})$0",
        "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex\n\n"
    },
    "TRACKFX_GETRECCHAINVISIBLE EEL2": {
        "prefix": "TrackFX_GetRecChainVisible",
        "scope": "eel2",
        "body": "TrackFX_GetRecChainVisible(${1:MediaTrack track})$0",
        "description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "TRACKFX_GETRECCOUNT EEL2": {
        "prefix": "TrackFX_GetRecCount",
        "scope": "eel2",
        "body": "TrackFX_GetRecCount(${1:MediaTrack track})$0",
        "description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.\n\n"
    },
    "TRACKFX_GETUSERPRESETFILENAME EEL2": {
        "prefix": "TrackFX_GetUserPresetFilename",
        "scope": "eel2",
        "body": "TrackFX_GetUserPresetFilename(${1:MediaTrack track}, ${2: int fx}, ${3:fn})$0",
        "description": ""
    },
    "TRACKFX_NAVIGATEPRESETS EEL2": {
        "prefix": "TrackFX_NavigatePresets",
        "scope": "eel2",
        "body": "TrackFX_NavigatePresets(${1:MediaTrack track}, ${2: int fx}, ${3: int presetmove})$0",
        "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
    },
    "TRACKFX_SETENABLED EEL2": {
        "prefix": "TrackFX_SetEnabled",
        "scope": "eel2",
        "body": "TrackFX_SetEnabled(${1:MediaTrack track}, ${2: int fx}, ${3: bool enabled})$0",
        "description": "See TrackFX_GetEnabled\n\n"
    },
    "TRACKFX_SETEQBANDENABLED EEL2": {
        "prefix": "TrackFX_SetEQBandEnabled",
        "scope": "eel2",
        "body": "TrackFX_SetEQBandEnabled(${1:MediaTrack track}, ${2: int fxidx}, ${3: int bandtype}, ${4: int bandidx}, ${5: bool enable})$0",
        "description": "Enable or disable a ReaEQ band.\n\nReturns false if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled.\n\n"
    },
    "TRACKFX_SETEQPARAM EEL2": {
        "prefix": "TrackFX_SetEQParam",
        "scope": "eel2",
        "body": "TrackFX_SetEQParam(${1:MediaTrack track}, ${2: int fxidx}, ${3: int bandtype}, ${4: int bandidx}, ${5: int paramtype}, ${6: val}, ${7: bool isnorm})$0",
        "description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
    },
    "TRACKFX_SETNAMEDCONFIGPARM EEL2": {
        "prefix": "TrackFX_SetNamedConfigParm",
        "scope": "eel2",
        "body": "TrackFX_SetNamedConfigParm(${1:MediaTrack track}, ${2: int fx}, ${3: parmname}, ${4: value})$0",
        "description": "sets plug-in specific named configuration value (returns true on success)\n\n"
    },
    "TRACKFX_SETOPEN EEL2": {
        "prefix": "TrackFX_SetOpen",
        "scope": "eel2",
        "body": "TrackFX_SetOpen(${1:MediaTrack track}, ${2: int fx}, ${3: bool open})$0",
        "description": "Open this FX UI. See TrackFX_GetOpen\n\n"
    },
    "TRACKFX_SETPARAM EEL2": {
        "prefix": "TrackFX_SetParam",
        "scope": "eel2",
        "body": "TrackFX_SetParam(${1:MediaTrack track}, ${2: int fx}, ${3: int param}, ${4: val})$0",
        "description": ""
    },
    "TRACKFX_SETPARAMNORMALIZED EEL2": {
        "prefix": "TrackFX_SetParamNormalized",
        "scope": "eel2",
        "body": "TrackFX_SetParamNormalized(${1:MediaTrack track}, ${2: int fx}, ${3: int param}, ${4: value})$0",
        "description": ""
    },
    "TRACKFX_SETPINMAPPINGS EEL2": {
        "prefix": "TrackFX_SetPinMappings",
        "scope": "eel2",
        "body": "TrackFX_SetPinMappings(${1:MediaTrack tr}, ${2: int fx}, ${3: int is}, ${4: int pin}, ${5: int low32bits}, ${6: int hi32bits})$0",
        "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
    },
    "TRACKFX_SETPRESET EEL2": {
        "prefix": "TrackFX_SetPreset",
        "scope": "eel2",
        "body": "TrackFX_SetPreset(${1:MediaTrack track}, ${2: int fx}, ${3: presetname})$0",
        "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset.\n\n"
    },
    "TRACKFX_SETPRESETBYINDEX EEL2": {
        "prefix": "TrackFX_SetPresetByIndex",
        "scope": "eel2",
        "body": "TrackFX_SetPresetByIndex(${1:MediaTrack track}, ${2: int fx}, ${3: int idx})$0",
        "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex.\n\n"
    },
    "TRACKFX_SHOW EEL2": {
        "prefix": "TrackFX_Show",
        "scope": "eel2",
        "body": "TrackFX_Show(${1:MediaTrack track}, ${2: int index}, ${3: int showFlag})$0",
        "description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
    },
    "TRACKLIST_ADJUSTWINDOWS EEL2": {
        "prefix": "TrackList_AdjustWindows",
        "scope": "eel2",
        "body": "TrackList_AdjustWindows(${1:bool isMinor})$0",
        "description": ""
    },
    "TRACKLIST_UPDATEALLEXTERNALSURFACES EEL2": {
        "prefix": "TrackList_UpdateAllExternalSurfaces",
        "scope": "eel2",
        "body": "TrackList_UpdateAllExternalSurfaces()$0",
        "description": ""
    },
    "UNDO_BEGINBLOCK EEL2": {
        "prefix": "Undo_BeginBlock",
        "scope": "eel2",
        "body": "Undo_BeginBlock()$0",
        "description": "call to start a new block\n\n"
    },
    "UNDO_BEGINBLOCK2 EEL2": {
        "prefix": "Undo_BeginBlock2",
        "scope": "eel2",
        "body": "Undo_BeginBlock2(${1:ReaProject proj})$0",
        "description": "call to start a new block\n\n"
    },
    "UNDO_CANREDO2 EEL2": {
        "prefix": "Undo_CanRedo2",
        "scope": "eel2",
        "body": "Undo_CanRedo2(${1:retval}, ${2: ReaProject proj})$0",
        "description": "returns string of next action,if able,NULL if not\n\n"
    },
    "UNDO_CANUNDO2 EEL2": {
        "prefix": "Undo_CanUndo2",
        "scope": "eel2",
        "body": "Undo_CanUndo2(${1:retval}, ${2: ReaProject proj})$0",
        "description": "returns string of last action,if able,NULL if not\n\n"
    },
    "UNDO_DOREDO2 EEL2": {
        "prefix": "Undo_DoRedo2",
        "scope": "eel2",
        "body": "Undo_DoRedo2(${1:ReaProject proj})$0",
        "description": "nonzero if success\n\n"
    },
    "UNDO_DOUNDO2 EEL2": {
        "prefix": "Undo_DoUndo2",
        "scope": "eel2",
        "body": "Undo_DoUndo2(${1:ReaProject proj})$0",
        "description": "nonzero if success\n\n"
    },
    "UNDO_ENDBLOCK EEL2": {
        "prefix": "Undo_EndBlock",
        "scope": "eel2",
        "body": "Undo_EndBlock(${1:\"descchange\"}, ${2: int extraflags})$0",
        "description": "call to end the block,with extra flags if any,and a description\n\n"
    },
    "UNDO_ENDBLOCK2 EEL2": {
        "prefix": "Undo_EndBlock2",
        "scope": "eel2",
        "body": "Undo_EndBlock2(${1:ReaProject proj}, ${2: descchange}, ${3: int extraflags})$0",
        "description": "call to end the block,with extra flags if any,and a description\n\n"
    },
    "UNDO_ONSTATECHANGE EEL2": {
        "prefix": "Undo_OnStateChange",
        "scope": "eel2",
        "body": "Undo_OnStateChange(${1:\"descchange\"})$0",
        "description": "limited state change to items\n\n"
    },
    "UNDO_ONSTATECHANGE2 EEL2": {
        "prefix": "Undo_OnStateChange2",
        "scope": "eel2",
        "body": "Undo_OnStateChange2(${1:ReaProject proj}, ${2: descchange})$0",
        "description": "limited state change to items\n\n"
    },
    "UNDO_ONSTATECHANGE_ITEM EEL2": {
        "prefix": "Undo_OnStateChange_Item",
        "scope": "eel2",
        "body": "Undo_OnStateChange_Item(${1:ReaProject proj}, ${2: name}, ${3: MediaItem item})$0",
        "description": ""
    },
    "UNDO_ONSTATECHANGEEX EEL2": {
        "prefix": "Undo_OnStateChangeEx",
        "scope": "eel2",
        "body": "Undo_OnStateChangeEx(${1:\"descchange\"}, ${2: int whichStates}, ${3: int trackparm})$0",
        "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
    },
    "UNDO_ONSTATECHANGEEX2 EEL2": {
        "prefix": "Undo_OnStateChangeEx2",
        "scope": "eel2",
        "body": "Undo_OnStateChangeEx2(${1:ReaProject proj}, ${2: descchange}, ${3: int whichStates}, ${4: int trackparm})$0",
        "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
    },
    "UPDATEITEMINPROJECT EEL2": {
        "prefix": "UpdateItemInProject",
        "scope": "eel2",
        "body": "UpdateItemInProject(${1:MediaItem item})$0",
        "description": ""
    },
    "UPDATETIMELINE EEL2": {
        "prefix": "UpdateTimeline",
        "scope": "eel2",
        "body": "UpdateTimeline()$0",
        "description": "Redraw the arrange view and ruler\n\nbool ValidatePtr(void* pointer, \"ctypename\")\n\nsee ValidatePtr2\n\nbool ValidatePtr2(ReaProject proj, void* pointer, \"ctypename\")\n\nReturn true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.\n\n"
    },
    "VIEWPREFS EEL2": {
        "prefix": "ViewPrefs",
        "scope": "eel2",
        "body": "ViewPrefs(${1:int page}, ${2: pageByName})$0",
        "description": "Opens the prefs to a page, use pageByName if page is 0.\n\n"
    },
    "EXTENSION_API EEL2": {
        "prefix": "extension_api",
        "scope": "eel2",
        "body": "extension_api(${1:\"ULT_SetMediaItemNote\"}, ${2: MediaItem item}, ${3: note})$0",
        "description": "[ULT] Set item notes.\n\nReaScript/EEL Built-in Function List\n\n"
    },
    "ABS EEL2": {
        "prefix": "abs",
        "scope": "eel2",
        "body": "abs(${1:value})$0",
        "description": "Returns the absolute value of the parameter.\n\n"
    },
    "ACOS EEL2": {
        "prefix": "acos",
        "scope": "eel2",
        "body": "acos(${1:value})$0",
        "description": "Returns the arc cosine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.\n\n"
    },
    "ASIN EEL2": {
        "prefix": "asin",
        "scope": "eel2",
        "body": "asin(${1:value})$0",
        "description": "Returns the arc sine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.\n\n"
    },
    "ATAN EEL2": {
        "prefix": "atan",
        "scope": "eel2",
        "body": "atan(${1:value})$0",
        "description": "Returns the arc tangent of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.\n\n"
    },
    "ATAN2 EEL2": {
        "prefix": "atan2",
        "scope": "eel2",
        "body": "atan2(${1:numerator}, ${2:denominator})$0",
        "description": "Returns the arc tangent of the numerator divided by the denominator, allowing the denominator to be 0, and using their signs to produce a more meaningful result.\n\n"
    },
    "ATEXIT EEL2": {
        "prefix": "atexit",
        "scope": "eel2",
        "body": "atexit(${1:\"code\"})$0",
        "description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.\n\n"
    },
    "CEIL EEL2": {
        "prefix": "ceil",
        "scope": "eel2",
        "body": "ceil(${1:value})$0",
        "description": "Returns the value rounded to the next highest integer (ceil(3.1)==4, ceil(-3.9)==-3).\n\n"
    },
    "CONVOLVE_C EEL2": {
        "prefix": "convolve_c",
        "scope": "eel2",
        "body": "convolve_c(${1:dest}, ${2:src}, ${3:size})$0",
        "description": "Multiplies each of size complex pairs in dest by the complex pairs in src. Often used for convolution.\n\n"
    },
    "COS EEL2": {
        "prefix": "cos",
        "scope": "eel2",
        "body": "cos(${1:angle})$0",
        "description": "Returns the cosine of the angle specified (specified in radians).\n\n"
    },
    "DEFER EEL2": {
        "prefix": "defer",
        "scope": "eel2",
        "body": "defer(${1:\"code\"})$0",
        "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\n\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\n"
    },
    "EVAL EEL2": {
        "prefix": "eval",
        "scope": "eel2",
        "body": "eval(${1:\"code\"})$0",
        "description": "Executes code passed in. Code can use functions, but functions created in code can't be used elsewhere.\n\n"
    },
    "EXP EEL2": {
        "prefix": "exp",
        "scope": "eel2",
        "body": "exp(${1:exponent})$0",
        "description": "Returns the number e ($e, approximately 2.718) raised to the parameter-th power. This function is significantly faster than pow() or the ^ operator.\n\nEEL: extension_api(\"function_name\"[,...])\n\nUsed to call functions exported by extension plugins. The first parameter must be the exported function name, then its own parameters (as if the function was called directly).\n\n"
    },
    "FCLOSE EEL2": {
        "prefix": "fclose",
        "scope": "eel2",
        "body": "fclose(${1:fp})$0",
        "description": "Closes a file previously opened with fopen().\n\n"
    },
    "FEOF EEL2": {
        "prefix": "feof",
        "scope": "eel2",
        "body": "feof(${1:fp})$0",
        "description": "Returns nonzero if the file fp is at the end of file.\n\n"
    },
    "FFLUSH EEL2": {
        "prefix": "fflush",
        "scope": "eel2",
        "body": "fflush(${1:fp})$0",
        "description": "If file fp is open for writing, flushes out any buffered data to disk.\n\n"
    },
    "FFT EEL2": {
        "prefix": "fft",
        "scope": "eel2",
        "body": "fft(${1:buffer}, ${2:size})$0",
        "description": "Performs a FFT on the data in the local memory buffer at the offset specified by the first parameter. The size of the FFT is specified by the second parameter, which must be 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The outputs are permuted, so if you plan to use them in-order, call fft_permute(buffer, size) before and fft_ipermute(buffer,size) after your in-order use. Your inputs or outputs will need to be scaled down by 1/size, if used.\n\nNote that fft()/ifft() require real / imaginary input pairs, so a 256 point FFT actually works with 512 items.\n\nNote that fft()/ifft() must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.\n\n"
    },
    "FFT_IPERMUTE EEL2": {
        "prefix": "fft_ipermute",
        "scope": "eel2",
        "body": "fft_ipermute(${1:buffer}, ${2:size})$0",
        "description": "Permute the input for ifft(), taking bands from in-order to the order ifft() requires. See fft() for more information.\n\n"
    },
    "FFT_PERMUTE EEL2": {
        "prefix": "fft_permute",
        "scope": "eel2",
        "body": "fft_permute(${1:buffer}, ${2:size})$0",
        "description": "Permute the output of fft() to have bands in-order. See fft() for more information.\n\n"
    },
    "FFT_REAL EEL2": {
        "prefix": "fft_real",
        "scope": "eel2",
        "body": "fft_real(${1:buffer}, ${2:size})$0",
        "description": "Performs an FFT, but takes size input samples and produces size/2 complex output pairs. Usually used along with fft_permute(size/2). Inputs/outputs will need to be scaled by 0.5/size.\n\n"
    },
    "FGETC EEL2": {
        "prefix": "fgetc",
        "scope": "eel2",
        "body": "fgetc(${1:fp})$0",
        "description": "Reads a character from file fp, returns -1 if EOF.\n\n"
    },
    "FGETS EEL2": {
        "prefix": "fgets",
        "scope": "eel2",
        "body": "fgets(${1:fp}, ${2:str})$0",
        "description": "Reads a line from file fp into #str. Returns length of #str read.\n\n"
    },
    "FLOOR EEL2": {
        "prefix": "floor",
        "scope": "eel2",
        "body": "floor(${1:value})$0",
        "description": "Returns the value rounded to the next lowest integer (floor(3.9)==3, floor(-3.1)==-4).\n\n"
    },
    "FOPEN EEL2": {
        "prefix": "fopen",
        "scope": "eel2",
        "body": "fopen(${1:\"fn\"}, ${2:\"mode\"})$0",
        "description": "Opens a file \"fn\" with mode \"mode\". For read, use \"r\" or \"rb\", write \"w\" or \"wb\". Returns a positive integer on success.\n\nEEL: fprintf(fp,\"format\"[,...])\n\nFormats a string and writes it to file fp. For more information on format specifiers, see sprintf(). Returns bytes written to file.\n\n"
    },
    "FREAD EEL2": {
        "prefix": "fread",
        "scope": "eel2",
        "body": "fread(${1:fp}, ${2:str}, ${3:length})$0",
        "description": "Reads from file fp into #str, up to length bytes. Returns actual length read, or negative if error.\n\n"
    },
    "FREEMBUF EEL2": {
        "prefix": "freembuf",
        "scope": "eel2",
        "body": "freembuf(${1:address})$0",
        "description": "Hints the runtime that memory above the address specified may no longer be used. The runtime may, at its leisure, choose to lose the contents of memory above the address specified.\n\n"
    },
    "FSEEK EEL2": {
        "prefix": "fseek",
        "scope": "eel2",
        "body": "fseek(${1:fp}, ${2:offset}, ${3:whence})$0",
        "description": "Seeks file fp, offset bytes from whence reference. Whence negative specifies start of file, positive whence specifies end of file, and zero whence specifies current file position.\n\n"
    },
    "FTELL EEL2": {
        "prefix": "ftell",
        "scope": "eel2",
        "body": "ftell(${1:fp})$0",
        "description": "Retunrs the current file position.\n\n"
    },
    "FWRITE EEL2": {
        "prefix": "fwrite",
        "scope": "eel2",
        "body": "fwrite(${1:fp}, ${2:str}, ${3:len})$0",
        "description": "Writes up to len characters of #str to file fp. If len is less than 1, the full contents of #str will be written. Returns the number of bytes written to file.\n\n"
    },
    "GET_ACTION_CONTEXT EEL2": {
        "prefix": "get_action_context",
        "scope": "eel2",
        "body": "get_action_context(${1:filename}, ${2:sectionID}, ${3:cmdID}, ${4:mode}, ${5:resolution}, ${6:val})$0",
        "description": "Queries contextual information about the script, typically MIDI/OSC input values.\n\nReturns true if a new value has been updated.\n\nval will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.\n\nNotes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.\n\nEEL: gfx VARIABLES\n\nThe following global variables are special and will be used by the graphics system:\n\ngfx_r, gfx_g, gfx_b, gfx_a - These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). \n\ngfx_w, gfx_h - These are set to the current width and height of the UI framebuffer. \n\ngfx_x, gfx_y - These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. \n\ngfx_mode - Set to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx_a to negative and use gfx_mode as additive). Add 2.0 to disable source alpha for gfx_blit(). Add 4.0 to disable filtering for gfx_blit(). \n\ngfx_clear - If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). \n\ngfx_dest - Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).\n\ngfx_texth - Set to the height of a line of text in the current font. Do not modify this variable.\n\ngfx_ext_retina - If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx_w/gfx_h/etc will be doubled.\n\nmouse_x, mouse_y - mouse_x and mouse_y are set to the coordinates of the mouse relative to the graphics window.\n\nmouse_wheel, mouse_hwheel - mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.\n\nmouse_cap is a bitfield of mouse and keyboard modifier state.\n\n1: left mouse button\n\n2: right mouse button\n\n4: Control key\n\n8: Shift key\n\n16: Alt key\n\n32: Windows key\n\n64: middle mouse button\n\n"
    },
    "GFX_ARC EEL2": {
        "prefix": "gfx_arc",
        "scope": "eel2",
        "body": "gfx_arc(${1:x}, ${2:y}, ${3:r}, ${4:ang1}, ${5:ang2}, ${6:antialias})$0",
        "description": "Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.\n\n"
    },
    "GFX_BLIT EEL2": {
        "prefix": "gfx_blit",
        "scope": "eel2",
        "body": "gfx_blit(${1:source}, ${2:scale}, ${3:rotation})$0",
        "description": "If three parameters are specified, copies the entirity of the source bitmap to gfx_x,gfx_y using current opacity and copy mode (set with gfx_a, gfx_mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians).\n\nFor the \"source\" parameter specify -1 to use the main framebuffer as source, or an image index (see gfx_loadimg()).\n\n"
    },
    "GFX_BLITEXT EEL2": {
        "prefix": "gfx_blitext",
        "scope": "eel2",
        "body": "gfx_blitext(${1:source}, ${2:coordinatelist}, ${3:rotation})$0",
        "description": "Deprecated, use gfx_blit instead.\n\n"
    },
    "GFX_BLURTO EEL2": {
        "prefix": "gfx_blurto",
        "scope": "eel2",
        "body": "gfx_blurto(${1:x}, ${2:y})$0",
        "description": "Blurs the region of the screen between gfx_x,gfx_y and x,y, and updates gfx_x,gfx_y to x,y.\n\n"
    },
    "GFX_CIRCLE EEL2": {
        "prefix": "gfx_circle",
        "scope": "eel2",
        "body": "gfx_circle(${1:x}, ${2:y}, ${3:r}, ${4:fill}, ${5:antialias})$0",
        "description": "Draws a circle, optionally filling/antialiasing. \n\n"
    },
    "GFX_CLIENTTOSCREEN EEL2": {
        "prefix": "gfx_clienttoscreen",
        "scope": "eel2",
        "body": "gfx_clienttoscreen(${1:x}, ${2:y})$0",
        "description": "Converts client coordinates x,y to screen coordinates.\n\n"
    },
    "GFX_DELTABLIT EEL2": {
        "prefix": "gfx_deltablit",
        "scope": "eel2",
        "body": "gfx_deltablit(${1:srcimg}, ${2:srcx}, ${3:srcy}, ${4:srcw}, ${5:srch}, ${6:destx}, ${7:desty}, ${8:destw}, ${9:desth}, ${10:dsdx}, ${11:dtdx}, ${12:dsdy}, ${13:dtdy}, ${14:dsdxdy}, ${15:dtdxdy})$0",
        "description": "Blits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. \n\n"
    },
    "GFX_DOCK EEL2": {
        "prefix": "gfx_dock",
        "scope": "eel2",
        "body": "gfx_dock(${1:v}, ${2:wx}, ${3:wy}, ${4:ww}, ${5:wh})$0",
        "description": "Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh are specified, they will be filled with the undocked window position/size\n\n"
    },
    "GFX_DRAWCHAR EEL2": {
        "prefix": "gfx_drawchar",
        "scope": "eel2",
        "body": "gfx_drawchar(${1:char})$0",
        "description": "Draws the character (can be a numeric ASCII code as well), to gfx_x, gfx_y, and moves gfx_x over by the size of the character.\n\n"
    },
    "GFX_DRAWNUMBER EEL2": {
        "prefix": "gfx_drawnumber",
        "scope": "eel2",
        "body": "gfx_drawnumber(${1:n}, ${2:ndigits})$0",
        "description": "Draws the number n with ndigits of precision to gfx_x, gfx_y, and updates gfx_x to the right side of the drawing. The text height is gfx_texth.\n\n"
    },
    "GFX_DRAWSTR EEL2": {
        "prefix": "gfx_drawstr",
        "scope": "eel2",
        "body": "gfx_drawstr(${1:\"str\"}, ${2:flags}, ${3:right}, ${4:bottom})$0",
        "description": "Draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y so that subsequent draws will occur in a similar place.\n\nIf flags, right ,bottom passed in:\n\nflags&1: center horizontally\n\nflags&2: right justify\n\nflags&4: center vertically\n\nflags&8: bottom justify\n\nflags&256: ignore right/bottom, otherwise text is clipped to (gfx_x, gfx_y, right, bottom)\n\n"
    },
    "GFX_GETCHAR EEL2": {
        "prefix": "gfx_getchar",
        "scope": "eel2",
        "body": "gfx_getchar(${1:char})$0",
        "description": "If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.\n\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. \n\nModified and special keys can also be returned, including:\n\nCtrl/Cmd+A..Ctrl+Z as 1..26\n\nCtrl/Cmd+Alt+A..Z as 257..282\n\nAlt+A..Z as 'A'+256..'Z'+256\n\n27 for ESC\n\n13 for Enter\n\n' ' for space\n\n"
    },
    "GFX_GETDROPFILE EEL2": {
        "prefix": "gfx_getdropfile",
        "scope": "eel2",
        "body": "gfx_getdropfile(${1:idx}, ${2:str})$0",
        "description": "Enumerates any drag/dropped files. call gfx_dropfile(-1) to clear the list when finished. Returns 1 if idx is valid, 0 if idx is out of range.\n\n"
    },
    "GFX_GETFONT EEL2": {
        "prefix": "gfx_getfont",
        "scope": "eel2",
        "body": "gfx_getfont(${1:str})$0",
        "description": "Returns current font index. If a string is passed, it will receive the actual font face used by this font, if available.\n\n"
    },
    "GFX_GETIMGDIM EEL2": {
        "prefix": "gfx_getimgdim",
        "scope": "eel2",
        "body": "gfx_getimgdim(${1:image}, ${2:w}, ${3:h})$0",
        "description": "Retreives the dimensions of image (representing a filename: index number) into w and h. Sets these values to 0 if an image failed loading (or if the filename index is invalid).\n\n"
    },
    "GFX_GETPIXEL EEL2": {
        "prefix": "gfx_getpixel",
        "scope": "eel2",
        "body": "gfx_getpixel(${1:r}, ${2:g}, ${3:b})$0",
        "description": "Gets the value of the pixel at gfx_x,gfx_y into r,g,b. \n\n"
    },
    "GFX_GRADRECT EEL2": {
        "prefix": "gfx_gradrect",
        "scope": "eel2",
        "body": "gfx_gradrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5: r}, ${6:g}, ${7:b}, ${8:a}, ${9: drdx}, ${10: dgdx}, ${11: dbdx}, ${12: dadx}, ${13: drdy}, ${14: dgdy}, ${15: dbdy}, ${16: dady})$0",
        "description": "Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.\n\n"
    },
    "GFX_INIT EEL2": {
        "prefix": "gfx_init",
        "scope": "eel2",
        "body": "gfx_init(${1:\"name\"}, ${2:width}, ${3:height}, ${4:dockstate}, ${5:xpos}, ${6:ypos})$0",
        "description": "Initializes the graphics window with title name. Suggested width and height can be specified.\n\nOnce the graphics window is open, gfx_update() should be called periodically. \n\n"
    },
    "GFX_LINE EEL2": {
        "prefix": "gfx_line",
        "scope": "eel2",
        "body": "gfx_line(${1:x}, ${2:y}, ${3:x2}, ${4:y2}, ${5:aa})$0",
        "description": "Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased. \n\n"
    },
    "GFX_LINETO EEL2": {
        "prefix": "gfx_lineto",
        "scope": "eel2",
        "body": "gfx_lineto(${1:x}, ${2:y}, ${3:aa})$0",
        "description": "Draws a line from gfx_x,gfx_y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx_x and gfx_y to x,y.\n\n"
    },
    "GFX_LOADIMG EEL2": {
        "prefix": "gfx_loadimg",
        "scope": "eel2",
        "body": "gfx_loadimg(${1:image}, ${2:\"filename\"})$0",
        "description": "Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. \n\n"
    },
    "GFX_MEASURECHAR EEL2": {
        "prefix": "gfx_measurechar",
        "scope": "eel2",
        "body": "gfx_measurechar(${1:character}, ${2:w}, ${3:h})$0",
        "description": "Measures the drawing dimensions of a character with the current font (as set by gfx_setfont). \n\n"
    },
    "GFX_MEASURESTR EEL2": {
        "prefix": "gfx_measurestr",
        "scope": "eel2",
        "body": "gfx_measurestr(${1:\"str\"}, ${2:w}, ${3:h})$0",
        "description": "Measures the drawing dimensions of a string with the current font (as set by gfx_setfont). \n\n"
    },
    "GFX_MULADDRECT EEL2": {
        "prefix": "gfx_muladdrect",
        "scope": "eel2",
        "body": "gfx_muladdrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:mul_r}, ${6:mul_g}, ${7:mul_b}, ${8:mul_a}, ${9:add_r}, ${10:add_g}, ${11:add_b}, ${12:add_a})$0",
        "description": "Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.\n\n"
    },
    "GFX_PRINTF EEL2": {
        "prefix": "gfx_printf",
        "scope": "eel2",
        "body": "gfx_printf(${1:\"format\"}, ${2: ...})$0",
        "description": "Formats and draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()\n\n"
    },
    "GFX_QUIT EEL2": {
        "prefix": "gfx_quit",
        "scope": "eel2",
        "body": "gfx_quit()$0",
        "description": "Closes the graphics window.\n\n"
    },
    "GFX_RECT EEL2": {
        "prefix": "gfx_rect",
        "scope": "eel2",
        "body": "gfx_rect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:filled})$0",
        "description": "Fills a rectangle at x,y, w,h pixels in dimension, filled by default. \n\n"
    },
    "GFX_RECTTO EEL2": {
        "prefix": "gfx_rectto",
        "scope": "eel2",
        "body": "gfx_rectto(${1:x}, ${2:y})$0",
        "description": "Fills a rectangle from gfx_x,gfx_y to x,y. Updates gfx_x,gfx_y to x,y. \n\n"
    },
    "GFX_ROUNDRECT EEL2": {
        "prefix": "gfx_roundrect",
        "scope": "eel2",
        "body": "gfx_roundrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:radius}, ${6:antialias})$0",
        "description": "Draws a rectangle with rounded corners. \n\n"
    },
    "GFX_SCREENTOCLIENT EEL2": {
        "prefix": "gfx_screentoclient",
        "scope": "eel2",
        "body": "gfx_screentoclient(${1:x}, ${2:y})$0",
        "description": "Converts screen coordinates x,y to client coordinates.\n\n"
    },
    "GFX_SET EEL2": {
        "prefix": "gfx_set",
        "scope": "eel2",
        "body": "gfx_set(${1:r}, ${2:g}, ${3:b}, ${4:a}, ${5:mode}, ${6:dest})$0",
        "description": "Sets gfx_r/gfx_g/gfx_b/gfx_a/gfx_mode, sets gfx_dest if final parameter specified\n\n"
    },
    "GFX_SETCURSOR EEL2": {
        "prefix": "gfx_setcursor",
        "scope": "eel2",
        "body": "gfx_setcursor(${1:resource_id}, ${2:custom_cursor_name})$0",
        "description": "Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like \"arrow\" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.\n\n"
    },
    "GFX_SETFONT EEL2": {
        "prefix": "gfx_setfont",
        "scope": "eel2",
        "body": "gfx_setfont(${1:idx}, ${2:\"fontface\"}, ${3: sz}, ${4: flags})$0",
        "description": "Can select a font and optionally configure it. idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font, specify fontface such as \"Arial\", sz of 8-100, and optionally specify flags, which is a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. These flags may or may not be supported depending on the font and OS. After calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.\n\n"
    },
    "GFX_SETIMGDIM EEL2": {
        "prefix": "gfx_setimgdim",
        "scope": "eel2",
        "body": "gfx_setimgdim(${1:image}, ${2:w}, ${3:h})$0",
        "description": "Resize image referenced by index 0..1024-1, width and height must be 0-2048. The contents of the image will be undefined after the resize.\n\n"
    },
    "GFX_SETPIXEL EEL2": {
        "prefix": "gfx_setpixel",
        "scope": "eel2",
        "body": "gfx_setpixel(${1:r}, ${2:g}, ${3:b})$0",
        "description": "Writes a pixel of r,g,b to gfx_x,gfx_y.\n\n"
    },
    "GFX_SHOWMENU EEL2": {
        "prefix": "gfx_showmenu",
        "scope": "eel2",
        "body": "gfx_showmenu(${1:\"str\"})$0",
        "description": "Shows a popup menu at gfx_x,gfx_y. str is a list of fields separated by | characters. Each field represents a menu item.\n\nFields can start with special characters:\n\n# : grayed out\n\n! : checked\n\n> : this menu item shows a submenu\n\n< : last item in the current submenu\n\nAn empty field will appear as a separator in the menu. gfx_showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.\n\nExample:\n\ngfx_showmenu(\"first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu\")\n\n"
    },
    "GFX_TRANSFORMBLIT EEL2": {
        "prefix": "gfx_transformblit",
        "scope": "eel2",
        "body": "gfx_transformblit(${1:srcimg}, ${2:destx}, ${3:desty}, ${4:destw}, ${5:desth}, ${6:div_w}, ${7:div_h}, ${8:table})$0",
        "description": "Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (this table must not cross a 65536 item boundary). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.\n\n"
    },
    "GFX_TRIANGLE EEL2": {
        "prefix": "gfx_triangle",
        "scope": "eel2",
        "body": "gfx_triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${8:y4...})$0",
        "description": "Draws a filled triangle, or any convex polygon. \n\n"
    },
    "GFX_UPDATE EEL2": {
        "prefix": "gfx_update",
        "scope": "eel2",
        "body": "gfx_update()$0",
        "description": "Updates the graphics display, if opened\n\n"
    },
    "IFFT EEL2": {
        "prefix": "ifft",
        "scope": "eel2",
        "body": "ifft(${1:buffer}, ${2:size})$0",
        "description": "Perform an inverse FFT. For more information see fft().\n\n"
    },
    "IFFT_REAL EEL2": {
        "prefix": "ifft_real",
        "scope": "eel2",
        "body": "ifft_real(${1:buffer}, ${2:size})$0",
        "description": "Performs an inverse FFT, but takes size/2 complex input pairs and produces size real output values. Usually used along with fft_ipermute(size/2).\n\n"
    },
    "INVSQRT EEL2": {
        "prefix": "invsqrt",
        "scope": "eel2",
        "body": "invsqrt(${1:value})$0",
        "description": "Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter.\n\n"
    },
    "LOG EEL2": {
        "prefix": "log",
        "scope": "eel2",
        "body": "log(${1:value})$0",
        "description": "Returns the natural logarithm (base e) of the parameter. If the value is not greater than 0, the return value is undefined.\n\n"
    },
    "LOG10 EEL2": {
        "prefix": "log10",
        "scope": "eel2",
        "body": "log10(${1:value})$0",
        "description": "Returns the base-10 logarithm of the parameter. If the value is not greater than 0, the return value is undefined.\n\n"
    },
    "LOOP EEL2": {
        "prefix": "loop",
        "scope": "eel2",
        "body": "loop(${1:count}, ${2:expression})$0",
        "description": "Evaluates count once, and then executes expression count, but not more than 1048576, times.\n\nEEL: match(\"needle\",\"haystack\"[, ...])\n\nSearches for the first parameter in the second parameter, using a simplified regular expression syntax.\n\n* = match 0 or more characters\n\n*? = match 0 or more characters, lazy\n\n+ = match 1 or more characters\n\n+? = match 1 or more characters, lazy\n\n? = match one character\n\nYou can also use format specifiers to match certain types of data, and optionally put that into a variable:\n\n%s means 1 or more chars\n\n%0s means 0 or more chars\n\n%5s means exactly 5 chars\n\n%5-s means 5 or more chars\n\n%-10s means 1-10 chars\n\n%3-5s means 3-5 chars\n\n%0-5s means 0-5 chars\n\n%x, %d, %u, and %f are available for use similarly\n\n%c can be used, but can't take any length modifiers\n\nUse uppercase (%S, %D, etc) for lazy matching\n\nSee also sprintf() for other notes, including specifying direct variable references via {}.\n\nEEL: matchi(\"needle\",\"haystack\"[, ...])\n\nCase-insensitive version of match().\n\n"
    },
    "MAX EEL2": {
        "prefix": "max",
        "scope": "eel2",
        "body": "max(${1:value}, ${2:value})$0",
        "description": "Returns (by reference) the maximum value of the two parameters. Since max() returns by reference, expressions such as max(x,y) = 5 are possible.\n\n"
    },
    "MEM_GET_VALUES EEL2": {
        "prefix": "mem_get_values",
        "scope": "eel2",
        "body": "mem_get_values(${1:offset}, ${2: ...})$0",
        "description": "Reads values from memory starting at offset into variables specified. Slower than regular memory reads for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.\n\n"
    },
    "MEM_SET_VALUES EEL2": {
        "prefix": "mem_set_values",
        "scope": "eel2",
        "body": "mem_set_values(${1:offset}, ${2: ...})$0",
        "description": "Writes values to memory starting at offset from variables specified. Slower than regular memory writes for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.\n\n"
    },
    "MEMCPY EEL2": {
        "prefix": "memcpy",
        "scope": "eel2",
        "body": "memcpy(${1:dest}, ${2:src}, ${3:length})$0",
        "description": "Copies length items of memory from src to dest. Regions are permitted to overlap.\n\n"
    },
    "MEMSET EEL2": {
        "prefix": "memset",
        "scope": "eel2",
        "body": "memset(${1:offset}, ${2:value}, ${3:length})$0",
        "description": "Sets length items of memory at offset to value.\n\n"
    },
    "MIN EEL2": {
        "prefix": "min",
        "scope": "eel2",
        "body": "min(${1:value}, ${2:value})$0",
        "description": "Returns (by reference) the minimum value of the two parameters. Since min() returns by reference, expressions such as min(x,y) = 5 are possible.\n\nEEL: printf(\"format\"[, ...])\n\nOutput formatted string to system-specific destination, see sprintf() for more information\n\nEEL: rand([max])\n\nReturns a psuedorandom real number between 0 and the parameter, inclusive. If the parameter is omitted or less than 1.0, 1.0 is used as a maximum instead.\n\n"
    },
    "RUNLOOP EEL2": {
        "prefix": "runloop",
        "scope": "eel2",
        "body": "runloop(${1:\"code\"})$0",
        "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\n\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\n"
    },
    "SIGN EEL2": {
        "prefix": "sign",
        "scope": "eel2",
        "body": "sign(${1:value})$0",
        "description": "Returns 1.0 if the parameter is greater than 0, -1.0 if the parameter is less than 0, or 0 if the parameter is 0.\n\n"
    },
    "SIN EEL2": {
        "prefix": "sin",
        "scope": "eel2",
        "body": "sin(${1:angle})$0",
        "description": "Returns the sine of the angle specified (specified in radians -- to convert from degrees to radians, multiply by $pi/180, or 0.017453).\n\n"
    },
    "SLEEP EEL2": {
        "prefix": "sleep",
        "scope": "eel2",
        "body": "sleep(${1:ms})$0",
        "description": "Yields the CPU for the millisecond count specified, calling Sleep() on Windows or usleep() on other platforms.\n\nEEL: sprintf(#dest,\"format\"[, ...])\n\nFormats a string and stores it in #dest. Format specifiers begin with %, and may include:\n\n%% = %\n\n%s = string from parameter\n\n%d = parameter as integer\n\n%i = parameter as integer\n\n%u = parameter as unsigned integer\n\n%x = parameter as hex (lowercase) integer\n\n%X = parameter as hex (uppercase) integer\n\n%c = parameter as character\n\n%f = parameter as floating point\n\n%e = parameter as floating point (scientific notation, lowercase)\n\n%E = parameter as floating point (scientific notation, uppercase)\n\n%g = parameter as floating point (shortest representation, lowercase)\n\n%G = parameter as floating point (shortest representation, uppercase)\n\nMany standard C printf() modifiers can be used, including:\n\n%.10s = string, but only print up to 10 characters\n\n%-10s = string, left justified to 10 characters\n\n%10s = string, right justified to 10 characters\n\n%+f = floating point, always show sign\n\n%.4f = floating point, minimum of 4 digits after decimal point\n\n%10d = integer, minimum of 10 digits (space padded)\n\n%010f = integer, minimum of 10 digits (zero padded)\n\nValues for format specifiers can be specified as additional parameters to sprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).\n\n"
    },
    "SQR EEL2": {
        "prefix": "sqr",
        "scope": "eel2",
        "body": "sqr(${1:value})$0",
        "description": "Returns the square of the parameter (similar to value*value, but only evaluating value once).\n\n"
    },
    "SQRT EEL2": {
        "prefix": "sqrt",
        "scope": "eel2",
        "body": "sqrt(${1:value})$0",
        "description": "Returns the square root of the parameter. If the parameter is negative, the return value is undefined.\n\n"
    },
    "STACK_EXCH EEL2": {
        "prefix": "stack_exch",
        "scope": "eel2",
        "body": "stack_exch(${1:value})$0",
        "description": "Exchanges a value with the top of the stack, and returns a reference to the parameter (with the new value).\n\n"
    },
    "STACK_PEEK EEL2": {
        "prefix": "stack_peek",
        "scope": "eel2",
        "body": "stack_peek(${1:index})$0",
        "description": "Returns a reference to the item on the top of the stack (if index is 0), or to the Nth item on the stack if index is greater than 0. \n\n"
    },
    "STACK_POP EEL2": {
        "prefix": "stack_pop",
        "scope": "eel2",
        "body": "stack_pop(${1:value})$0",
        "description": "Pops a value from the user stack into value, or into a temporary buffer if value is not specified, and returns a reference to where the stack was popped. Note that no checking is done to determine if the stack is empty, and as such stack_pop() will never fail.\n\n"
    },
    "STACK_PUSH EEL2": {
        "prefix": "stack_push",
        "scope": "eel2",
        "body": "stack_push(${1:value})$0",
        "description": "Pushes value onto the user stack, returns a reference to the parameter.\n\n"
    },
    "STR_DELSUB EEL2": {
        "prefix": "str_delsub",
        "scope": "eel2",
        "body": "str_delsub(${1:str}, ${2:pos}, ${3:len})$0",
        "description": "Deletes len characters at offset pos from #str, and returns #str.\n\nEEL: str_getchar(\"str\",offset[,type])\n\nReturns the data at byte-offset offset of str. If offset is negative, position is relative to end of string.type defaults to signed char, but can be specified to read raw binary data in other formats (note the single quotes, these are single/multi-byte characters):\n\n'c' - signed char\n\n'cu' - unsigned char\n\n's' - signed short\n\n'S' - signed short, big endian\n\n'su' - unsigned short\n\n'Su' - unsigned short, big endian\n\n'i' - signed int\n\n'I' - signed int, big endian\n\n'iu' - unsigned int\n\n'Iu' - unsigned int, big endian\n\n'f' - float\n\n'F' - float, big endian\n\n'd' - double\n\n'D' - double, big endian\n\n"
    },
    "STR_INSERT EEL2": {
        "prefix": "str_insert",
        "scope": "eel2",
        "body": "str_insert(${1:str}, ${2:\"srcstr\"}, ${3:pos})$0",
        "description": "Inserts srcstr into #str at offset pos. Returns #str\n\nEEL: str_setchar(#str,offset,val[,type]))\n\nSets value at offset offset, type optional. offset may be negative to refer to offset relative to end of string, or between 0 and length, inclusive, and if set to length it will lengthen string. See str_getchar() for more information on types.\n\n"
    },
    "STR_SETLEN EEL2": {
        "prefix": "str_setlen",
        "scope": "eel2",
        "body": "str_setlen(${1:str}, ${2:len})$0",
        "description": "Sets length of #str (if increasing, will be space-padded), and returns #str.\n\n"
    },
    "STRCAT EEL2": {
        "prefix": "strcat",
        "scope": "eel2",
        "body": "strcat(${1:str}, ${2:\"srcstr\"})$0",
        "description": "Appends srcstr to #str, and returns #str\n\n"
    },
    "STRCMP EEL2": {
        "prefix": "strcmp",
        "scope": "eel2",
        "body": "strcmp(${1:\"str\"}, ${2:\"str2\"})$0",
        "description": "Compares strings, returning 0 if equal\n\n"
    },
    "STRCPY EEL2": {
        "prefix": "strcpy",
        "scope": "eel2",
        "body": "strcpy(${1:str}, ${2:\"srcstr\"})$0",
        "description": "Copies the contents of srcstr to #str, and returns #str\n\n"
    },
    "STRCPY_FROM EEL2": {
        "prefix": "strcpy_from",
        "scope": "eel2",
        "body": "strcpy_from(${1:str}, ${2:\"srcstr\"}, ${3:offset})$0",
        "description": "Copies srcstr to #str, but starts reading srcstr at offset offset\n\n"
    },
    "STRCPY_SUBSTR EEL2": {
        "prefix": "strcpy_substr",
        "scope": "eel2",
        "body": "strcpy_substr(${1:str}, ${2:\"srcstr\"}, ${3:offs}, ${4:ml})$0",
        "description": "PHP-style (start at offs, offs<0 means from end, ml for maxlen, ml<0 = reduce length by this amt)\n\n"
    },
    "STRICMP EEL2": {
        "prefix": "stricmp",
        "scope": "eel2",
        "body": "stricmp(${1:\"str\"}, ${2:\"str2\"})$0",
        "description": "Compares strings ignoring case, returning 0 if equal\n\n"
    },
    "STRLEN EEL2": {
        "prefix": "strlen",
        "scope": "eel2",
        "body": "strlen(${1:\"str\"})$0",
        "description": "Returns the length of the string passed as a parameter\n\n"
    },
    "STRNCAT EEL2": {
        "prefix": "strncat",
        "scope": "eel2",
        "body": "strncat(${1:str}, ${2:\"srcstr\"}, ${3:maxlen})$0",
        "description": "Appends srcstr to #str, stopping after maxlen characters of srcstr. Returns #str.\n\n"
    },
    "STRNCMP EEL2": {
        "prefix": "strncmp",
        "scope": "eel2",
        "body": "strncmp(${1:\"str\"}, ${2:\"str2\"}, ${3:maxlen})$0",
        "description": "Compares strings giving up after maxlen characters, returning 0 if equal\n\n"
    },
    "STRNCPY EEL2": {
        "prefix": "strncpy",
        "scope": "eel2",
        "body": "strncpy(${1:str}, ${2:\"srcstr\"}, ${3:maxlen})$0",
        "description": "Copies srcstr to #str, stopping after maxlen characters. Returns #str.\n\n"
    },
    "STRNICMP EEL2": {
        "prefix": "strnicmp",
        "scope": "eel2",
        "body": "strnicmp(${1:\"str\"}, ${2:\"str2\"}, ${3:maxlen})$0",
        "description": "Compares strings giving up after maxlen characters, ignoring case, returning 0 if equal\n\n"
    },
    "TAN EEL2": {
        "prefix": "tan",
        "scope": "eel2",
        "body": "tan(${1:angle})$0",
        "description": "Returns the tangent of the angle specified (specified in radians).\n\n"
    },
    "TCP_CLOSE EEL2": {
        "prefix": "tcp_close",
        "scope": "eel2",
        "body": "tcp_close(${1:connection})$0",
        "description": "Closes a TCP connection created by tcp_listen() or tcp_connect().\n\nEEL: tcp_connect(\"address\",port[,block])\n\nCreate a new TCP connection to address:port. If block is specified and 0, connection will be made nonblocking. Returns TCP connection ID greater than 0 on success.\n\nEEL: tcp_listen(port[,\"interface\",#ip_out])\n\nListens on port specified. Returns less than 0 if could not listen, 0 if no new connection available, or greater than 0 (as a TCP connection ID) if a new connection was made. If a connection made and #ip_out specified, it will be set to the remote IP. interface can be empty for all interfaces, otherwise an interface IP as a string.\n\n"
    },
    "TCP_LISTEN_END EEL2": {
        "prefix": "tcp_listen_end",
        "scope": "eel2",
        "body": "tcp_listen_end(${1:port})$0",
        "description": "Ends listening on port specified.\n\nEEL: tcp_recv(connection,#str[,maxlen])\n\nReceives data from a connection to #str. If maxlen is specified, no more than maxlen bytes will be received. If non-blocking, 0 will be returned if would block. Returns less than 0 if error.\n\nEEL: tcp_send(connection,\"str\"[,len])\n\nSends a string to connection. Returns -1 on error, 0 if connection is non-blocking and would block, otherwise returns length sent. If len is specified and not less than 1, only the first len bytes of the string parameter will be sent.\n\n"
    },
    "TCP_SET_BLOCK EEL2": {
        "prefix": "tcp_set_block",
        "scope": "eel2",
        "body": "tcp_set_block(${1:connection}, ${2:block})$0",
        "description": "Sets whether a connection blocks.\n\nEEL: time([&val])\n\nSets the parameter (or a temporary buffer if omitted) to the number of seconds since January 1, 1970, and returns a reference to that value. The granularity of the value returned is 1 second.\n\nEEL: time_precise([&val])\n\nSets the parameter (or a temporary buffer if omitted) to a system-local timestamp in seconds, and returns a reference to that value. The granularity of the value returned is system defined (but generally significantly smaller than one second).\n\n"
    },
    "WHILE EEL2": {
        "prefix": "while",
        "scope": "eel2",
        "body": "while(${1:expression})$0",
        "description": "Executes expression until expression evaluates to zero, or until 1048576iterations occur. An alternate and more useful syntax is while (expression) ( statements ), which evaluates statements after every non-zero evaluation of expression.\n\nView: [all] [C/C++] [EEL] [Lua] [Python]\n"
    }
}