{
	"AddMediaItemToTrack": {
		"prefix": "AddMediaItemToTrack",
		"scope": "eel",
		"body": "${1:${2:MediaItem} = }AddMediaItemToTrack(${3:MediaTrack tr})",
		"description": "creates a new media item."
	},
	"reaper.AddMediaItemToTrack": {
		"prefix": "reaper.AddMediaItemToTrack",
		"scope": "lua",
		"body": "${1:${2:MediaItem} = }reaper.AddMediaItemToTrack(${3:MediaTrack tr})",
		"description": "creates a new media item."
	},
	"RPR_AddMediaItemToTrack": {
		"prefix": "RPR_AddMediaItemToTrack",
		"scope": "python",
		"body": "${1:${2:MediaItem} = }RPR_AddMediaItemToTrack(${3:MediaTrack tr})",
		"description": "creates a new media item."
	},
	"AddProjectMarker": {
		"prefix": "AddProjectMarker",
		"scope": "eel",
		"body": "${1:${2:int} = }AddProjectMarker(${3:ReaProject proj}, ${4:bool isrgn}, ${5:pos}, ${6:rgnend}, ${7:\"name\"}, ${8:int wantidx})",
		"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use."
	},
	"reaper.AddProjectMarker": {
		"prefix": "reaper.AddProjectMarker",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.AddProjectMarker(${3:ReaProject proj}, ${4:boolean isrgn}, ${5:number pos}, ${6:number rgnend}, ${7:string name}, ${8:integer wantidx})",
		"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use."
	},
	"RPR_AddProjectMarker": {
		"prefix": "RPR_AddProjectMarker",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_AddProjectMarker(${3:ReaProject proj}, ${4:Boolean isrgn}, ${5:Float pos}, ${6:Float rgnend}, ${7:String name}, ${8:Int wantidx})",
		"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use."
	},
	"AddProjectMarker2": {
		"prefix": "AddProjectMarker2",
		"scope": "eel",
		"body": "${1:${2:int} = }AddProjectMarker2(${3:ReaProject proj}, ${4:bool isrgn}, ${5:pos}, ${6:rgnend}, ${7:\"name\"}, ${8:int wantidx}, ${9:int color})",
		"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000"
	},
	"reaper.AddProjectMarker2": {
		"prefix": "reaper.AddProjectMarker2",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.AddProjectMarker2(${3:ReaProject proj}, ${4:boolean isrgn}, ${5:number pos}, ${6:number rgnend}, ${7:string name}, ${8:integer wantidx}, ${9:integer color})",
		"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000"
	},
	"RPR_AddProjectMarker2": {
		"prefix": "RPR_AddProjectMarker2",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_AddProjectMarker2(${3:ReaProject proj}, ${4:Boolean isrgn}, ${5:Float pos}, ${6:Float rgnend}, ${7:String name}, ${8:Int wantidx}, ${9:Int color})",
		"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000"
	},
	"AddRemoveReaScript": {
		"prefix": "AddRemoveReaScript",
		"scope": "eel",
		"body": "${1:${2:int} = }AddRemoveReaScript(${3:bool add}, ${4:int sectionID}, ${5:\"scriptfn\"}, ${6:bool commit})",
		"description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call."
	},
	"reaper.AddRemoveReaScript": {
		"prefix": "reaper.AddRemoveReaScript",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.AddRemoveReaScript(${3:boolean add}, ${4:integer sectionID}, ${5:string scriptfn}, ${6:boolean commit})",
		"description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call."
	},
	"RPR_AddRemoveReaScript": {
		"prefix": "RPR_AddRemoveReaScript",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_AddRemoveReaScript(${3:Boolean add}, ${4:Int sectionID}, ${5:String scriptfn}, ${6:Boolean commit})",
		"description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call."
	},
	"AddTakeToMediaItem": {
		"prefix": "AddTakeToMediaItem",
		"scope": "eel",
		"body": "${1:${2:MediaItem_Take} = }AddTakeToMediaItem(${3:MediaItem item})",
		"description": "creates a new take in an item"
	},
	"reaper.AddTakeToMediaItem": {
		"prefix": "reaper.AddTakeToMediaItem",
		"scope": "lua",
		"body": "${1:${2:MediaItem_Take} = }reaper.AddTakeToMediaItem(${3:MediaItem item})",
		"description": "creates a new take in an item"
	},
	"RPR_AddTakeToMediaItem": {
		"prefix": "RPR_AddTakeToMediaItem",
		"scope": "python",
		"body": "${1:${2:MediaItem_Take} = }RPR_AddTakeToMediaItem(${3:MediaItem item})",
		"description": "creates a new take in an item"
	},
	"AddTempoTimeSigMarker": {
		"prefix": "AddTempoTimeSigMarker",
		"scope": "eel",
		"body": "${1:${2:bool} = }AddTempoTimeSigMarker(${3:ReaProject proj}, ${4:timepos}, ${5:bpm}, ${6:int timesig_num}, ${7:int timesig_denom}, ${8:bool lineartempochange})",
		"description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1."
	},
	"reaper.AddTempoTimeSigMarker": {
		"prefix": "reaper.AddTempoTimeSigMarker",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.AddTempoTimeSigMarker(${3:ReaProject proj}, ${4:number timepos}, ${5:number bpm}, ${6:integer timesig_num}, ${7:integer timesig_denom}, ${8:boolean lineartempochange})",
		"description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1."
	},
	"RPR_AddTempoTimeSigMarker": {
		"prefix": "RPR_AddTempoTimeSigMarker",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_AddTempoTimeSigMarker(${3:ReaProject proj}, ${4:Float timepos}, ${5:Float bpm}, ${6:Int timesig_num}, ${7:Int timesig_denom}, ${8:Boolean lineartempochange})",
		"description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1."
	},
	"adjustZoom": {
		"prefix": "adjustZoom",
		"scope": "eel",
		"body": "adjustZoom(${1:amt}, ${2:int forceset}, ${3:bool doupd}, ${4:int centermode})",
		"description": "forceset=0,doupd=true,centermode=-1 for default"
	},
	"reaper.adjustZoom": {
		"prefix": "reaper.adjustZoom",
		"scope": "lua",
		"body": "reaper.adjustZoom(${1:number amt}, ${2:integer forceset}, ${3:boolean doupd}, ${4:integer centermode})",
		"description": "forceset=0,doupd=true,centermode=-1 for default"
	},
	"RPR_adjustZoom": {
		"prefix": "RPR_adjustZoom",
		"scope": "python",
		"body": "RPR_adjustZoom(${1:Float amt}, ${2:Int forceset}, ${3:Boolean doupd}, ${4:Int centermode})",
		"description": "forceset=0,doupd=true,centermode=-1 for default"
	},
	"AnyTrackSolo": {
		"prefix": "AnyTrackSolo",
		"scope": "eel",
		"body": "${1:${2:bool} = }AnyTrackSolo(${3:ReaProject proj})",
		"description": ""
	},
	"reaper.AnyTrackSolo": {
		"prefix": "reaper.AnyTrackSolo",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.AnyTrackSolo(${3:ReaProject proj})",
		"description": ""
	},
	"RPR_AnyTrackSolo": {
		"prefix": "RPR_AnyTrackSolo",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_AnyTrackSolo(${3:ReaProject proj})",
		"description": ""
	},
	"APIExists": {
		"prefix": "APIExists",
		"scope": "eel",
		"body": "${1:${2:bool} = }APIExists(${3:\"function_name\"})",
		"description": "Returns true if function_name exists in the REAPER API"
	},
	"reaper.APIExists": {
		"prefix": "reaper.APIExists",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.APIExists(${3:string function_name})",
		"description": "Returns true if function_name exists in the REAPER API"
	},
	"RPR_APIExists": {
		"prefix": "RPR_APIExists",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_APIExists(${3:String function_name})",
		"description": "Returns true if function_name exists in the REAPER API"
	},
	"APITest": {
		"prefix": "APITest",
		"scope": "eel",
		"body": "APITest()",
		"description": "Displays a message window if the API was successfully called."
	},
	"reaper.APITest": {
		"prefix": "reaper.APITest",
		"scope": "lua",
		"body": "reaper.APITest()",
		"description": "Displays a message window if the API was successfully called."
	},
	"RPR_APITest": {
		"prefix": "RPR_APITest",
		"scope": "python",
		"body": "RPR_APITest()",
		"description": "Displays a message window if the API was successfully called."
	},
	"ApplyNudge": {
		"prefix": "ApplyNudge",
		"scope": "eel",
		"body": "${1:${2:bool} = }ApplyNudge(${3:ReaProject project}, ${4:int nudgeflag}, ${5:int nudgewhat}, ${6:int nudgeunits}, ${7:value}, ${8:bool reverse}, ${9:int copies})",
		"description": "nudgeflag: +1=set to value (otherwise nudge by value), +2=snap\n\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\n\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\n\nvalue: amount to nudge by, or value to set to\n\nreverse: in nudge mode, nudges left (otherwise ignored)\n\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)"
	},
	"reaper.ApplyNudge": {
		"prefix": "reaper.ApplyNudge",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.ApplyNudge(${3:ReaProject project}, ${4:integer nudgeflag}, ${5:integer nudgewhat}, ${6:integer nudgeunits}, ${7:number value}, ${8:boolean reverse}, ${9:integer copies})",
		"description": "nudgeflag: +1=set to value (otherwise nudge by value), +2=snap\n\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\n\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\n\nvalue: amount to nudge by, or value to set to\n\nreverse: in nudge mode, nudges left (otherwise ignored)\n\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)"
	},
	"RPR_ApplyNudge": {
		"prefix": "RPR_ApplyNudge",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_ApplyNudge(${3:ReaProject project}, ${4:Int nudgeflag}, ${5:Int nudgewhat}, ${6:Int nudgeunits}, ${7:Float value}, ${8:Boolean reverse}, ${9:Int copies})",
		"description": "nudgeflag: +1=set to value (otherwise nudge by value), +2=snap\n\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\n\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\n\nvalue: amount to nudge by, or value to set to\n\nreverse: in nudge mode, nudges left (otherwise ignored)\n\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)"
	},
	"ArmCommand": {
		"prefix": "ArmCommand",
		"scope": "eel",
		"body": "ArmCommand(${1:int cmd}, ${2:\"sectionname\"})",
		"description": "arms a command (or disarms if 0 passed) in section sectionname (empty string for main)"
	},
	"reaper.ArmCommand": {
		"prefix": "reaper.ArmCommand",
		"scope": "lua",
		"body": "reaper.ArmCommand(${1:integer cmd}, ${2:string sectionname})",
		"description": "arms a command (or disarms if 0 passed) in section sectionname (empty string for main)"
	},
	"RPR_ArmCommand": {
		"prefix": "RPR_ArmCommand",
		"scope": "python",
		"body": "RPR_ArmCommand(${1:Int cmd}, ${2:String sectionname})",
		"description": "arms a command (or disarms if 0 passed) in section sectionname (empty string for main)"
	},
	"Audio_Init": {
		"prefix": "Audio_Init",
		"scope": "eel",
		"body": "Audio_Init()",
		"description": "open all audio and MIDI devices, if not ope"
	},
	"reaper.Audio_Init": {
		"prefix": "reaper.Audio_Init",
		"scope": "lua",
		"body": "reaper.Audio_Init()",
		"description": "open all audio and MIDI devices, if not ope"
	},
	"RPR_Audio_Init": {
		"prefix": "RPR_Audio_Init",
		"scope": "python",
		"body": "RPR_Audio_Init()",
		"description": "open all audio and MIDI devices, if not ope"
	},
	"Audio_IsPreBuffer": {
		"prefix": "Audio_IsPreBuffer",
		"scope": "eel",
		"body": "${1:${2:int} = }Audio_IsPreBuffer()",
		"description": "is in pre-buffer? threadsafe"
	},
	"reaper.Audio_IsPreBuffer": {
		"prefix": "reaper.Audio_IsPreBuffer",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.Audio_IsPreBuffer()",
		"description": "is in pre-buffer? threadsafe"
	},
	"RPR_Audio_IsPreBuffer": {
		"prefix": "RPR_Audio_IsPreBuffer",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_Audio_IsPreBuffer()",
		"description": "is in pre-buffer? threadsafe"
	},
	"Audio_IsRunning": {
		"prefix": "Audio_IsRunning",
		"scope": "eel",
		"body": "${1:${2:int} = }Audio_IsRunning()",
		"description": "is audio running at all? threadsafe"
	},
	"reaper.Audio_IsRunning": {
		"prefix": "reaper.Audio_IsRunning",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.Audio_IsRunning()",
		"description": "is audio running at all? threadsafe"
	},
	"RPR_Audio_IsRunning": {
		"prefix": "RPR_Audio_IsRunning",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_Audio_IsRunning()",
		"description": "is audio running at all? threadsafe"
	},
	"Audio_Quit": {
		"prefix": "Audio_Quit",
		"scope": "eel",
		"body": "Audio_Quit()",
		"description": "close all audio and MIDI devices, if ope"
	},
	"reaper.Audio_Quit": {
		"prefix": "reaper.Audio_Quit",
		"scope": "lua",
		"body": "reaper.Audio_Quit()",
		"description": "close all audio and MIDI devices, if ope"
	},
	"RPR_Audio_Quit": {
		"prefix": "RPR_Audio_Quit",
		"scope": "python",
		"body": "RPR_Audio_Quit()",
		"description": "close all audio and MIDI devices, if ope"
	},
	"AudioAccessorStateChanged": {
		"prefix": "AudioAccessorStateChanged",
		"scope": "eel",
		"body": "${1:${2:bool} = }AudioAccessorStateChanged(${3:AudioAccessor accessor})",
		"description": "Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"reaper.AudioAccessorStateChanged": {
		"prefix": "reaper.AudioAccessorStateChanged",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.AudioAccessorStateChanged(${3:AudioAccessor accessor})",
		"description": "Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"RPR_AudioAccessorStateChanged": {
		"prefix": "RPR_AudioAccessorStateChanged",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_AudioAccessorStateChanged(${3:AudioAccessor accessor})",
		"description": "Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"AudioAccessorUpdate": {
		"prefix": "AudioAccessorUpdate",
		"scope": "eel",
		"body": "AudioAccessorUpdate(${1:AudioAccessor accessor})",
		"description": "Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"reaper.AudioAccessorUpdate": {
		"prefix": "reaper.AudioAccessorUpdate",
		"scope": "lua",
		"body": "reaper.AudioAccessorUpdate(${1:AudioAccessor accessor})",
		"description": "Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"RPR_AudioAccessorUpdate": {
		"prefix": "RPR_AudioAccessorUpdate",
		"scope": "python",
		"body": "RPR_AudioAccessorUpdate(${1:AudioAccessor accessor})",
		"description": "Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"AudioAccessorValidateState": {
		"prefix": "AudioAccessorValidateState",
		"scope": "eel",
		"body": "${1:${2:bool} = }AudioAccessorValidateState(${3:AudioAccessor accessor})",
		"description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed."
	},
	"reaper.AudioAccessorValidateState": {
		"prefix": "reaper.AudioAccessorValidateState",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.AudioAccessorValidateState(${3:AudioAccessor accessor})",
		"description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed."
	},
	"RPR_AudioAccessorValidateState": {
		"prefix": "RPR_AudioAccessorValidateState",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_AudioAccessorValidateState(${3:AudioAccessor accessor})",
		"description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed."
	},
	"BypassFxAllTracks": {
		"prefix": "BypassFxAllTracks",
		"scope": "eel",
		"body": "BypassFxAllTracks(${1:int bypass})",
		"description": "-1 = bypass all if not all bypassed,otherwise unbypass all"
	},
	"reaper.BypassFxAllTracks": {
		"prefix": "reaper.BypassFxAllTracks",
		"scope": "lua",
		"body": "reaper.BypassFxAllTracks(${1:integer bypass})",
		"description": "-1 = bypass all if not all bypassed,otherwise unbypass all"
	},
	"RPR_BypassFxAllTracks": {
		"prefix": "RPR_BypassFxAllTracks",
		"scope": "python",
		"body": "RPR_BypassFxAllTracks(${1:Int bypass})",
		"description": "-1 = bypass all if not all bypassed,otherwise unbypass all"
	},
	"ClearAllRecArmed": {
		"prefix": "ClearAllRecArmed",
		"scope": "eel",
		"body": "ClearAllRecArmed()",
		"description": ""
	},
	"reaper.ClearAllRecArmed": {
		"prefix": "reaper.ClearAllRecArmed",
		"scope": "lua",
		"body": "reaper.ClearAllRecArmed()",
		"description": ""
	},
	"RPR_ClearAllRecArmed": {
		"prefix": "RPR_ClearAllRecArmed",
		"scope": "python",
		"body": "RPR_ClearAllRecArmed()",
		"description": ""
	},
	"ClearConsole": {
		"prefix": "ClearConsole",
		"scope": "eel",
		"body": "ClearConsole()",
		"description": "Clear the ReaScript console. See ShowConsoleMsg"
	},
	"reaper.ClearConsole": {
		"prefix": "reaper.ClearConsole",
		"scope": "lua",
		"body": "reaper.ClearConsole()",
		"description": "Clear the ReaScript console. See ShowConsoleMsg"
	},
	"RPR_ClearConsole": {
		"prefix": "RPR_ClearConsole",
		"scope": "python",
		"body": "RPR_ClearConsole()",
		"description": "Clear the ReaScript console. See ShowConsoleMsg"
	},
	"ClearPeakCache": {
		"prefix": "ClearPeakCache",
		"scope": "eel",
		"body": "ClearPeakCache()",
		"description": "resets the global peak caches"
	},
	"reaper.ClearPeakCache": {
		"prefix": "reaper.ClearPeakCache",
		"scope": "lua",
		"body": "reaper.ClearPeakCache()",
		"description": "resets the global peak caches"
	},
	"RPR_ClearPeakCache": {
		"prefix": "RPR_ClearPeakCache",
		"scope": "python",
		"body": "RPR_ClearPeakCache()",
		"description": "resets the global peak caches"
	},
	"ColorFromNative": {
		"prefix": "ColorFromNative",
		"scope": "eel",
		"body": "ColorFromNative(${1:int col}, ${2:int +r}, ${3:int +g}, ${4:int +b})",
		"description": "Extract RGB values from an OS dependent color. See ColorToNative."
	},
	"reaper.ColorFromNative": {
		"prefix": "reaper.ColorFromNative",
		"scope": "lua",
		"body": "${1:${2:number r}, ${3:number g}, ${4:number b} = }reaper.ColorFromNative(${5:integer col})",
		"description": "Extract RGB values from an OS dependent color. See ColorToNative."
	},
	"RPR_ColorFromNative": {
		"prefix": "RPR_ColorFromNative",
		"scope": "python",
		"body": "${1:${2:Int col}, ${3:Int rOut}, ${4:Int gOut}, ${5:Int bOut} = }RPR_ColorFromNative(${6:col}, ${7:rOut}, ${8:gOut}, ${9:bOut})",
		"description": "Extract RGB values from an OS dependent color. See ColorToNative."
	},
	"ColorToNative": {
		"prefix": "ColorToNative",
		"scope": "eel",
		"body": "${1:${2:int} = }ColorToNative(${3:int r}, ${4:int g}, ${5:int b})",
		"description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative."
	},
	"reaper.ColorToNative": {
		"prefix": "reaper.ColorToNative",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.ColorToNative(${3:integer r}, ${4:integer g}, ${5:integer b})",
		"description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative."
	},
	"RPR_ColorToNative": {
		"prefix": "RPR_ColorToNative",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_ColorToNative(${3:Int r}, ${4:Int g}, ${5:Int b})",
		"description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative."
	},
	"CountAutomationItems": {
		"prefix": "CountAutomationItems",
		"scope": "eel",
		"body": "${1:${2:int} = }CountAutomationItems(${3:TrackEnvelope env})",
		"description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo"
	},
	"reaper.CountAutomationItems": {
		"prefix": "reaper.CountAutomationItems",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountAutomationItems(${3:TrackEnvelope env})",
		"description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo"
	},
	"RPR_CountAutomationItems": {
		"prefix": "RPR_CountAutomationItems",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountAutomationItems(${3:TrackEnvelope env})",
		"description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo"
	},
	"CountEnvelopePoints": {
		"prefix": "CountEnvelopePoints",
		"scope": "eel",
		"body": "${1:${2:int} = }CountEnvelopePoints(${3:TrackEnvelope envelope})",
		"description": "Returns the number of points in the envelope."
	},
	"reaper.CountEnvelopePoints": {
		"prefix": "reaper.CountEnvelopePoints",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountEnvelopePoints(${3:TrackEnvelope envelope})",
		"description": "Returns the number of points in the envelope."
	},
	"RPR_CountEnvelopePoints": {
		"prefix": "RPR_CountEnvelopePoints",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountEnvelopePoints(${3:TrackEnvelope envelope})",
		"description": "Returns the number of points in the envelope."
	},
	"CountEnvelopePointsEx": {
		"prefix": "CountEnvelopePointsEx",
		"scope": "eel",
		"body": "${1:${2:int} = }CountEnvelopePointsEx(${3:TrackEnvelope envelope}, ${4:int autoitem_idx})",
		"description": "Returns the number of points in the envelope. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc."
	},
	"reaper.CountEnvelopePointsEx": {
		"prefix": "reaper.CountEnvelopePointsEx",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountEnvelopePointsEx(${3:TrackEnvelope envelope}, ${4:integer autoitem_idx})",
		"description": "Returns the number of points in the envelope. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc."
	},
	"RPR_CountEnvelopePointsEx": {
		"prefix": "RPR_CountEnvelopePointsEx",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountEnvelopePointsEx(${3:TrackEnvelope envelope}, ${4:Int autoitem_idx})",
		"description": "Returns the number of points in the envelope. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc."
	},
	"CountMediaItems": {
		"prefix": "CountMediaItems",
		"scope": "eel",
		"body": "${1:${2:int} = }CountMediaItems(${3:ReaProject proj})",
		"description": "count the number of items in the project (proj=0 for active project)"
	},
	"reaper.CountMediaItems": {
		"prefix": "reaper.CountMediaItems",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountMediaItems(${3:ReaProject proj})",
		"description": "count the number of items in the project (proj=0 for active project)"
	},
	"RPR_CountMediaItems": {
		"prefix": "RPR_CountMediaItems",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountMediaItems(${3:ReaProject proj})",
		"description": "count the number of items in the project (proj=0 for active project)"
	},
	"CountProjectMarkers": {
		"prefix": "CountProjectMarkers",
		"scope": "eel",
		"body": "${1:${2:int} = }CountProjectMarkers(${3:ReaProject proj}, ${4:int +num_markers}, ${5:int +num_regions})",
		"description": "num_markersOut and num_regionsOut may be NULL."
	},
	"reaper.CountProjectMarkers": {
		"prefix": "reaper.CountProjectMarkers",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:number num_markers}, ${4:number num_regions} = }reaper.CountProjectMarkers(${5:ReaProject proj})",
		"description": "num_markersOut and num_regionsOut may be NULL."
	},
	"RPR_CountProjectMarkers": {
		"prefix": "RPR_CountProjectMarkers",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:ReaProject proj}, ${4:Int num_markersOut}, ${5:Int num_regionsOut} = }RPR_CountProjectMarkers(${6:proj}, ${7:num_markersOut}, ${8:num_regionsOut})",
		"description": "num_markersOut and num_regionsOut may be NULL."
	},
	"CountSelectedMediaItems": {
		"prefix": "CountSelectedMediaItems",
		"scope": "eel",
		"body": "${1:${2:int} = }CountSelectedMediaItems(${3:ReaProject proj})",
		"description": "count the number of selected items in the project (proj=0 for active project)"
	},
	"reaper.CountSelectedMediaItems": {
		"prefix": "reaper.CountSelectedMediaItems",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountSelectedMediaItems(${3:ReaProject proj})",
		"description": "count the number of selected items in the project (proj=0 for active project)"
	},
	"RPR_CountSelectedMediaItems": {
		"prefix": "RPR_CountSelectedMediaItems",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountSelectedMediaItems(${3:ReaProject proj})",
		"description": "count the number of selected items in the project (proj=0 for active project)"
	},
	"CountSelectedTracks": {
		"prefix": "CountSelectedTracks",
		"scope": "eel",
		"body": "${1:${2:int} = }CountSelectedTracks(${3:ReaProject proj})",
		"description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2."
	},
	"reaper.CountSelectedTracks": {
		"prefix": "reaper.CountSelectedTracks",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountSelectedTracks(${3:ReaProject proj})",
		"description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2."
	},
	"RPR_CountSelectedTracks": {
		"prefix": "RPR_CountSelectedTracks",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountSelectedTracks(${3:ReaProject proj})",
		"description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2."
	},
	"CountSelectedTracks2": {
		"prefix": "CountSelectedTracks2",
		"scope": "eel",
		"body": "${1:${2:int} = }CountSelectedTracks2(${3:ReaProject proj}, ${4:bool wantmaster})",
		"description": "Count the number of selected tracks in the project (proj=0 for active project)."
	},
	"reaper.CountSelectedTracks2": {
		"prefix": "reaper.CountSelectedTracks2",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountSelectedTracks2(${3:ReaProject proj}, ${4:boolean wantmaster})",
		"description": "Count the number of selected tracks in the project (proj=0 for active project)."
	},
	"RPR_CountSelectedTracks2": {
		"prefix": "RPR_CountSelectedTracks2",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountSelectedTracks2(${3:ReaProject proj}, ${4:Boolean wantmaster})",
		"description": "Count the number of selected tracks in the project (proj=0 for active project)."
	},
	"CountTakeEnvelopes": {
		"prefix": "CountTakeEnvelopes",
		"scope": "eel",
		"body": "${1:${2:int} = }CountTakeEnvelopes(${3:MediaItem_Take take})",
		"description": "See GetTakeEnvelope"
	},
	"reaper.CountTakeEnvelopes": {
		"prefix": "reaper.CountTakeEnvelopes",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountTakeEnvelopes(${3:MediaItem_Take take})",
		"description": "See GetTakeEnvelope"
	},
	"RPR_CountTakeEnvelopes": {
		"prefix": "RPR_CountTakeEnvelopes",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountTakeEnvelopes(${3:MediaItem_Take take})",
		"description": "See GetTakeEnvelope"
	},
	"CountTakes": {
		"prefix": "CountTakes",
		"scope": "eel",
		"body": "${1:${2:int} = }CountTakes(${3:MediaItem item})",
		"description": "count the number of takes in the item"
	},
	"reaper.CountTakes": {
		"prefix": "reaper.CountTakes",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountTakes(${3:MediaItem item})",
		"description": "count the number of takes in the item"
	},
	"RPR_CountTakes": {
		"prefix": "RPR_CountTakes",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountTakes(${3:MediaItem item})",
		"description": "count the number of takes in the item"
	},
	"CountTCPFXParms": {
		"prefix": "CountTCPFXParms",
		"scope": "eel",
		"body": "${1:${2:int} = }CountTCPFXParms(${3:ReaProject project}, ${4:MediaTrack track})",
		"description": "Count the number of FX parameter knobs displayed on the track control panel."
	},
	"reaper.CountTCPFXParms": {
		"prefix": "reaper.CountTCPFXParms",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountTCPFXParms(${3:ReaProject project}, ${4:MediaTrack track})",
		"description": "Count the number of FX parameter knobs displayed on the track control panel."
	},
	"RPR_CountTCPFXParms": {
		"prefix": "RPR_CountTCPFXParms",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountTCPFXParms(${3:ReaProject project}, ${4:MediaTrack track})",
		"description": "Count the number of FX parameter knobs displayed on the track control panel."
	},
	"CountTempoTimeSigMarkers": {
		"prefix": "CountTempoTimeSigMarkers",
		"scope": "eel",
		"body": "${1:${2:int} = }CountTempoTimeSigMarkers(${3:ReaProject proj})",
		"description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"reaper.CountTempoTimeSigMarkers": {
		"prefix": "reaper.CountTempoTimeSigMarkers",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountTempoTimeSigMarkers(${3:ReaProject proj})",
		"description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"RPR_CountTempoTimeSigMarkers": {
		"prefix": "RPR_CountTempoTimeSigMarkers",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountTempoTimeSigMarkers(${3:ReaProject proj})",
		"description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"CountTrackEnvelopes": {
		"prefix": "CountTrackEnvelopes",
		"scope": "eel",
		"body": "${1:${2:int} = }CountTrackEnvelopes(${3:MediaTrack track})",
		"description": "see GetTrackEnvelope"
	},
	"reaper.CountTrackEnvelopes": {
		"prefix": "reaper.CountTrackEnvelopes",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountTrackEnvelopes(${3:MediaTrack track})",
		"description": "see GetTrackEnvelope"
	},
	"RPR_CountTrackEnvelopes": {
		"prefix": "RPR_CountTrackEnvelopes",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountTrackEnvelopes(${3:MediaTrack track})",
		"description": "see GetTrackEnvelope"
	},
	"CountTrackMediaItems": {
		"prefix": "CountTrackMediaItems",
		"scope": "eel",
		"body": "${1:${2:int} = }CountTrackMediaItems(${3:MediaTrack track})",
		"description": "count the number of items in the track"
	},
	"reaper.CountTrackMediaItems": {
		"prefix": "reaper.CountTrackMediaItems",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountTrackMediaItems(${3:MediaTrack track})",
		"description": "count the number of items in the track"
	},
	"RPR_CountTrackMediaItems": {
		"prefix": "RPR_CountTrackMediaItems",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountTrackMediaItems(${3:MediaTrack track})",
		"description": "count the number of items in the track"
	},
	"CountTracks": {
		"prefix": "CountTracks",
		"scope": "eel",
		"body": "${1:${2:int} = }CountTracks(${3:ReaProject proj})",
		"description": "count the number of tracks in the project (proj=0 for active project)"
	},
	"reaper.CountTracks": {
		"prefix": "reaper.CountTracks",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CountTracks(${3:ReaProject proj})",
		"description": "count the number of tracks in the project (proj=0 for active project)"
	},
	"RPR_CountTracks": {
		"prefix": "RPR_CountTracks",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CountTracks(${3:ReaProject proj})",
		"description": "count the number of tracks in the project (proj=0 for active project)"
	},
	"CreateNewMIDIItemInProj": {
		"prefix": "CreateNewMIDIItemInProj",
		"scope": "eel",
		"body": "${1:${2:MediaItem} = }CreateNewMIDIItemInProj(${3:MediaTrack track}, ${4:starttime}, ${5:endtime}, ${6:optional bool qnIn})",
		"description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set."
	},
	"reaper.CreateNewMIDIItemInProj": {
		"prefix": "reaper.CreateNewMIDIItemInProj",
		"scope": "lua",
		"body": "${1:${2:MediaItem} = }reaper.CreateNewMIDIItemInProj(${3:MediaTrack track}, ${4:number starttime}, ${5:number endtime}, ${6:optional boolean qnIn})",
		"description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set."
	},
	"RPR_CreateNewMIDIItemInProj": {
		"prefix": "RPR_CreateNewMIDIItemInProj",
		"scope": "python",
		"body": "${1:${2:MediaItem} = }RPR_CreateNewMIDIItemInProj(${3:MediaTrack track}, ${4:Float starttime}, ${5:Float endtime}, ${6:const bool qnInOptional})",
		"description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set."
	},
	"CreateTakeAudioAccessor": {
		"prefix": "CreateTakeAudioAccessor",
		"scope": "eel",
		"body": "${1:${2:AudioAccessor} = }CreateTakeAudioAccessor(${3:MediaItem_Take take})",
		"description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"reaper.CreateTakeAudioAccessor": {
		"prefix": "reaper.CreateTakeAudioAccessor",
		"scope": "lua",
		"body": "${1:${2:AudioAccessor} = }reaper.CreateTakeAudioAccessor(${3:MediaItem_Take take})",
		"description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"RPR_CreateTakeAudioAccessor": {
		"prefix": "RPR_CreateTakeAudioAccessor",
		"scope": "python",
		"body": "${1:${2:AudioAccessor} = }RPR_CreateTakeAudioAccessor(${3:MediaItem_Take take})",
		"description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"CreateTrackAudioAccessor": {
		"prefix": "CreateTrackAudioAccessor",
		"scope": "eel",
		"body": "${1:${2:AudioAccessor} = }CreateTrackAudioAccessor(${3:MediaTrack track})",
		"description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"reaper.CreateTrackAudioAccessor": {
		"prefix": "reaper.CreateTrackAudioAccessor",
		"scope": "lua",
		"body": "${1:${2:AudioAccessor} = }reaper.CreateTrackAudioAccessor(${3:MediaTrack track})",
		"description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"RPR_CreateTrackAudioAccessor": {
		"prefix": "RPR_CreateTrackAudioAccessor",
		"scope": "python",
		"body": "${1:${2:AudioAccessor} = }RPR_CreateTrackAudioAccessor(${3:MediaTrack track})",
		"description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"CreateTrackSend": {
		"prefix": "CreateTrackSend",
		"scope": "eel",
		"body": "${1:${2:int} = }CreateTrackSend(${3:MediaTrack tr}, ${4:MediaTrack desttrIn})",
		"description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value."
	},
	"reaper.CreateTrackSend": {
		"prefix": "reaper.CreateTrackSend",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CreateTrackSend(${3:MediaTrack tr}, ${4:MediaTrack desttrIn})",
		"description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value."
	},
	"RPR_CreateTrackSend": {
		"prefix": "RPR_CreateTrackSend",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CreateTrackSend(${3:MediaTrack tr}, ${4:MediaTrack desttrInOptional})",
		"description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value."
	},
	"CSurf_FlushUndo": {
		"prefix": "CSurf_FlushUndo",
		"scope": "eel",
		"body": "CSurf_FlushUndo(${1:bool force})",
		"description": "call this to force flushing of the undo states after using CSurf_On*Change()"
	},
	"reaper.CSurf_FlushUndo": {
		"prefix": "reaper.CSurf_FlushUndo",
		"scope": "lua",
		"body": "reaper.CSurf_FlushUndo(${1:boolean force})",
		"description": "call this to force flushing of the undo states after using CSurf_On*Change()"
	},
	"RPR_CSurf_FlushUndo": {
		"prefix": "RPR_CSurf_FlushUndo",
		"scope": "python",
		"body": "RPR_CSurf_FlushUndo(${1:Boolean force})",
		"description": "call this to force flushing of the undo states after using CSurf_On*Change()"
	},
	"CSurf_GetTouchState": {
		"prefix": "CSurf_GetTouchState",
		"scope": "eel",
		"body": "${1:${2:bool} = }CSurf_GetTouchState(${3:MediaTrack trackid}, ${4:int isPan})",
		"description": ""
	},
	"reaper.CSurf_GetTouchState": {
		"prefix": "reaper.CSurf_GetTouchState",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.CSurf_GetTouchState(${3:MediaTrack trackid}, ${4:integer isPan})",
		"description": ""
	},
	"RPR_CSurf_GetTouchState": {
		"prefix": "RPR_CSurf_GetTouchState",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_CSurf_GetTouchState(${3:MediaTrack trackid}, ${4:Int isPan})",
		"description": ""
	},
	"CSurf_GoEnd": {
		"prefix": "CSurf_GoEnd",
		"scope": "eel",
		"body": "CSurf_GoEnd()",
		"description": ""
	},
	"reaper.CSurf_GoEnd": {
		"prefix": "reaper.CSurf_GoEnd",
		"scope": "lua",
		"body": "reaper.CSurf_GoEnd()",
		"description": ""
	},
	"RPR_CSurf_GoEnd": {
		"prefix": "RPR_CSurf_GoEnd",
		"scope": "python",
		"body": "RPR_CSurf_GoEnd()",
		"description": ""
	},
	"CSurf_GoStart": {
		"prefix": "CSurf_GoStart",
		"scope": "eel",
		"body": "CSurf_GoStart()",
		"description": ""
	},
	"reaper.CSurf_GoStart": {
		"prefix": "reaper.CSurf_GoStart",
		"scope": "lua",
		"body": "reaper.CSurf_GoStart()",
		"description": ""
	},
	"RPR_CSurf_GoStart": {
		"prefix": "RPR_CSurf_GoStart",
		"scope": "python",
		"body": "RPR_CSurf_GoStart()",
		"description": ""
	},
	"CSurf_NumTracks": {
		"prefix": "CSurf_NumTracks",
		"scope": "eel",
		"body": "${1:${2:int} = }CSurf_NumTracks(${3:bool mcpView})",
		"description": ""
	},
	"reaper.CSurf_NumTracks": {
		"prefix": "reaper.CSurf_NumTracks",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CSurf_NumTracks(${3:boolean mcpView})",
		"description": ""
	},
	"RPR_CSurf_NumTracks": {
		"prefix": "RPR_CSurf_NumTracks",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CSurf_NumTracks(${3:Boolean mcpView})",
		"description": ""
	},
	"CSurf_OnArrow": {
		"prefix": "CSurf_OnArrow",
		"scope": "eel",
		"body": "CSurf_OnArrow(${1:int whichdir}, ${2:bool wantzoom})",
		"description": ""
	},
	"reaper.CSurf_OnArrow": {
		"prefix": "reaper.CSurf_OnArrow",
		"scope": "lua",
		"body": "reaper.CSurf_OnArrow(${1:integer whichdir}, ${2:boolean wantzoom})",
		"description": ""
	},
	"RPR_CSurf_OnArrow": {
		"prefix": "RPR_CSurf_OnArrow",
		"scope": "python",
		"body": "RPR_CSurf_OnArrow(${1:Int whichdir}, ${2:Boolean wantzoom})",
		"description": ""
	},
	"CSurf_OnFwd": {
		"prefix": "CSurf_OnFwd",
		"scope": "eel",
		"body": "CSurf_OnFwd(${1:int seekplay})",
		"description": ""
	},
	"reaper.CSurf_OnFwd": {
		"prefix": "reaper.CSurf_OnFwd",
		"scope": "lua",
		"body": "reaper.CSurf_OnFwd(${1:integer seekplay})",
		"description": ""
	},
	"RPR_CSurf_OnFwd": {
		"prefix": "RPR_CSurf_OnFwd",
		"scope": "python",
		"body": "RPR_CSurf_OnFwd(${1:Int seekplay})",
		"description": ""
	},
	"CSurf_OnFXChange": {
		"prefix": "CSurf_OnFXChange",
		"scope": "eel",
		"body": "${1:${2:bool} = }CSurf_OnFXChange(${3:MediaTrack trackid}, ${4:int en})",
		"description": ""
	},
	"reaper.CSurf_OnFXChange": {
		"prefix": "reaper.CSurf_OnFXChange",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.CSurf_OnFXChange(${3:MediaTrack trackid}, ${4:integer en})",
		"description": ""
	},
	"RPR_CSurf_OnFXChange": {
		"prefix": "RPR_CSurf_OnFXChange",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_CSurf_OnFXChange(${3:MediaTrack trackid}, ${4:Int en})",
		"description": ""
	},
	"CSurf_OnInputMonitorChange": {
		"prefix": "CSurf_OnInputMonitorChange",
		"scope": "eel",
		"body": "${1:${2:int} = }CSurf_OnInputMonitorChange(${3:MediaTrack trackid}, ${4:int monitor})",
		"description": ""
	},
	"reaper.CSurf_OnInputMonitorChange": {
		"prefix": "reaper.CSurf_OnInputMonitorChange",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CSurf_OnInputMonitorChange(${3:MediaTrack trackid}, ${4:integer monitor})",
		"description": ""
	},
	"RPR_CSurf_OnInputMonitorChange": {
		"prefix": "RPR_CSurf_OnInputMonitorChange",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CSurf_OnInputMonitorChange(${3:MediaTrack trackid}, ${4:Int monitor})",
		"description": ""
	},
	"CSurf_OnInputMonitorChangeEx": {
		"prefix": "CSurf_OnInputMonitorChangeEx",
		"scope": "eel",
		"body": "${1:${2:int} = }CSurf_OnInputMonitorChangeEx(${3:MediaTrack trackid}, ${4:int monitor}, ${5:bool allowgang})",
		"description": ""
	},
	"reaper.CSurf_OnInputMonitorChangeEx": {
		"prefix": "reaper.CSurf_OnInputMonitorChangeEx",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CSurf_OnInputMonitorChangeEx(${3:MediaTrack trackid}, ${4:integer monitor}, ${5:boolean allowgang})",
		"description": ""
	},
	"RPR_CSurf_OnInputMonitorChangeEx": {
		"prefix": "RPR_CSurf_OnInputMonitorChangeEx",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CSurf_OnInputMonitorChangeEx(${3:MediaTrack trackid}, ${4:Int monitor}, ${5:Boolean allowgang})",
		"description": ""
	},
	"CSurf_OnMuteChange": {
		"prefix": "CSurf_OnMuteChange",
		"scope": "eel",
		"body": "${1:${2:bool} = }CSurf_OnMuteChange(${3:MediaTrack trackid}, ${4:int mute})",
		"description": ""
	},
	"reaper.CSurf_OnMuteChange": {
		"prefix": "reaper.CSurf_OnMuteChange",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.CSurf_OnMuteChange(${3:MediaTrack trackid}, ${4:integer mute})",
		"description": ""
	},
	"RPR_CSurf_OnMuteChange": {
		"prefix": "RPR_CSurf_OnMuteChange",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_CSurf_OnMuteChange(${3:MediaTrack trackid}, ${4:Int mute})",
		"description": ""
	},
	"CSurf_OnMuteChangeEx": {
		"prefix": "CSurf_OnMuteChangeEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }CSurf_OnMuteChangeEx(${3:MediaTrack trackid}, ${4:int mute}, ${5:bool allowgang})",
		"description": ""
	},
	"reaper.CSurf_OnMuteChangeEx": {
		"prefix": "reaper.CSurf_OnMuteChangeEx",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.CSurf_OnMuteChangeEx(${3:MediaTrack trackid}, ${4:integer mute}, ${5:boolean allowgang})",
		"description": ""
	},
	"RPR_CSurf_OnMuteChangeEx": {
		"prefix": "RPR_CSurf_OnMuteChangeEx",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_CSurf_OnMuteChangeEx(${3:MediaTrack trackid}, ${4:Int mute}, ${5:Boolean allowgang})",
		"description": ""
	},
	"CSurf_OnPanChange": {
		"prefix": "CSurf_OnPanChange",
		"scope": "eel",
		"body": "${1:${2:double} = }CSurf_OnPanChange(${3:MediaTrack trackid}, ${4:pan}, ${5:bool relative})",
		"description": ""
	},
	"reaper.CSurf_OnPanChange": {
		"prefix": "reaper.CSurf_OnPanChange",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.CSurf_OnPanChange(${3:MediaTrack trackid}, ${4:number pan}, ${5:boolean relative})",
		"description": ""
	},
	"RPR_CSurf_OnPanChange": {
		"prefix": "RPR_CSurf_OnPanChange",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_CSurf_OnPanChange(${3:MediaTrack trackid}, ${4:Float pan}, ${5:Boolean relative})",
		"description": ""
	},
	"CSurf_OnPanChangeEx": {
		"prefix": "CSurf_OnPanChangeEx",
		"scope": "eel",
		"body": "${1:${2:double} = }CSurf_OnPanChangeEx(${3:MediaTrack trackid}, ${4:pan}, ${5:bool relative}, ${6:bool allowGang})",
		"description": ""
	},
	"reaper.CSurf_OnPanChangeEx": {
		"prefix": "reaper.CSurf_OnPanChangeEx",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.CSurf_OnPanChangeEx(${3:MediaTrack trackid}, ${4:number pan}, ${5:boolean relative}, ${6:boolean allowGang})",
		"description": ""
	},
	"RPR_CSurf_OnPanChangeEx": {
		"prefix": "RPR_CSurf_OnPanChangeEx",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_CSurf_OnPanChangeEx(${3:MediaTrack trackid}, ${4:Float pan}, ${5:Boolean relative}, ${6:Boolean allowGang})",
		"description": ""
	},
	"CSurf_OnPause": {
		"prefix": "CSurf_OnPause",
		"scope": "eel",
		"body": "CSurf_OnPause()",
		"description": ""
	},
	"reaper.CSurf_OnPause": {
		"prefix": "reaper.CSurf_OnPause",
		"scope": "lua",
		"body": "reaper.CSurf_OnPause()",
		"description": ""
	},
	"RPR_CSurf_OnPause": {
		"prefix": "RPR_CSurf_OnPause",
		"scope": "python",
		"body": "RPR_CSurf_OnPause()",
		"description": ""
	},
	"CSurf_OnPlay": {
		"prefix": "CSurf_OnPlay",
		"scope": "eel",
		"body": "CSurf_OnPlay()",
		"description": ""
	},
	"reaper.CSurf_OnPlay": {
		"prefix": "reaper.CSurf_OnPlay",
		"scope": "lua",
		"body": "reaper.CSurf_OnPlay()",
		"description": ""
	},
	"RPR_CSurf_OnPlay": {
		"prefix": "RPR_CSurf_OnPlay",
		"scope": "python",
		"body": "RPR_CSurf_OnPlay()",
		"description": ""
	},
	"CSurf_OnPlayRateChange": {
		"prefix": "CSurf_OnPlayRateChange",
		"scope": "eel",
		"body": "CSurf_OnPlayRateChange(${1:playrate})",
		"description": ""
	},
	"reaper.CSurf_OnPlayRateChange": {
		"prefix": "reaper.CSurf_OnPlayRateChange",
		"scope": "lua",
		"body": "reaper.CSurf_OnPlayRateChange(${1:number playrate})",
		"description": ""
	},
	"RPR_CSurf_OnPlayRateChange": {
		"prefix": "RPR_CSurf_OnPlayRateChange",
		"scope": "python",
		"body": "RPR_CSurf_OnPlayRateChange(${1:Float playrate})",
		"description": ""
	},
	"CSurf_OnRecArmChange": {
		"prefix": "CSurf_OnRecArmChange",
		"scope": "eel",
		"body": "${1:${2:bool} = }CSurf_OnRecArmChange(${3:MediaTrack trackid}, ${4:int recarm})",
		"description": ""
	},
	"reaper.CSurf_OnRecArmChange": {
		"prefix": "reaper.CSurf_OnRecArmChange",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.CSurf_OnRecArmChange(${3:MediaTrack trackid}, ${4:integer recarm})",
		"description": ""
	},
	"RPR_CSurf_OnRecArmChange": {
		"prefix": "RPR_CSurf_OnRecArmChange",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_CSurf_OnRecArmChange(${3:MediaTrack trackid}, ${4:Int recarm})",
		"description": ""
	},
	"CSurf_OnRecArmChangeEx": {
		"prefix": "CSurf_OnRecArmChangeEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }CSurf_OnRecArmChangeEx(${3:MediaTrack trackid}, ${4:int recarm}, ${5:bool allowgang})",
		"description": ""
	},
	"reaper.CSurf_OnRecArmChangeEx": {
		"prefix": "reaper.CSurf_OnRecArmChangeEx",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.CSurf_OnRecArmChangeEx(${3:MediaTrack trackid}, ${4:integer recarm}, ${5:boolean allowgang})",
		"description": ""
	},
	"RPR_CSurf_OnRecArmChangeEx": {
		"prefix": "RPR_CSurf_OnRecArmChangeEx",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_CSurf_OnRecArmChangeEx(${3:MediaTrack trackid}, ${4:Int recarm}, ${5:Boolean allowgang})",
		"description": ""
	},
	"CSurf_OnRecord": {
		"prefix": "CSurf_OnRecord",
		"scope": "eel",
		"body": "CSurf_OnRecord()",
		"description": ""
	},
	"reaper.CSurf_OnRecord": {
		"prefix": "reaper.CSurf_OnRecord",
		"scope": "lua",
		"body": "reaper.CSurf_OnRecord()",
		"description": ""
	},
	"RPR_CSurf_OnRecord": {
		"prefix": "RPR_CSurf_OnRecord",
		"scope": "python",
		"body": "RPR_CSurf_OnRecord()",
		"description": ""
	},
	"CSurf_OnRecvPanChange": {
		"prefix": "CSurf_OnRecvPanChange",
		"scope": "eel",
		"body": "${1:${2:double} = }CSurf_OnRecvPanChange(${3:MediaTrack trackid}, ${4:int recv_index}, ${5:pan}, ${6:bool relative})",
		"description": ""
	},
	"reaper.CSurf_OnRecvPanChange": {
		"prefix": "reaper.CSurf_OnRecvPanChange",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.CSurf_OnRecvPanChange(${3:MediaTrack trackid}, ${4:integer recv_index}, ${5:number pan}, ${6:boolean relative})",
		"description": ""
	},
	"RPR_CSurf_OnRecvPanChange": {
		"prefix": "RPR_CSurf_OnRecvPanChange",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_CSurf_OnRecvPanChange(${3:MediaTrack trackid}, ${4:Int recv_index}, ${5:Float pan}, ${6:Boolean relative})",
		"description": ""
	},
	"CSurf_OnRecvVolumeChange": {
		"prefix": "CSurf_OnRecvVolumeChange",
		"scope": "eel",
		"body": "${1:${2:double} = }CSurf_OnRecvVolumeChange(${3:MediaTrack trackid}, ${4:int recv_index}, ${5:volume}, ${6:bool relative})",
		"description": ""
	},
	"reaper.CSurf_OnRecvVolumeChange": {
		"prefix": "reaper.CSurf_OnRecvVolumeChange",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.CSurf_OnRecvVolumeChange(${3:MediaTrack trackid}, ${4:integer recv_index}, ${5:number volume}, ${6:boolean relative})",
		"description": ""
	},
	"RPR_CSurf_OnRecvVolumeChange": {
		"prefix": "RPR_CSurf_OnRecvVolumeChange",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_CSurf_OnRecvVolumeChange(${3:MediaTrack trackid}, ${4:Int recv_index}, ${5:Float volume}, ${6:Boolean relative})",
		"description": ""
	},
	"CSurf_OnRew": {
		"prefix": "CSurf_OnRew",
		"scope": "eel",
		"body": "CSurf_OnRew(${1:int seekplay})",
		"description": ""
	},
	"reaper.CSurf_OnRew": {
		"prefix": "reaper.CSurf_OnRew",
		"scope": "lua",
		"body": "reaper.CSurf_OnRew(${1:integer seekplay})",
		"description": ""
	},
	"RPR_CSurf_OnRew": {
		"prefix": "RPR_CSurf_OnRew",
		"scope": "python",
		"body": "RPR_CSurf_OnRew(${1:Int seekplay})",
		"description": ""
	},
	"CSurf_OnRewFwd": {
		"prefix": "CSurf_OnRewFwd",
		"scope": "eel",
		"body": "CSurf_OnRewFwd(${1:int seekplay}, ${2:int dir})",
		"description": ""
	},
	"reaper.CSurf_OnRewFwd": {
		"prefix": "reaper.CSurf_OnRewFwd",
		"scope": "lua",
		"body": "reaper.CSurf_OnRewFwd(${1:integer seekplay}, ${2:integer dir})",
		"description": ""
	},
	"RPR_CSurf_OnRewFwd": {
		"prefix": "RPR_CSurf_OnRewFwd",
		"scope": "python",
		"body": "RPR_CSurf_OnRewFwd(${1:Int seekplay}, ${2:Int dir})",
		"description": ""
	},
	"CSurf_OnScroll": {
		"prefix": "CSurf_OnScroll",
		"scope": "eel",
		"body": "CSurf_OnScroll(${1:int xdir}, ${2:int ydir})",
		"description": ""
	},
	"reaper.CSurf_OnScroll": {
		"prefix": "reaper.CSurf_OnScroll",
		"scope": "lua",
		"body": "reaper.CSurf_OnScroll(${1:integer xdir}, ${2:integer ydir})",
		"description": ""
	},
	"RPR_CSurf_OnScroll": {
		"prefix": "RPR_CSurf_OnScroll",
		"scope": "python",
		"body": "RPR_CSurf_OnScroll(${1:Int xdir}, ${2:Int ydir})",
		"description": ""
	},
	"CSurf_OnSelectedChange": {
		"prefix": "CSurf_OnSelectedChange",
		"scope": "eel",
		"body": "${1:${2:bool} = }CSurf_OnSelectedChange(${3:MediaTrack trackid}, ${4:int selected})",
		"description": ""
	},
	"reaper.CSurf_OnSelectedChange": {
		"prefix": "reaper.CSurf_OnSelectedChange",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.CSurf_OnSelectedChange(${3:MediaTrack trackid}, ${4:integer selected})",
		"description": ""
	},
	"RPR_CSurf_OnSelectedChange": {
		"prefix": "RPR_CSurf_OnSelectedChange",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_CSurf_OnSelectedChange(${3:MediaTrack trackid}, ${4:Int selected})",
		"description": ""
	},
	"CSurf_OnSendPanChange": {
		"prefix": "CSurf_OnSendPanChange",
		"scope": "eel",
		"body": "${1:${2:double} = }CSurf_OnSendPanChange(${3:MediaTrack trackid}, ${4:int send_index}, ${5:pan}, ${6:bool relative})",
		"description": ""
	},
	"reaper.CSurf_OnSendPanChange": {
		"prefix": "reaper.CSurf_OnSendPanChange",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.CSurf_OnSendPanChange(${3:MediaTrack trackid}, ${4:integer send_index}, ${5:number pan}, ${6:boolean relative})",
		"description": ""
	},
	"RPR_CSurf_OnSendPanChange": {
		"prefix": "RPR_CSurf_OnSendPanChange",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_CSurf_OnSendPanChange(${3:MediaTrack trackid}, ${4:Int send_index}, ${5:Float pan}, ${6:Boolean relative})",
		"description": ""
	},
	"CSurf_OnSendVolumeChange": {
		"prefix": "CSurf_OnSendVolumeChange",
		"scope": "eel",
		"body": "${1:${2:double} = }CSurf_OnSendVolumeChange(${3:MediaTrack trackid}, ${4:int send_index}, ${5:volume}, ${6:bool relative})",
		"description": ""
	},
	"reaper.CSurf_OnSendVolumeChange": {
		"prefix": "reaper.CSurf_OnSendVolumeChange",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.CSurf_OnSendVolumeChange(${3:MediaTrack trackid}, ${4:integer send_index}, ${5:number volume}, ${6:boolean relative})",
		"description": ""
	},
	"RPR_CSurf_OnSendVolumeChange": {
		"prefix": "RPR_CSurf_OnSendVolumeChange",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_CSurf_OnSendVolumeChange(${3:MediaTrack trackid}, ${4:Int send_index}, ${5:Float volume}, ${6:Boolean relative})",
		"description": ""
	},
	"CSurf_OnSoloChange": {
		"prefix": "CSurf_OnSoloChange",
		"scope": "eel",
		"body": "${1:${2:bool} = }CSurf_OnSoloChange(${3:MediaTrack trackid}, ${4:int solo})",
		"description": ""
	},
	"reaper.CSurf_OnSoloChange": {
		"prefix": "reaper.CSurf_OnSoloChange",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.CSurf_OnSoloChange(${3:MediaTrack trackid}, ${4:integer solo})",
		"description": ""
	},
	"RPR_CSurf_OnSoloChange": {
		"prefix": "RPR_CSurf_OnSoloChange",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_CSurf_OnSoloChange(${3:MediaTrack trackid}, ${4:Int solo})",
		"description": ""
	},
	"CSurf_OnSoloChangeEx": {
		"prefix": "CSurf_OnSoloChangeEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }CSurf_OnSoloChangeEx(${3:MediaTrack trackid}, ${4:int solo}, ${5:bool allowgang})",
		"description": ""
	},
	"reaper.CSurf_OnSoloChangeEx": {
		"prefix": "reaper.CSurf_OnSoloChangeEx",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.CSurf_OnSoloChangeEx(${3:MediaTrack trackid}, ${4:integer solo}, ${5:boolean allowgang})",
		"description": ""
	},
	"RPR_CSurf_OnSoloChangeEx": {
		"prefix": "RPR_CSurf_OnSoloChangeEx",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_CSurf_OnSoloChangeEx(${3:MediaTrack trackid}, ${4:Int solo}, ${5:Boolean allowgang})",
		"description": ""
	},
	"CSurf_OnStop": {
		"prefix": "CSurf_OnStop",
		"scope": "eel",
		"body": "CSurf_OnStop()",
		"description": ""
	},
	"reaper.CSurf_OnStop": {
		"prefix": "reaper.CSurf_OnStop",
		"scope": "lua",
		"body": "reaper.CSurf_OnStop()",
		"description": ""
	},
	"RPR_CSurf_OnStop": {
		"prefix": "RPR_CSurf_OnStop",
		"scope": "python",
		"body": "RPR_CSurf_OnStop()",
		"description": ""
	},
	"CSurf_OnTempoChange": {
		"prefix": "CSurf_OnTempoChange",
		"scope": "eel",
		"body": "CSurf_OnTempoChange(${1:bpm})",
		"description": ""
	},
	"reaper.CSurf_OnTempoChange": {
		"prefix": "reaper.CSurf_OnTempoChange",
		"scope": "lua",
		"body": "reaper.CSurf_OnTempoChange(${1:number bpm})",
		"description": ""
	},
	"RPR_CSurf_OnTempoChange": {
		"prefix": "RPR_CSurf_OnTempoChange",
		"scope": "python",
		"body": "RPR_CSurf_OnTempoChange(${1:Float bpm})",
		"description": ""
	},
	"CSurf_OnTrackSelection": {
		"prefix": "CSurf_OnTrackSelection",
		"scope": "eel",
		"body": "CSurf_OnTrackSelection(${1:MediaTrack trackid})",
		"description": ""
	},
	"reaper.CSurf_OnTrackSelection": {
		"prefix": "reaper.CSurf_OnTrackSelection",
		"scope": "lua",
		"body": "reaper.CSurf_OnTrackSelection(${1:MediaTrack trackid})",
		"description": ""
	},
	"RPR_CSurf_OnTrackSelection": {
		"prefix": "RPR_CSurf_OnTrackSelection",
		"scope": "python",
		"body": "RPR_CSurf_OnTrackSelection(${1:MediaTrack trackid})",
		"description": ""
	},
	"CSurf_OnVolumeChange": {
		"prefix": "CSurf_OnVolumeChange",
		"scope": "eel",
		"body": "${1:${2:double} = }CSurf_OnVolumeChange(${3:MediaTrack trackid}, ${4:volume}, ${5:bool relative})",
		"description": ""
	},
	"reaper.CSurf_OnVolumeChange": {
		"prefix": "reaper.CSurf_OnVolumeChange",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.CSurf_OnVolumeChange(${3:MediaTrack trackid}, ${4:number volume}, ${5:boolean relative})",
		"description": ""
	},
	"RPR_CSurf_OnVolumeChange": {
		"prefix": "RPR_CSurf_OnVolumeChange",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_CSurf_OnVolumeChange(${3:MediaTrack trackid}, ${4:Float volume}, ${5:Boolean relative})",
		"description": ""
	},
	"CSurf_OnVolumeChangeEx": {
		"prefix": "CSurf_OnVolumeChangeEx",
		"scope": "eel",
		"body": "${1:${2:double} = }CSurf_OnVolumeChangeEx(${3:MediaTrack trackid}, ${4:volume}, ${5:bool relative}, ${6:bool allowGang})",
		"description": ""
	},
	"reaper.CSurf_OnVolumeChangeEx": {
		"prefix": "reaper.CSurf_OnVolumeChangeEx",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.CSurf_OnVolumeChangeEx(${3:MediaTrack trackid}, ${4:number volume}, ${5:boolean relative}, ${6:boolean allowGang})",
		"description": ""
	},
	"RPR_CSurf_OnVolumeChangeEx": {
		"prefix": "RPR_CSurf_OnVolumeChangeEx",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_CSurf_OnVolumeChangeEx(${3:MediaTrack trackid}, ${4:Float volume}, ${5:Boolean relative}, ${6:Boolean allowGang})",
		"description": ""
	},
	"CSurf_OnWidthChange": {
		"prefix": "CSurf_OnWidthChange",
		"scope": "eel",
		"body": "${1:${2:double} = }CSurf_OnWidthChange(${3:MediaTrack trackid}, ${4:width}, ${5:bool relative})",
		"description": ""
	},
	"reaper.CSurf_OnWidthChange": {
		"prefix": "reaper.CSurf_OnWidthChange",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.CSurf_OnWidthChange(${3:MediaTrack trackid}, ${4:number width}, ${5:boolean relative})",
		"description": ""
	},
	"RPR_CSurf_OnWidthChange": {
		"prefix": "RPR_CSurf_OnWidthChange",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_CSurf_OnWidthChange(${3:MediaTrack trackid}, ${4:Float width}, ${5:Boolean relative})",
		"description": ""
	},
	"CSurf_OnWidthChangeEx": {
		"prefix": "CSurf_OnWidthChangeEx",
		"scope": "eel",
		"body": "${1:${2:double} = }CSurf_OnWidthChangeEx(${3:MediaTrack trackid}, ${4:width}, ${5:bool relative}, ${6:bool allowGang})",
		"description": ""
	},
	"reaper.CSurf_OnWidthChangeEx": {
		"prefix": "reaper.CSurf_OnWidthChangeEx",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.CSurf_OnWidthChangeEx(${3:MediaTrack trackid}, ${4:number width}, ${5:boolean relative}, ${6:boolean allowGang})",
		"description": ""
	},
	"RPR_CSurf_OnWidthChangeEx": {
		"prefix": "RPR_CSurf_OnWidthChangeEx",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_CSurf_OnWidthChangeEx(${3:MediaTrack trackid}, ${4:Float width}, ${5:Boolean relative}, ${6:Boolean allowGang})",
		"description": ""
	},
	"CSurf_OnZoom": {
		"prefix": "CSurf_OnZoom",
		"scope": "eel",
		"body": "CSurf_OnZoom(${1:int xdir}, ${2:int ydir})",
		"description": ""
	},
	"reaper.CSurf_OnZoom": {
		"prefix": "reaper.CSurf_OnZoom",
		"scope": "lua",
		"body": "reaper.CSurf_OnZoom(${1:integer xdir}, ${2:integer ydir})",
		"description": ""
	},
	"RPR_CSurf_OnZoom": {
		"prefix": "RPR_CSurf_OnZoom",
		"scope": "python",
		"body": "RPR_CSurf_OnZoom(${1:Int xdir}, ${2:Int ydir})",
		"description": ""
	},
	"CSurf_ResetAllCachedVolPanStates": {
		"prefix": "CSurf_ResetAllCachedVolPanStates",
		"scope": "eel",
		"body": "CSurf_ResetAllCachedVolPanStates()",
		"description": ""
	},
	"reaper.CSurf_ResetAllCachedVolPanStates": {
		"prefix": "reaper.CSurf_ResetAllCachedVolPanStates",
		"scope": "lua",
		"body": "reaper.CSurf_ResetAllCachedVolPanStates()",
		"description": ""
	},
	"RPR_CSurf_ResetAllCachedVolPanStates": {
		"prefix": "RPR_CSurf_ResetAllCachedVolPanStates",
		"scope": "python",
		"body": "RPR_CSurf_ResetAllCachedVolPanStates()",
		"description": ""
	},
	"CSurf_ScrubAmt": {
		"prefix": "CSurf_ScrubAmt",
		"scope": "eel",
		"body": "CSurf_ScrubAmt(${1:amt})",
		"description": ""
	},
	"reaper.CSurf_ScrubAmt": {
		"prefix": "reaper.CSurf_ScrubAmt",
		"scope": "lua",
		"body": "reaper.CSurf_ScrubAmt(${1:number amt})",
		"description": ""
	},
	"RPR_CSurf_ScrubAmt": {
		"prefix": "RPR_CSurf_ScrubAmt",
		"scope": "python",
		"body": "RPR_CSurf_ScrubAmt(${1:Float amt})",
		"description": ""
	},
	"CSurf_SetAutoMode": {
		"prefix": "CSurf_SetAutoMode",
		"scope": "eel",
		"body": "CSurf_SetAutoMode(${1:int mode}, ${2:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"reaper.CSurf_SetAutoMode": {
		"prefix": "reaper.CSurf_SetAutoMode",
		"scope": "lua",
		"body": "reaper.CSurf_SetAutoMode(${1:integer mode}, ${2:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"RPR_CSurf_SetAutoMode": {
		"prefix": "RPR_CSurf_SetAutoMode",
		"scope": "python",
		"body": "RPR_CSurf_SetAutoMode(${1:Int mode}, ${2:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"CSurf_SetPlayState": {
		"prefix": "CSurf_SetPlayState",
		"scope": "eel",
		"body": "CSurf_SetPlayState(${1:bool play}, ${2:bool pause}, ${3:bool rec}, ${4:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"reaper.CSurf_SetPlayState": {
		"prefix": "reaper.CSurf_SetPlayState",
		"scope": "lua",
		"body": "reaper.CSurf_SetPlayState(${1:boolean play}, ${2:boolean pause}, ${3:boolean rec}, ${4:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"RPR_CSurf_SetPlayState": {
		"prefix": "RPR_CSurf_SetPlayState",
		"scope": "python",
		"body": "RPR_CSurf_SetPlayState(${1:Boolean play}, ${2:Boolean pause}, ${3:Boolean rec}, ${4:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"CSurf_SetRepeatState": {
		"prefix": "CSurf_SetRepeatState",
		"scope": "eel",
		"body": "CSurf_SetRepeatState(${1:bool rep}, ${2:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"reaper.CSurf_SetRepeatState": {
		"prefix": "reaper.CSurf_SetRepeatState",
		"scope": "lua",
		"body": "reaper.CSurf_SetRepeatState(${1:boolean rep}, ${2:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"RPR_CSurf_SetRepeatState": {
		"prefix": "RPR_CSurf_SetRepeatState",
		"scope": "python",
		"body": "RPR_CSurf_SetRepeatState(${1:Boolean rep}, ${2:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"CSurf_SetSurfaceMute": {
		"prefix": "CSurf_SetSurfaceMute",
		"scope": "eel",
		"body": "CSurf_SetSurfaceMute(${1:MediaTrack trackid}, ${2:bool mute}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"reaper.CSurf_SetSurfaceMute": {
		"prefix": "reaper.CSurf_SetSurfaceMute",
		"scope": "lua",
		"body": "reaper.CSurf_SetSurfaceMute(${1:MediaTrack trackid}, ${2:boolean mute}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"RPR_CSurf_SetSurfaceMute": {
		"prefix": "RPR_CSurf_SetSurfaceMute",
		"scope": "python",
		"body": "RPR_CSurf_SetSurfaceMute(${1:MediaTrack trackid}, ${2:Boolean mute}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"CSurf_SetSurfacePan": {
		"prefix": "CSurf_SetSurfacePan",
		"scope": "eel",
		"body": "CSurf_SetSurfacePan(${1:MediaTrack trackid}, ${2:pan}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"reaper.CSurf_SetSurfacePan": {
		"prefix": "reaper.CSurf_SetSurfacePan",
		"scope": "lua",
		"body": "reaper.CSurf_SetSurfacePan(${1:MediaTrack trackid}, ${2:number pan}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"RPR_CSurf_SetSurfacePan": {
		"prefix": "RPR_CSurf_SetSurfacePan",
		"scope": "python",
		"body": "RPR_CSurf_SetSurfacePan(${1:MediaTrack trackid}, ${2:Float pan}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"CSurf_SetSurfaceRecArm": {
		"prefix": "CSurf_SetSurfaceRecArm",
		"scope": "eel",
		"body": "CSurf_SetSurfaceRecArm(${1:MediaTrack trackid}, ${2:bool recarm}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"reaper.CSurf_SetSurfaceRecArm": {
		"prefix": "reaper.CSurf_SetSurfaceRecArm",
		"scope": "lua",
		"body": "reaper.CSurf_SetSurfaceRecArm(${1:MediaTrack trackid}, ${2:boolean recarm}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"RPR_CSurf_SetSurfaceRecArm": {
		"prefix": "RPR_CSurf_SetSurfaceRecArm",
		"scope": "python",
		"body": "RPR_CSurf_SetSurfaceRecArm(${1:MediaTrack trackid}, ${2:Boolean recarm}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"CSurf_SetSurfaceSelected": {
		"prefix": "CSurf_SetSurfaceSelected",
		"scope": "eel",
		"body": "CSurf_SetSurfaceSelected(${1:MediaTrack trackid}, ${2:bool selected}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"reaper.CSurf_SetSurfaceSelected": {
		"prefix": "reaper.CSurf_SetSurfaceSelected",
		"scope": "lua",
		"body": "reaper.CSurf_SetSurfaceSelected(${1:MediaTrack trackid}, ${2:boolean selected}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"RPR_CSurf_SetSurfaceSelected": {
		"prefix": "RPR_CSurf_SetSurfaceSelected",
		"scope": "python",
		"body": "RPR_CSurf_SetSurfaceSelected(${1:MediaTrack trackid}, ${2:Boolean selected}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"CSurf_SetSurfaceSolo": {
		"prefix": "CSurf_SetSurfaceSolo",
		"scope": "eel",
		"body": "CSurf_SetSurfaceSolo(${1:MediaTrack trackid}, ${2:bool solo}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"reaper.CSurf_SetSurfaceSolo": {
		"prefix": "reaper.CSurf_SetSurfaceSolo",
		"scope": "lua",
		"body": "reaper.CSurf_SetSurfaceSolo(${1:MediaTrack trackid}, ${2:boolean solo}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"RPR_CSurf_SetSurfaceSolo": {
		"prefix": "RPR_CSurf_SetSurfaceSolo",
		"scope": "python",
		"body": "RPR_CSurf_SetSurfaceSolo(${1:MediaTrack trackid}, ${2:Boolean solo}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"CSurf_SetSurfaceVolume": {
		"prefix": "CSurf_SetSurfaceVolume",
		"scope": "eel",
		"body": "CSurf_SetSurfaceVolume(${1:MediaTrack trackid}, ${2:volume}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"reaper.CSurf_SetSurfaceVolume": {
		"prefix": "reaper.CSurf_SetSurfaceVolume",
		"scope": "lua",
		"body": "reaper.CSurf_SetSurfaceVolume(${1:MediaTrack trackid}, ${2:number volume}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"RPR_CSurf_SetSurfaceVolume": {
		"prefix": "RPR_CSurf_SetSurfaceVolume",
		"scope": "python",
		"body": "RPR_CSurf_SetSurfaceVolume(${1:MediaTrack trackid}, ${2:Float volume}, ${3:IReaperControlSurface ignoresurf})",
		"description": ""
	},
	"CSurf_SetTrackListChange": {
		"prefix": "CSurf_SetTrackListChange",
		"scope": "eel",
		"body": "CSurf_SetTrackListChange()",
		"description": ""
	},
	"reaper.CSurf_SetTrackListChange": {
		"prefix": "reaper.CSurf_SetTrackListChange",
		"scope": "lua",
		"body": "reaper.CSurf_SetTrackListChange()",
		"description": ""
	},
	"RPR_CSurf_SetTrackListChange": {
		"prefix": "RPR_CSurf_SetTrackListChange",
		"scope": "python",
		"body": "RPR_CSurf_SetTrackListChange()",
		"description": ""
	},
	"CSurf_TrackFromID": {
		"prefix": "CSurf_TrackFromID",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }CSurf_TrackFromID(${3:int idx}, ${4:bool mcpView})",
		"description": ""
	},
	"reaper.CSurf_TrackFromID": {
		"prefix": "reaper.CSurf_TrackFromID",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.CSurf_TrackFromID(${3:integer idx}, ${4:boolean mcpView})",
		"description": ""
	},
	"RPR_CSurf_TrackFromID": {
		"prefix": "RPR_CSurf_TrackFromID",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_CSurf_TrackFromID(${3:Int idx}, ${4:Boolean mcpView})",
		"description": ""
	},
	"CSurf_TrackToID": {
		"prefix": "CSurf_TrackToID",
		"scope": "eel",
		"body": "${1:${2:int} = }CSurf_TrackToID(${3:MediaTrack track}, ${4:bool mcpView})",
		"description": ""
	},
	"reaper.CSurf_TrackToID": {
		"prefix": "reaper.CSurf_TrackToID",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.CSurf_TrackToID(${3:MediaTrack track}, ${4:boolean mcpView})",
		"description": ""
	},
	"RPR_CSurf_TrackToID": {
		"prefix": "RPR_CSurf_TrackToID",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_CSurf_TrackToID(${3:MediaTrack track}, ${4:Boolean mcpView})",
		"description": ""
	},
	"DB2SLIDER": {
		"prefix": "DB2SLIDER",
		"scope": "eel",
		"body": "${1:${2:double} = }DB2SLIDER(${3:x})",
		"description": ""
	},
	"reaper.DB2SLIDER": {
		"prefix": "reaper.DB2SLIDER",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.DB2SLIDER(${3:number x})",
		"description": ""
	},
	"RPR_DB2SLIDER": {
		"prefix": "RPR_DB2SLIDER",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_DB2SLIDER(${3:Float x})",
		"description": ""
	},
	"DeleteEnvelopePointRange": {
		"prefix": "DeleteEnvelopePointRange",
		"scope": "eel",
		"body": "${1:${2:bool} = }DeleteEnvelopePointRange(${3:TrackEnvelope envelope}, ${4:time_start}, ${5:time_end})",
		"description": "Delete a range of envelope points."
	},
	"reaper.DeleteEnvelopePointRange": {
		"prefix": "reaper.DeleteEnvelopePointRange",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.DeleteEnvelopePointRange(${3:TrackEnvelope envelope}, ${4:number time_start}, ${5:number time_end})",
		"description": "Delete a range of envelope points."
	},
	"RPR_DeleteEnvelopePointRange": {
		"prefix": "RPR_DeleteEnvelopePointRange",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_DeleteEnvelopePointRange(${3:TrackEnvelope envelope}, ${4:Float time_start}, ${5:Float time_end})",
		"description": "Delete a range of envelope points."
	},
	"DeleteEnvelopePointRangeEx": {
		"prefix": "DeleteEnvelopePointRangeEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }DeleteEnvelopePointRangeEx(${3:TrackEnvelope envelope}, ${4:int autoitem_idx}, ${5:time_start}, ${6:time_end})",
		"description": "Delete a range of envelope points. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc."
	},
	"reaper.DeleteEnvelopePointRangeEx": {
		"prefix": "reaper.DeleteEnvelopePointRangeEx",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.DeleteEnvelopePointRangeEx(${3:TrackEnvelope envelope}, ${4:integer autoitem_idx}, ${5:number time_start}, ${6:number time_end})",
		"description": "Delete a range of envelope points. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc."
	},
	"RPR_DeleteEnvelopePointRangeEx": {
		"prefix": "RPR_DeleteEnvelopePointRangeEx",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_DeleteEnvelopePointRangeEx(${3:TrackEnvelope envelope}, ${4:Int autoitem_idx}, ${5:Float time_start}, ${6:Float time_end})",
		"description": "Delete a range of envelope points. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc."
	},
	"DeleteExtState": {
		"prefix": "DeleteExtState",
		"scope": "eel",
		"body": "DeleteExtState(${1:\"section\"}, ${2:\"key\"}, ${3:bool persist})",
		"description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState."
	},
	"reaper.DeleteExtState": {
		"prefix": "reaper.DeleteExtState",
		"scope": "lua",
		"body": "reaper.DeleteExtState(${1:string section}, ${2:string key}, ${3:boolean persist})",
		"description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState."
	},
	"RPR_DeleteExtState": {
		"prefix": "RPR_DeleteExtState",
		"scope": "python",
		"body": "RPR_DeleteExtState(${1:String section}, ${2:String key}, ${3:Boolean persist})",
		"description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState."
	},
	"DeleteProjectMarker": {
		"prefix": "DeleteProjectMarker",
		"scope": "eel",
		"body": "${1:${2:bool} = }DeleteProjectMarker(${3:ReaProject proj}, ${4:int markrgnindexnumber}, ${5:bool isrgn})",
		"description": "Delete a marker.  proj==NULL for the active project."
	},
	"reaper.DeleteProjectMarker": {
		"prefix": "reaper.DeleteProjectMarker",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.DeleteProjectMarker(${3:ReaProject proj}, ${4:integer markrgnindexnumber}, ${5:boolean isrgn})",
		"description": "Delete a marker.  proj==NULL for the active project."
	},
	"RPR_DeleteProjectMarker": {
		"prefix": "RPR_DeleteProjectMarker",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_DeleteProjectMarker(${3:ReaProject proj}, ${4:Int markrgnindexnumber}, ${5:Boolean isrgn})",
		"description": "Delete a marker.  proj==NULL for the active project."
	},
	"DeleteProjectMarkerByIndex": {
		"prefix": "DeleteProjectMarkerByIndex",
		"scope": "eel",
		"body": "${1:${2:bool} = }DeleteProjectMarkerByIndex(${3:ReaProject proj}, ${4:int markrgnidx})",
		"description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4)."
	},
	"reaper.DeleteProjectMarkerByIndex": {
		"prefix": "reaper.DeleteProjectMarkerByIndex",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.DeleteProjectMarkerByIndex(${3:ReaProject proj}, ${4:integer markrgnidx})",
		"description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4)."
	},
	"RPR_DeleteProjectMarkerByIndex": {
		"prefix": "RPR_DeleteProjectMarkerByIndex",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_DeleteProjectMarkerByIndex(${3:ReaProject proj}, ${4:Int markrgnidx})",
		"description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4)."
	},
	"DeleteTakeStretchMarkers": {
		"prefix": "DeleteTakeStretchMarkers",
		"scope": "eel",
		"body": "${1:${2:int} = }DeleteTakeStretchMarkers(${3:MediaItem_Take take}, ${4:int idx}, ${5:optional int countIn})",
		"description": "Deletes one or more stretch markers. Returns number of stretch markers deleted."
	},
	"reaper.DeleteTakeStretchMarkers": {
		"prefix": "reaper.DeleteTakeStretchMarkers",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.DeleteTakeStretchMarkers(${3:MediaItem_Take take}, ${4:integer idx}, ${5:optional number countIn})",
		"description": "Deletes one or more stretch markers. Returns number of stretch markers deleted."
	},
	"RPR_DeleteTakeStretchMarkers": {
		"prefix": "RPR_DeleteTakeStretchMarkers",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_DeleteTakeStretchMarkers(${3:MediaItem_Take take}, ${4:Int idx}, ${5:const int countInOptional})",
		"description": "Deletes one or more stretch markers. Returns number of stretch markers deleted."
	},
	"DeleteTempoTimeSigMarker": {
		"prefix": "DeleteTempoTimeSigMarker",
		"scope": "eel",
		"body": "${1:${2:bool} = }DeleteTempoTimeSigMarker(${3:ReaProject project}, ${4:int markerindex})",
		"description": "Delete a tempo/time signature marker."
	},
	"reaper.DeleteTempoTimeSigMarker": {
		"prefix": "reaper.DeleteTempoTimeSigMarker",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.DeleteTempoTimeSigMarker(${3:ReaProject project}, ${4:integer markerindex})",
		"description": "Delete a tempo/time signature marker."
	},
	"RPR_DeleteTempoTimeSigMarker": {
		"prefix": "RPR_DeleteTempoTimeSigMarker",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_DeleteTempoTimeSigMarker(${3:ReaProject project}, ${4:Int markerindex})",
		"description": "Delete a tempo/time signature marker."
	},
	"DeleteTrack": {
		"prefix": "DeleteTrack",
		"scope": "eel",
		"body": "DeleteTrack(${1:MediaTrack tr})",
		"description": "deletes a track"
	},
	"reaper.DeleteTrack": {
		"prefix": "reaper.DeleteTrack",
		"scope": "lua",
		"body": "reaper.DeleteTrack(${1:MediaTrack tr})",
		"description": "deletes a track"
	},
	"RPR_DeleteTrack": {
		"prefix": "RPR_DeleteTrack",
		"scope": "python",
		"body": "RPR_DeleteTrack(${1:MediaTrack tr})",
		"description": "deletes a track"
	},
	"DeleteTrackMediaItem": {
		"prefix": "DeleteTrackMediaItem",
		"scope": "eel",
		"body": "${1:${2:bool} = }DeleteTrackMediaItem(${3:MediaTrack tr}, ${4:MediaItem it})",
		"description": ""
	},
	"reaper.DeleteTrackMediaItem": {
		"prefix": "reaper.DeleteTrackMediaItem",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.DeleteTrackMediaItem(${3:MediaTrack tr}, ${4:MediaItem it})",
		"description": ""
	},
	"RPR_DeleteTrackMediaItem": {
		"prefix": "RPR_DeleteTrackMediaItem",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_DeleteTrackMediaItem(${3:MediaTrack tr}, ${4:MediaItem it})",
		"description": ""
	},
	"DestroyAudioAccessor": {
		"prefix": "DestroyAudioAccessor",
		"scope": "eel",
		"body": "DestroyAudioAccessor(${1:AudioAccessor accessor})",
		"description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"reaper.DestroyAudioAccessor": {
		"prefix": "reaper.DestroyAudioAccessor",
		"scope": "lua",
		"body": "reaper.DestroyAudioAccessor(${1:AudioAccessor accessor})",
		"description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"RPR_DestroyAudioAccessor": {
		"prefix": "RPR_DestroyAudioAccessor",
		"scope": "python",
		"body": "RPR_DestroyAudioAccessor(${1:AudioAccessor accessor})",
		"description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"Dock_UpdateDockID": {
		"prefix": "Dock_UpdateDockID",
		"scope": "eel",
		"body": "Dock_UpdateDockID(${1:\"ident_str\"}, ${2:int whichDock})",
		"description": "updates preference for docker window ident_str to be in dock whichDock on next ope"
	},
	"reaper.Dock_UpdateDockID": {
		"prefix": "reaper.Dock_UpdateDockID",
		"scope": "lua",
		"body": "reaper.Dock_UpdateDockID(${1:string ident_str}, ${2:integer whichDock})",
		"description": "updates preference for docker window ident_str to be in dock whichDock on next ope"
	},
	"RPR_Dock_UpdateDockID": {
		"prefix": "RPR_Dock_UpdateDockID",
		"scope": "python",
		"body": "RPR_Dock_UpdateDockID(${1:String ident_str}, ${2:Int whichDock})",
		"description": "updates preference for docker window ident_str to be in dock whichDock on next ope"
	},
	"DockIsChildOfDock": {
		"prefix": "DockIsChildOfDock",
		"scope": "eel",
		"body": "${1:${2:int} = }DockIsChildOfDock(${3:HWND hwnd}, ${4:bool +isFloatingDocker})",
		"description": "returns dock index that contains hwnd, or -1"
	},
	"reaper.DockIsChildOfDock": {
		"prefix": "reaper.DockIsChildOfDock",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:boolean isFloatingDocker} = }reaper.DockIsChildOfDock(${4:HWND hwnd})",
		"description": "returns dock index that contains hwnd, or -1"
	},
	"RPR_DockIsChildOfDock": {
		"prefix": "RPR_DockIsChildOfDock",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:HWND hwnd}, ${4:Boolean isFloatingDockerOut} = }RPR_DockIsChildOfDock(${5:hwnd}, ${6:isFloatingDockerOut})",
		"description": "returns dock index that contains hwnd, or -1"
	},
	"DockWindowActivate": {
		"prefix": "DockWindowActivate",
		"scope": "eel",
		"body": "DockWindowActivate(${1:HWND hwnd})",
		"description": ""
	},
	"reaper.DockWindowActivate": {
		"prefix": "reaper.DockWindowActivate",
		"scope": "lua",
		"body": "reaper.DockWindowActivate(${1:HWND hwnd})",
		"description": ""
	},
	"RPR_DockWindowActivate": {
		"prefix": "RPR_DockWindowActivate",
		"scope": "python",
		"body": "RPR_DockWindowActivate(${1:HWND hwnd})",
		"description": ""
	},
	"DockWindowAdd": {
		"prefix": "DockWindowAdd",
		"scope": "eel",
		"body": "DockWindowAdd(${1:HWND hwnd}, ${2:\"name\"}, ${3:int pos}, ${4:bool allowShow})",
		"description": ""
	},
	"reaper.DockWindowAdd": {
		"prefix": "reaper.DockWindowAdd",
		"scope": "lua",
		"body": "reaper.DockWindowAdd(${1:HWND hwnd}, ${2:string name}, ${3:integer pos}, ${4:boolean allowShow})",
		"description": ""
	},
	"RPR_DockWindowAdd": {
		"prefix": "RPR_DockWindowAdd",
		"scope": "python",
		"body": "RPR_DockWindowAdd(${1:HWND hwnd}, ${2:String name}, ${3:Int pos}, ${4:Boolean allowShow})",
		"description": ""
	},
	"DockWindowAddEx": {
		"prefix": "DockWindowAddEx",
		"scope": "eel",
		"body": "DockWindowAddEx(${1:HWND hwnd}, ${2:\"name\"}, ${3:\"identstr\"}, ${4:bool allowShow})",
		"description": ""
	},
	"reaper.DockWindowAddEx": {
		"prefix": "reaper.DockWindowAddEx",
		"scope": "lua",
		"body": "reaper.DockWindowAddEx(${1:HWND hwnd}, ${2:string name}, ${3:string identstr}, ${4:boolean allowShow})",
		"description": ""
	},
	"RPR_DockWindowAddEx": {
		"prefix": "RPR_DockWindowAddEx",
		"scope": "python",
		"body": "RPR_DockWindowAddEx(${1:HWND hwnd}, ${2:String name}, ${3:String identstr}, ${4:Boolean allowShow})",
		"description": ""
	},
	"DockWindowRefresh": {
		"prefix": "DockWindowRefresh",
		"scope": "eel",
		"body": "DockWindowRefresh()",
		"description": ""
	},
	"reaper.DockWindowRefresh": {
		"prefix": "reaper.DockWindowRefresh",
		"scope": "lua",
		"body": "reaper.DockWindowRefresh()",
		"description": ""
	},
	"RPR_DockWindowRefresh": {
		"prefix": "RPR_DockWindowRefresh",
		"scope": "python",
		"body": "RPR_DockWindowRefresh()",
		"description": ""
	},
	"DockWindowRefreshForHWND": {
		"prefix": "DockWindowRefreshForHWND",
		"scope": "eel",
		"body": "DockWindowRefreshForHWND(${1:HWND hwnd})",
		"description": ""
	},
	"reaper.DockWindowRefreshForHWND": {
		"prefix": "reaper.DockWindowRefreshForHWND",
		"scope": "lua",
		"body": "reaper.DockWindowRefreshForHWND(${1:HWND hwnd})",
		"description": ""
	},
	"RPR_DockWindowRefreshForHWND": {
		"prefix": "RPR_DockWindowRefreshForHWND",
		"scope": "python",
		"body": "RPR_DockWindowRefreshForHWND(${1:HWND hwnd})",
		"description": ""
	},
	"DockWindowRemove": {
		"prefix": "DockWindowRemove",
		"scope": "eel",
		"body": "DockWindowRemove(${1:HWND hwnd})",
		"description": ""
	},
	"reaper.DockWindowRemove": {
		"prefix": "reaper.DockWindowRemove",
		"scope": "lua",
		"body": "reaper.DockWindowRemove(${1:HWND hwnd})",
		"description": ""
	},
	"RPR_DockWindowRemove": {
		"prefix": "RPR_DockWindowRemove",
		"scope": "python",
		"body": "RPR_DockWindowRemove(${1:HWND hwnd})",
		"description": ""
	},
	"EditTempoTimeSigMarker": {
		"prefix": "EditTempoTimeSigMarker",
		"scope": "eel",
		"body": "${1:${2:bool} = }EditTempoTimeSigMarker(${3:ReaProject project}, ${4:int markerindex})",
		"description": "Open the tempo/time signature marker editor dialog."
	},
	"reaper.EditTempoTimeSigMarker": {
		"prefix": "reaper.EditTempoTimeSigMarker",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.EditTempoTimeSigMarker(${3:ReaProject project}, ${4:integer markerindex})",
		"description": "Open the tempo/time signature marker editor dialog."
	},
	"RPR_EditTempoTimeSigMarker": {
		"prefix": "RPR_EditTempoTimeSigMarker",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_EditTempoTimeSigMarker(${3:ReaProject project}, ${4:Int markerindex})",
		"description": "Open the tempo/time signature marker editor dialog."
	},
	"EnsureNotCompletelyOffscreen": {
		"prefix": "EnsureNotCompletelyOffscreen",
		"scope": "eel",
		"body": "EnsureNotCompletelyOffscreen(${1:int &rIn.left}, ${2:int &rIn.top}, ${3:int &rIn.right}, ${4:int &rIn.bot})",
		"description": "call with a saved window rect for your window and it'll correct any positioning info."
	},
	"reaper.EnsureNotCompletelyOffscreen": {
		"prefix": "reaper.EnsureNotCompletelyOffscreen",
		"scope": "lua",
		"body": "${1:${2:numberrIn.left}, ${3:numberrIn.top}, ${4:numberrIn.right}, ${5:numberrIn.bot} = }reaper.EnsureNotCompletelyOffscreen()",
		"description": "call with a saved window rect for your window and it'll correct any positioning info."
	},
	"RPR_EnsureNotCompletelyOffscreen": {
		"prefix": "RPR_EnsureNotCompletelyOffscreen",
		"scope": "python",
		"body": "RPR_EnsureNotCompletelyOffscreen(${1:RECT rInOut})",
		"description": "call with a saved window rect for your window and it'll correct any positioning info."
	},
	"EnumerateFiles": {
		"prefix": "EnumerateFiles",
		"scope": "eel",
		"body": "${1:${2:bool} = }EnumerateFiles(${3:#retval}, ${4:\"path\"}, ${5:int fileindex})",
		"description": "List the files in the \"path\" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See EnumerateSubdirectories"
	},
	"reaper.EnumerateFiles": {
		"prefix": "reaper.EnumerateFiles",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.EnumerateFiles(${3:string path}, ${4:integer fileindex})",
		"description": "List the files in the \"path\" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See EnumerateSubdirectories"
	},
	"RPR_EnumerateFiles": {
		"prefix": "RPR_EnumerateFiles",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_EnumerateFiles(${3:String path}, ${4:Int fileindex})",
		"description": "List the files in the \"path\" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See EnumerateSubdirectories"
	},
	"EnumerateSubdirectories": {
		"prefix": "EnumerateSubdirectories",
		"scope": "eel",
		"body": "${1:${2:bool} = }EnumerateSubdirectories(${3:#retval}, ${4:\"path\"}, ${5:int subdirindex})",
		"description": "List the subdirectories in the \"path\" directory. Returns NULL (or empty string, in Lua) when all subdirectories have been listed. See EnumerateFiles"
	},
	"reaper.EnumerateSubdirectories": {
		"prefix": "reaper.EnumerateSubdirectories",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.EnumerateSubdirectories(${3:string path}, ${4:integer subdirindex})",
		"description": "List the subdirectories in the \"path\" directory. Returns NULL (or empty string, in Lua) when all subdirectories have been listed. See EnumerateFiles"
	},
	"RPR_EnumerateSubdirectories": {
		"prefix": "RPR_EnumerateSubdirectories",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_EnumerateSubdirectories(${3:String path}, ${4:Int subdirindex})",
		"description": "List the subdirectories in the \"path\" directory. Returns NULL (or empty string, in Lua) when all subdirectories have been listed. See EnumerateFiles"
	},
	"EnumPitchShiftModes": {
		"prefix": "EnumPitchShiftModes",
		"scope": "eel",
		"body": "${1:${2:bool} = }EnumPitchShiftModes(${3:int mode}, ${4:#str})",
		"description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported"
	},
	"reaper.EnumPitchShiftModes": {
		"prefix": "reaper.EnumPitchShiftModes",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string str} = }reaper.EnumPitchShiftModes(${4:integer mode})",
		"description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported"
	},
	"RPR_EnumPitchShiftModes": {
		"prefix": "RPR_EnumPitchShiftModes",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_EnumPitchShiftModes(${3:Int mode}, ${4:String strOut})",
		"description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported"
	},
	"EnumPitchShiftSubModes": {
		"prefix": "EnumPitchShiftSubModes",
		"scope": "eel",
		"body": "${1:${2:bool} = }EnumPitchShiftSubModes(${3:#retval}, ${4:int mode}, ${5:int submode})",
		"description": "Returns submode name, or NULL"
	},
	"reaper.EnumPitchShiftSubModes": {
		"prefix": "reaper.EnumPitchShiftSubModes",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.EnumPitchShiftSubModes(${3:integer mode}, ${4:integer submode})",
		"description": "Returns submode name, or NULL"
	},
	"RPR_EnumPitchShiftSubModes": {
		"prefix": "RPR_EnumPitchShiftSubModes",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_EnumPitchShiftSubModes(${3:Int mode}, ${4:Int submode})",
		"description": "Returns submode name, or NULL"
	},
	"EnumProjectMarkers": {
		"prefix": "EnumProjectMarkers",
		"scope": "eel",
		"body": "${1:${2:int} = }EnumProjectMarkers(${3:int idx}, ${4:bool +isrgn}, ${5:+pos}, ${6:+rgnend}, ${7:#name}, ${8:int +markrgnindexnumber})",
		"description": ""
	},
	"reaper.EnumProjectMarkers": {
		"prefix": "reaper.EnumProjectMarkers",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:boolean isrgn}, ${4:number pos}, ${5:number rgnend}, ${6:string name}, ${7:number markrgnindexnumber} = }reaper.EnumProjectMarkers(${8:integer idx})",
		"description": ""
	},
	"RPR_EnumProjectMarkers": {
		"prefix": "RPR_EnumProjectMarkers",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:Int idx}, ${4:Boolean isrgnOut}, ${5:Float posOut}, ${6:Float rgnendOut}, ${7:String nameOut}, ${8:Int markrgnindexnumberOut} = }RPR_EnumProjectMarkers(${9:idx}, ${10:isrgnOut}, ${11:posOut}, ${12:rgnendOut}, ${13:nameOut}, ${14:markrgnindexnumberOut})",
		"description": ""
	},
	"EnumProjectMarkers2": {
		"prefix": "EnumProjectMarkers2",
		"scope": "eel",
		"body": "${1:${2:int} = }EnumProjectMarkers2(${3:ReaProject proj}, ${4:int idx}, ${5:bool +isrgn}, ${6:+pos}, ${7:+rgnend}, ${8:#name}, ${9:int +markrgnindexnumber})",
		"description": ""
	},
	"reaper.EnumProjectMarkers2": {
		"prefix": "reaper.EnumProjectMarkers2",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:boolean isrgn}, ${4:number pos}, ${5:number rgnend}, ${6:string name}, ${7:number markrgnindexnumber} = }reaper.EnumProjectMarkers2(${8:ReaProject proj}, ${9:integer idx})",
		"description": ""
	},
	"RPR_EnumProjectMarkers2": {
		"prefix": "RPR_EnumProjectMarkers2",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:ReaProject proj}, ${4:Int idx}, ${5:Boolean isrgnOut}, ${6:Float posOut}, ${7:Float rgnendOut}, ${8:String nameOut}, ${9:Int markrgnindexnumberOut} = }RPR_EnumProjectMarkers2(${10:proj}, ${11:idx}, ${12:isrgnOut}, ${13:posOut}, ${14:rgnendOut}, ${15:nameOut}, ${16:markrgnindexnumberOut})",
		"description": ""
	},
	"EnumProjectMarkers3": {
		"prefix": "EnumProjectMarkers3",
		"scope": "eel",
		"body": "${1:${2:int} = }EnumProjectMarkers3(${3:ReaProject proj}, ${4:int idx}, ${5:bool +isrgn}, ${6:+pos}, ${7:+rgnend}, ${8:#name}, ${9:int +markrgnindexnumber}, ${10:int +color})",
		"description": ""
	},
	"reaper.EnumProjectMarkers3": {
		"prefix": "reaper.EnumProjectMarkers3",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:boolean isrgn}, ${4:number pos}, ${5:number rgnend}, ${6:string name}, ${7:number markrgnindexnumber}, ${8:number color} = }reaper.EnumProjectMarkers3(${9:ReaProject proj}, ${10:integer idx})",
		"description": ""
	},
	"RPR_EnumProjectMarkers3": {
		"prefix": "RPR_EnumProjectMarkers3",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:ReaProject proj}, ${4:Int idx}, ${5:Boolean isrgnOut}, ${6:Float posOut}, ${7:Float rgnendOut}, ${8:String nameOut}, ${9:Int markrgnindexnumberOut}, ${10:Int colorOut} = }RPR_EnumProjectMarkers3(${11:proj}, ${12:idx}, ${13:isrgnOut}, ${14:posOut}, ${15:rgnendOut}, ${16:nameOut}, ${17:markrgnindexnumberOut}, ${18:colorOut})",
		"description": ""
	},
	"EnumProjects": {
		"prefix": "EnumProjects",
		"scope": "eel",
		"body": "${1:${2:ReaProject} = }EnumProjects(${3:int idx}, ${4:#projfn})",
		"description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any."
	},
	"reaper.EnumProjects": {
		"prefix": "reaper.EnumProjects",
		"scope": "lua",
		"body": "${1:${2:ReaProject retval}, ${3:string projfn} = }reaper.EnumProjects(${4:integer idx}, ${5:string projfn})",
		"description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any."
	},
	"RPR_EnumProjects": {
		"prefix": "RPR_EnumProjects",
		"scope": "python",
		"body": "${1:${2:ReaProject retval}, ${3:Int idx}, ${4:String projfn}, ${5:Int projfn_sz} = }RPR_EnumProjects(${6:idx}, ${7:projfn}, ${8:projfn_sz})",
		"description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any."
	},
	"EnumProjExtState": {
		"prefix": "EnumProjExtState",
		"scope": "eel",
		"body": "${1:${2:bool} = }EnumProjExtState(${3:ReaProject proj}, ${4:\"extname\"}, ${5:int idx}, ${6:optional #key}, ${7:optional #val})",
		"description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState."
	},
	"reaper.EnumProjExtState": {
		"prefix": "reaper.EnumProjExtState",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:optional string key}, ${4:optional string val} = }reaper.EnumProjExtState(${5:ReaProject proj}, ${6:string extname}, ${7:integer idx})",
		"description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState."
	},
	"RPR_EnumProjExtState": {
		"prefix": "RPR_EnumProjExtState",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:ReaProject proj}, ${4:String extname}, ${5:Int idx}, ${6:String keyOutOptional}, ${7:Int keyOutOptional_sz}, ${8:String valOutOptional}, ${9:Int valOutOptional_sz} = }RPR_EnumProjExtState(${10:proj}, ${11:extname}, ${12:idx}, ${13:keyOutOptional}, ${14:keyOutOptional_sz}, ${15:valOutOptional}, ${16:valOutOptional_sz})",
		"description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState."
	},
	"EnumRegionRenderMatrix": {
		"prefix": "EnumRegionRenderMatrix",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }EnumRegionRenderMatrix(${3:ReaProject proj}, ${4:int regionindex}, ${5:int rendertrack})",
		"description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region."
	},
	"reaper.EnumRegionRenderMatrix": {
		"prefix": "reaper.EnumRegionRenderMatrix",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.EnumRegionRenderMatrix(${3:ReaProject proj}, ${4:integer regionindex}, ${5:integer rendertrack})",
		"description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region."
	},
	"RPR_EnumRegionRenderMatrix": {
		"prefix": "RPR_EnumRegionRenderMatrix",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_EnumRegionRenderMatrix(${3:ReaProject proj}, ${4:Int regionindex}, ${5:Int rendertrack})",
		"description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region."
	},
	"EnumTrackMIDIProgramNames": {
		"prefix": "EnumTrackMIDIProgramNames",
		"scope": "eel",
		"body": "${1:${2:bool} = }EnumTrackMIDIProgramNames(${3:int track}, ${4:int programNumber}, ${5:#programName})",
		"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
	},
	"reaper.EnumTrackMIDIProgramNames": {
		"prefix": "reaper.EnumTrackMIDIProgramNames",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string programName} = }reaper.EnumTrackMIDIProgramNames(${4:integer track}, ${5:integer programNumber}, ${6:string programName})",
		"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
	},
	"RPR_EnumTrackMIDIProgramNames": {
		"prefix": "RPR_EnumTrackMIDIProgramNames",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:Int track}, ${4:Int programNumber}, ${5:String programName}, ${6:Int programName_sz} = }RPR_EnumTrackMIDIProgramNames(${7:track}, ${8:programNumber}, ${9:programName}, ${10:programName_sz})",
		"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
	},
	"EnumTrackMIDIProgramNamesEx": {
		"prefix": "EnumTrackMIDIProgramNamesEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }EnumTrackMIDIProgramNamesEx(${3:ReaProject proj}, ${4:MediaTrack track}, ${5:int programNumber}, ${6:#programName})",
		"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
	},
	"reaper.EnumTrackMIDIProgramNamesEx": {
		"prefix": "reaper.EnumTrackMIDIProgramNamesEx",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string programName} = }reaper.EnumTrackMIDIProgramNamesEx(${4:ReaProject proj}, ${5:MediaTrack track}, ${6:integer programNumber}, ${7:string programName})",
		"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
	},
	"RPR_EnumTrackMIDIProgramNamesEx": {
		"prefix": "RPR_EnumTrackMIDIProgramNamesEx",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:ReaProject proj}, ${4:MediaTrack track}, ${5:Int programNumber}, ${6:String programName}, ${7:Int programName_sz} = }RPR_EnumTrackMIDIProgramNamesEx(${8:proj}, ${9:track}, ${10:programNumber}, ${11:programName}, ${12:programName_sz})",
		"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
	},
	"Envelope_Evaluate": {
		"prefix": "Envelope_Evaluate",
		"scope": "eel",
		"body": "${1:${2:int} = }Envelope_Evaluate(${3:TrackEnvelope envelope}, ${4:time}, ${5:samplerate}, ${6:int samplesRequested}, ${7:optional +value}, ${8:optional +dVdS}, ${9:optional +ddVdS}, ${10:optional +dddVdS})",
		"description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the seond derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode."
	},
	"reaper.Envelope_Evaluate": {
		"prefix": "reaper.Envelope_Evaluate",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:optional number value}, ${4:optional number dVdS}, ${5:optional number ddVdS}, ${6:optional number dddVdS} = }reaper.Envelope_Evaluate(${7:TrackEnvelope envelope}, ${8:number time}, ${9:number samplerate}, ${10:integer samplesRequested})",
		"description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the seond derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode."
	},
	"RPR_Envelope_Evaluate": {
		"prefix": "RPR_Envelope_Evaluate",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:TrackEnvelope envelope}, ${4:Float time}, ${5:Float samplerate}, ${6:Int samplesRequested}, ${7:Float valueOutOptional}, ${8:Float dVdSOutOptional}, ${9:Float ddVdSOutOptional}, ${10:Float dddVdSOutOptional} = }RPR_Envelope_Evaluate(${11:envelope}, ${12:time}, ${13:samplerate}, ${14:samplesRequested}, ${15:valueOutOptional}, ${16:dVdSOutOptional}, ${17:ddVdSOutOptional}, ${18:dddVdSOutOptional})",
		"description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the seond derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode."
	},
	"Envelope_FormatValue": {
		"prefix": "Envelope_FormatValue",
		"scope": "eel",
		"body": "Envelope_FormatValue(${1:TrackEnvelope env}, ${2:value}, ${3:#buf})",
		"description": "Formats the value of an envelope to a user-readable form"
	},
	"reaper.Envelope_FormatValue": {
		"prefix": "reaper.Envelope_FormatValue",
		"scope": "lua",
		"body": "${1:${2:string buf} = }reaper.Envelope_FormatValue(${3:TrackEnvelope env}, ${4:number value})",
		"description": "Formats the value of an envelope to a user-readable form"
	},
	"RPR_Envelope_FormatValue": {
		"prefix": "RPR_Envelope_FormatValue",
		"scope": "python",
		"body": "${1:${2:TrackEnvelope env}, ${3:Float value}, ${4:String bufOut}, ${5:Int bufOut_sz} = }RPR_Envelope_FormatValue(${6:env}, ${7:value}, ${8:bufOut}, ${9:bufOut_sz})",
		"description": "Formats the value of an envelope to a user-readable form"
	},
	"Envelope_GetParentTake": {
		"prefix": "Envelope_GetParentTake",
		"scope": "eel",
		"body": "${1:${2:MediaItem_Take} = }Envelope_GetParentTake(${3:TrackEnvelope env}, ${4:optional int +index}, ${5:optional int +index2})",
		"description": "If take envelope, gets the take from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1."
	},
	"reaper.Envelope_GetParentTake": {
		"prefix": "reaper.Envelope_GetParentTake",
		"scope": "lua",
		"body": "${1:${2:MediaItem_Take retval}, ${3:optional number index}, ${4:optional number index2} = }reaper.Envelope_GetParentTake(${5:TrackEnvelope env})",
		"description": "If take envelope, gets the take from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1."
	},
	"RPR_Envelope_GetParentTake": {
		"prefix": "RPR_Envelope_GetParentTake",
		"scope": "python",
		"body": "${1:${2:MediaItem_Take retval}, ${3:TrackEnvelope env}, ${4:Int indexOutOptional}, ${5:Int index2OutOptional} = }RPR_Envelope_GetParentTake(${6:env}, ${7:indexOutOptional}, ${8:index2OutOptional})",
		"description": "If take envelope, gets the take from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1."
	},
	"Envelope_GetParentTrack": {
		"prefix": "Envelope_GetParentTrack",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }Envelope_GetParentTrack(${3:TrackEnvelope env}, ${4:optional int +index}, ${5:optional int +index2})",
		"description": "If track envelope, gets the track from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1."
	},
	"reaper.Envelope_GetParentTrack": {
		"prefix": "reaper.Envelope_GetParentTrack",
		"scope": "lua",
		"body": "${1:${2:MediaTrack retval}, ${3:optional number index}, ${4:optional number index2} = }reaper.Envelope_GetParentTrack(${5:TrackEnvelope env})",
		"description": "If track envelope, gets the track from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1."
	},
	"RPR_Envelope_GetParentTrack": {
		"prefix": "RPR_Envelope_GetParentTrack",
		"scope": "python",
		"body": "${1:${2:MediaTrack retval}, ${3:TrackEnvelope env}, ${4:Int indexOutOptional}, ${5:Int index2OutOptional} = }RPR_Envelope_GetParentTrack(${6:env}, ${7:indexOutOptional}, ${8:index2OutOptional})",
		"description": "If track envelope, gets the track from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1."
	},
	"Envelope_SortPoints": {
		"prefix": "Envelope_SortPoints",
		"scope": "eel",
		"body": "${1:${2:bool} = }Envelope_SortPoints(${3:TrackEnvelope envelope})",
		"description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint."
	},
	"reaper.Envelope_SortPoints": {
		"prefix": "reaper.Envelope_SortPoints",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.Envelope_SortPoints(${3:TrackEnvelope envelope})",
		"description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint."
	},
	"RPR_Envelope_SortPoints": {
		"prefix": "RPR_Envelope_SortPoints",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_Envelope_SortPoints(${3:TrackEnvelope envelope})",
		"description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint."
	},
	"Envelope_SortPointsEx": {
		"prefix": "Envelope_SortPointsEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }Envelope_SortPointsEx(${3:TrackEnvelope envelope}, ${4:int autoitem_idx})",
		"description": "Sort envelope points by time.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint."
	},
	"reaper.Envelope_SortPointsEx": {
		"prefix": "reaper.Envelope_SortPointsEx",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.Envelope_SortPointsEx(${3:TrackEnvelope envelope}, ${4:integer autoitem_idx})",
		"description": "Sort envelope points by time.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint."
	},
	"RPR_Envelope_SortPointsEx": {
		"prefix": "RPR_Envelope_SortPointsEx",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_Envelope_SortPointsEx(${3:TrackEnvelope envelope}, ${4:Int autoitem_idx})",
		"description": "Sort envelope points by time.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint."
	},
	"ExecProcess": {
		"prefix": "ExecProcess",
		"scope": "eel",
		"body": "${1:${2:bool} = }ExecProcess(${3:#retval}, ${4:\"cmdline\"}, ${5:int timeoutmsec})",
		"description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize"
	},
	"reaper.ExecProcess": {
		"prefix": "reaper.ExecProcess",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.ExecProcess(${3:string cmdline}, ${4:integer timeoutmsec})",
		"description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize"
	},
	"RPR_ExecProcess": {
		"prefix": "RPR_ExecProcess",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_ExecProcess(${3:String cmdline}, ${4:Int timeoutmsec})",
		"description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize"
	},
	"file_exists": {
		"prefix": "file_exists",
		"scope": "eel",
		"body": "${1:${2:bool} = }file_exists(${3:\"path\"})",
		"description": "returns true if path points to a valid, readable file"
	},
	"reaper.file_exists": {
		"prefix": "reaper.file_exists",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.file_exists(${3:string path})",
		"description": "returns true if path points to a valid, readable file"
	},
	"RPR_file_exists": {
		"prefix": "RPR_file_exists",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_file_exists(${3:String path})",
		"description": "returns true if path points to a valid, readable file"
	},
	"FindTempoTimeSigMarker": {
		"prefix": "FindTempoTimeSigMarker",
		"scope": "eel",
		"body": "${1:${2:int} = }FindTempoTimeSigMarker(${3:ReaProject project}, ${4:time})",
		"description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position)."
	},
	"reaper.FindTempoTimeSigMarker": {
		"prefix": "reaper.FindTempoTimeSigMarker",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.FindTempoTimeSigMarker(${3:ReaProject project}, ${4:number time})",
		"description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position)."
	},
	"RPR_FindTempoTimeSigMarker": {
		"prefix": "RPR_FindTempoTimeSigMarker",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_FindTempoTimeSigMarker(${3:ReaProject project}, ${4:Float time})",
		"description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position)."
	},
	"format_timestr": {
		"prefix": "format_timestr",
		"scope": "eel",
		"body": "format_timestr(${1:tpos}, ${2:#buf})",
		"description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len."
	},
	"reaper.format_timestr": {
		"prefix": "reaper.format_timestr",
		"scope": "lua",
		"body": "${1:${2:string buf} = }reaper.format_timestr(${3:number tpos}, ${4:string buf})",
		"description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len."
	},
	"RPR_format_timestr": {
		"prefix": "RPR_format_timestr",
		"scope": "python",
		"body": "${1:${2:Float tpos}, ${3:String buf}, ${4:Int buf_sz} = }RPR_format_timestr(${5:tpos}, ${6:buf}, ${7:buf_sz})",
		"description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len."
	},
	"format_timestr_len": {
		"prefix": "format_timestr_len",
		"scope": "eel",
		"body": "format_timestr_len(${1:tpos}, ${2:#buf}, ${3:offset}, ${4:int modeoverride})",
		"description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\noffset is start of where the length will be calculated from"
	},
	"reaper.format_timestr_len": {
		"prefix": "reaper.format_timestr_len",
		"scope": "lua",
		"body": "${1:${2:string buf} = }reaper.format_timestr_len(${3:number tpos}, ${4:string buf}, ${5:number offset}, ${6:integer modeoverride})",
		"description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\noffset is start of where the length will be calculated from"
	},
	"RPR_format_timestr_len": {
		"prefix": "RPR_format_timestr_len",
		"scope": "python",
		"body": "${1:${2:Float tpos}, ${3:String buf}, ${4:Int buf_sz}, ${5:Float offset}, ${6:Int modeoverride} = }RPR_format_timestr_len(${7:tpos}, ${8:buf}, ${9:buf_sz}, ${10:offset}, ${11:modeoverride})",
		"description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\noffset is start of where the length will be calculated from"
	},
	"format_timestr_pos": {
		"prefix": "format_timestr_pos",
		"scope": "eel",
		"body": "format_timestr_pos(${1:tpos}, ${2:#buf}, ${3:int modeoverride})",
		"description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f"
	},
	"reaper.format_timestr_pos": {
		"prefix": "reaper.format_timestr_pos",
		"scope": "lua",
		"body": "${1:${2:string buf} = }reaper.format_timestr_pos(${3:number tpos}, ${4:string buf}, ${5:integer modeoverride})",
		"description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f"
	},
	"RPR_format_timestr_pos": {
		"prefix": "RPR_format_timestr_pos",
		"scope": "python",
		"body": "${1:${2:Float tpos}, ${3:String buf}, ${4:Int buf_sz}, ${5:Int modeoverride} = }RPR_format_timestr_pos(${6:tpos}, ${7:buf}, ${8:buf_sz}, ${9:modeoverride})",
		"description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f"
	},
	"genGuid": {
		"prefix": "genGuid",
		"scope": "eel",
		"body": "genGuid(${1:#gGUID})",
		"description": ""
	},
	"reaper.genGuid": {
		"prefix": "reaper.genGuid",
		"scope": "lua",
		"body": "${1:${2:string gGUID} = }reaper.genGuid(${3:string gGUID})",
		"description": ""
	},
	"RPR_genGuid": {
		"prefix": "RPR_genGuid",
		"scope": "python",
		"body": "RPR_genGuid(${1:GUID g})",
		"description": ""
	},
	"get_ini_file": {
		"prefix": "get_ini_file",
		"scope": "eel",
		"body": "${1:${2:bool} = }get_ini_file(${3:#retval})",
		"description": "Get reaper.ini full filename."
	},
	"reaper.get_ini_file": {
		"prefix": "reaper.get_ini_file",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.get_ini_file()",
		"description": "Get reaper.ini full filename."
	},
	"RPR_get_ini_file": {
		"prefix": "RPR_get_ini_file",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_get_ini_file()",
		"description": "Get reaper.ini full filename."
	},
	"GetActiveTake": {
		"prefix": "GetActiveTake",
		"scope": "eel",
		"body": "${1:${2:MediaItem_Take} = }GetActiveTake(${3:MediaItem item})",
		"description": "get the active take in this item"
	},
	"reaper.GetActiveTake": {
		"prefix": "reaper.GetActiveTake",
		"scope": "lua",
		"body": "${1:${2:MediaItem_Take} = }reaper.GetActiveTake(${3:MediaItem item})",
		"description": "get the active take in this item"
	},
	"RPR_GetActiveTake": {
		"prefix": "RPR_GetActiveTake",
		"scope": "python",
		"body": "${1:${2:MediaItem_Take} = }RPR_GetActiveTake(${3:MediaItem item})",
		"description": "get the active take in this item"
	},
	"GetAllProjectPlayStates": {
		"prefix": "GetAllProjectPlayStates",
		"scope": "eel",
		"body": "${1:${2:int} = }GetAllProjectPlayStates(${3:ReaProject ignoreProject})",
		"description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)"
	},
	"reaper.GetAllProjectPlayStates": {
		"prefix": "reaper.GetAllProjectPlayStates",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetAllProjectPlayStates(${3:ReaProject ignoreProject})",
		"description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)"
	},
	"RPR_GetAllProjectPlayStates": {
		"prefix": "RPR_GetAllProjectPlayStates",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetAllProjectPlayStates(${3:ReaProject ignoreProject})",
		"description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)"
	},
	"GetAppVersion": {
		"prefix": "GetAppVersion",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetAppVersion(${3:#retval})",
		"description": ""
	},
	"reaper.GetAppVersion": {
		"prefix": "reaper.GetAppVersion",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.GetAppVersion()",
		"description": ""
	},
	"RPR_GetAppVersion": {
		"prefix": "RPR_GetAppVersion",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_GetAppVersion()",
		"description": ""
	},
	"GetArmedCommand": {
		"prefix": "GetArmedCommand",
		"scope": "eel",
		"body": "${1:${2:int} = }GetArmedCommand(${3:#sec})",
		"description": "gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section."
	},
	"reaper.GetArmedCommand": {
		"prefix": "reaper.GetArmedCommand",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:string sec} = }reaper.GetArmedCommand()",
		"description": "gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section."
	},
	"RPR_GetArmedCommand": {
		"prefix": "RPR_GetArmedCommand",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:String secOut}, ${4:Int secOut_sz} = }RPR_GetArmedCommand(${5:secOut}, ${6:secOut_sz})",
		"description": "gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section."
	},
	"GetAudioAccessorEndTime": {
		"prefix": "GetAudioAccessorEndTime",
		"scope": "eel",
		"body": "${1:${2:double} = }GetAudioAccessorEndTime(${3:AudioAccessor accessor})",
		"description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples."
	},
	"reaper.GetAudioAccessorEndTime": {
		"prefix": "reaper.GetAudioAccessorEndTime",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetAudioAccessorEndTime(${3:AudioAccessor accessor})",
		"description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples."
	},
	"RPR_GetAudioAccessorEndTime": {
		"prefix": "RPR_GetAudioAccessorEndTime",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetAudioAccessorEndTime(${3:AudioAccessor accessor})",
		"description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples."
	},
	"GetAudioAccessorHash": {
		"prefix": "GetAudioAccessorHash",
		"scope": "eel",
		"body": "GetAudioAccessorHash(${1:AudioAccessor accessor}, ${2:#hashNeed128})",
		"description": "Deprecated. See AudioAccessorStateChanged instead."
	},
	"reaper.GetAudioAccessorHash": {
		"prefix": "reaper.GetAudioAccessorHash",
		"scope": "lua",
		"body": "${1:${2:string hashNeed128} = }reaper.GetAudioAccessorHash(${3:AudioAccessor accessor}, ${4:string hashNeed128})",
		"description": "Deprecated. See AudioAccessorStateChanged instead."
	},
	"RPR_GetAudioAccessorHash": {
		"prefix": "RPR_GetAudioAccessorHash",
		"scope": "python",
		"body": "${1:${2:AudioAccessor accessor}, ${3:String hashNeed128} = }RPR_GetAudioAccessorHash(${4:accessor}, ${5:hashNeed128})",
		"description": "Deprecated. See AudioAccessorStateChanged instead."
	},
	"GetAudioAccessorSamples": {
		"prefix": "GetAudioAccessorSamples",
		"scope": "eel",
		"body": "${1:${2:int} = }GetAudioAccessorSamples(${3:AudioAccessor accessor}, ${4:int samplerate}, ${5:int numchannels}, ${6:starttime_sec}, ${7:int numsamplesperchannel}, ${8:buffer_ptr samplebuffer})",
		"description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\n\n\n\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\n\n\n\ntr = RPR_GetTrack(0, 0)\n\naa = RPR_CreateTrackAudioAccessor(tr)\n\nbuf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\n\npos = 0.0\n\n(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n\n# buf now holds the first 2*1024 audio samples from the track.\n\n# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.\n\n"
	},
	"reaper.GetAudioAccessorSamples": {
		"prefix": "reaper.GetAudioAccessorSamples",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetAudioAccessorSamples(${3:AudioAccessor accessor}, ${4:integer samplerate}, ${5:integer numchannels}, ${6:number starttime_sec}, ${7:integer numsamplesperchannel}, ${8:reaper.array samplebuffer})",
		"description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\n\n\n\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\n\n\n\ntr = RPR_GetTrack(0, 0)\n\naa = RPR_CreateTrackAudioAccessor(tr)\n\nbuf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\n\npos = 0.0\n\n(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n\n# buf now holds the first 2*1024 audio samples from the track.\n\n# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.\n\n"
	},
	"RPR_GetAudioAccessorSamples": {
		"prefix": "RPR_GetAudioAccessorSamples",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:AudioAccessor accessor}, ${4:Int samplerate}, ${5:Int numchannels}, ${6:Float starttime_sec}, ${7:Int numsamplesperchannel}, ${8:Float samplebuffer} = }RPR_GetAudioAccessorSamples(${9:accessor}, ${10:samplerate}, ${11:numchannels}, ${12:starttime_sec}, ${13:numsamplesperchannel}, ${14:samplebuffer})",
		"description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\n\n\n\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\n\n\n\ntr = RPR_GetTrack(0, 0)\n\naa = RPR_CreateTrackAudioAccessor(tr)\n\nbuf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\n\npos = 0.0\n\n(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n\n# buf now holds the first 2*1024 audio samples from the track.\n\n# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.\n\n"
	},
	"GetAudioAccessorStartTime": {
		"prefix": "GetAudioAccessorStartTime",
		"scope": "eel",
		"body": "${1:${2:double} = }GetAudioAccessorStartTime(${3:AudioAccessor accessor})",
		"description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"reaper.GetAudioAccessorStartTime": {
		"prefix": "reaper.GetAudioAccessorStartTime",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetAudioAccessorStartTime(${3:AudioAccessor accessor})",
		"description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"RPR_GetAudioAccessorStartTime": {
		"prefix": "RPR_GetAudioAccessorStartTime",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetAudioAccessorStartTime(${3:AudioAccessor accessor})",
		"description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"GetAudioDeviceInfo": {
		"prefix": "GetAudioDeviceInfo",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetAudioDeviceInfo(${3:\"attribute\"}, ${4:#desc})",
		"description": "get information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open."
	},
	"reaper.GetAudioDeviceInfo": {
		"prefix": "reaper.GetAudioDeviceInfo",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string desc} = }reaper.GetAudioDeviceInfo(${4:string attribute}, ${5:string desc})",
		"description": "get information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open."
	},
	"RPR_GetAudioDeviceInfo": {
		"prefix": "RPR_GetAudioDeviceInfo",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:String attribute}, ${4:String desc}, ${5:Int desc_sz} = }RPR_GetAudioDeviceInfo(${6:attribute}, ${7:desc}, ${8:desc_sz})",
		"description": "get information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open."
	},
	"GetConfigWantsDock": {
		"prefix": "GetConfigWantsDock",
		"scope": "eel",
		"body": "${1:${2:int} = }GetConfigWantsDock(${3:\"ident_str\"})",
		"description": "gets the dock ID desired by ident_str, if any"
	},
	"reaper.GetConfigWantsDock": {
		"prefix": "reaper.GetConfigWantsDock",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetConfigWantsDock(${3:string ident_str})",
		"description": "gets the dock ID desired by ident_str, if any"
	},
	"RPR_GetConfigWantsDock": {
		"prefix": "RPR_GetConfigWantsDock",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetConfigWantsDock(${3:String ident_str})",
		"description": "gets the dock ID desired by ident_str, if any"
	},
	"GetCurrentProjectInLoadSave": {
		"prefix": "GetCurrentProjectInLoadSave",
		"scope": "eel",
		"body": "${1:${2:ReaProject} = }GetCurrentProjectInLoadSave()",
		"description": "returns current project if in load/save (usually only used from project_config_extension_t)"
	},
	"reaper.GetCurrentProjectInLoadSave": {
		"prefix": "reaper.GetCurrentProjectInLoadSave",
		"scope": "lua",
		"body": "${1:${2:ReaProject} = }reaper.GetCurrentProjectInLoadSave()",
		"description": "returns current project if in load/save (usually only used from project_config_extension_t)"
	},
	"RPR_GetCurrentProjectInLoadSave": {
		"prefix": "RPR_GetCurrentProjectInLoadSave",
		"scope": "python",
		"body": "${1:${2:ReaProject} = }RPR_GetCurrentProjectInLoadSave()",
		"description": "returns current project if in load/save (usually only used from project_config_extension_t)"
	},
	"GetCursorContext": {
		"prefix": "GetCursorContext",
		"scope": "eel",
		"body": "${1:${2:int} = }GetCursorContext()",
		"description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknow"
	},
	"reaper.GetCursorContext": {
		"prefix": "reaper.GetCursorContext",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetCursorContext()",
		"description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknow"
	},
	"RPR_GetCursorContext": {
		"prefix": "RPR_GetCursorContext",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetCursorContext()",
		"description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknow"
	},
	"GetCursorContext2": {
		"prefix": "GetCursorContext2",
		"scope": "eel",
		"body": "${1:${2:int} = }GetCursorContext2(${3:bool want_last_valid})",
		"description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)"
	},
	"reaper.GetCursorContext2": {
		"prefix": "reaper.GetCursorContext2",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetCursorContext2(${3:boolean want_last_valid})",
		"description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)"
	},
	"RPR_GetCursorContext2": {
		"prefix": "RPR_GetCursorContext2",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetCursorContext2(${3:Boolean want_last_valid})",
		"description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)"
	},
	"GetCursorPosition": {
		"prefix": "GetCursorPosition",
		"scope": "eel",
		"body": "${1:${2:double} = }GetCursorPosition()",
		"description": "edit cursor positio"
	},
	"reaper.GetCursorPosition": {
		"prefix": "reaper.GetCursorPosition",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetCursorPosition()",
		"description": "edit cursor positio"
	},
	"RPR_GetCursorPosition": {
		"prefix": "RPR_GetCursorPosition",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetCursorPosition()",
		"description": "edit cursor positio"
	},
	"GetCursorPositionEx": {
		"prefix": "GetCursorPositionEx",
		"scope": "eel",
		"body": "${1:${2:double} = }GetCursorPositionEx(${3:ReaProject proj})",
		"description": "edit cursor positio"
	},
	"reaper.GetCursorPositionEx": {
		"prefix": "reaper.GetCursorPositionEx",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetCursorPositionEx(${3:ReaProject proj})",
		"description": "edit cursor positio"
	},
	"RPR_GetCursorPositionEx": {
		"prefix": "RPR_GetCursorPositionEx",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetCursorPositionEx(${3:ReaProject proj})",
		"description": "edit cursor positio"
	},
	"GetDisplayedMediaItemColor": {
		"prefix": "GetDisplayedMediaItemColor",
		"scope": "eel",
		"body": "${1:${2:int} = }GetDisplayedMediaItemColor(${3:MediaItem item})",
		"description": "see GetDisplayedMediaItemColor2."
	},
	"reaper.GetDisplayedMediaItemColor": {
		"prefix": "reaper.GetDisplayedMediaItemColor",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetDisplayedMediaItemColor(${3:MediaItem item})",
		"description": "see GetDisplayedMediaItemColor2."
	},
	"RPR_GetDisplayedMediaItemColor": {
		"prefix": "RPR_GetDisplayedMediaItemColor",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetDisplayedMediaItemColor(${3:MediaItem item})",
		"description": "see GetDisplayedMediaItemColor2."
	},
	"GetDisplayedMediaItemColor2": {
		"prefix": "GetDisplayedMediaItemColor2",
		"scope": "eel",
		"body": "${1:${2:int} = }GetDisplayedMediaItemColor2(${3:MediaItem item}, ${4:MediaItem_Take take})",
		"description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not black."
	},
	"reaper.GetDisplayedMediaItemColor2": {
		"prefix": "reaper.GetDisplayedMediaItemColor2",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetDisplayedMediaItemColor2(${3:MediaItem item}, ${4:MediaItem_Take take})",
		"description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not black."
	},
	"RPR_GetDisplayedMediaItemColor2": {
		"prefix": "RPR_GetDisplayedMediaItemColor2",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetDisplayedMediaItemColor2(${3:MediaItem item}, ${4:MediaItem_Take take})",
		"description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not black."
	},
	"GetEnvelopeName": {
		"prefix": "GetEnvelopeName",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetEnvelopeName(${3:TrackEnvelope env}, ${4:#buf})",
		"description": ""
	},
	"reaper.GetEnvelopeName": {
		"prefix": "reaper.GetEnvelopeName",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.GetEnvelopeName(${4:TrackEnvelope env}, ${5:string buf})",
		"description": ""
	},
	"RPR_GetEnvelopeName": {
		"prefix": "RPR_GetEnvelopeName",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:TrackEnvelope env}, ${4:String buf}, ${5:Int buf_sz} = }RPR_GetEnvelopeName(${6:env}, ${7:buf}, ${8:buf_sz})",
		"description": ""
	},
	"GetEnvelopePoint": {
		"prefix": "GetEnvelopePoint",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetEnvelopePoint(${3:TrackEnvelope envelope}, ${4:int ptidx}, ${5:optional +time}, ${6:optional +value}, ${7:optional int +shape}, ${8:optional +tension}, ${9:optional bool +selected})",
		"description": "Get the attributes of an envelope point. See GetEnvelopePointByTime, SetEnvelopePoint."
	},
	"reaper.GetEnvelopePoint": {
		"prefix": "reaper.GetEnvelopePoint",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:optional number time}, ${4:optional number value}, ${5:optional number shape}, ${6:optional number tension}, ${7:optional boolean selected} = }reaper.GetEnvelopePoint(${8:TrackEnvelope envelope}, ${9:integer ptidx})",
		"description": "Get the attributes of an envelope point. See GetEnvelopePointByTime, SetEnvelopePoint."
	},
	"RPR_GetEnvelopePoint": {
		"prefix": "RPR_GetEnvelopePoint",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:TrackEnvelope envelope}, ${4:Int ptidx}, ${5:Float timeOutOptional}, ${6:Float valueOutOptional}, ${7:Int shapeOutOptional}, ${8:Float tensionOutOptional}, ${9:Boolean selectedOutOptional} = }RPR_GetEnvelopePoint(${10:envelope}, ${11:ptidx}, ${12:timeOutOptional}, ${13:valueOutOptional}, ${14:shapeOutOptional}, ${15:tensionOutOptional}, ${16:selectedOutOptional})",
		"description": "Get the attributes of an envelope point. See GetEnvelopePointByTime, SetEnvelopePoint."
	},
	"GetEnvelopePointByTime": {
		"prefix": "GetEnvelopePointByTime",
		"scope": "eel",
		"body": "${1:${2:int} = }GetEnvelopePointByTime(${3:TrackEnvelope envelope}, ${4:time})",
		"description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate."
	},
	"reaper.GetEnvelopePointByTime": {
		"prefix": "reaper.GetEnvelopePointByTime",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetEnvelopePointByTime(${3:TrackEnvelope envelope}, ${4:number time})",
		"description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate."
	},
	"RPR_GetEnvelopePointByTime": {
		"prefix": "RPR_GetEnvelopePointByTime",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetEnvelopePointByTime(${3:TrackEnvelope envelope}, ${4:Float time})",
		"description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate."
	},
	"GetEnvelopePointByTimeEx": {
		"prefix": "GetEnvelopePointByTimeEx",
		"scope": "eel",
		"body": "${1:${2:int} = }GetEnvelopePointByTimeEx(${3:TrackEnvelope envelope}, ${4:int autoitem_idx}, ${5:time})",
		"description": "Returns the envelope point at or immediately prior to the given time position.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate."
	},
	"reaper.GetEnvelopePointByTimeEx": {
		"prefix": "reaper.GetEnvelopePointByTimeEx",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetEnvelopePointByTimeEx(${3:TrackEnvelope envelope}, ${4:integer autoitem_idx}, ${5:number time})",
		"description": "Returns the envelope point at or immediately prior to the given time position.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate."
	},
	"RPR_GetEnvelopePointByTimeEx": {
		"prefix": "RPR_GetEnvelopePointByTimeEx",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetEnvelopePointByTimeEx(${3:TrackEnvelope envelope}, ${4:Int autoitem_idx}, ${5:Float time})",
		"description": "Returns the envelope point at or immediately prior to the given time position.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate."
	},
	"GetEnvelopePointEx": {
		"prefix": "GetEnvelopePointEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetEnvelopePointEx(${3:TrackEnvelope envelope}, ${4:int autoitem_idx}, ${5:int ptidx}, ${6:optional +time}, ${7:optional +value}, ${8:optional int +shape}, ${9:optional +tension}, ${10:optional bool +selected})",
		"description": "Get the attributes of an envelope point.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePointByTime, SetEnvelopePoint."
	},
	"reaper.GetEnvelopePointEx": {
		"prefix": "reaper.GetEnvelopePointEx",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:optional number time}, ${4:optional number value}, ${5:optional number shape}, ${6:optional number tension}, ${7:optional boolean selected} = }reaper.GetEnvelopePointEx(${8:TrackEnvelope envelope}, ${9:integer autoitem_idx}, ${10:integer ptidx})",
		"description": "Get the attributes of an envelope point.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePointByTime, SetEnvelopePoint."
	},
	"RPR_GetEnvelopePointEx": {
		"prefix": "RPR_GetEnvelopePointEx",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:TrackEnvelope envelope}, ${4:Int autoitem_idx}, ${5:Int ptidx}, ${6:Float timeOutOptional}, ${7:Float valueOutOptional}, ${8:Int shapeOutOptional}, ${9:Float tensionOutOptional}, ${10:Boolean selectedOutOptional} = }RPR_GetEnvelopePointEx(${11:envelope}, ${12:autoitem_idx}, ${13:ptidx}, ${14:timeOutOptional}, ${15:valueOutOptional}, ${16:shapeOutOptional}, ${17:tensionOutOptional}, ${18:selectedOutOptional})",
		"description": "Get the attributes of an envelope point.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePointByTime, SetEnvelopePoint."
	},
	"GetEnvelopeScalingMode": {
		"prefix": "GetEnvelopeScalingMode",
		"scope": "eel",
		"body": "${1:${2:int} = }GetEnvelopeScalingMode(${3:TrackEnvelope env})",
		"description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode."
	},
	"reaper.GetEnvelopeScalingMode": {
		"prefix": "reaper.GetEnvelopeScalingMode",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetEnvelopeScalingMode(${3:TrackEnvelope env})",
		"description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode."
	},
	"RPR_GetEnvelopeScalingMode": {
		"prefix": "RPR_GetEnvelopeScalingMode",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetEnvelopeScalingMode(${3:TrackEnvelope env})",
		"description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode."
	},
	"GetEnvelopeStateChunk": {
		"prefix": "GetEnvelopeStateChunk",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetEnvelopeStateChunk(${3:TrackEnvelope env}, ${4:#str}, ${5:bool isundo})",
		"description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
	},
	"reaper.GetEnvelopeStateChunk": {
		"prefix": "reaper.GetEnvelopeStateChunk",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string str} = }reaper.GetEnvelopeStateChunk(${4:TrackEnvelope env}, ${5:string str}, ${6:boolean isundo})",
		"description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
	},
	"RPR_GetEnvelopeStateChunk": {
		"prefix": "RPR_GetEnvelopeStateChunk",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:TrackEnvelope env}, ${4:String strNeedBig}, ${5:Int strNeedBig_sz}, ${6:Boolean isundoOptional} = }RPR_GetEnvelopeStateChunk(${7:env}, ${8:strNeedBig}, ${9:strNeedBig_sz}, ${10:isundoOptional})",
		"description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
	},
	"GetExePath": {
		"prefix": "GetExePath",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetExePath(${3:#retval})",
		"description": "returns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER"
	},
	"reaper.GetExePath": {
		"prefix": "reaper.GetExePath",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.GetExePath()",
		"description": "returns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER"
	},
	"RPR_GetExePath": {
		"prefix": "RPR_GetExePath",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_GetExePath()",
		"description": "returns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER"
	},
	"GetExtState": {
		"prefix": "GetExtState",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetExtState(${3:#retval}, ${4:\"section\"}, ${5:\"key\"})",
		"description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState."
	},
	"reaper.GetExtState": {
		"prefix": "reaper.GetExtState",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.GetExtState(${3:string section}, ${4:string key})",
		"description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState."
	},
	"RPR_GetExtState": {
		"prefix": "RPR_GetExtState",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_GetExtState(${3:String section}, ${4:String key})",
		"description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState."
	},
	"GetFocusedFX": {
		"prefix": "GetFocusedFX",
		"scope": "eel",
		"body": "${1:${2:int} = }GetFocusedFX(${3:int +tracknumber}, ${4:int +itemnumber}, ${5:int +fxnumber})",
		"description": "Returns 1 if a track FX window has focus, 2 if an item FX window has focus, 0 if no FX window has focus. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber and fxnumber are zero-based. If item FX, fxnumber will have the high word be the take index, the low word the FX index. See GetLastTouchedFX."
	},
	"reaper.GetFocusedFX": {
		"prefix": "reaper.GetFocusedFX",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:number tracknumber}, ${4:number itemnumber}, ${5:number fxnumber} = }reaper.GetFocusedFX()",
		"description": "Returns 1 if a track FX window has focus, 2 if an item FX window has focus, 0 if no FX window has focus. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber and fxnumber are zero-based. If item FX, fxnumber will have the high word be the take index, the low word the FX index. See GetLastTouchedFX."
	},
	"RPR_GetFocusedFX": {
		"prefix": "RPR_GetFocusedFX",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:Int tracknumberOut}, ${4:Int itemnumberOut}, ${5:Int fxnumberOut} = }RPR_GetFocusedFX(${6:tracknumberOut}, ${7:itemnumberOut}, ${8:fxnumberOut})",
		"description": "Returns 1 if a track FX window has focus, 2 if an item FX window has focus, 0 if no FX window has focus. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber and fxnumber are zero-based. If item FX, fxnumber will have the high word be the take index, the low word the FX index. See GetLastTouchedFX."
	},
	"GetFreeDiskSpaceForRecordPath": {
		"prefix": "GetFreeDiskSpaceForRecordPath",
		"scope": "eel",
		"body": "${1:${2:int} = }GetFreeDiskSpaceForRecordPath(${3:ReaProject proj}, ${4:int pathidx})",
		"description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate."
	},
	"reaper.GetFreeDiskSpaceForRecordPath": {
		"prefix": "reaper.GetFreeDiskSpaceForRecordPath",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetFreeDiskSpaceForRecordPath(${3:ReaProject proj}, ${4:integer pathidx})",
		"description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate."
	},
	"RPR_GetFreeDiskSpaceForRecordPath": {
		"prefix": "RPR_GetFreeDiskSpaceForRecordPath",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetFreeDiskSpaceForRecordPath(${3:ReaProject proj}, ${4:Int pathidx})",
		"description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate."
	},
	"GetFXEnvelope": {
		"prefix": "GetFXEnvelope",
		"scope": "eel",
		"body": "${1:${2:TrackEnvelope} = }GetFXEnvelope(${3:MediaTrack track}, ${4:int fxindex}, ${5:int parameterindex}, ${6:bool create})",
		"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created."
	},
	"reaper.GetFXEnvelope": {
		"prefix": "reaper.GetFXEnvelope",
		"scope": "lua",
		"body": "${1:${2:TrackEnvelope} = }reaper.GetFXEnvelope(${3:MediaTrack track}, ${4:integer fxindex}, ${5:integer parameterindex}, ${6:boolean create})",
		"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created."
	},
	"RPR_GetFXEnvelope": {
		"prefix": "RPR_GetFXEnvelope",
		"scope": "python",
		"body": "${1:${2:TrackEnvelope} = }RPR_GetFXEnvelope(${3:MediaTrack track}, ${4:Int fxindex}, ${5:Int parameterindex}, ${6:Boolean create})",
		"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created."
	},
	"GetGlobalAutomationOverride": {
		"prefix": "GetGlobalAutomationOverride",
		"scope": "eel",
		"body": "${1:${2:int} = }GetGlobalAutomationOverride()",
		"description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass"
	},
	"reaper.GetGlobalAutomationOverride": {
		"prefix": "reaper.GetGlobalAutomationOverride",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetGlobalAutomationOverride()",
		"description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass"
	},
	"RPR_GetGlobalAutomationOverride": {
		"prefix": "RPR_GetGlobalAutomationOverride",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetGlobalAutomationOverride()",
		"description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass"
	},
	"GetHZoomLevel": {
		"prefix": "GetHZoomLevel",
		"scope": "eel",
		"body": "${1:${2:double} = }GetHZoomLevel()",
		"description": "returns pixels/second"
	},
	"reaper.GetHZoomLevel": {
		"prefix": "reaper.GetHZoomLevel",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetHZoomLevel()",
		"description": "returns pixels/second"
	},
	"RPR_GetHZoomLevel": {
		"prefix": "RPR_GetHZoomLevel",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetHZoomLevel()",
		"description": "returns pixels/second"
	},
	"GetInputChannelName": {
		"prefix": "GetInputChannelName",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetInputChannelName(${3:#retval}, ${4:int channelIndex})",
		"description": ""
	},
	"reaper.GetInputChannelName": {
		"prefix": "reaper.GetInputChannelName",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.GetInputChannelName(${3:integer channelIndex})",
		"description": ""
	},
	"RPR_GetInputChannelName": {
		"prefix": "RPR_GetInputChannelName",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_GetInputChannelName(${3:Int channelIndex})",
		"description": ""
	},
	"GetInputOutputLatency": {
		"prefix": "GetInputOutputLatency",
		"scope": "eel",
		"body": "GetInputOutputLatency(${1:int +inputlatency}, ${2:int +outputLatency})",
		"description": "Gets the audio device input/output latency in samples"
	},
	"reaper.GetInputOutputLatency": {
		"prefix": "reaper.GetInputOutputLatency",
		"scope": "lua",
		"body": "${1:${2:number inputlatency}, ${3:number outputLatency} = }reaper.GetInputOutputLatency()",
		"description": "Gets the audio device input/output latency in samples"
	},
	"RPR_GetInputOutputLatency": {
		"prefix": "RPR_GetInputOutputLatency",
		"scope": "python",
		"body": "${1:${2:Int inputlatencyOut}, ${3:Int outputLatencyOut} = }RPR_GetInputOutputLatency(${4:inputlatencyOut}, ${5:outputLatencyOut})",
		"description": "Gets the audio device input/output latency in samples"
	},
	"GetItemEditingTime2": {
		"prefix": "GetItemEditingTime2",
		"scope": "eel",
		"body": "${1:${2:double} = }GetItemEditingTime2(${3:PCM_source +which_item}, ${4:int +flags})",
		"description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)"
	},
	"reaper.GetItemEditingTime2": {
		"prefix": "reaper.GetItemEditingTime2",
		"scope": "lua",
		"body": "${1:${2:number}, ${3:PCM_source which_item}, ${4:number flags} = }reaper.GetItemEditingTime2()",
		"description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)"
	},
	"RPR_GetItemEditingTime2": {
		"prefix": "RPR_GetItemEditingTime2",
		"scope": "python",
		"body": "${1:${2:Float retval}, ${3:PCM_source* which_itemOut}, ${4:Int flagsOut} = }RPR_GetItemEditingTime2(${5:which_itemOut}, ${6:flagsOut})",
		"description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)"
	},
	"GetItemProjectContext": {
		"prefix": "GetItemProjectContext",
		"scope": "eel",
		"body": "${1:${2:ReaProject} = }GetItemProjectContext(${3:MediaItem item})",
		"description": ""
	},
	"reaper.GetItemProjectContext": {
		"prefix": "reaper.GetItemProjectContext",
		"scope": "lua",
		"body": "${1:${2:ReaProject} = }reaper.GetItemProjectContext(${3:MediaItem item})",
		"description": ""
	},
	"RPR_GetItemProjectContext": {
		"prefix": "RPR_GetItemProjectContext",
		"scope": "python",
		"body": "${1:${2:ReaProject} = }RPR_GetItemProjectContext(${3:MediaItem item})",
		"description": ""
	},
	"GetItemStateChunk": {
		"prefix": "GetItemStateChunk",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetItemStateChunk(${3:MediaItem item}, ${4:#str}, ${5:bool isundo})",
		"description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
	},
	"reaper.GetItemStateChunk": {
		"prefix": "reaper.GetItemStateChunk",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string str} = }reaper.GetItemStateChunk(${4:MediaItem item}, ${5:string str}, ${6:boolean isundo})",
		"description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
	},
	"RPR_GetItemStateChunk": {
		"prefix": "RPR_GetItemStateChunk",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem item}, ${4:String strNeedBig}, ${5:Int strNeedBig_sz}, ${6:Boolean isundoOptional} = }RPR_GetItemStateChunk(${7:item}, ${8:strNeedBig}, ${9:strNeedBig_sz}, ${10:isundoOptional})",
		"description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
	},
	"GetLastColorThemeFile": {
		"prefix": "GetLastColorThemeFile",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetLastColorThemeFile(${3:#retval})",
		"description": ""
	},
	"reaper.GetLastColorThemeFile": {
		"prefix": "reaper.GetLastColorThemeFile",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.GetLastColorThemeFile()",
		"description": ""
	},
	"RPR_GetLastColorThemeFile": {
		"prefix": "RPR_GetLastColorThemeFile",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_GetLastColorThemeFile()",
		"description": ""
	},
	"GetLastMarkerAndCurRegion": {
		"prefix": "GetLastMarkerAndCurRegion",
		"scope": "eel",
		"body": "GetLastMarkerAndCurRegion(${1:ReaProject proj}, ${2:time}, ${3:int +markeridx}, ${4:int +regionidx})",
		"description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers."
	},
	"reaper.GetLastMarkerAndCurRegion": {
		"prefix": "reaper.GetLastMarkerAndCurRegion",
		"scope": "lua",
		"body": "${1:${2:number markeridx}, ${3:number regionidx} = }reaper.GetLastMarkerAndCurRegion(${4:ReaProject proj}, ${5:number time})",
		"description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers."
	},
	"RPR_GetLastMarkerAndCurRegion": {
		"prefix": "RPR_GetLastMarkerAndCurRegion",
		"scope": "python",
		"body": "${1:${2:ReaProject proj}, ${3:Float time}, ${4:Int markeridxOut}, ${5:Int regionidxOut} = }RPR_GetLastMarkerAndCurRegion(${6:proj}, ${7:time}, ${8:markeridxOut}, ${9:regionidxOut})",
		"description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers."
	},
	"GetLastTouchedFX": {
		"prefix": "GetLastTouchedFX",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetLastTouchedFX(${3:int +tracknumber}, ${4:int +fxnumber}, ${5:int +paramnumber})",
		"description": "Returns true if the last touched FX parameter is valid, false otherwise. tracknumber==0 means the master track, 1 means track 1, etc. fxnumber and paramnumber are zero-based. See GetFocusedFX."
	},
	"reaper.GetLastTouchedFX": {
		"prefix": "reaper.GetLastTouchedFX",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number tracknumber}, ${4:number fxnumber}, ${5:number paramnumber} = }reaper.GetLastTouchedFX()",
		"description": "Returns true if the last touched FX parameter is valid, false otherwise. tracknumber==0 means the master track, 1 means track 1, etc. fxnumber and paramnumber are zero-based. See GetFocusedFX."
	},
	"RPR_GetLastTouchedFX": {
		"prefix": "RPR_GetLastTouchedFX",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:Int tracknumberOut}, ${4:Int fxnumberOut}, ${5:Int paramnumberOut} = }RPR_GetLastTouchedFX(${6:tracknumberOut}, ${7:fxnumberOut}, ${8:paramnumberOut})",
		"description": "Returns true if the last touched FX parameter is valid, false otherwise. tracknumber==0 means the master track, 1 means track 1, etc. fxnumber and paramnumber are zero-based. See GetFocusedFX."
	},
	"GetLastTouchedTrack": {
		"prefix": "GetLastTouchedTrack",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }GetLastTouchedTrack()",
		"description": ""
	},
	"reaper.GetLastTouchedTrack": {
		"prefix": "reaper.GetLastTouchedTrack",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.GetLastTouchedTrack()",
		"description": ""
	},
	"RPR_GetLastTouchedTrack": {
		"prefix": "RPR_GetLastTouchedTrack",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_GetLastTouchedTrack()",
		"description": ""
	},
	"GetMainHwnd": {
		"prefix": "GetMainHwnd",
		"scope": "eel",
		"body": "${1:${2:HWND} = }GetMainHwnd()",
		"description": ""
	},
	"reaper.GetMainHwnd": {
		"prefix": "reaper.GetMainHwnd",
		"scope": "lua",
		"body": "${1:${2:HWND} = }reaper.GetMainHwnd()",
		"description": ""
	},
	"RPR_GetMainHwnd": {
		"prefix": "RPR_GetMainHwnd",
		"scope": "python",
		"body": "${1:${2:HWND} = }RPR_GetMainHwnd()",
		"description": ""
	},
	"GetMasterMuteSoloFlags": {
		"prefix": "GetMasterMuteSoloFlags",
		"scope": "eel",
		"body": "${1:${2:int} = }GetMasterMuteSoloFlags()",
		"description": "+1=master mute,+2=master solo. This is deprecated as you can just query the master track as well."
	},
	"reaper.GetMasterMuteSoloFlags": {
		"prefix": "reaper.GetMasterMuteSoloFlags",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetMasterMuteSoloFlags()",
		"description": "+1=master mute,+2=master solo. This is deprecated as you can just query the master track as well."
	},
	"RPR_GetMasterMuteSoloFlags": {
		"prefix": "RPR_GetMasterMuteSoloFlags",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetMasterMuteSoloFlags()",
		"description": "+1=master mute,+2=master solo. This is deprecated as you can just query the master track as well."
	},
	"GetMasterTrack": {
		"prefix": "GetMasterTrack",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }GetMasterTrack(${3:ReaProject proj})",
		"description": ""
	},
	"reaper.GetMasterTrack": {
		"prefix": "reaper.GetMasterTrack",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.GetMasterTrack(${3:ReaProject proj})",
		"description": ""
	},
	"RPR_GetMasterTrack": {
		"prefix": "RPR_GetMasterTrack",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_GetMasterTrack(${3:ReaProject proj})",
		"description": ""
	},
	"GetMasterTrackVisibility": {
		"prefix": "GetMasterTrackVisibility",
		"scope": "eel",
		"body": "${1:${2:int} = }GetMasterTrackVisibility()",
		"description": "returns +1 if the master track is visible in the TCP, +2 if visible in the mixer. See SetMasterTrackVisibility."
	},
	"reaper.GetMasterTrackVisibility": {
		"prefix": "reaper.GetMasterTrackVisibility",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetMasterTrackVisibility()",
		"description": "returns +1 if the master track is visible in the TCP, +2 if visible in the mixer. See SetMasterTrackVisibility."
	},
	"RPR_GetMasterTrackVisibility": {
		"prefix": "RPR_GetMasterTrackVisibility",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetMasterTrackVisibility()",
		"description": "returns +1 if the master track is visible in the TCP, +2 if visible in the mixer. See SetMasterTrackVisibility."
	},
	"GetMaxMidiInputs": {
		"prefix": "GetMaxMidiInputs",
		"scope": "eel",
		"body": "${1:${2:int} = }GetMaxMidiInputs()",
		"description": "returns max dev for midi inputs/outputs"
	},
	"reaper.GetMaxMidiInputs": {
		"prefix": "reaper.GetMaxMidiInputs",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetMaxMidiInputs()",
		"description": "returns max dev for midi inputs/outputs"
	},
	"RPR_GetMaxMidiInputs": {
		"prefix": "RPR_GetMaxMidiInputs",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetMaxMidiInputs()",
		"description": "returns max dev for midi inputs/outputs"
	},
	"GetMaxMidiOutputs": {
		"prefix": "GetMaxMidiOutputs",
		"scope": "eel",
		"body": "${1:${2:int} = }GetMaxMidiOutputs()",
		"description": ""
	},
	"reaper.GetMaxMidiOutputs": {
		"prefix": "reaper.GetMaxMidiOutputs",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetMaxMidiOutputs()",
		"description": ""
	},
	"RPR_GetMaxMidiOutputs": {
		"prefix": "RPR_GetMaxMidiOutputs",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetMaxMidiOutputs()",
		"description": ""
	},
	"GetMediaItem": {
		"prefix": "GetMediaItem",
		"scope": "eel",
		"body": "${1:${2:MediaItem} = }GetMediaItem(${3:ReaProject proj}, ${4:int itemidx})",
		"description": "get an item from a project by item count (zero-based) (proj=0 for active project)"
	},
	"reaper.GetMediaItem": {
		"prefix": "reaper.GetMediaItem",
		"scope": "lua",
		"body": "${1:${2:MediaItem} = }reaper.GetMediaItem(${3:ReaProject proj}, ${4:integer itemidx})",
		"description": "get an item from a project by item count (zero-based) (proj=0 for active project)"
	},
	"RPR_GetMediaItem": {
		"prefix": "RPR_GetMediaItem",
		"scope": "python",
		"body": "${1:${2:MediaItem} = }RPR_GetMediaItem(${3:ReaProject proj}, ${4:Int itemidx})",
		"description": "get an item from a project by item count (zero-based) (proj=0 for active project)"
	},
	"GetMediaItem_Track": {
		"prefix": "GetMediaItem_Track",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }GetMediaItem_Track(${3:MediaItem item})",
		"description": "Get parent track of media item"
	},
	"reaper.GetMediaItem_Track": {
		"prefix": "reaper.GetMediaItem_Track",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.GetMediaItem_Track(${3:MediaItem item})",
		"description": "Get parent track of media item"
	},
	"RPR_GetMediaItem_Track": {
		"prefix": "RPR_GetMediaItem_Track",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_GetMediaItem_Track(${3:MediaItem item})",
		"description": "Get parent track of media item"
	},
	"GetMediaItemInfo_Value": {
		"prefix": "GetMediaItemInfo_Value",
		"scope": "eel",
		"body": "${1:${2:double} = }GetMediaItemInfo_Value(${3:MediaItem item}, ${4:\"parmname\"})",
		"description": "Get media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (+1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)\n\nP_TRACK : MediaTrack * (read only)"
	},
	"reaper.GetMediaItemInfo_Value": {
		"prefix": "reaper.GetMediaItemInfo_Value",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetMediaItemInfo_Value(${3:MediaItem item}, ${4:string parmname})",
		"description": "Get media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (+1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)\n\nP_TRACK : MediaTrack * (read only)"
	},
	"RPR_GetMediaItemInfo_Value": {
		"prefix": "RPR_GetMediaItemInfo_Value",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetMediaItemInfo_Value(${3:MediaItem item}, ${4:String parmname})",
		"description": "Get media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (+1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)\n\nP_TRACK : MediaTrack * (read only)"
	},
	"GetMediaItemNumTakes": {
		"prefix": "GetMediaItemNumTakes",
		"scope": "eel",
		"body": "${1:${2:int} = }GetMediaItemNumTakes(${3:MediaItem item})",
		"description": ""
	},
	"reaper.GetMediaItemNumTakes": {
		"prefix": "reaper.GetMediaItemNumTakes",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetMediaItemNumTakes(${3:MediaItem item})",
		"description": ""
	},
	"RPR_GetMediaItemNumTakes": {
		"prefix": "RPR_GetMediaItemNumTakes",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetMediaItemNumTakes(${3:MediaItem item})",
		"description": ""
	},
	"GetMediaItemTake": {
		"prefix": "GetMediaItemTake",
		"scope": "eel",
		"body": "${1:${2:MediaItem_Take} = }GetMediaItemTake(${3:MediaItem item}, ${4:int tk})",
		"description": ""
	},
	"reaper.GetMediaItemTake": {
		"prefix": "reaper.GetMediaItemTake",
		"scope": "lua",
		"body": "${1:${2:MediaItem_Take} = }reaper.GetMediaItemTake(${3:MediaItem item}, ${4:integer tk})",
		"description": ""
	},
	"RPR_GetMediaItemTake": {
		"prefix": "RPR_GetMediaItemTake",
		"scope": "python",
		"body": "${1:${2:MediaItem_Take} = }RPR_GetMediaItemTake(${3:MediaItem item}, ${4:Int tk})",
		"description": ""
	},
	"GetMediaItemTake_Item": {
		"prefix": "GetMediaItemTake_Item",
		"scope": "eel",
		"body": "${1:${2:MediaItem} = }GetMediaItemTake_Item(${3:MediaItem_Take take})",
		"description": "Get parent item of media item take"
	},
	"reaper.GetMediaItemTake_Item": {
		"prefix": "reaper.GetMediaItemTake_Item",
		"scope": "lua",
		"body": "${1:${2:MediaItem} = }reaper.GetMediaItemTake_Item(${3:MediaItem_Take take})",
		"description": "Get parent item of media item take"
	},
	"RPR_GetMediaItemTake_Item": {
		"prefix": "RPR_GetMediaItemTake_Item",
		"scope": "python",
		"body": "${1:${2:MediaItem} = }RPR_GetMediaItemTake_Item(${3:MediaItem_Take take})",
		"description": "Get parent item of media item take"
	},
	"GetMediaItemTake_Peaks": {
		"prefix": "GetMediaItemTake_Peaks",
		"scope": "eel",
		"body": "${1:${2:int} = }GetMediaItemTake_Peaks(${3:MediaItem_Take take}, ${4:peakrate}, ${5:starttime}, ${6:int numchannels}, ${7:int numsamplesperchannel}, ${8:int want_extra_type}, ${9:buffer_ptr buf})",
		"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
	},
	"reaper.GetMediaItemTake_Peaks": {
		"prefix": "reaper.GetMediaItemTake_Peaks",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetMediaItemTake_Peaks(${3:MediaItem_Take take}, ${4:number peakrate}, ${5:number starttime}, ${6:integer numchannels}, ${7:integer numsamplesperchannel}, ${8:integer want_extra_type}, ${9:reaper.array buf})",
		"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
	},
	"RPR_GetMediaItemTake_Peaks": {
		"prefix": "RPR_GetMediaItemTake_Peaks",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:MediaItem_Take take}, ${4:Float peakrate}, ${5:Float starttime}, ${6:Int numchannels}, ${7:Int numsamplesperchannel}, ${8:Int want_extra_type}, ${9:Float buf} = }RPR_GetMediaItemTake_Peaks(${10:take}, ${11:peakrate}, ${12:starttime}, ${13:numchannels}, ${14:numsamplesperchannel}, ${15:want_extra_type}, ${16:buf})",
		"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
	},
	"GetMediaItemTake_Source": {
		"prefix": "GetMediaItemTake_Source",
		"scope": "eel",
		"body": "${1:${2:PCM_source} = }GetMediaItemTake_Source(${3:MediaItem_Take take})",
		"description": "Get media source of media item take"
	},
	"reaper.GetMediaItemTake_Source": {
		"prefix": "reaper.GetMediaItemTake_Source",
		"scope": "lua",
		"body": "${1:${2:PCM_source} = }reaper.GetMediaItemTake_Source(${3:MediaItem_Take take})",
		"description": "Get media source of media item take"
	},
	"RPR_GetMediaItemTake_Source": {
		"prefix": "RPR_GetMediaItemTake_Source",
		"scope": "python",
		"body": "${1:${2:PCM_source} = }RPR_GetMediaItemTake_Source(${3:MediaItem_Take take})",
		"description": "Get media source of media item take"
	},
	"GetMediaItemTake_Track": {
		"prefix": "GetMediaItemTake_Track",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }GetMediaItemTake_Track(${3:MediaItem_Take take})",
		"description": "Get parent track of media item take"
	},
	"reaper.GetMediaItemTake_Track": {
		"prefix": "reaper.GetMediaItemTake_Track",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.GetMediaItemTake_Track(${3:MediaItem_Take take})",
		"description": "Get parent track of media item take"
	},
	"RPR_GetMediaItemTake_Track": {
		"prefix": "RPR_GetMediaItemTake_Track",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_GetMediaItemTake_Track(${3:MediaItem_Take take})",
		"description": "Get parent track of media item take"
	},
	"GetMediaItemTakeByGUID": {
		"prefix": "GetMediaItemTakeByGUID",
		"scope": "eel",
		"body": "${1:${2:MediaItem_Take} = }GetMediaItemTakeByGUID(${3:ReaProject project}, ${4:\"guidGUID\"})",
		"description": ""
	},
	"reaper.GetMediaItemTakeByGUID": {
		"prefix": "reaper.GetMediaItemTakeByGUID",
		"scope": "lua",
		"body": "${1:${2:MediaItem_Take} = }reaper.GetMediaItemTakeByGUID(${3:ReaProject project}, ${4:string guidGUID})",
		"description": ""
	},
	"RPR_GetMediaItemTakeByGUID": {
		"prefix": "RPR_GetMediaItemTakeByGUID",
		"scope": "python",
		"body": "${1:${2:MediaItem_Take} = }RPR_GetMediaItemTakeByGUID(${3:ReaProject project}, ${4:const GUID guid})",
		"description": ""
	},
	"GetMediaItemTakeInfo_Value": {
		"prefix": "GetMediaItemTakeInfo_Value",
		"scope": "eel",
		"body": "${1:${2:double} = }GetMediaItemTakeInfo_Value(${3:MediaItem_Take take}, ${4:\"parmname\"})",
		"description": "Get media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)\n\nP_TRACK : pointer to MediaTrack (read-only)\n\nP_ITEM : pointer to MediaItem (read-only)\n\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old."
	},
	"reaper.GetMediaItemTakeInfo_Value": {
		"prefix": "reaper.GetMediaItemTakeInfo_Value",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetMediaItemTakeInfo_Value(${3:MediaItem_Take take}, ${4:string parmname})",
		"description": "Get media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)\n\nP_TRACK : pointer to MediaTrack (read-only)\n\nP_ITEM : pointer to MediaItem (read-only)\n\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old."
	},
	"RPR_GetMediaItemTakeInfo_Value": {
		"prefix": "RPR_GetMediaItemTakeInfo_Value",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetMediaItemTakeInfo_Value(${3:MediaItem_Take take}, ${4:String parmname})",
		"description": "Get media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)\n\nP_TRACK : pointer to MediaTrack (read-only)\n\nP_ITEM : pointer to MediaItem (read-only)\n\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old."
	},
	"GetMediaItemTrack": {
		"prefix": "GetMediaItemTrack",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }GetMediaItemTrack(${3:MediaItem item})",
		"description": ""
	},
	"reaper.GetMediaItemTrack": {
		"prefix": "reaper.GetMediaItemTrack",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.GetMediaItemTrack(${3:MediaItem item})",
		"description": ""
	},
	"RPR_GetMediaItemTrack": {
		"prefix": "RPR_GetMediaItemTrack",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_GetMediaItemTrack(${3:MediaItem item})",
		"description": ""
	},
	"GetMediaSourceFileName": {
		"prefix": "GetMediaSourceFileName",
		"scope": "eel",
		"body": "GetMediaSourceFileName(${1:PCM_source source}, ${2:#filenamebuf})",
		"description": "Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent."
	},
	"reaper.GetMediaSourceFileName": {
		"prefix": "reaper.GetMediaSourceFileName",
		"scope": "lua",
		"body": "${1:${2:string filenamebuf} = }reaper.GetMediaSourceFileName(${3:PCM_source source}, ${4:string filenamebuf})",
		"description": "Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent."
	},
	"RPR_GetMediaSourceFileName": {
		"prefix": "RPR_GetMediaSourceFileName",
		"scope": "python",
		"body": "${1:${2:PCM_source source}, ${3:String filenamebuf}, ${4:Int filenamebuf_sz} = }RPR_GetMediaSourceFileName(${5:source}, ${6:filenamebuf}, ${7:filenamebuf_sz})",
		"description": "Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent."
	},
	"GetMediaSourceLength": {
		"prefix": "GetMediaSourceLength",
		"scope": "eel",
		"body": "${1:${2:double} = }GetMediaSourceLength(${3:PCM_source source}, ${4:bool +lengthIsQN})",
		"description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds."
	},
	"reaper.GetMediaSourceLength": {
		"prefix": "reaper.GetMediaSourceLength",
		"scope": "lua",
		"body": "${1:${2:number retval}, ${3:boolean lengthIsQN} = }reaper.GetMediaSourceLength(${4:PCM_source source})",
		"description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds."
	},
	"RPR_GetMediaSourceLength": {
		"prefix": "RPR_GetMediaSourceLength",
		"scope": "python",
		"body": "${1:${2:Float retval}, ${3:PCM_source source}, ${4:Boolean lengthIsQNOut} = }RPR_GetMediaSourceLength(${5:source}, ${6:lengthIsQNOut})",
		"description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds."
	},
	"GetMediaSourceNumChannels": {
		"prefix": "GetMediaSourceNumChannels",
		"scope": "eel",
		"body": "${1:${2:int} = }GetMediaSourceNumChannels(${3:PCM_source source})",
		"description": "Returns the number of channels in the source media."
	},
	"reaper.GetMediaSourceNumChannels": {
		"prefix": "reaper.GetMediaSourceNumChannels",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetMediaSourceNumChannels(${3:PCM_source source})",
		"description": "Returns the number of channels in the source media."
	},
	"RPR_GetMediaSourceNumChannels": {
		"prefix": "RPR_GetMediaSourceNumChannels",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetMediaSourceNumChannels(${3:PCM_source source})",
		"description": "Returns the number of channels in the source media."
	},
	"GetMediaSourceParent": {
		"prefix": "GetMediaSourceParent",
		"scope": "eel",
		"body": "${1:${2:PCM_source} = }GetMediaSourceParent(${3:PCM_source src})",
		"description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example."
	},
	"reaper.GetMediaSourceParent": {
		"prefix": "reaper.GetMediaSourceParent",
		"scope": "lua",
		"body": "${1:${2:PCM_source} = }reaper.GetMediaSourceParent(${3:PCM_source src})",
		"description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example."
	},
	"RPR_GetMediaSourceParent": {
		"prefix": "RPR_GetMediaSourceParent",
		"scope": "python",
		"body": "${1:${2:PCM_source} = }RPR_GetMediaSourceParent(${3:PCM_source src})",
		"description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example."
	},
	"GetMediaSourceSampleRate": {
		"prefix": "GetMediaSourceSampleRate",
		"scope": "eel",
		"body": "${1:${2:int} = }GetMediaSourceSampleRate(${3:PCM_source source})",
		"description": "Returns the sample rate. MIDI source media will return zero."
	},
	"reaper.GetMediaSourceSampleRate": {
		"prefix": "reaper.GetMediaSourceSampleRate",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetMediaSourceSampleRate(${3:PCM_source source})",
		"description": "Returns the sample rate. MIDI source media will return zero."
	},
	"RPR_GetMediaSourceSampleRate": {
		"prefix": "RPR_GetMediaSourceSampleRate",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetMediaSourceSampleRate(${3:PCM_source source})",
		"description": "Returns the sample rate. MIDI source media will return zero."
	},
	"GetMediaSourceType": {
		"prefix": "GetMediaSourceType",
		"scope": "eel",
		"body": "GetMediaSourceType(${1:PCM_source source}, ${2:#typebuf})",
		"description": "copies the media source type (\"WAV\", \"MIDI\", etc) to typebuf"
	},
	"reaper.GetMediaSourceType": {
		"prefix": "reaper.GetMediaSourceType",
		"scope": "lua",
		"body": "${1:${2:string typebuf} = }reaper.GetMediaSourceType(${3:PCM_source source}, ${4:string typebuf})",
		"description": "copies the media source type (\"WAV\", \"MIDI\", etc) to typebuf"
	},
	"RPR_GetMediaSourceType": {
		"prefix": "RPR_GetMediaSourceType",
		"scope": "python",
		"body": "${1:${2:PCM_source source}, ${3:String typebuf}, ${4:Int typebuf_sz} = }RPR_GetMediaSourceType(${5:source}, ${6:typebuf}, ${7:typebuf_sz})",
		"description": "copies the media source type (\"WAV\", \"MIDI\", etc) to typebuf"
	},
	"GetMediaTrackInfo_Value": {
		"prefix": "GetMediaTrackInfo_Value",
		"scope": "eel",
		"body": "${1:${2:double} = }GetMediaTrackInfo_Value(${3:MediaTrack tr}, ${4:\"parmname\"})",
		"description": "Get track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (+1=no media buffering, +2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)\n\nP_PARTRACK : MediaTrack * : parent track (read-only)\n\nP_PROJECT : ReaProject * : parent project (read-only)"
	},
	"reaper.GetMediaTrackInfo_Value": {
		"prefix": "reaper.GetMediaTrackInfo_Value",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetMediaTrackInfo_Value(${3:MediaTrack tr}, ${4:string parmname})",
		"description": "Get track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (+1=no media buffering, +2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)\n\nP_PARTRACK : MediaTrack * : parent track (read-only)\n\nP_PROJECT : ReaProject * : parent project (read-only)"
	},
	"RPR_GetMediaTrackInfo_Value": {
		"prefix": "RPR_GetMediaTrackInfo_Value",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetMediaTrackInfo_Value(${3:MediaTrack tr}, ${4:String parmname})",
		"description": "Get track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (+1=no media buffering, +2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)\n\nP_PARTRACK : MediaTrack * : parent track (read-only)\n\nP_PROJECT : ReaProject * : parent project (read-only)"
	},
	"GetMIDIInputName": {
		"prefix": "GetMIDIInputName",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetMIDIInputName(${3:int dev}, ${4:#nameout})",
		"description": "returns true if device present"
	},
	"reaper.GetMIDIInputName": {
		"prefix": "reaper.GetMIDIInputName",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string nameout} = }reaper.GetMIDIInputName(${4:integer dev}, ${5:string nameout})",
		"description": "returns true if device present"
	},
	"RPR_GetMIDIInputName": {
		"prefix": "RPR_GetMIDIInputName",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:Int dev}, ${4:String nameout}, ${5:Int nameout_sz} = }RPR_GetMIDIInputName(${6:dev}, ${7:nameout}, ${8:nameout_sz})",
		"description": "returns true if device present"
	},
	"GetMIDIOutputName": {
		"prefix": "GetMIDIOutputName",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetMIDIOutputName(${3:int dev}, ${4:#nameout})",
		"description": "returns true if device present"
	},
	"reaper.GetMIDIOutputName": {
		"prefix": "reaper.GetMIDIOutputName",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string nameout} = }reaper.GetMIDIOutputName(${4:integer dev}, ${5:string nameout})",
		"description": "returns true if device present"
	},
	"RPR_GetMIDIOutputName": {
		"prefix": "RPR_GetMIDIOutputName",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:Int dev}, ${4:String nameout}, ${5:Int nameout_sz} = }RPR_GetMIDIOutputName(${6:dev}, ${7:nameout}, ${8:nameout_sz})",
		"description": "returns true if device present"
	},
	"GetMixerScroll": {
		"prefix": "GetMixerScroll",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }GetMixerScroll()",
		"description": "Get the leftmost track visible in the mixer"
	},
	"reaper.GetMixerScroll": {
		"prefix": "reaper.GetMixerScroll",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.GetMixerScroll()",
		"description": "Get the leftmost track visible in the mixer"
	},
	"RPR_GetMixerScroll": {
		"prefix": "RPR_GetMixerScroll",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_GetMixerScroll()",
		"description": "Get the leftmost track visible in the mixer"
	},
	"GetMouseModifier": {
		"prefix": "GetMouseModifier",
		"scope": "eel",
		"body": "GetMouseModifier(${1:\"context\"}, ${2:int modifier_flag}, ${3:#action})",
		"description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\naction will be filled in with the command ID number for a built-in mouse modifier\n\nor built-in REAPER command ID, or the custom action ID string.\n\nSee SetMouseModifier for more information."
	},
	"reaper.GetMouseModifier": {
		"prefix": "reaper.GetMouseModifier",
		"scope": "lua",
		"body": "${1:${2:string action} = }reaper.GetMouseModifier(${3:string context}, ${4:integer modifier_flag}, ${5:string action})",
		"description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\naction will be filled in with the command ID number for a built-in mouse modifier\n\nor built-in REAPER command ID, or the custom action ID string.\n\nSee SetMouseModifier for more information."
	},
	"RPR_GetMouseModifier": {
		"prefix": "RPR_GetMouseModifier",
		"scope": "python",
		"body": "${1:${2:String context}, ${3:Int modifier_flag}, ${4:String action}, ${5:Int action_sz} = }RPR_GetMouseModifier(${6:context}, ${7:modifier_flag}, ${8:action}, ${9:action_sz})",
		"description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\naction will be filled in with the command ID number for a built-in mouse modifier\n\nor built-in REAPER command ID, or the custom action ID string.\n\nSee SetMouseModifier for more information."
	},
	"GetMousePosition": {
		"prefix": "GetMousePosition",
		"scope": "eel",
		"body": "GetMousePosition(${1:int +x}, ${2:int +y})",
		"description": "get mouse position in screen coordinates"
	},
	"reaper.GetMousePosition": {
		"prefix": "reaper.GetMousePosition",
		"scope": "lua",
		"body": "${1:${2:number x}, ${3:number y} = }reaper.GetMousePosition()",
		"description": "get mouse position in screen coordinates"
	},
	"RPR_GetMousePosition": {
		"prefix": "RPR_GetMousePosition",
		"scope": "python",
		"body": "${1:${2:Int xOut}, ${3:Int yOut} = }RPR_GetMousePosition(${4:xOut}, ${5:yOut})",
		"description": "get mouse position in screen coordinates"
	},
	"GetNumAudioInputs": {
		"prefix": "GetNumAudioInputs",
		"scope": "eel",
		"body": "${1:${2:int} = }GetNumAudioInputs()",
		"description": "Return number of normal audio hardware inputs available"
	},
	"reaper.GetNumAudioInputs": {
		"prefix": "reaper.GetNumAudioInputs",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetNumAudioInputs()",
		"description": "Return number of normal audio hardware inputs available"
	},
	"RPR_GetNumAudioInputs": {
		"prefix": "RPR_GetNumAudioInputs",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetNumAudioInputs()",
		"description": "Return number of normal audio hardware inputs available"
	},
	"GetNumAudioOutputs": {
		"prefix": "GetNumAudioOutputs",
		"scope": "eel",
		"body": "${1:${2:int} = }GetNumAudioOutputs()",
		"description": "Return number of normal audio hardware outputs available"
	},
	"reaper.GetNumAudioOutputs": {
		"prefix": "reaper.GetNumAudioOutputs",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetNumAudioOutputs()",
		"description": "Return number of normal audio hardware outputs available"
	},
	"RPR_GetNumAudioOutputs": {
		"prefix": "RPR_GetNumAudioOutputs",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetNumAudioOutputs()",
		"description": "Return number of normal audio hardware outputs available"
	},
	"GetNumMIDIInputs": {
		"prefix": "GetNumMIDIInputs",
		"scope": "eel",
		"body": "${1:${2:int} = }GetNumMIDIInputs()",
		"description": "returns max number of real midi hardware inputs"
	},
	"reaper.GetNumMIDIInputs": {
		"prefix": "reaper.GetNumMIDIInputs",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetNumMIDIInputs()",
		"description": "returns max number of real midi hardware inputs"
	},
	"RPR_GetNumMIDIInputs": {
		"prefix": "RPR_GetNumMIDIInputs",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetNumMIDIInputs()",
		"description": "returns max number of real midi hardware inputs"
	},
	"GetNumMIDIOutputs": {
		"prefix": "GetNumMIDIOutputs",
		"scope": "eel",
		"body": "${1:${2:int} = }GetNumMIDIOutputs()",
		"description": "returns max number of real midi hardware outputs"
	},
	"reaper.GetNumMIDIOutputs": {
		"prefix": "reaper.GetNumMIDIOutputs",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetNumMIDIOutputs()",
		"description": "returns max number of real midi hardware outputs"
	},
	"RPR_GetNumMIDIOutputs": {
		"prefix": "RPR_GetNumMIDIOutputs",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetNumMIDIOutputs()",
		"description": "returns max number of real midi hardware outputs"
	},
	"GetNumTracks": {
		"prefix": "GetNumTracks",
		"scope": "eel",
		"body": "${1:${2:int} = }GetNumTracks()",
		"description": ""
	},
	"reaper.GetNumTracks": {
		"prefix": "reaper.GetNumTracks",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetNumTracks()",
		"description": ""
	},
	"RPR_GetNumTracks": {
		"prefix": "RPR_GetNumTracks",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetNumTracks()",
		"description": ""
	},
	"GetOS": {
		"prefix": "GetOS",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetOS(${3:#retval})",
		"description": "Returns \"Win32\", \"Win64\", \"OSX32\", \"OSX64\", or \"Other\"."
	},
	"reaper.GetOS": {
		"prefix": "reaper.GetOS",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.GetOS()",
		"description": "Returns \"Win32\", \"Win64\", \"OSX32\", \"OSX64\", or \"Other\"."
	},
	"RPR_GetOS": {
		"prefix": "RPR_GetOS",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_GetOS()",
		"description": "Returns \"Win32\", \"Win64\", \"OSX32\", \"OSX64\", or \"Other\"."
	},
	"GetOutputChannelName": {
		"prefix": "GetOutputChannelName",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetOutputChannelName(${3:#retval}, ${4:int channelIndex})",
		"description": ""
	},
	"reaper.GetOutputChannelName": {
		"prefix": "reaper.GetOutputChannelName",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.GetOutputChannelName(${3:integer channelIndex})",
		"description": ""
	},
	"RPR_GetOutputChannelName": {
		"prefix": "RPR_GetOutputChannelName",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_GetOutputChannelName(${3:Int channelIndex})",
		"description": ""
	},
	"GetOutputLatency": {
		"prefix": "GetOutputLatency",
		"scope": "eel",
		"body": "${1:${2:double} = }GetOutputLatency()",
		"description": "returns output latency in seconds"
	},
	"reaper.GetOutputLatency": {
		"prefix": "reaper.GetOutputLatency",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetOutputLatency()",
		"description": "returns output latency in seconds"
	},
	"RPR_GetOutputLatency": {
		"prefix": "RPR_GetOutputLatency",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetOutputLatency()",
		"description": "returns output latency in seconds"
	},
	"GetParentTrack": {
		"prefix": "GetParentTrack",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }GetParentTrack(${3:MediaTrack track})",
		"description": ""
	},
	"reaper.GetParentTrack": {
		"prefix": "reaper.GetParentTrack",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.GetParentTrack(${3:MediaTrack track})",
		"description": ""
	},
	"RPR_GetParentTrack": {
		"prefix": "RPR_GetParentTrack",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_GetParentTrack(${3:MediaTrack track})",
		"description": ""
	},
	"GetPeakFileName": {
		"prefix": "GetPeakFileName",
		"scope": "eel",
		"body": "GetPeakFileName(${1:\"fn\"}, ${2:#buf})",
		"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
	},
	"reaper.GetPeakFileName": {
		"prefix": "reaper.GetPeakFileName",
		"scope": "lua",
		"body": "${1:${2:string buf} = }reaper.GetPeakFileName(${3:string fn}, ${4:string buf})",
		"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
	},
	"RPR_GetPeakFileName": {
		"prefix": "RPR_GetPeakFileName",
		"scope": "python",
		"body": "${1:${2:String fn}, ${3:String buf}, ${4:Int buf_sz} = }RPR_GetPeakFileName(${5:fn}, ${6:buf}, ${7:buf_sz})",
		"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
	},
	"GetPeakFileNameEx": {
		"prefix": "GetPeakFileNameEx",
		"scope": "eel",
		"body": "GetPeakFileNameEx(${1:\"fn\"}, ${2:#buf}, ${3:bool forWrite})",
		"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
	},
	"reaper.GetPeakFileNameEx": {
		"prefix": "reaper.GetPeakFileNameEx",
		"scope": "lua",
		"body": "${1:${2:string buf} = }reaper.GetPeakFileNameEx(${3:string fn}, ${4:string buf}, ${5:boolean forWrite})",
		"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
	},
	"RPR_GetPeakFileNameEx": {
		"prefix": "RPR_GetPeakFileNameEx",
		"scope": "python",
		"body": "${1:${2:String fn}, ${3:String buf}, ${4:Int buf_sz}, ${5:Boolean forWrite} = }RPR_GetPeakFileNameEx(${6:fn}, ${7:buf}, ${8:buf_sz}, ${9:forWrite})",
		"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
	},
	"GetPeakFileNameEx2": {
		"prefix": "GetPeakFileNameEx2",
		"scope": "eel",
		"body": "GetPeakFileNameEx2(${1:\"fn\"}, ${2:#buf}, ${3:bool forWrite}, ${4:\"peaksfileextension\"})",
		"description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as \".reapeaks\""
	},
	"reaper.GetPeakFileNameEx2": {
		"prefix": "reaper.GetPeakFileNameEx2",
		"scope": "lua",
		"body": "${1:${2:string buf} = }reaper.GetPeakFileNameEx2(${3:string fn}, ${4:string buf}, ${5:boolean forWrite}, ${6:string peaksfileextension})",
		"description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as \".reapeaks\""
	},
	"RPR_GetPeakFileNameEx2": {
		"prefix": "RPR_GetPeakFileNameEx2",
		"scope": "python",
		"body": "${1:${2:String fn}, ${3:String buf}, ${4:Int buf_sz}, ${5:Boolean forWrite}, ${6:String peaksfileextension} = }RPR_GetPeakFileNameEx2(${7:fn}, ${8:buf}, ${9:buf_sz}, ${10:forWrite}, ${11:peaksfileextension})",
		"description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as \".reapeaks\""
	},
	"GetPlayPosition": {
		"prefix": "GetPlayPosition",
		"scope": "eel",
		"body": "${1:${2:double} = }GetPlayPosition()",
		"description": "returns latency-compensated actual-what-you-hear positio"
	},
	"reaper.GetPlayPosition": {
		"prefix": "reaper.GetPlayPosition",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetPlayPosition()",
		"description": "returns latency-compensated actual-what-you-hear positio"
	},
	"RPR_GetPlayPosition": {
		"prefix": "RPR_GetPlayPosition",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetPlayPosition()",
		"description": "returns latency-compensated actual-what-you-hear positio"
	},
	"GetPlayPosition2": {
		"prefix": "GetPlayPosition2",
		"scope": "eel",
		"body": "${1:${2:double} = }GetPlayPosition2()",
		"description": "returns position of next audio block being processed"
	},
	"reaper.GetPlayPosition2": {
		"prefix": "reaper.GetPlayPosition2",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetPlayPosition2()",
		"description": "returns position of next audio block being processed"
	},
	"RPR_GetPlayPosition2": {
		"prefix": "RPR_GetPlayPosition2",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetPlayPosition2()",
		"description": "returns position of next audio block being processed"
	},
	"GetPlayPosition2Ex": {
		"prefix": "GetPlayPosition2Ex",
		"scope": "eel",
		"body": "${1:${2:double} = }GetPlayPosition2Ex(${3:ReaProject proj})",
		"description": "returns position of next audio block being processed"
	},
	"reaper.GetPlayPosition2Ex": {
		"prefix": "reaper.GetPlayPosition2Ex",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetPlayPosition2Ex(${3:ReaProject proj})",
		"description": "returns position of next audio block being processed"
	},
	"RPR_GetPlayPosition2Ex": {
		"prefix": "RPR_GetPlayPosition2Ex",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetPlayPosition2Ex(${3:ReaProject proj})",
		"description": "returns position of next audio block being processed"
	},
	"GetPlayPositionEx": {
		"prefix": "GetPlayPositionEx",
		"scope": "eel",
		"body": "${1:${2:double} = }GetPlayPositionEx(${3:ReaProject proj})",
		"description": "returns latency-compensated actual-what-you-hear positio"
	},
	"reaper.GetPlayPositionEx": {
		"prefix": "reaper.GetPlayPositionEx",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetPlayPositionEx(${3:ReaProject proj})",
		"description": "returns latency-compensated actual-what-you-hear positio"
	},
	"RPR_GetPlayPositionEx": {
		"prefix": "RPR_GetPlayPositionEx",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetPlayPositionEx(${3:ReaProject proj})",
		"description": "returns latency-compensated actual-what-you-hear positio"
	},
	"GetPlayState": {
		"prefix": "GetPlayState",
		"scope": "eel",
		"body": "${1:${2:int} = }GetPlayState()",
		"description": "+1=playing,+2=pause,+=4 is recording"
	},
	"reaper.GetPlayState": {
		"prefix": "reaper.GetPlayState",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetPlayState()",
		"description": "+1=playing,+2=pause,+=4 is recording"
	},
	"RPR_GetPlayState": {
		"prefix": "RPR_GetPlayState",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetPlayState()",
		"description": "+1=playing,+2=pause,+=4 is recording"
	},
	"GetPlayStateEx": {
		"prefix": "GetPlayStateEx",
		"scope": "eel",
		"body": "${1:${2:int} = }GetPlayStateEx(${3:ReaProject proj})",
		"description": "+1=playing,+2=pause,+=4 is recording"
	},
	"reaper.GetPlayStateEx": {
		"prefix": "reaper.GetPlayStateEx",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetPlayStateEx(${3:ReaProject proj})",
		"description": "+1=playing,+2=pause,+=4 is recording"
	},
	"RPR_GetPlayStateEx": {
		"prefix": "RPR_GetPlayStateEx",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetPlayStateEx(${3:ReaProject proj})",
		"description": "+1=playing,+2=pause,+=4 is recording"
	},
	"GetProjectLength": {
		"prefix": "GetProjectLength",
		"scope": "eel",
		"body": "${1:${2:double} = }GetProjectLength(${3:ReaProject proj})",
		"description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map"
	},
	"reaper.GetProjectLength": {
		"prefix": "reaper.GetProjectLength",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetProjectLength(${3:ReaProject proj})",
		"description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map"
	},
	"RPR_GetProjectLength": {
		"prefix": "RPR_GetProjectLength",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetProjectLength(${3:ReaProject proj})",
		"description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map"
	},
	"GetProjectName": {
		"prefix": "GetProjectName",
		"scope": "eel",
		"body": "GetProjectName(${1:ReaProject proj}, ${2:#buf})",
		"description": ""
	},
	"reaper.GetProjectName": {
		"prefix": "reaper.GetProjectName",
		"scope": "lua",
		"body": "${1:${2:string buf} = }reaper.GetProjectName(${3:ReaProject proj}, ${4:string buf})",
		"description": ""
	},
	"RPR_GetProjectName": {
		"prefix": "RPR_GetProjectName",
		"scope": "python",
		"body": "${1:${2:ReaProject proj}, ${3:String buf}, ${4:Int buf_sz} = }RPR_GetProjectName(${5:proj}, ${6:buf}, ${7:buf_sz})",
		"description": ""
	},
	"GetProjectPath": {
		"prefix": "GetProjectPath",
		"scope": "eel",
		"body": "GetProjectPath(${1:#buf})",
		"description": ""
	},
	"reaper.GetProjectPath": {
		"prefix": "reaper.GetProjectPath",
		"scope": "lua",
		"body": "${1:${2:string buf} = }reaper.GetProjectPath(${3:string buf})",
		"description": ""
	},
	"RPR_GetProjectPath": {
		"prefix": "RPR_GetProjectPath",
		"scope": "python",
		"body": "${1:${2:String buf}, ${3:Int buf_sz} = }RPR_GetProjectPath(${4:buf}, ${5:buf_sz})",
		"description": ""
	},
	"GetProjectPathEx": {
		"prefix": "GetProjectPathEx",
		"scope": "eel",
		"body": "GetProjectPathEx(${1:ReaProject proj}, ${2:#buf})",
		"description": ""
	},
	"reaper.GetProjectPathEx": {
		"prefix": "reaper.GetProjectPathEx",
		"scope": "lua",
		"body": "${1:${2:string buf} = }reaper.GetProjectPathEx(${3:ReaProject proj}, ${4:string buf})",
		"description": ""
	},
	"RPR_GetProjectPathEx": {
		"prefix": "RPR_GetProjectPathEx",
		"scope": "python",
		"body": "${1:${2:ReaProject proj}, ${3:String buf}, ${4:Int buf_sz} = }RPR_GetProjectPathEx(${5:proj}, ${6:buf}, ${7:buf_sz})",
		"description": ""
	},
	"GetProjectStateChangeCount": {
		"prefix": "GetProjectStateChangeCount",
		"scope": "eel",
		"body": "${1:${2:int} = }GetProjectStateChangeCount(${3:ReaProject proj})",
		"description": "returns an integer that changes when the project state changes"
	},
	"reaper.GetProjectStateChangeCount": {
		"prefix": "reaper.GetProjectStateChangeCount",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetProjectStateChangeCount(${3:ReaProject proj})",
		"description": "returns an integer that changes when the project state changes"
	},
	"RPR_GetProjectStateChangeCount": {
		"prefix": "RPR_GetProjectStateChangeCount",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetProjectStateChangeCount(${3:ReaProject proj})",
		"description": "returns an integer that changes when the project state changes"
	},
	"GetProjectTimeOffset": {
		"prefix": "GetProjectTimeOffset",
		"scope": "eel",
		"body": "${1:${2:double} = }GetProjectTimeOffset(${3:ReaProject proj}, ${4:bool rndframe})",
		"description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size."
	},
	"reaper.GetProjectTimeOffset": {
		"prefix": "reaper.GetProjectTimeOffset",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetProjectTimeOffset(${3:ReaProject proj}, ${4:boolean rndframe})",
		"description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size."
	},
	"RPR_GetProjectTimeOffset": {
		"prefix": "RPR_GetProjectTimeOffset",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetProjectTimeOffset(${3:ReaProject proj}, ${4:Boolean rndframe})",
		"description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size."
	},
	"GetProjectTimeSignature": {
		"prefix": "GetProjectTimeSignature",
		"scope": "eel",
		"body": "GetProjectTimeSignature(${1:+bpm}, ${2:+bpi})",
		"description": "deprecated"
	},
	"reaper.GetProjectTimeSignature": {
		"prefix": "reaper.GetProjectTimeSignature",
		"scope": "lua",
		"body": "${1:${2:number bpm}, ${3:number bpi} = }reaper.GetProjectTimeSignature()",
		"description": "deprecated"
	},
	"RPR_GetProjectTimeSignature": {
		"prefix": "RPR_GetProjectTimeSignature",
		"scope": "python",
		"body": "${1:${2:Float bpmOut}, ${3:Float bpiOut} = }RPR_GetProjectTimeSignature(${4:bpmOut}, ${5:bpiOut})",
		"description": "deprecated"
	},
	"GetProjectTimeSignature2": {
		"prefix": "GetProjectTimeSignature2",
		"scope": "eel",
		"body": "GetProjectTimeSignature2(${1:ReaProject proj}, ${2:+bpm}, ${3:+bpi})",
		"description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\n\nthis does not reflect tempo envelopes but is purely what is set in the project settings."
	},
	"reaper.GetProjectTimeSignature2": {
		"prefix": "reaper.GetProjectTimeSignature2",
		"scope": "lua",
		"body": "${1:${2:number bpm}, ${3:number bpi} = }reaper.GetProjectTimeSignature2(${4:ReaProject proj})",
		"description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\n\nthis does not reflect tempo envelopes but is purely what is set in the project settings."
	},
	"RPR_GetProjectTimeSignature2": {
		"prefix": "RPR_GetProjectTimeSignature2",
		"scope": "python",
		"body": "${1:${2:ReaProject proj}, ${3:Float bpmOut}, ${4:Float bpiOut} = }RPR_GetProjectTimeSignature2(${5:proj}, ${6:bpmOut}, ${7:bpiOut})",
		"description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\n\nthis does not reflect tempo envelopes but is purely what is set in the project settings."
	},
	"GetProjExtState": {
		"prefix": "GetProjExtState",
		"scope": "eel",
		"body": "${1:${2:int} = }GetProjExtState(${3:ReaProject proj}, ${4:\"extname\"}, ${5:\"key\"}, ${6:#val})",
		"description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState."
	},
	"reaper.GetProjExtState": {
		"prefix": "reaper.GetProjExtState",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:string val} = }reaper.GetProjExtState(${4:ReaProject proj}, ${5:string extname}, ${6:string key})",
		"description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState."
	},
	"RPR_GetProjExtState": {
		"prefix": "RPR_GetProjExtState",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:ReaProject proj}, ${4:String extname}, ${5:String key}, ${6:String valOutNeedBig}, ${7:Int valOutNeedBig_sz} = }RPR_GetProjExtState(${8:proj}, ${9:extname}, ${10:key}, ${11:valOutNeedBig}, ${12:valOutNeedBig_sz})",
		"description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState."
	},
	"GetResourcePath": {
		"prefix": "GetResourcePath",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetResourcePath(${3:#retval})",
		"description": "returns path where ini files are stored, other things are in subdirectories."
	},
	"reaper.GetResourcePath": {
		"prefix": "reaper.GetResourcePath",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.GetResourcePath()",
		"description": "returns path where ini files are stored, other things are in subdirectories."
	},
	"RPR_GetResourcePath": {
		"prefix": "RPR_GetResourcePath",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_GetResourcePath()",
		"description": "returns path where ini files are stored, other things are in subdirectories."
	},
	"GetSelectedEnvelope": {
		"prefix": "GetSelectedEnvelope",
		"scope": "eel",
		"body": "${1:${2:TrackEnvelope} = }GetSelectedEnvelope(${3:ReaProject proj})",
		"description": "get the currently selected envelope, returns 0 if no envelope is selected"
	},
	"reaper.GetSelectedEnvelope": {
		"prefix": "reaper.GetSelectedEnvelope",
		"scope": "lua",
		"body": "${1:${2:TrackEnvelope} = }reaper.GetSelectedEnvelope(${3:ReaProject proj})",
		"description": "get the currently selected envelope, returns 0 if no envelope is selected"
	},
	"RPR_GetSelectedEnvelope": {
		"prefix": "RPR_GetSelectedEnvelope",
		"scope": "python",
		"body": "${1:${2:TrackEnvelope} = }RPR_GetSelectedEnvelope(${3:ReaProject proj})",
		"description": "get the currently selected envelope, returns 0 if no envelope is selected"
	},
	"GetSelectedMediaItem": {
		"prefix": "GetSelectedMediaItem",
		"scope": "eel",
		"body": "${1:${2:MediaItem} = }GetSelectedMediaItem(${3:ReaProject proj}, ${4:int selitem})",
		"description": "get a selected item by selected item count (zero-based) (proj=0 for active project)"
	},
	"reaper.GetSelectedMediaItem": {
		"prefix": "reaper.GetSelectedMediaItem",
		"scope": "lua",
		"body": "${1:${2:MediaItem} = }reaper.GetSelectedMediaItem(${3:ReaProject proj}, ${4:integer selitem})",
		"description": "get a selected item by selected item count (zero-based) (proj=0 for active project)"
	},
	"RPR_GetSelectedMediaItem": {
		"prefix": "RPR_GetSelectedMediaItem",
		"scope": "python",
		"body": "${1:${2:MediaItem} = }RPR_GetSelectedMediaItem(${3:ReaProject proj}, ${4:Int selitem})",
		"description": "get a selected item by selected item count (zero-based) (proj=0 for active project)"
	},
	"GetSelectedTrack": {
		"prefix": "GetSelectedTrack",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }GetSelectedTrack(${3:ReaProject proj}, ${4:int seltrackidx})",
		"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2."
	},
	"reaper.GetSelectedTrack": {
		"prefix": "reaper.GetSelectedTrack",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.GetSelectedTrack(${3:ReaProject proj}, ${4:integer seltrackidx})",
		"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2."
	},
	"RPR_GetSelectedTrack": {
		"prefix": "RPR_GetSelectedTrack",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_GetSelectedTrack(${3:ReaProject proj}, ${4:Int seltrackidx})",
		"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2."
	},
	"GetSelectedTrack2": {
		"prefix": "GetSelectedTrack2",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }GetSelectedTrack2(${3:ReaProject proj}, ${4:int seltrackidx}, ${5:bool wantmaster})",
		"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based)."
	},
	"reaper.GetSelectedTrack2": {
		"prefix": "reaper.GetSelectedTrack2",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.GetSelectedTrack2(${3:ReaProject proj}, ${4:integer seltrackidx}, ${5:boolean wantmaster})",
		"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based)."
	},
	"RPR_GetSelectedTrack2": {
		"prefix": "RPR_GetSelectedTrack2",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_GetSelectedTrack2(${3:ReaProject proj}, ${4:Int seltrackidx}, ${5:Boolean wantmaster})",
		"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based)."
	},
	"GetSelectedTrackEnvelope": {
		"prefix": "GetSelectedTrackEnvelope",
		"scope": "eel",
		"body": "${1:${2:TrackEnvelope} = }GetSelectedTrackEnvelope(${3:ReaProject proj})",
		"description": "get the currently selected track envelope, returns 0 if no envelope is selected"
	},
	"reaper.GetSelectedTrackEnvelope": {
		"prefix": "reaper.GetSelectedTrackEnvelope",
		"scope": "lua",
		"body": "${1:${2:TrackEnvelope} = }reaper.GetSelectedTrackEnvelope(${3:ReaProject proj})",
		"description": "get the currently selected track envelope, returns 0 if no envelope is selected"
	},
	"RPR_GetSelectedTrackEnvelope": {
		"prefix": "RPR_GetSelectedTrackEnvelope",
		"scope": "python",
		"body": "${1:${2:TrackEnvelope} = }RPR_GetSelectedTrackEnvelope(${3:ReaProject proj})",
		"description": "get the currently selected track envelope, returns 0 if no envelope is selected"
	},
	"GetSet_ArrangeView2": {
		"prefix": "GetSet_ArrangeView2",
		"scope": "eel",
		"body": "GetSet_ArrangeView2(${1:ReaProject proj}, ${2:bool isSet}, ${3:int screen_x_start}, ${4:int screen_x_end}, ${5:+start_time}, ${6:+end_time})",
		"description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time"
	},
	"reaper.GetSet_ArrangeView2": {
		"prefix": "reaper.GetSet_ArrangeView2",
		"scope": "lua",
		"body": "${1:${2:number start_time}, ${3:number end_time} = }reaper.GetSet_ArrangeView2(${4:ReaProject proj}, ${5:boolean isSet}, ${6:integer screen_x_start}, ${7:integer screen_x_end})",
		"description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time"
	},
	"RPR_GetSet_ArrangeView2": {
		"prefix": "RPR_GetSet_ArrangeView2",
		"scope": "python",
		"body": "${1:${2:ReaProject proj}, ${3:Boolean isSet}, ${4:Int screen_x_start}, ${5:Int screen_x_end}, ${6:Float start_timeOut}, ${7:Float end_timeOut} = }RPR_GetSet_ArrangeView2(${8:proj}, ${9:isSet}, ${10:screen_x_start}, ${11:screen_x_end}, ${12:start_timeOut}, ${13:end_timeOut})",
		"description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time"
	},
	"GetSet_LoopTimeRange": {
		"prefix": "GetSet_LoopTimeRange",
		"scope": "eel",
		"body": "GetSet_LoopTimeRange(${1:bool isSet}, ${2:bool isLoop}, ${3:+start}, ${4:+end}, ${5:bool allowautoseek})",
		"description": ""
	},
	"reaper.GetSet_LoopTimeRange": {
		"prefix": "reaper.GetSet_LoopTimeRange",
		"scope": "lua",
		"body": "${1:${2:number start}, ${3:number end} = }reaper.GetSet_LoopTimeRange(${4:boolean isSet}, ${5:boolean isLoop}, ${6:number start}, ${7:number end}, ${8:boolean allowautoseek})",
		"description": ""
	},
	"RPR_GetSet_LoopTimeRange": {
		"prefix": "RPR_GetSet_LoopTimeRange",
		"scope": "python",
		"body": "${1:${2:Boolean isSet}, ${3:Boolean isLoop}, ${4:Float startOut}, ${5:Float endOut}, ${6:Boolean allowautoseek} = }RPR_GetSet_LoopTimeRange(${7:isSet}, ${8:isLoop}, ${9:startOut}, ${10:endOut}, ${11:allowautoseek})",
		"description": ""
	},
	"GetSet_LoopTimeRange2": {
		"prefix": "GetSet_LoopTimeRange2",
		"scope": "eel",
		"body": "GetSet_LoopTimeRange2(${1:ReaProject proj}, ${2:bool isSet}, ${3:bool isLoop}, ${4:+start}, ${5:+end}, ${6:bool allowautoseek})",
		"description": ""
	},
	"reaper.GetSet_LoopTimeRange2": {
		"prefix": "reaper.GetSet_LoopTimeRange2",
		"scope": "lua",
		"body": "${1:${2:number start}, ${3:number end} = }reaper.GetSet_LoopTimeRange2(${4:ReaProject proj}, ${5:boolean isSet}, ${6:boolean isLoop}, ${7:number start}, ${8:number end}, ${9:boolean allowautoseek})",
		"description": ""
	},
	"RPR_GetSet_LoopTimeRange2": {
		"prefix": "RPR_GetSet_LoopTimeRange2",
		"scope": "python",
		"body": "${1:${2:ReaProject proj}, ${3:Boolean isSet}, ${4:Boolean isLoop}, ${5:Float startOut}, ${6:Float endOut}, ${7:Boolean allowautoseek} = }RPR_GetSet_LoopTimeRange2(${8:proj}, ${9:isSet}, ${10:isLoop}, ${11:startOut}, ${12:endOut}, ${13:allowautoseek})",
		"description": ""
	},
	"GetSetAutomationItemInfo": {
		"prefix": "GetSetAutomationItemInfo",
		"scope": "eel",
		"body": "${1:${2:double} = }GetSetAutomationItemInfo(${3:TrackEnvelope env}, ${4:int autoitem_idx}, ${5:\"desc\"}, ${6:value}, ${7:bool is_set})",
		"description": "Get or set automation item information. autoitem_idx==0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\n\nD_POOL_ID: double *, automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\n\nD_POSITION: double *, automation item timeline position in seconds\n\nD_LENGTH: double *, automation item length in seconds\n\nD_STARTOFFS: double *, automation item start offset in seconds\n\nD_PLAYRATE: double *, automation item playback rate\n\nD_BASELINE: double *, automation item baseline value in the range [0,1]\n\nD_AMPLITUDE: double *, automation item amplitude in the range [-1,1]\n\nD_LOOPSRC: double *, nonzero if the automation item contents are looped\n\nD_UISEL: double *, nonzero if the automation item is selected in the arrange view"
	},
	"reaper.GetSetAutomationItemInfo": {
		"prefix": "reaper.GetSetAutomationItemInfo",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetSetAutomationItemInfo(${3:TrackEnvelope env}, ${4:integer autoitem_idx}, ${5:string desc}, ${6:number value}, ${7:boolean is_set})",
		"description": "Get or set automation item information. autoitem_idx==0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\n\nD_POOL_ID: double *, automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\n\nD_POSITION: double *, automation item timeline position in seconds\n\nD_LENGTH: double *, automation item length in seconds\n\nD_STARTOFFS: double *, automation item start offset in seconds\n\nD_PLAYRATE: double *, automation item playback rate\n\nD_BASELINE: double *, automation item baseline value in the range [0,1]\n\nD_AMPLITUDE: double *, automation item amplitude in the range [-1,1]\n\nD_LOOPSRC: double *, nonzero if the automation item contents are looped\n\nD_UISEL: double *, nonzero if the automation item is selected in the arrange view"
	},
	"RPR_GetSetAutomationItemInfo": {
		"prefix": "RPR_GetSetAutomationItemInfo",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetSetAutomationItemInfo(${3:TrackEnvelope env}, ${4:Int autoitem_idx}, ${5:String desc}, ${6:Float value}, ${7:Boolean is_set})",
		"description": "Get or set automation item information. autoitem_idx==0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\n\nD_POOL_ID: double *, automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\n\nD_POSITION: double *, automation item timeline position in seconds\n\nD_LENGTH: double *, automation item length in seconds\n\nD_STARTOFFS: double *, automation item start offset in seconds\n\nD_PLAYRATE: double *, automation item playback rate\n\nD_BASELINE: double *, automation item baseline value in the range [0,1]\n\nD_AMPLITUDE: double *, automation item amplitude in the range [-1,1]\n\nD_LOOPSRC: double *, nonzero if the automation item contents are looped\n\nD_UISEL: double *, nonzero if the automation item is selected in the arrange view"
	},
	"GetSetEnvelopeState": {
		"prefix": "GetSetEnvelopeState",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetSetEnvelopeState(${3:TrackEnvelope env}, ${4:#str})",
		"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
	},
	"reaper.GetSetEnvelopeState": {
		"prefix": "reaper.GetSetEnvelopeState",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string str} = }reaper.GetSetEnvelopeState(${4:TrackEnvelope env}, ${5:string str})",
		"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
	},
	"RPR_GetSetEnvelopeState": {
		"prefix": "RPR_GetSetEnvelopeState",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:TrackEnvelope env}, ${4:String str}, ${5:Int str_sz} = }RPR_GetSetEnvelopeState(${6:env}, ${7:str}, ${8:str_sz})",
		"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
	},
	"GetSetEnvelopeState2": {
		"prefix": "GetSetEnvelopeState2",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetSetEnvelopeState2(${3:TrackEnvelope env}, ${4:#str}, ${5:bool isundo})",
		"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
	},
	"reaper.GetSetEnvelopeState2": {
		"prefix": "reaper.GetSetEnvelopeState2",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string str} = }reaper.GetSetEnvelopeState2(${4:TrackEnvelope env}, ${5:string str}, ${6:boolean isundo})",
		"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
	},
	"RPR_GetSetEnvelopeState2": {
		"prefix": "RPR_GetSetEnvelopeState2",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:TrackEnvelope env}, ${4:String str}, ${5:Int str_sz}, ${6:Boolean isundo} = }RPR_GetSetEnvelopeState2(${7:env}, ${8:str}, ${9:str_sz}, ${10:isundo})",
		"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
	},
	"GetSetItemState": {
		"prefix": "GetSetItemState",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetSetItemState(${3:MediaItem item}, ${4:#str})",
		"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
	},
	"reaper.GetSetItemState": {
		"prefix": "reaper.GetSetItemState",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string str} = }reaper.GetSetItemState(${4:MediaItem item}, ${5:string str})",
		"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
	},
	"RPR_GetSetItemState": {
		"prefix": "RPR_GetSetItemState",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem item}, ${4:String str}, ${5:Int str_sz} = }RPR_GetSetItemState(${6:item}, ${7:str}, ${8:str_sz})",
		"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
	},
	"GetSetItemState2": {
		"prefix": "GetSetItemState2",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetSetItemState2(${3:MediaItem item}, ${4:#str}, ${5:bool isundo})",
		"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
	},
	"reaper.GetSetItemState2": {
		"prefix": "reaper.GetSetItemState2",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string str} = }reaper.GetSetItemState2(${4:MediaItem item}, ${5:string str}, ${6:boolean isundo})",
		"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
	},
	"RPR_GetSetItemState2": {
		"prefix": "RPR_GetSetItemState2",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem item}, ${4:String str}, ${5:Int str_sz}, ${6:Boolean isundo} = }RPR_GetSetItemState2(${7:item}, ${8:str}, ${9:str_sz}, ${10:isundo})",
		"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
	},
	"GetSetMediaItemInfo_String": {
		"prefix": "GetSetMediaItemInfo_String",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetSetMediaItemInfo_String(${3:MediaItem item}, ${4:\"parmname\"}, ${5:#stringNeedBig}, ${6:bool setNewValue})",
		"description": "Gets/sets an item attribute string:\n\nP_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)\n\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"reaper.GetSetMediaItemInfo_String": {
		"prefix": "reaper.GetSetMediaItemInfo_String",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string stringNeedBig} = }reaper.GetSetMediaItemInfo_String(${4:MediaItem item}, ${5:string parmname}, ${6:string stringNeedBig}, ${7:boolean setNewValue})",
		"description": "Gets/sets an item attribute string:\n\nP_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)\n\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"RPR_GetSetMediaItemInfo_String": {
		"prefix": "RPR_GetSetMediaItemInfo_String",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem item}, ${4:String parmname}, ${5:String stringNeedBig}, ${6:Boolean setNewValue} = }RPR_GetSetMediaItemInfo_String(${7:item}, ${8:parmname}, ${9:stringNeedBig}, ${10:setNewValue})",
		"description": "Gets/sets an item attribute string:\n\nP_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)\n\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"GetSetMediaItemTakeInfo_String": {
		"prefix": "GetSetMediaItemTakeInfo_String",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetSetMediaItemTakeInfo_String(${3:MediaItem_Take tk}, ${4:\"parmname\"}, ${5:#stringNeedBig}, ${6:bool setNewValue})",
		"description": "Gets/sets a take attribute string:\n\nP_NAME : char * to take name\n\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"reaper.GetSetMediaItemTakeInfo_String": {
		"prefix": "reaper.GetSetMediaItemTakeInfo_String",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string stringNeedBig} = }reaper.GetSetMediaItemTakeInfo_String(${4:MediaItem_Take tk}, ${5:string parmname}, ${6:string stringNeedBig}, ${7:boolean setNewValue})",
		"description": "Gets/sets a take attribute string:\n\nP_NAME : char * to take name\n\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"RPR_GetSetMediaItemTakeInfo_String": {
		"prefix": "RPR_GetSetMediaItemTakeInfo_String",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take tk}, ${4:String parmname}, ${5:String stringNeedBig}, ${6:Boolean setNewValue} = }RPR_GetSetMediaItemTakeInfo_String(${7:tk}, ${8:parmname}, ${9:stringNeedBig}, ${10:setNewValue})",
		"description": "Gets/sets a take attribute string:\n\nP_NAME : char * to take name\n\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"GetSetMediaTrackInfo_String": {
		"prefix": "GetSetMediaTrackInfo_String",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetSetMediaTrackInfo_String(${3:MediaTrack tr}, ${4:\"parmname\"}, ${5:#stringNeedBig}, ${6:bool setNewValue})",
		"description": "Get or set track string attributes.\n\nP_NAME : char * : track name (on master returns NULL)\n\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\n\nP_MCP_LAYOUT : const char * : layout name\n\nP_TCP_LAYOUT : const char * : layout name\n\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"reaper.GetSetMediaTrackInfo_String": {
		"prefix": "reaper.GetSetMediaTrackInfo_String",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string stringNeedBig} = }reaper.GetSetMediaTrackInfo_String(${4:MediaTrack tr}, ${5:string parmname}, ${6:string stringNeedBig}, ${7:boolean setNewValue})",
		"description": "Get or set track string attributes.\n\nP_NAME : char * : track name (on master returns NULL)\n\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\n\nP_MCP_LAYOUT : const char * : layout name\n\nP_TCP_LAYOUT : const char * : layout name\n\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"RPR_GetSetMediaTrackInfo_String": {
		"prefix": "RPR_GetSetMediaTrackInfo_String",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack tr}, ${4:String parmname}, ${5:String stringNeedBig}, ${6:Boolean setNewValue} = }RPR_GetSetMediaTrackInfo_String(${7:tr}, ${8:parmname}, ${9:stringNeedBig}, ${10:setNewValue})",
		"description": "Get or set track string attributes.\n\nP_NAME : char * : track name (on master returns NULL)\n\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\n\nP_MCP_LAYOUT : const char * : layout name\n\nP_TCP_LAYOUT : const char * : layout name\n\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"GetSetProjectAuthor": {
		"prefix": "GetSetProjectAuthor",
		"scope": "eel",
		"body": "GetSetProjectAuthor(${1:ReaProject proj}, ${2:bool set}, ${3:#author})",
		"description": "gets or sets project author, author_sz is ignored when setting"
	},
	"reaper.GetSetProjectAuthor": {
		"prefix": "reaper.GetSetProjectAuthor",
		"scope": "lua",
		"body": "${1:${2:string author} = }reaper.GetSetProjectAuthor(${3:ReaProject proj}, ${4:boolean set}, ${5:string author})",
		"description": "gets or sets project author, author_sz is ignored when setting"
	},
	"RPR_GetSetProjectAuthor": {
		"prefix": "RPR_GetSetProjectAuthor",
		"scope": "python",
		"body": "${1:${2:ReaProject proj}, ${3:Boolean set}, ${4:String author}, ${5:Int author_sz} = }RPR_GetSetProjectAuthor(${6:proj}, ${7:set}, ${8:author}, ${9:author_sz})",
		"description": "gets or sets project author, author_sz is ignored when setting"
	},
	"GetSetProjectGrid": {
		"prefix": "GetSetProjectGrid",
		"scope": "eel",
		"body": "${1:${2:int} = }GetSetProjectGrid(${3:ReaProject project}, ${4:bool set}, ${5:optional +divisionIn}, ${6:optional int +swingmodeIn}, ${7:optional +swingamtIn})",
		"description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags"
	},
	"reaper.GetSetProjectGrid": {
		"prefix": "reaper.GetSetProjectGrid",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:optional number divisionIn}, ${4:optional number swingmodeIn}, ${5:optional number swingamtIn} = }reaper.GetSetProjectGrid(${6:ReaProject project}, ${7:boolean set})",
		"description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags"
	},
	"RPR_GetSetProjectGrid": {
		"prefix": "RPR_GetSetProjectGrid",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:ReaProject project}, ${4:Boolean set}, ${5:Float divisionInOutOptional}, ${6:Int swingmodeInOutOptional}, ${7:Float swingamtInOutOptional} = }RPR_GetSetProjectGrid(${8:project}, ${9:set}, ${10:divisionInOutOptional}, ${11:swingmodeInOutOptional}, ${12:swingamtInOutOptional})",
		"description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags"
	},
	"GetSetProjectNotes": {
		"prefix": "GetSetProjectNotes",
		"scope": "eel",
		"body": "GetSetProjectNotes(${1:ReaProject proj}, ${2:bool set}, ${3:#notes})",
		"description": "gets or sets project notes, notesNeedBig_sz is ignored when setting"
	},
	"reaper.GetSetProjectNotes": {
		"prefix": "reaper.GetSetProjectNotes",
		"scope": "lua",
		"body": "${1:${2:string notes} = }reaper.GetSetProjectNotes(${3:ReaProject proj}, ${4:boolean set}, ${5:string notes})",
		"description": "gets or sets project notes, notesNeedBig_sz is ignored when setting"
	},
	"RPR_GetSetProjectNotes": {
		"prefix": "RPR_GetSetProjectNotes",
		"scope": "python",
		"body": "${1:${2:ReaProject proj}, ${3:Boolean set}, ${4:String notesNeedBig}, ${5:Int notesNeedBig_sz} = }RPR_GetSetProjectNotes(${6:proj}, ${7:set}, ${8:notesNeedBig}, ${9:notesNeedBig_sz})",
		"description": "gets or sets project notes, notesNeedBig_sz is ignored when setting"
	},
	"GetSetRepeat": {
		"prefix": "GetSetRepeat",
		"scope": "eel",
		"body": "${1:${2:int} = }GetSetRepeat(${3:int val})",
		"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
	},
	"reaper.GetSetRepeat": {
		"prefix": "reaper.GetSetRepeat",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetSetRepeat(${3:integer val})",
		"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
	},
	"RPR_GetSetRepeat": {
		"prefix": "RPR_GetSetRepeat",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetSetRepeat(${3:Int val})",
		"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
	},
	"GetSetRepeatEx": {
		"prefix": "GetSetRepeatEx",
		"scope": "eel",
		"body": "${1:${2:int} = }GetSetRepeatEx(${3:ReaProject proj}, ${4:int val})",
		"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
	},
	"reaper.GetSetRepeatEx": {
		"prefix": "reaper.GetSetRepeatEx",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetSetRepeatEx(${3:ReaProject proj}, ${4:integer val})",
		"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
	},
	"RPR_GetSetRepeatEx": {
		"prefix": "RPR_GetSetRepeatEx",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetSetRepeatEx(${3:ReaProject proj}, ${4:Int val})",
		"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
	},
	"GetSetTrackGroupMembership": {
		"prefix": "GetSetTrackGroupMembership",
		"scope": "eel",
		"body": "${1:${2:uint} = }GetSetTrackGroupMembership(${3:MediaTrack tr}, ${4:\"groupname\"}, ${5:uint setmask}, ${6:uint setvalue})",
		"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX"
	},
	"reaper.GetSetTrackGroupMembership": {
		"prefix": "reaper.GetSetTrackGroupMembership",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetSetTrackGroupMembership(${3:MediaTrack tr}, ${4:string groupname}, ${5:integer setmask}, ${6:integer setvalue})",
		"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX"
	},
	"RPR_GetSetTrackGroupMembership": {
		"prefix": "RPR_GetSetTrackGroupMembership",
		"scope": "python",
		"body": "${1:${2:Unknown} = }RPR_GetSetTrackGroupMembership(${3:MediaTrack tr}, ${4:String groupname}, ${5:Unknown setmask}, ${6:Unknown setvalue})",
		"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX"
	},
	"GetSetTrackGroupMembershipHigh": {
		"prefix": "GetSetTrackGroupMembershipHigh",
		"scope": "eel",
		"body": "${1:${2:uint} = }GetSetTrackGroupMembershipHigh(${3:MediaTrack tr}, ${4:\"groupname\"}, ${5:uint setmask}, ${6:uint setvalue})",
		"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX"
	},
	"reaper.GetSetTrackGroupMembershipHigh": {
		"prefix": "reaper.GetSetTrackGroupMembershipHigh",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetSetTrackGroupMembershipHigh(${3:MediaTrack tr}, ${4:string groupname}, ${5:integer setmask}, ${6:integer setvalue})",
		"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX"
	},
	"RPR_GetSetTrackGroupMembershipHigh": {
		"prefix": "RPR_GetSetTrackGroupMembershipHigh",
		"scope": "python",
		"body": "${1:${2:Unknown} = }RPR_GetSetTrackGroupMembershipHigh(${3:MediaTrack tr}, ${4:String groupname}, ${5:Unknown setmask}, ${6:Unknown setvalue})",
		"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX"
	},
	"GetSetTrackState": {
		"prefix": "GetSetTrackState",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetSetTrackState(${3:MediaTrack track}, ${4:#str})",
		"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
	},
	"reaper.GetSetTrackState": {
		"prefix": "reaper.GetSetTrackState",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string str} = }reaper.GetSetTrackState(${4:MediaTrack track}, ${5:string str})",
		"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
	},
	"RPR_GetSetTrackState": {
		"prefix": "RPR_GetSetTrackState",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:String str}, ${5:Int str_sz} = }RPR_GetSetTrackState(${6:track}, ${7:str}, ${8:str_sz})",
		"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
	},
	"GetSetTrackState2": {
		"prefix": "GetSetTrackState2",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetSetTrackState2(${3:MediaTrack track}, ${4:#str}, ${5:bool isundo})",
		"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
	},
	"reaper.GetSetTrackState2": {
		"prefix": "reaper.GetSetTrackState2",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string str} = }reaper.GetSetTrackState2(${4:MediaTrack track}, ${5:string str}, ${6:boolean isundo})",
		"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
	},
	"RPR_GetSetTrackState2": {
		"prefix": "RPR_GetSetTrackState2",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:String str}, ${5:Int str_sz}, ${6:Boolean isundo} = }RPR_GetSetTrackState2(${7:track}, ${8:str}, ${9:str_sz}, ${10:isundo})",
		"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
	},
	"GetSubProjectFromSource": {
		"prefix": "GetSubProjectFromSource",
		"scope": "eel",
		"body": "${1:${2:ReaProject} = }GetSubProjectFromSource(${3:PCM_source src})",
		"description": ""
	},
	"reaper.GetSubProjectFromSource": {
		"prefix": "reaper.GetSubProjectFromSource",
		"scope": "lua",
		"body": "${1:${2:ReaProject} = }reaper.GetSubProjectFromSource(${3:PCM_source src})",
		"description": ""
	},
	"RPR_GetSubProjectFromSource": {
		"prefix": "RPR_GetSubProjectFromSource",
		"scope": "python",
		"body": "${1:${2:ReaProject} = }RPR_GetSubProjectFromSource(${3:PCM_source src})",
		"description": ""
	},
	"GetTake": {
		"prefix": "GetTake",
		"scope": "eel",
		"body": "${1:${2:MediaItem_Take} = }GetTake(${3:MediaItem item}, ${4:int takeidx})",
		"description": "get a take from an item by take count (zero-based)"
	},
	"reaper.GetTake": {
		"prefix": "reaper.GetTake",
		"scope": "lua",
		"body": "${1:${2:MediaItem_Take} = }reaper.GetTake(${3:MediaItem item}, ${4:integer takeidx})",
		"description": "get a take from an item by take count (zero-based)"
	},
	"RPR_GetTake": {
		"prefix": "RPR_GetTake",
		"scope": "python",
		"body": "${1:${2:MediaItem_Take} = }RPR_GetTake(${3:MediaItem item}, ${4:Int takeidx})",
		"description": "get a take from an item by take count (zero-based)"
	},
	"GetTakeEnvelope": {
		"prefix": "GetTakeEnvelope",
		"scope": "eel",
		"body": "${1:${2:TrackEnvelope} = }GetTakeEnvelope(${3:MediaItem_Take take}, ${4:int envidx})",
		"description": ""
	},
	"reaper.GetTakeEnvelope": {
		"prefix": "reaper.GetTakeEnvelope",
		"scope": "lua",
		"body": "${1:${2:TrackEnvelope} = }reaper.GetTakeEnvelope(${3:MediaItem_Take take}, ${4:integer envidx})",
		"description": ""
	},
	"RPR_GetTakeEnvelope": {
		"prefix": "RPR_GetTakeEnvelope",
		"scope": "python",
		"body": "${1:${2:TrackEnvelope} = }RPR_GetTakeEnvelope(${3:MediaItem_Take take}, ${4:Int envidx})",
		"description": ""
	},
	"GetTakeEnvelopeByName": {
		"prefix": "GetTakeEnvelopeByName",
		"scope": "eel",
		"body": "${1:${2:TrackEnvelope} = }GetTakeEnvelopeByName(${3:MediaItem_Take take}, ${4:\"envname\"})",
		"description": ""
	},
	"reaper.GetTakeEnvelopeByName": {
		"prefix": "reaper.GetTakeEnvelopeByName",
		"scope": "lua",
		"body": "${1:${2:TrackEnvelope} = }reaper.GetTakeEnvelopeByName(${3:MediaItem_Take take}, ${4:string envname})",
		"description": ""
	},
	"RPR_GetTakeEnvelopeByName": {
		"prefix": "RPR_GetTakeEnvelopeByName",
		"scope": "python",
		"body": "${1:${2:TrackEnvelope} = }RPR_GetTakeEnvelopeByName(${3:MediaItem_Take take}, ${4:String envname})",
		"description": ""
	},
	"GetTakeName": {
		"prefix": "GetTakeName",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTakeName(${3:#retval}, ${4:MediaItem_Take take})",
		"description": "returns NULL if the take is not valid"
	},
	"reaper.GetTakeName": {
		"prefix": "reaper.GetTakeName",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.GetTakeName(${3:MediaItem_Take take})",
		"description": "returns NULL if the take is not valid"
	},
	"RPR_GetTakeName": {
		"prefix": "RPR_GetTakeName",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_GetTakeName(${3:MediaItem_Take take})",
		"description": "returns NULL if the take is not valid"
	},
	"GetTakeNumStretchMarkers": {
		"prefix": "GetTakeNumStretchMarkers",
		"scope": "eel",
		"body": "${1:${2:int} = }GetTakeNumStretchMarkers(${3:MediaItem_Take take})",
		"description": "Returns number of stretch markers in take"
	},
	"reaper.GetTakeNumStretchMarkers": {
		"prefix": "reaper.GetTakeNumStretchMarkers",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetTakeNumStretchMarkers(${3:MediaItem_Take take})",
		"description": "Returns number of stretch markers in take"
	},
	"RPR_GetTakeNumStretchMarkers": {
		"prefix": "RPR_GetTakeNumStretchMarkers",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetTakeNumStretchMarkers(${3:MediaItem_Take take})",
		"description": "Returns number of stretch markers in take"
	},
	"GetTakeStretchMarker": {
		"prefix": "GetTakeStretchMarker",
		"scope": "eel",
		"body": "${1:${2:int} = }GetTakeStretchMarker(${3:MediaItem_Take take}, ${4:int idx}, ${5:+pos}, ${6:optional +srcpos})",
		"description": "Gets information on a stretch marker, idx is 0..n. Returns false if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, next marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated."
	},
	"reaper.GetTakeStretchMarker": {
		"prefix": "reaper.GetTakeStretchMarker",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:number pos}, ${4:optional number srcpos} = }reaper.GetTakeStretchMarker(${5:MediaItem_Take take}, ${6:integer idx})",
		"description": "Gets information on a stretch marker, idx is 0..n. Returns false if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, next marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated."
	},
	"RPR_GetTakeStretchMarker": {
		"prefix": "RPR_GetTakeStretchMarker",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:MediaItem_Take take}, ${4:Int idx}, ${5:Float posOut}, ${6:Float srcposOutOptional} = }RPR_GetTakeStretchMarker(${7:take}, ${8:idx}, ${9:posOut}, ${10:srcposOutOptional})",
		"description": "Gets information on a stretch marker, idx is 0..n. Returns false if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, next marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated."
	},
	"GetTakeStretchMarkerSlope": {
		"prefix": "GetTakeStretchMarkerSlope",
		"scope": "eel",
		"body": "${1:${2:double} = }GetTakeStretchMarkerSlope(${3:MediaItem_Take take}, ${4:int idx})",
		"description": "See SetTakeStretchMarkerSlope"
	},
	"reaper.GetTakeStretchMarkerSlope": {
		"prefix": "reaper.GetTakeStretchMarkerSlope",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetTakeStretchMarkerSlope(${3:MediaItem_Take take}, ${4:integer idx})",
		"description": "See SetTakeStretchMarkerSlope"
	},
	"RPR_GetTakeStretchMarkerSlope": {
		"prefix": "RPR_GetTakeStretchMarkerSlope",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetTakeStretchMarkerSlope(${3:MediaItem_Take take}, ${4:Int idx})",
		"description": "See SetTakeStretchMarkerSlope"
	},
	"GetTCPFXParm": {
		"prefix": "GetTCPFXParm",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTCPFXParm(${3:ReaProject project}, ${4:MediaTrack track}, ${5:int index}, ${6:int +fxindex}, ${7:int +parmidx})",
		"description": "Get information about a specific FX parameter knob (see CountTCPFXParms)."
	},
	"reaper.GetTCPFXParm": {
		"prefix": "reaper.GetTCPFXParm",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number fxindex}, ${4:number parmidx} = }reaper.GetTCPFXParm(${5:ReaProject project}, ${6:MediaTrack track}, ${7:integer index})",
		"description": "Get information about a specific FX parameter knob (see CountTCPFXParms)."
	},
	"RPR_GetTCPFXParm": {
		"prefix": "RPR_GetTCPFXParm",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:ReaProject project}, ${4:MediaTrack track}, ${5:Int index}, ${6:Int fxindexOut}, ${7:Int parmidxOut} = }RPR_GetTCPFXParm(${8:project}, ${9:track}, ${10:index}, ${11:fxindexOut}, ${12:parmidxOut})",
		"description": "Get information about a specific FX parameter knob (see CountTCPFXParms)."
	},
	"GetTempoMatchPlayRate": {
		"prefix": "GetTempoMatchPlayRate",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTempoMatchPlayRate(${3:PCM_source source}, ${4:srcscale}, ${5:position}, ${6:mult}, ${7:+rate}, ${8:+targetlen})",
		"description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256"
	},
	"reaper.GetTempoMatchPlayRate": {
		"prefix": "reaper.GetTempoMatchPlayRate",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number rate}, ${4:number targetlen} = }reaper.GetTempoMatchPlayRate(${5:PCM_source source}, ${6:number srcscale}, ${7:number position}, ${8:number mult})",
		"description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256"
	},
	"RPR_GetTempoMatchPlayRate": {
		"prefix": "RPR_GetTempoMatchPlayRate",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:PCM_source source}, ${4:Float srcscale}, ${5:Float position}, ${6:Float mult}, ${7:Float rateOut}, ${8:Float targetlenOut} = }RPR_GetTempoMatchPlayRate(${9:source}, ${10:srcscale}, ${11:position}, ${12:mult}, ${13:rateOut}, ${14:targetlenOut})",
		"description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256"
	},
	"GetTempoTimeSigMarker": {
		"prefix": "GetTempoTimeSigMarker",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTempoTimeSigMarker(${3:ReaProject proj}, ${4:int ptidx}, ${5:+timepos}, ${6:int +measurepos}, ${7:+beatpos}, ${8:+bpm}, ${9:int +timesig_num}, ${10:int +timesig_denom}, ${11:bool +lineartempo})",
		"description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"reaper.GetTempoTimeSigMarker": {
		"prefix": "reaper.GetTempoTimeSigMarker",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number timepos}, ${4:number measurepos}, ${5:number beatpos}, ${6:number bpm}, ${7:number timesig_num}, ${8:number timesig_denom}, ${9:boolean lineartempo} = }reaper.GetTempoTimeSigMarker(${10:ReaProject proj}, ${11:integer ptidx})",
		"description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"RPR_GetTempoTimeSigMarker": {
		"prefix": "RPR_GetTempoTimeSigMarker",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:ReaProject proj}, ${4:Int ptidx}, ${5:Float timeposOut}, ${6:Int measureposOut}, ${7:Float beatposOut}, ${8:Float bpmOut}, ${9:Int timesig_numOut}, ${10:Int timesig_denomOut}, ${11:Boolean lineartempoOut} = }RPR_GetTempoTimeSigMarker(${12:proj}, ${13:ptidx}, ${14:timeposOut}, ${15:measureposOut}, ${16:beatposOut}, ${17:bpmOut}, ${18:timesig_numOut}, ${19:timesig_denomOut}, ${20:lineartempoOut})",
		"description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"GetToggleCommandState": {
		"prefix": "GetToggleCommandState",
		"scope": "eel",
		"body": "${1:${2:int} = }GetToggleCommandState(${3:int command_id})",
		"description": "See GetToggleCommandStateEx."
	},
	"reaper.GetToggleCommandState": {
		"prefix": "reaper.GetToggleCommandState",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetToggleCommandState(${3:integer command_id})",
		"description": "See GetToggleCommandStateEx."
	},
	"RPR_GetToggleCommandState": {
		"prefix": "RPR_GetToggleCommandState",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetToggleCommandState(${3:Int command_id})",
		"description": "See GetToggleCommandStateEx."
	},
	"GetToggleCommandStateEx": {
		"prefix": "GetToggleCommandStateEx",
		"scope": "eel",
		"body": "${1:${2:int} = }GetToggleCommandStateEx(${3:int section_id}, ${4:int command_id})",
		"description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned."
	},
	"reaper.GetToggleCommandStateEx": {
		"prefix": "reaper.GetToggleCommandStateEx",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetToggleCommandStateEx(${3:integer section_id}, ${4:integer command_id})",
		"description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned."
	},
	"RPR_GetToggleCommandStateEx": {
		"prefix": "RPR_GetToggleCommandStateEx",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetToggleCommandStateEx(${3:Int section_id}, ${4:Int command_id})",
		"description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned."
	},
	"GetTooltipWindow": {
		"prefix": "GetTooltipWindow",
		"scope": "eel",
		"body": "${1:${2:HWND} = }GetTooltipWindow()",
		"description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL."
	},
	"reaper.GetTooltipWindow": {
		"prefix": "reaper.GetTooltipWindow",
		"scope": "lua",
		"body": "${1:${2:HWND} = }reaper.GetTooltipWindow()",
		"description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL."
	},
	"RPR_GetTooltipWindow": {
		"prefix": "RPR_GetTooltipWindow",
		"scope": "python",
		"body": "${1:${2:HWND} = }RPR_GetTooltipWindow()",
		"description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL."
	},
	"GetTrack": {
		"prefix": "GetTrack",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }GetTrack(${3:ReaProject proj}, ${4:int trackidx})",
		"description": "get a track from a project by track count (zero-based) (proj=0 for active project)"
	},
	"reaper.GetTrack": {
		"prefix": "reaper.GetTrack",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.GetTrack(${3:ReaProject proj}, ${4:integer trackidx})",
		"description": "get a track from a project by track count (zero-based) (proj=0 for active project)"
	},
	"RPR_GetTrack": {
		"prefix": "RPR_GetTrack",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_GetTrack(${3:ReaProject proj}, ${4:Int trackidx})",
		"description": "get a track from a project by track count (zero-based) (proj=0 for active project)"
	},
	"GetTrackAutomationMode": {
		"prefix": "GetTrackAutomationMode",
		"scope": "eel",
		"body": "${1:${2:int} = }GetTrackAutomationMode(${3:MediaTrack tr})",
		"description": "return the track mode, regardless of global override"
	},
	"reaper.GetTrackAutomationMode": {
		"prefix": "reaper.GetTrackAutomationMode",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetTrackAutomationMode(${3:MediaTrack tr})",
		"description": "return the track mode, regardless of global override"
	},
	"RPR_GetTrackAutomationMode": {
		"prefix": "RPR_GetTrackAutomationMode",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetTrackAutomationMode(${3:MediaTrack tr})",
		"description": "return the track mode, regardless of global override"
	},
	"GetTrackColor": {
		"prefix": "GetTrackColor",
		"scope": "eel",
		"body": "${1:${2:int} = }GetTrackColor(${3:MediaTrack track})",
		"description": "Returns the track custom color as OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no color setting is returned as 0."
	},
	"reaper.GetTrackColor": {
		"prefix": "reaper.GetTrackColor",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetTrackColor(${3:MediaTrack track})",
		"description": "Returns the track custom color as OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no color setting is returned as 0."
	},
	"RPR_GetTrackColor": {
		"prefix": "RPR_GetTrackColor",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetTrackColor(${3:MediaTrack track})",
		"description": "Returns the track custom color as OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no color setting is returned as 0."
	},
	"GetTrackDepth": {
		"prefix": "GetTrackDepth",
		"scope": "eel",
		"body": "${1:${2:int} = }GetTrackDepth(${3:MediaTrack track})",
		"description": ""
	},
	"reaper.GetTrackDepth": {
		"prefix": "reaper.GetTrackDepth",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetTrackDepth(${3:MediaTrack track})",
		"description": ""
	},
	"RPR_GetTrackDepth": {
		"prefix": "RPR_GetTrackDepth",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetTrackDepth(${3:MediaTrack track})",
		"description": ""
	},
	"GetTrackEnvelope": {
		"prefix": "GetTrackEnvelope",
		"scope": "eel",
		"body": "${1:${2:TrackEnvelope} = }GetTrackEnvelope(${3:MediaTrack track}, ${4:int envidx})",
		"description": ""
	},
	"reaper.GetTrackEnvelope": {
		"prefix": "reaper.GetTrackEnvelope",
		"scope": "lua",
		"body": "${1:${2:TrackEnvelope} = }reaper.GetTrackEnvelope(${3:MediaTrack track}, ${4:integer envidx})",
		"description": ""
	},
	"RPR_GetTrackEnvelope": {
		"prefix": "RPR_GetTrackEnvelope",
		"scope": "python",
		"body": "${1:${2:TrackEnvelope} = }RPR_GetTrackEnvelope(${3:MediaTrack track}, ${4:Int envidx})",
		"description": ""
	},
	"GetTrackEnvelopeByChunkName": {
		"prefix": "GetTrackEnvelopeByChunkName",
		"scope": "eel",
		"body": "${1:${2:TrackEnvelope} = }GetTrackEnvelopeByChunkName(${3:MediaTrack tr}, ${4:\"cfgchunkname\"})",
		"description": "Gets a built-in track envelope by configuration chunk name, e.g. \"<VOLENV\"."
	},
	"reaper.GetTrackEnvelopeByChunkName": {
		"prefix": "reaper.GetTrackEnvelopeByChunkName",
		"scope": "lua",
		"body": "${1:${2:TrackEnvelope} = }reaper.GetTrackEnvelopeByChunkName(${3:MediaTrack tr}, ${4:string cfgchunkname})",
		"description": "Gets a built-in track envelope by configuration chunk name, e.g. \"<VOLENV\"."
	},
	"RPR_GetTrackEnvelopeByChunkName": {
		"prefix": "RPR_GetTrackEnvelopeByChunkName",
		"scope": "python",
		"body": "${1:${2:TrackEnvelope} = }RPR_GetTrackEnvelopeByChunkName(${3:MediaTrack tr}, ${4:String cfgchunkname})",
		"description": "Gets a built-in track envelope by configuration chunk name, e.g. \"<VOLENV\"."
	},
	"GetTrackEnvelopeByName": {
		"prefix": "GetTrackEnvelopeByName",
		"scope": "eel",
		"body": "${1:${2:TrackEnvelope} = }GetTrackEnvelopeByName(${3:MediaTrack track}, ${4:\"envname\"})",
		"description": ""
	},
	"reaper.GetTrackEnvelopeByName": {
		"prefix": "reaper.GetTrackEnvelopeByName",
		"scope": "lua",
		"body": "${1:${2:TrackEnvelope} = }reaper.GetTrackEnvelopeByName(${3:MediaTrack track}, ${4:string envname})",
		"description": ""
	},
	"RPR_GetTrackEnvelopeByName": {
		"prefix": "RPR_GetTrackEnvelopeByName",
		"scope": "python",
		"body": "${1:${2:TrackEnvelope} = }RPR_GetTrackEnvelopeByName(${3:MediaTrack track}, ${4:String envname})",
		"description": ""
	},
	"GetTrackGUID": {
		"prefix": "GetTrackGUID",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackGUID(${3:#retguid}, ${4:MediaTrack tr})",
		"description": ""
	},
	"reaper.GetTrackGUID": {
		"prefix": "reaper.GetTrackGUID",
		"scope": "lua",
		"body": "${1:${2:string GUID} = }reaper.GetTrackGUID(${3:MediaTrack tr})",
		"description": ""
	},
	"RPR_GetTrackGUID": {
		"prefix": "RPR_GetTrackGUID",
		"scope": "python",
		"body": "${1:${2:GUID} = }RPR_GetTrackGUID(${3:MediaTrack tr})",
		"description": ""
	},
	"GetTrackMediaItem": {
		"prefix": "GetTrackMediaItem",
		"scope": "eel",
		"body": "${1:${2:MediaItem} = }GetTrackMediaItem(${3:MediaTrack tr}, ${4:int itemidx})",
		"description": ""
	},
	"reaper.GetTrackMediaItem": {
		"prefix": "reaper.GetTrackMediaItem",
		"scope": "lua",
		"body": "${1:${2:MediaItem} = }reaper.GetTrackMediaItem(${3:MediaTrack tr}, ${4:integer itemidx})",
		"description": ""
	},
	"RPR_GetTrackMediaItem": {
		"prefix": "RPR_GetTrackMediaItem",
		"scope": "python",
		"body": "${1:${2:MediaItem} = }RPR_GetTrackMediaItem(${3:MediaTrack tr}, ${4:Int itemidx})",
		"description": ""
	},
	"GetTrackMIDILyrics": {
		"prefix": "GetTrackMIDILyrics",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackMIDILyrics(${3:MediaTrack track}, ${4:int flag}, ${5:#bufWant})",
		"description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag+1: double tabs at the end of each measure and triple tabs when skipping measures, flag+2: each lyric is preceded by its beat position in the project (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t.1.1\\tLyric for measure 2 beat 1\t\"). See SetTrackMIDILyrics"
	},
	"reaper.GetTrackMIDILyrics": {
		"prefix": "reaper.GetTrackMIDILyrics",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string bufWant} = }reaper.GetTrackMIDILyrics(${4:MediaTrack track}, ${5:integer flag}, ${6:string bufWant})",
		"description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag+1: double tabs at the end of each measure and triple tabs when skipping measures, flag+2: each lyric is preceded by its beat position in the project (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t.1.1\\tLyric for measure 2 beat 1\t\"). See SetTrackMIDILyrics"
	},
	"RPR_GetTrackMIDILyrics": {
		"prefix": "RPR_GetTrackMIDILyrics",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int flag}, ${5:String bufWantNeedBig}, ${6:Int bufWantNeedBig_sz} = }RPR_GetTrackMIDILyrics(${7:track}, ${8:flag}, ${9:bufWantNeedBig}, ${10:bufWantNeedBig_sz})",
		"description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag+1: double tabs at the end of each measure and triple tabs when skipping measures, flag+2: each lyric is preceded by its beat position in the project (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t.1.1\\tLyric for measure 2 beat 1\t\"). See SetTrackMIDILyrics"
	},
	"GetTrackMIDINoteName": {
		"prefix": "GetTrackMIDINoteName",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackMIDINoteName(${3:#retval}, ${4:int track}, ${5:int pitch}, ${6:int chan})",
		"description": "see GetTrackMIDINoteNameEx"
	},
	"reaper.GetTrackMIDINoteName": {
		"prefix": "reaper.GetTrackMIDINoteName",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.GetTrackMIDINoteName(${3:integer track}, ${4:integer pitch}, ${5:integer chan})",
		"description": "see GetTrackMIDINoteNameEx"
	},
	"RPR_GetTrackMIDINoteName": {
		"prefix": "RPR_GetTrackMIDINoteName",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_GetTrackMIDINoteName(${3:Int track}, ${4:Int pitch}, ${5:Int chan})",
		"description": "see GetTrackMIDINoteNameEx"
	},
	"GetTrackMIDINoteNameEx": {
		"prefix": "GetTrackMIDINoteNameEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackMIDINoteNameEx(${3:#retval}, ${4:ReaProject proj}, ${5:MediaTrack track}, ${6:int pitch}, ${7:int chan})",
		"description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx"
	},
	"reaper.GetTrackMIDINoteNameEx": {
		"prefix": "reaper.GetTrackMIDINoteNameEx",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.GetTrackMIDINoteNameEx(${3:ReaProject proj}, ${4:MediaTrack track}, ${5:integer pitch}, ${6:integer chan})",
		"description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx"
	},
	"RPR_GetTrackMIDINoteNameEx": {
		"prefix": "RPR_GetTrackMIDINoteNameEx",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_GetTrackMIDINoteNameEx(${3:ReaProject proj}, ${4:MediaTrack track}, ${5:Int pitch}, ${6:Int chan})",
		"description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx"
	},
	"GetTrackMIDINoteRange": {
		"prefix": "GetTrackMIDINoteRange",
		"scope": "eel",
		"body": "GetTrackMIDINoteRange(${1:ReaProject proj}, ${2:MediaTrack track}, ${3:int +note_lo}, ${4:int +note_hi})",
		"description": ""
	},
	"reaper.GetTrackMIDINoteRange": {
		"prefix": "reaper.GetTrackMIDINoteRange",
		"scope": "lua",
		"body": "${1:${2:number note_lo}, ${3:number note_hi} = }reaper.GetTrackMIDINoteRange(${4:ReaProject proj}, ${5:MediaTrack track})",
		"description": ""
	},
	"RPR_GetTrackMIDINoteRange": {
		"prefix": "RPR_GetTrackMIDINoteRange",
		"scope": "python",
		"body": "${1:${2:ReaProject proj}, ${3:MediaTrack track}, ${4:Int note_loOut}, ${5:Int note_hiOut} = }RPR_GetTrackMIDINoteRange(${6:proj}, ${7:track}, ${8:note_loOut}, ${9:note_hiOut})",
		"description": ""
	},
	"GetTrackName": {
		"prefix": "GetTrackName",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackName(${3:MediaTrack track}, ${4:#buf})",
		"description": "Returns \"MASTER\" for master track, \"Track N\" if track has no name."
	},
	"reaper.GetTrackName": {
		"prefix": "reaper.GetTrackName",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.GetTrackName(${4:MediaTrack track}, ${5:string buf})",
		"description": "Returns \"MASTER\" for master track, \"Track N\" if track has no name."
	},
	"RPR_GetTrackName": {
		"prefix": "RPR_GetTrackName",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:String buf}, ${5:Int buf_sz} = }RPR_GetTrackName(${6:track}, ${7:buf}, ${8:buf_sz})",
		"description": "Returns \"MASTER\" for master track, \"Track N\" if track has no name."
	},
	"GetTrackNumMediaItems": {
		"prefix": "GetTrackNumMediaItems",
		"scope": "eel",
		"body": "${1:${2:int} = }GetTrackNumMediaItems(${3:MediaTrack tr})",
		"description": ""
	},
	"reaper.GetTrackNumMediaItems": {
		"prefix": "reaper.GetTrackNumMediaItems",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetTrackNumMediaItems(${3:MediaTrack tr})",
		"description": ""
	},
	"RPR_GetTrackNumMediaItems": {
		"prefix": "RPR_GetTrackNumMediaItems",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetTrackNumMediaItems(${3:MediaTrack tr})",
		"description": ""
	},
	"GetTrackNumSends": {
		"prefix": "GetTrackNumSends",
		"scope": "eel",
		"body": "${1:${2:int} = }GetTrackNumSends(${3:MediaTrack tr}, ${4:int category})",
		"description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs"
	},
	"reaper.GetTrackNumSends": {
		"prefix": "reaper.GetTrackNumSends",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GetTrackNumSends(${3:MediaTrack tr}, ${4:integer category})",
		"description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs"
	},
	"RPR_GetTrackNumSends": {
		"prefix": "RPR_GetTrackNumSends",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GetTrackNumSends(${3:MediaTrack tr}, ${4:Int category})",
		"description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs"
	},
	"GetTrackReceiveName": {
		"prefix": "GetTrackReceiveName",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackReceiveName(${3:MediaTrack track}, ${4:int recv_index}, ${5:#buf})",
		"description": "See GetTrackSendName."
	},
	"reaper.GetTrackReceiveName": {
		"prefix": "reaper.GetTrackReceiveName",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.GetTrackReceiveName(${4:MediaTrack track}, ${5:integer recv_index}, ${6:string buf})",
		"description": "See GetTrackSendName."
	},
	"RPR_GetTrackReceiveName": {
		"prefix": "RPR_GetTrackReceiveName",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int recv_index}, ${5:String buf}, ${6:Int buf_sz} = }RPR_GetTrackReceiveName(${7:track}, ${8:recv_index}, ${9:buf}, ${10:buf_sz})",
		"description": "See GetTrackSendName."
	},
	"GetTrackReceiveUIMute": {
		"prefix": "GetTrackReceiveUIMute",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackReceiveUIMute(${3:MediaTrack track}, ${4:int recv_index}, ${5:bool +mute})",
		"description": "See GetTrackSendUIMute."
	},
	"reaper.GetTrackReceiveUIMute": {
		"prefix": "reaper.GetTrackReceiveUIMute",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:boolean mute} = }reaper.GetTrackReceiveUIMute(${4:MediaTrack track}, ${5:integer recv_index})",
		"description": "See GetTrackSendUIMute."
	},
	"RPR_GetTrackReceiveUIMute": {
		"prefix": "RPR_GetTrackReceiveUIMute",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int recv_index}, ${5:Boolean muteOut} = }RPR_GetTrackReceiveUIMute(${6:track}, ${7:recv_index}, ${8:muteOut})",
		"description": "See GetTrackSendUIMute."
	},
	"GetTrackReceiveUIVolPan": {
		"prefix": "GetTrackReceiveUIVolPan",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackReceiveUIVolPan(${3:MediaTrack track}, ${4:int recv_index}, ${5:+volume}, ${6:+pan})",
		"description": "See GetTrackSendUIVolPan."
	},
	"reaper.GetTrackReceiveUIVolPan": {
		"prefix": "reaper.GetTrackReceiveUIVolPan",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number volume}, ${4:number pan} = }reaper.GetTrackReceiveUIVolPan(${5:MediaTrack track}, ${6:integer recv_index})",
		"description": "See GetTrackSendUIVolPan."
	},
	"RPR_GetTrackReceiveUIVolPan": {
		"prefix": "RPR_GetTrackReceiveUIVolPan",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int recv_index}, ${5:Float volumeOut}, ${6:Float panOut} = }RPR_GetTrackReceiveUIVolPan(${7:track}, ${8:recv_index}, ${9:volumeOut}, ${10:panOut})",
		"description": "See GetTrackSendUIVolPan."
	},
	"GetTrackSendInfo_Value": {
		"prefix": "GetTrackSendInfo_Value",
		"scope": "eel",
		"body": "${1:${2:double} = }GetTrackSendInfo_Value(${3:MediaTrack tr}, ${4:int category}, ${5:int sendidx}, ${6:\"parmname\"})",
		"description": "Get send/receive/hardware output numerical-value attributes.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,+1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, +1024=mono, otherwise stereo pair, hwout:+512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanP_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs\n\nP_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
	},
	"reaper.GetTrackSendInfo_Value": {
		"prefix": "reaper.GetTrackSendInfo_Value",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.GetTrackSendInfo_Value(${3:MediaTrack tr}, ${4:integer category}, ${5:integer sendidx}, ${6:string parmname})",
		"description": "Get send/receive/hardware output numerical-value attributes.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,+1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, +1024=mono, otherwise stereo pair, hwout:+512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanP_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs\n\nP_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
	},
	"RPR_GetTrackSendInfo_Value": {
		"prefix": "RPR_GetTrackSendInfo_Value",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_GetTrackSendInfo_Value(${3:MediaTrack tr}, ${4:Int category}, ${5:Int sendidx}, ${6:String parmname})",
		"description": "Get send/receive/hardware output numerical-value attributes.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,+1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, +1024=mono, otherwise stereo pair, hwout:+512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanP_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs\n\nP_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
	},
	"GetTrackSendName": {
		"prefix": "GetTrackSendName",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackSendName(${3:MediaTrack track}, ${4:int send_index}, ${5:#buf})",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName."
	},
	"reaper.GetTrackSendName": {
		"prefix": "reaper.GetTrackSendName",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.GetTrackSendName(${4:MediaTrack track}, ${5:integer send_index}, ${6:string buf})",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName."
	},
	"RPR_GetTrackSendName": {
		"prefix": "RPR_GetTrackSendName",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int send_index}, ${5:String buf}, ${6:Int buf_sz} = }RPR_GetTrackSendName(${7:track}, ${8:send_index}, ${9:buf}, ${10:buf_sz})",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName."
	},
	"GetTrackSendUIMute": {
		"prefix": "GetTrackSendUIMute",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackSendUIMute(${3:MediaTrack track}, ${4:int send_index}, ${5:bool +mute})",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute."
	},
	"reaper.GetTrackSendUIMute": {
		"prefix": "reaper.GetTrackSendUIMute",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:boolean mute} = }reaper.GetTrackSendUIMute(${4:MediaTrack track}, ${5:integer send_index})",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute."
	},
	"RPR_GetTrackSendUIMute": {
		"prefix": "RPR_GetTrackSendUIMute",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int send_index}, ${5:Boolean muteOut} = }RPR_GetTrackSendUIMute(${6:track}, ${7:send_index}, ${8:muteOut})",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute."
	},
	"GetTrackSendUIVolPan": {
		"prefix": "GetTrackSendUIVolPan",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackSendUIVolPan(${3:MediaTrack track}, ${4:int send_index}, ${5:+volume}, ${6:+pan})",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan."
	},
	"reaper.GetTrackSendUIVolPan": {
		"prefix": "reaper.GetTrackSendUIVolPan",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number volume}, ${4:number pan} = }reaper.GetTrackSendUIVolPan(${5:MediaTrack track}, ${6:integer send_index})",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan."
	},
	"RPR_GetTrackSendUIVolPan": {
		"prefix": "RPR_GetTrackSendUIVolPan",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int send_index}, ${5:Float volumeOut}, ${6:Float panOut} = }RPR_GetTrackSendUIVolPan(${7:track}, ${8:send_index}, ${9:volumeOut}, ${10:panOut})",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan."
	},
	"GetTrackState": {
		"prefix": "GetTrackState",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackState(${3:#retval}, ${4:MediaTrack track}, ${5:int +flags})",
		"description": "Gets track state, returns track name.\n\nflags will be set to:\n\n+1=folder\n\n+2=selected\n\n+4=has fx enabled\n\n+8=muted\n\n+16=soloed\n\n+32=SIP'd (with +16)\n\n+64=rec armed\n\n+128=rec monitoring on\n\n+256=rec monitoring auto\n\n+512=hide from TCP\n\n+1024=hide from MCP"
	},
	"reaper.GetTrackState": {
		"prefix": "reaper.GetTrackState",
		"scope": "lua",
		"body": "${1:${2:string retval}, ${3:number flags} = }reaper.GetTrackState(${4:MediaTrack track})",
		"description": "Gets track state, returns track name.\n\nflags will be set to:\n\n+1=folder\n\n+2=selected\n\n+4=has fx enabled\n\n+8=muted\n\n+16=soloed\n\n+32=SIP'd (with +16)\n\n+64=rec armed\n\n+128=rec monitoring on\n\n+256=rec monitoring auto\n\n+512=hide from TCP\n\n+1024=hide from MCP"
	},
	"RPR_GetTrackState": {
		"prefix": "RPR_GetTrackState",
		"scope": "python",
		"body": "${1:${2:String retval}, ${3:MediaTrack track}, ${4:Int flagsOut} = }RPR_GetTrackState(${5:track}, ${6:flagsOut})",
		"description": "Gets track state, returns track name.\n\nflags will be set to:\n\n+1=folder\n\n+2=selected\n\n+4=has fx enabled\n\n+8=muted\n\n+16=soloed\n\n+32=SIP'd (with +16)\n\n+64=rec armed\n\n+128=rec monitoring on\n\n+256=rec monitoring auto\n\n+512=hide from TCP\n\n+1024=hide from MCP"
	},
	"GetTrackStateChunk": {
		"prefix": "GetTrackStateChunk",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackStateChunk(${3:MediaTrack track}, ${4:#str}, ${5:bool isundo})",
		"description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
	},
	"reaper.GetTrackStateChunk": {
		"prefix": "reaper.GetTrackStateChunk",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string str} = }reaper.GetTrackStateChunk(${4:MediaTrack track}, ${5:string str}, ${6:boolean isundo})",
		"description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
	},
	"RPR_GetTrackStateChunk": {
		"prefix": "RPR_GetTrackStateChunk",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:String strNeedBig}, ${5:Int strNeedBig_sz}, ${6:Boolean isundoOptional} = }RPR_GetTrackStateChunk(${7:track}, ${8:strNeedBig}, ${9:strNeedBig_sz}, ${10:isundoOptional})",
		"description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
	},
	"GetTrackUIMute": {
		"prefix": "GetTrackUIMute",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackUIMute(${3:MediaTrack track}, ${4:bool +mute})",
		"description": ""
	},
	"reaper.GetTrackUIMute": {
		"prefix": "reaper.GetTrackUIMute",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:boolean mute} = }reaper.GetTrackUIMute(${4:MediaTrack track})",
		"description": ""
	},
	"RPR_GetTrackUIMute": {
		"prefix": "RPR_GetTrackUIMute",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Boolean muteOut} = }RPR_GetTrackUIMute(${5:track}, ${6:muteOut})",
		"description": ""
	},
	"GetTrackUIPan": {
		"prefix": "GetTrackUIPan",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackUIPan(${3:MediaTrack track}, ${4:+pan1}, ${5:+pan2}, ${6:int +panmode})",
		"description": ""
	},
	"reaper.GetTrackUIPan": {
		"prefix": "reaper.GetTrackUIPan",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number pan1}, ${4:number pan2}, ${5:number panmode} = }reaper.GetTrackUIPan(${6:MediaTrack track})",
		"description": ""
	},
	"RPR_GetTrackUIPan": {
		"prefix": "RPR_GetTrackUIPan",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Float pan1Out}, ${5:Float pan2Out}, ${6:Int panmodeOut} = }RPR_GetTrackUIPan(${7:track}, ${8:pan1Out}, ${9:pan2Out}, ${10:panmodeOut})",
		"description": ""
	},
	"GetTrackUIVolPan": {
		"prefix": "GetTrackUIVolPan",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetTrackUIVolPan(${3:MediaTrack track}, ${4:+volume}, ${5:+pan})",
		"description": ""
	},
	"reaper.GetTrackUIVolPan": {
		"prefix": "reaper.GetTrackUIVolPan",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number volume}, ${4:number pan} = }reaper.GetTrackUIVolPan(${5:MediaTrack track})",
		"description": ""
	},
	"RPR_GetTrackUIVolPan": {
		"prefix": "RPR_GetTrackUIVolPan",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Float volumeOut}, ${5:Float panOut} = }RPR_GetTrackUIVolPan(${6:track}, ${7:volumeOut}, ${8:panOut})",
		"description": ""
	},
	"GetUnderrunTime": {
		"prefix": "GetUnderrunTime",
		"scope": "eel",
		"body": "GetUnderrunTime(${1:optional unsigned int +audio_xrun}, ${2:optional unsigned int +media_xrun}, ${3:optional unsigned int +curtime})",
		"description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)"
	},
	"reaper.GetUnderrunTime": {
		"prefix": "reaper.GetUnderrunTime",
		"scope": "lua",
		"body": "${1:${2:optional number audio_xrun}, ${3:optional number media_xrun}, ${4:optional number curtime} = }reaper.GetUnderrunTime()",
		"description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)"
	},
	"RPR_GetUnderrunTime": {
		"prefix": "RPR_GetUnderrunTime",
		"scope": "python",
		"body": "RPR_GetUnderrunTime(${1:unsigned int audio_xrunOutOptional}, ${2:unsigned int media_xrunOutOptional}, ${3:unsigned int curtimeOutOptional})",
		"description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)"
	},
	"GetUserFileNameForRead": {
		"prefix": "GetUserFileNameForRead",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetUserFileNameForRead(${3:#filenameNeed4096}, ${4:\"title\"}, ${5:\"defext\"})",
		"description": "returns true if the user selected a valid file, false if the user canceled the dialog"
	},
	"reaper.GetUserFileNameForRead": {
		"prefix": "reaper.GetUserFileNameForRead",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string filenameNeed4096} = }reaper.GetUserFileNameForRead(${4:string filenameNeed4096}, ${5:string title}, ${6:string defext})",
		"description": "returns true if the user selected a valid file, false if the user canceled the dialog"
	},
	"RPR_GetUserFileNameForRead": {
		"prefix": "RPR_GetUserFileNameForRead",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:String filenameNeed4096}, ${4:String title}, ${5:String defext} = }RPR_GetUserFileNameForRead(${6:filenameNeed4096}, ${7:title}, ${8:defext})",
		"description": "returns true if the user selected a valid file, false if the user canceled the dialog"
	},
	"GetUserInputs": {
		"prefix": "GetUserInputs",
		"scope": "eel",
		"body": "${1:${2:bool} = }GetUserInputs(${3:\"title\"}, ${4:int num_inputs}, ${5:\"captions_csv\"}, ${6:#retvals_csv})",
		"description": "Get values from the user.\n\nIf a caption begins with *, for example \"*password\", the edit field will not display the input text.\n\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. To increase text field width, add an extra caption field, and specify extrawidth=xyz"
	},
	"reaper.GetUserInputs": {
		"prefix": "reaper.GetUserInputs",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string retvals_csv} = }reaper.GetUserInputs(${4:string title}, ${5:integer num_inputs}, ${6:string captions_csv}, ${7:string retvals_csv})",
		"description": "Get values from the user.\n\nIf a caption begins with *, for example \"*password\", the edit field will not display the input text.\n\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. To increase text field width, add an extra caption field, and specify extrawidth=xyz"
	},
	"RPR_GetUserInputs": {
		"prefix": "RPR_GetUserInputs",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:String title}, ${4:Int num_inputs}, ${5:String captions_csv}, ${6:String retvals_csv}, ${7:Int retvals_csv_sz} = }RPR_GetUserInputs(${8:title}, ${9:num_inputs}, ${10:captions_csv}, ${11:retvals_csv}, ${12:retvals_csv_sz})",
		"description": "Get values from the user.\n\nIf a caption begins with *, for example \"*password\", the edit field will not display the input text.\n\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. To increase text field width, add an extra caption field, and specify extrawidth=xyz"
	},
	"GoToMarker": {
		"prefix": "GoToMarker",
		"scope": "eel",
		"body": "GoToMarker(${1:ReaProject proj}, ${2:int marker_index}, ${3:bool use_timeline_order})",
		"description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline.  If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1."
	},
	"reaper.GoToMarker": {
		"prefix": "reaper.GoToMarker",
		"scope": "lua",
		"body": "reaper.GoToMarker(${1:ReaProject proj}, ${2:integer marker_index}, ${3:boolean use_timeline_order})",
		"description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline.  If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1."
	},
	"RPR_GoToMarker": {
		"prefix": "RPR_GoToMarker",
		"scope": "python",
		"body": "RPR_GoToMarker(${1:ReaProject proj}, ${2:Int marker_index}, ${3:Boolean use_timeline_order})",
		"description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline.  If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1."
	},
	"GoToRegion": {
		"prefix": "GoToRegion",
		"scope": "eel",
		"body": "GoToRegion(${1:ReaProject proj}, ${2:int region_index}, ${3:bool use_timeline_order})",
		"description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline.  If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1."
	},
	"reaper.GoToRegion": {
		"prefix": "reaper.GoToRegion",
		"scope": "lua",
		"body": "reaper.GoToRegion(${1:ReaProject proj}, ${2:integer region_index}, ${3:boolean use_timeline_order})",
		"description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline.  If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1."
	},
	"RPR_GoToRegion": {
		"prefix": "RPR_GoToRegion",
		"scope": "python",
		"body": "RPR_GoToRegion(${1:ReaProject proj}, ${2:Int region_index}, ${3:Boolean use_timeline_order})",
		"description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline.  If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1."
	},
	"GR_SelectColor": {
		"prefix": "GR_SelectColor",
		"scope": "eel",
		"body": "${1:${2:int} = }GR_SelectColor(${3:HWND hwnd}, ${4:int +color})",
		"description": "Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog."
	},
	"reaper.GR_SelectColor": {
		"prefix": "reaper.GR_SelectColor",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:number color} = }reaper.GR_SelectColor(${4:HWND hwnd})",
		"description": "Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog."
	},
	"RPR_GR_SelectColor": {
		"prefix": "RPR_GR_SelectColor",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:HWND hwnd}, ${4:Int colorOut} = }RPR_GR_SelectColor(${5:hwnd}, ${6:colorOut})",
		"description": "Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog."
	},
	"GSC_mainwnd": {
		"prefix": "GSC_mainwnd",
		"scope": "eel",
		"body": "${1:${2:int} = }GSC_mainwnd(${3:int t})",
		"description": "this is just like win32 GetSysColor() but can have overrides."
	},
	"reaper.GSC_mainwnd": {
		"prefix": "reaper.GSC_mainwnd",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.GSC_mainwnd(${3:integer t})",
		"description": "this is just like win32 GetSysColor() but can have overrides."
	},
	"RPR_GSC_mainwnd": {
		"prefix": "RPR_GSC_mainwnd",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_GSC_mainwnd(${3:Int t})",
		"description": "this is just like win32 GetSysColor() but can have overrides."
	},
	"guidToString": {
		"prefix": "guidToString",
		"scope": "eel",
		"body": "guidToString(${1:\"gGUID\"}, ${2:#destNeed64})",
		"description": "dest should be at least 64 chars long to be safe"
	},
	"reaper.guidToString": {
		"prefix": "reaper.guidToString",
		"scope": "lua",
		"body": "${1:${2:string destNeed64} = }reaper.guidToString(${3:string gGUID}, ${4:string destNeed64})",
		"description": "dest should be at least 64 chars long to be safe"
	},
	"RPR_guidToString": {
		"prefix": "RPR_guidToString",
		"scope": "python",
		"body": "${1:${2:const GUID g}, ${3:String destNeed64} = }RPR_guidToString(${4:g}, ${5:destNeed64})",
		"description": "dest should be at least 64 chars long to be safe"
	},
	"HasExtState": {
		"prefix": "HasExtState",
		"scope": "eel",
		"body": "${1:${2:bool} = }HasExtState(${3:\"section\"}, ${4:\"key\"})",
		"description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState."
	},
	"reaper.HasExtState": {
		"prefix": "reaper.HasExtState",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.HasExtState(${3:string section}, ${4:string key})",
		"description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState."
	},
	"RPR_HasExtState": {
		"prefix": "RPR_HasExtState",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_HasExtState(${3:String section}, ${4:String key})",
		"description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState."
	},
	"HasTrackMIDIPrograms": {
		"prefix": "HasTrackMIDIPrograms",
		"scope": "eel",
		"body": "${1:${2:bool} = }HasTrackMIDIPrograms(${3:#retval}, ${4:int track})",
		"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
	},
	"reaper.HasTrackMIDIPrograms": {
		"prefix": "reaper.HasTrackMIDIPrograms",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.HasTrackMIDIPrograms(${3:integer track})",
		"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
	},
	"RPR_HasTrackMIDIPrograms": {
		"prefix": "RPR_HasTrackMIDIPrograms",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_HasTrackMIDIPrograms(${3:Int track})",
		"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
	},
	"HasTrackMIDIProgramsEx": {
		"prefix": "HasTrackMIDIProgramsEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }HasTrackMIDIProgramsEx(${3:#retval}, ${4:ReaProject proj}, ${5:MediaTrack track})",
		"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
	},
	"reaper.HasTrackMIDIProgramsEx": {
		"prefix": "reaper.HasTrackMIDIProgramsEx",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.HasTrackMIDIProgramsEx(${3:ReaProject proj}, ${4:MediaTrack track})",
		"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
	},
	"RPR_HasTrackMIDIProgramsEx": {
		"prefix": "RPR_HasTrackMIDIProgramsEx",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_HasTrackMIDIProgramsEx(${3:ReaProject proj}, ${4:MediaTrack track})",
		"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
	},
	"Help_Set": {
		"prefix": "Help_Set",
		"scope": "eel",
		"body": "Help_Set(${1:\"helpstring\"}, ${2:bool is_temporary_help})",
		"description": ""
	},
	"reaper.Help_Set": {
		"prefix": "reaper.Help_Set",
		"scope": "lua",
		"body": "reaper.Help_Set(${1:string helpstring}, ${2:boolean is_temporary_help})",
		"description": ""
	},
	"RPR_Help_Set": {
		"prefix": "RPR_Help_Set",
		"scope": "python",
		"body": "RPR_Help_Set(${1:String helpstring}, ${2:Boolean is_temporary_help})",
		"description": ""
	},
	"image_resolve_fn": {
		"prefix": "image_resolve_fn",
		"scope": "eel",
		"body": "image_resolve_fn(${1:\"in\"}, ${2:#out})",
		"description": ""
	},
	"reaper.image_resolve_fn": {
		"prefix": "reaper.image_resolve_fn",
		"scope": "lua",
		"body": "${1:${2:string out} = }reaper.image_resolve_fn(${3:string in}, ${4:string out})",
		"description": ""
	},
	"RPR_image_resolve_fn": {
		"prefix": "RPR_image_resolve_fn",
		"scope": "python",
		"body": "${1:${2:String in}, ${3:String out}, ${4:Int out_sz} = }RPR_image_resolve_fn(${5:in}, ${6:out}, ${7:out_sz})",
		"description": ""
	},
	"InsertAutomationItem": {
		"prefix": "InsertAutomationItem",
		"scope": "eel",
		"body": "${1:${2:int} = }InsertAutomationItem(${3:TrackEnvelope env}, ${4:int pool_id}, ${5:position}, ${6:length})",
		"description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo."
	},
	"reaper.InsertAutomationItem": {
		"prefix": "reaper.InsertAutomationItem",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.InsertAutomationItem(${3:TrackEnvelope env}, ${4:integer pool_id}, ${5:number position}, ${6:number length})",
		"description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo."
	},
	"RPR_InsertAutomationItem": {
		"prefix": "RPR_InsertAutomationItem",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_InsertAutomationItem(${3:TrackEnvelope env}, ${4:Int pool_id}, ${5:Float position}, ${6:Float length})",
		"description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo."
	},
	"InsertEnvelopePoint": {
		"prefix": "InsertEnvelopePoint",
		"scope": "eel",
		"body": "${1:${2:bool} = }InsertEnvelopePoint(${3:TrackEnvelope envelope}, ${4:time}, ${5:value}, ${6:int shape}, ${7:tension}, ${8:bool selected}, ${9:optional bool noSortIn})",
		"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode."
	},
	"reaper.InsertEnvelopePoint": {
		"prefix": "reaper.InsertEnvelopePoint",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.InsertEnvelopePoint(${3:TrackEnvelope envelope}, ${4:number time}, ${5:number value}, ${6:integer shape}, ${7:number tension}, ${8:boolean selected}, ${9:optional boolean noSortIn})",
		"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode."
	},
	"RPR_InsertEnvelopePoint": {
		"prefix": "RPR_InsertEnvelopePoint",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:TrackEnvelope envelope}, ${4:Float time}, ${5:Float value}, ${6:Int shape}, ${7:Float tension}, ${8:Boolean selected}, ${9:Boolean noSortInOptional} = }RPR_InsertEnvelopePoint(${10:envelope}, ${11:time}, ${12:value}, ${13:shape}, ${14:tension}, ${15:selected}, ${16:noSortInOptional})",
		"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode."
	},
	"InsertEnvelopePointEx": {
		"prefix": "InsertEnvelopePointEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }InsertEnvelopePointEx(${3:TrackEnvelope envelope}, ${4:int autoitem_idx}, ${5:time}, ${6:value}, ${7:int shape}, ${8:tension}, ${9:bool selected}, ${10:optional bool noSortIn})",
		"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode."
	},
	"reaper.InsertEnvelopePointEx": {
		"prefix": "reaper.InsertEnvelopePointEx",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.InsertEnvelopePointEx(${3:TrackEnvelope envelope}, ${4:integer autoitem_idx}, ${5:number time}, ${6:number value}, ${7:integer shape}, ${8:number tension}, ${9:boolean selected}, ${10:optional boolean noSortIn})",
		"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode."
	},
	"RPR_InsertEnvelopePointEx": {
		"prefix": "RPR_InsertEnvelopePointEx",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:TrackEnvelope envelope}, ${4:Int autoitem_idx}, ${5:Float time}, ${6:Float value}, ${7:Int shape}, ${8:Float tension}, ${9:Boolean selected}, ${10:Boolean noSortInOptional} = }RPR_InsertEnvelopePointEx(${11:envelope}, ${12:autoitem_idx}, ${13:time}, ${14:value}, ${15:shape}, ${16:tension}, ${17:selected}, ${18:noSortInOptional})",
		"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.  autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode."
	},
	"InsertMedia": {
		"prefix": "InsertMedia",
		"scope": "eel",
		"body": "${1:${2:int} = }InsertMedia(${3:\"file\"}, ${4:int mode})",
		"description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, +4=stretch/loop to fit time sel, +8=try to match tempo 1x, +16=try to match tempo 0.5x, +32=try to match tempo 2x, +64=don't preserve pitch when matching tempo, +128=no loop/section if startpct/endpct set, +256=force loop regardless of global preference for looping imported items. +512=use high word as absolute track index if mode+3==0."
	},
	"reaper.InsertMedia": {
		"prefix": "reaper.InsertMedia",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.InsertMedia(${3:string file}, ${4:integer mode})",
		"description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, +4=stretch/loop to fit time sel, +8=try to match tempo 1x, +16=try to match tempo 0.5x, +32=try to match tempo 2x, +64=don't preserve pitch when matching tempo, +128=no loop/section if startpct/endpct set, +256=force loop regardless of global preference for looping imported items. +512=use high word as absolute track index if mode+3==0."
	},
	"RPR_InsertMedia": {
		"prefix": "RPR_InsertMedia",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_InsertMedia(${3:String file}, ${4:Int mode})",
		"description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, +4=stretch/loop to fit time sel, +8=try to match tempo 1x, +16=try to match tempo 0.5x, +32=try to match tempo 2x, +64=don't preserve pitch when matching tempo, +128=no loop/section if startpct/endpct set, +256=force loop regardless of global preference for looping imported items. +512=use high word as absolute track index if mode+3==0."
	},
	"InsertMediaSection": {
		"prefix": "InsertMediaSection",
		"scope": "eel",
		"body": "${1:${2:int} = }InsertMediaSection(${3:\"file\"}, ${4:int mode}, ${5:startpct}, ${6:endpct}, ${7:pitchshift})",
		"description": ""
	},
	"reaper.InsertMediaSection": {
		"prefix": "reaper.InsertMediaSection",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.InsertMediaSection(${3:string file}, ${4:integer mode}, ${5:number startpct}, ${6:number endpct}, ${7:number pitchshift})",
		"description": ""
	},
	"RPR_InsertMediaSection": {
		"prefix": "RPR_InsertMediaSection",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_InsertMediaSection(${3:String file}, ${4:Int mode}, ${5:Float startpct}, ${6:Float endpct}, ${7:Float pitchshift})",
		"description": ""
	},
	"InsertTrackAtIndex": {
		"prefix": "InsertTrackAtIndex",
		"scope": "eel",
		"body": "InsertTrackAtIndex(${1:int idx}, ${2:bool wantDefaults})",
		"description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env"
	},
	"reaper.InsertTrackAtIndex": {
		"prefix": "reaper.InsertTrackAtIndex",
		"scope": "lua",
		"body": "reaper.InsertTrackAtIndex(${1:integer idx}, ${2:boolean wantDefaults})",
		"description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env"
	},
	"RPR_InsertTrackAtIndex": {
		"prefix": "RPR_InsertTrackAtIndex",
		"scope": "python",
		"body": "RPR_InsertTrackAtIndex(${1:Int idx}, ${2:Boolean wantDefaults})",
		"description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env"
	},
	"IsMediaExtension": {
		"prefix": "IsMediaExtension",
		"scope": "eel",
		"body": "${1:${2:bool} = }IsMediaExtension(${3:\"ext\"}, ${4:bool wantOthers})",
		"description": "Tests a file extension (i.e. \"wav\" or \"mid\") to see if it's a media extension.\n\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also pass."
	},
	"reaper.IsMediaExtension": {
		"prefix": "reaper.IsMediaExtension",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.IsMediaExtension(${3:string ext}, ${4:boolean wantOthers})",
		"description": "Tests a file extension (i.e. \"wav\" or \"mid\") to see if it's a media extension.\n\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also pass."
	},
	"RPR_IsMediaExtension": {
		"prefix": "RPR_IsMediaExtension",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_IsMediaExtension(${3:String ext}, ${4:Boolean wantOthers})",
		"description": "Tests a file extension (i.e. \"wav\" or \"mid\") to see if it's a media extension.\n\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also pass."
	},
	"IsMediaItemSelected": {
		"prefix": "IsMediaItemSelected",
		"scope": "eel",
		"body": "${1:${2:bool} = }IsMediaItemSelected(${3:MediaItem item})",
		"description": ""
	},
	"reaper.IsMediaItemSelected": {
		"prefix": "reaper.IsMediaItemSelected",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.IsMediaItemSelected(${3:MediaItem item})",
		"description": ""
	},
	"RPR_IsMediaItemSelected": {
		"prefix": "RPR_IsMediaItemSelected",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_IsMediaItemSelected(${3:MediaItem item})",
		"description": ""
	},
	"IsProjectDirty": {
		"prefix": "IsProjectDirty",
		"scope": "eel",
		"body": "${1:${2:int} = }IsProjectDirty(${3:ReaProject proj})",
		"description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences."
	},
	"reaper.IsProjectDirty": {
		"prefix": "reaper.IsProjectDirty",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.IsProjectDirty(${3:ReaProject proj})",
		"description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences."
	},
	"RPR_IsProjectDirty": {
		"prefix": "RPR_IsProjectDirty",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_IsProjectDirty(${3:ReaProject proj})",
		"description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences."
	},
	"IsTrackSelected": {
		"prefix": "IsTrackSelected",
		"scope": "eel",
		"body": "${1:${2:bool} = }IsTrackSelected(${3:MediaTrack track})",
		"description": ""
	},
	"reaper.IsTrackSelected": {
		"prefix": "reaper.IsTrackSelected",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.IsTrackSelected(${3:MediaTrack track})",
		"description": ""
	},
	"RPR_IsTrackSelected": {
		"prefix": "RPR_IsTrackSelected",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_IsTrackSelected(${3:MediaTrack track})",
		"description": ""
	},
	"IsTrackVisible": {
		"prefix": "IsTrackVisible",
		"scope": "eel",
		"body": "${1:${2:bool} = }IsTrackVisible(${3:MediaTrack track}, ${4:bool mixer})",
		"description": "If mixer==true, returns true if the track is visible in the mixer.  If mixer==false, returns true if the track is visible in the track control panel."
	},
	"reaper.IsTrackVisible": {
		"prefix": "reaper.IsTrackVisible",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.IsTrackVisible(${3:MediaTrack track}, ${4:boolean mixer})",
		"description": "If mixer==true, returns true if the track is visible in the mixer.  If mixer==false, returns true if the track is visible in the track control panel."
	},
	"RPR_IsTrackVisible": {
		"prefix": "RPR_IsTrackVisible",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_IsTrackVisible(${3:MediaTrack track}, ${4:Boolean mixer})",
		"description": "If mixer==true, returns true if the track is visible in the mixer.  If mixer==false, returns true if the track is visible in the track control panel."
	},
	"joystick_create": {
		"prefix": "joystick_create",
		"scope": "eel",
		"body": "${1:${2:joystick_device} = }joystick_create(${3:\"guidGUID\"})",
		"description": "creates a joystick device"
	},
	"reaper.joystick_create": {
		"prefix": "reaper.joystick_create",
		"scope": "lua",
		"body": "${1:${2:joystick_device} = }reaper.joystick_create(${3:string guidGUID})",
		"description": "creates a joystick device"
	},
	"RPR_joystick_create": {
		"prefix": "RPR_joystick_create",
		"scope": "python",
		"body": "${1:${2:joystick_device} = }RPR_joystick_create(${3:const GUID guid})",
		"description": "creates a joystick device"
	},
	"joystick_destroy": {
		"prefix": "joystick_destroy",
		"scope": "eel",
		"body": "joystick_destroy(${1:joystick_device device})",
		"description": "destroys a joystick device"
	},
	"reaper.joystick_destroy": {
		"prefix": "reaper.joystick_destroy",
		"scope": "lua",
		"body": "reaper.joystick_destroy(${1:joystick_device device})",
		"description": "destroys a joystick device"
	},
	"RPR_joystick_destroy": {
		"prefix": "RPR_joystick_destroy",
		"scope": "python",
		"body": "RPR_joystick_destroy(${1:joystick_device device})",
		"description": "destroys a joystick device"
	},
	"joystick_enum": {
		"prefix": "joystick_enum",
		"scope": "eel",
		"body": "${1:${2:bool} = }joystick_enum(${3:#retval}, ${4:int index}, ${5:optional #namestr})",
		"description": "enumerates installed devices, returns GUID as a string"
	},
	"reaper.joystick_enum": {
		"prefix": "reaper.joystick_enum",
		"scope": "lua",
		"body": "${1:${2:string retval}, ${3:optional string namestr} = }reaper.joystick_enum(${4:integer index})",
		"description": "enumerates installed devices, returns GUID as a string"
	},
	"RPR_joystick_enum": {
		"prefix": "RPR_joystick_enum",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_joystick_enum(${3:Int index}, ${4:String namestrOutOptional})",
		"description": "enumerates installed devices, returns GUID as a string"
	},
	"joystick_getaxis": {
		"prefix": "joystick_getaxis",
		"scope": "eel",
		"body": "${1:${2:double} = }joystick_getaxis(${3:joystick_device dev}, ${4:int axis})",
		"description": "returns axis value (-1..1)"
	},
	"reaper.joystick_getaxis": {
		"prefix": "reaper.joystick_getaxis",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.joystick_getaxis(${3:joystick_device dev}, ${4:integer axis})",
		"description": "returns axis value (-1..1)"
	},
	"RPR_joystick_getaxis": {
		"prefix": "RPR_joystick_getaxis",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_joystick_getaxis(${3:joystick_device dev}, ${4:Int axis})",
		"description": "returns axis value (-1..1)"
	},
	"joystick_getbuttonmask": {
		"prefix": "joystick_getbuttonmask",
		"scope": "eel",
		"body": "${1:${2:uint} = }joystick_getbuttonmask(${3:joystick_device dev})",
		"description": "returns button pressed mask, 1=first button, 2=second..."
	},
	"reaper.joystick_getbuttonmask": {
		"prefix": "reaper.joystick_getbuttonmask",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.joystick_getbuttonmask(${3:joystick_device dev})",
		"description": "returns button pressed mask, 1=first button, 2=second..."
	},
	"RPR_joystick_getbuttonmask": {
		"prefix": "RPR_joystick_getbuttonmask",
		"scope": "python",
		"body": "${1:${2:Unknown} = }RPR_joystick_getbuttonmask(${3:joystick_device dev})",
		"description": "returns button pressed mask, 1=first button, 2=second..."
	},
	"joystick_getinfo": {
		"prefix": "joystick_getinfo",
		"scope": "eel",
		"body": "${1:${2:int} = }joystick_getinfo(${3:joystick_device dev}, ${4:optional int +axes}, ${5:optional int +povs})",
		"description": "returns button count"
	},
	"reaper.joystick_getinfo": {
		"prefix": "reaper.joystick_getinfo",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:optional number axes}, ${4:optional number povs} = }reaper.joystick_getinfo(${5:joystick_device dev})",
		"description": "returns button count"
	},
	"RPR_joystick_getinfo": {
		"prefix": "RPR_joystick_getinfo",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:joystick_device dev}, ${4:Int axesOutOptional}, ${5:Int povsOutOptional} = }RPR_joystick_getinfo(${6:dev}, ${7:axesOutOptional}, ${8:povsOutOptional})",
		"description": "returns button count"
	},
	"joystick_getpov": {
		"prefix": "joystick_getpov",
		"scope": "eel",
		"body": "${1:${2:double} = }joystick_getpov(${3:joystick_device dev}, ${4:int pov})",
		"description": "returns POV value (usually 0..655.35, or 655.35 on error)"
	},
	"reaper.joystick_getpov": {
		"prefix": "reaper.joystick_getpov",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.joystick_getpov(${3:joystick_device dev}, ${4:integer pov})",
		"description": "returns POV value (usually 0..655.35, or 655.35 on error)"
	},
	"RPR_joystick_getpov": {
		"prefix": "RPR_joystick_getpov",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_joystick_getpov(${3:joystick_device dev}, ${4:Int pov})",
		"description": "returns POV value (usually 0..655.35, or 655.35 on error)"
	},
	"joystick_update": {
		"prefix": "joystick_update",
		"scope": "eel",
		"body": "${1:${2:bool} = }joystick_update(${3:joystick_device dev})",
		"description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)"
	},
	"reaper.joystick_update": {
		"prefix": "reaper.joystick_update",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.joystick_update(${3:joystick_device dev})",
		"description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)"
	},
	"RPR_joystick_update": {
		"prefix": "RPR_joystick_update",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_joystick_update(${3:joystick_device dev})",
		"description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)"
	},
	"LICE_ClipLine": {
		"prefix": "LICE_ClipLine",
		"scope": "eel",
		"body": "${1:${2:bool} = }LICE_ClipLine(${3:int +pX1}, ${4:int +pY1}, ${5:int +pX2}, ${6:int +pY2}, ${7:int xLo}, ${8:int yLo}, ${9:int xHi}, ${10:int yHi})",
		"description": "Returns false if the line is entirely offscreen."
	},
	"reaper.LICE_ClipLine": {
		"prefix": "reaper.LICE_ClipLine",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number pX1}, ${4:number pY1}, ${5:number pX2}, ${6:number pY2} = }reaper.LICE_ClipLine(${7:number pX1}, ${8:number pY1}, ${9:number pX2}, ${10:number pY2}, ${11:integer xLo}, ${12:integer yLo}, ${13:integer xHi}, ${14:integer yHi})",
		"description": "Returns false if the line is entirely offscreen."
	},
	"RPR_LICE_ClipLine": {
		"prefix": "RPR_LICE_ClipLine",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:Int pX1Out}, ${4:Int pY1Out}, ${5:Int pX2Out}, ${6:Int pY2Out}, ${7:Int xLo}, ${8:Int yLo}, ${9:Int xHi}, ${10:Int yHi} = }RPR_LICE_ClipLine(${11:pX1Out}, ${12:pY1Out}, ${13:pX2Out}, ${14:pY2Out}, ${15:xLo}, ${16:yLo}, ${17:xHi}, ${18:yHi})",
		"description": "Returns false if the line is entirely offscreen."
	},
	"Loop_OnArrow": {
		"prefix": "Loop_OnArrow",
		"scope": "eel",
		"body": "${1:${2:bool} = }Loop_OnArrow(${3:ReaProject project}, ${4:int direction})",
		"description": "Move the loop selection left or right. Returns true if snap is enabled."
	},
	"reaper.Loop_OnArrow": {
		"prefix": "reaper.Loop_OnArrow",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.Loop_OnArrow(${3:ReaProject project}, ${4:integer direction})",
		"description": "Move the loop selection left or right. Returns true if snap is enabled."
	},
	"RPR_Loop_OnArrow": {
		"prefix": "RPR_Loop_OnArrow",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_Loop_OnArrow(${3:ReaProject project}, ${4:Int direction})",
		"description": "Move the loop selection left or right. Returns true if snap is enabled."
	},
	"Main_OnCommand": {
		"prefix": "Main_OnCommand",
		"scope": "eel",
		"body": "Main_OnCommand(${1:int command}, ${2:int flag})",
		"description": "See Main_OnCommandEx."
	},
	"reaper.Main_OnCommand": {
		"prefix": "reaper.Main_OnCommand",
		"scope": "lua",
		"body": "reaper.Main_OnCommand(${1:integer command}, ${2:integer flag})",
		"description": "See Main_OnCommandEx."
	},
	"RPR_Main_OnCommand": {
		"prefix": "RPR_Main_OnCommand",
		"scope": "python",
		"body": "RPR_Main_OnCommand(${1:Int command}, ${2:Int flag})",
		"description": "See Main_OnCommandEx."
	},
	"Main_OnCommandEx": {
		"prefix": "Main_OnCommandEx",
		"scope": "eel",
		"body": "Main_OnCommandEx(${1:int command}, ${2:int flag}, ${3:ReaProject proj})",
		"description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup()."
	},
	"reaper.Main_OnCommandEx": {
		"prefix": "reaper.Main_OnCommandEx",
		"scope": "lua",
		"body": "reaper.Main_OnCommandEx(${1:integer command}, ${2:integer flag}, ${3:ReaProject proj})",
		"description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup()."
	},
	"RPR_Main_OnCommandEx": {
		"prefix": "RPR_Main_OnCommandEx",
		"scope": "python",
		"body": "RPR_Main_OnCommandEx(${1:Int command}, ${2:Int flag}, ${3:ReaProject proj})",
		"description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup()."
	},
	"Main_openProject": {
		"prefix": "Main_openProject",
		"scope": "eel",
		"body": "Main_openProject(${1:\"name\"})",
		"description": "opens a project. will prompt the user to save, etc.\n\nif you pass a .RTrackTemplate file then it adds that to the project instead."
	},
	"reaper.Main_openProject": {
		"prefix": "reaper.Main_openProject",
		"scope": "lua",
		"body": "reaper.Main_openProject(${1:string name})",
		"description": "opens a project. will prompt the user to save, etc.\n\nif you pass a .RTrackTemplate file then it adds that to the project instead."
	},
	"RPR_Main_openProject": {
		"prefix": "RPR_Main_openProject",
		"scope": "python",
		"body": "RPR_Main_openProject(${1:String name})",
		"description": "opens a project. will prompt the user to save, etc.\n\nif you pass a .RTrackTemplate file then it adds that to the project instead."
	},
	"Main_SaveProject": {
		"prefix": "Main_SaveProject",
		"scope": "eel",
		"body": "Main_SaveProject(${1:ReaProject proj}, ${2:bool forceSaveAsIn})",
		"description": "Save the project."
	},
	"reaper.Main_SaveProject": {
		"prefix": "reaper.Main_SaveProject",
		"scope": "lua",
		"body": "reaper.Main_SaveProject(${1:ReaProject proj}, ${2:boolean forceSaveAsIn})",
		"description": "Save the project."
	},
	"RPR_Main_SaveProject": {
		"prefix": "RPR_Main_SaveProject",
		"scope": "python",
		"body": "RPR_Main_SaveProject(${1:ReaProject proj}, ${2:Boolean forceSaveAsInOptional})",
		"description": "Save the project."
	},
	"Main_UpdateLoopInfo": {
		"prefix": "Main_UpdateLoopInfo",
		"scope": "eel",
		"body": "Main_UpdateLoopInfo(${1:int ignoremask})",
		"description": ""
	},
	"reaper.Main_UpdateLoopInfo": {
		"prefix": "reaper.Main_UpdateLoopInfo",
		"scope": "lua",
		"body": "reaper.Main_UpdateLoopInfo(${1:integer ignoremask})",
		"description": ""
	},
	"RPR_Main_UpdateLoopInfo": {
		"prefix": "RPR_Main_UpdateLoopInfo",
		"scope": "python",
		"body": "RPR_Main_UpdateLoopInfo(${1:Int ignoremask})",
		"description": ""
	},
	"MarkProjectDirty": {
		"prefix": "MarkProjectDirty",
		"scope": "eel",
		"body": "MarkProjectDirty(${1:ReaProject proj})",
		"description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences."
	},
	"reaper.MarkProjectDirty": {
		"prefix": "reaper.MarkProjectDirty",
		"scope": "lua",
		"body": "reaper.MarkProjectDirty(${1:ReaProject proj})",
		"description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences."
	},
	"RPR_MarkProjectDirty": {
		"prefix": "RPR_MarkProjectDirty",
		"scope": "python",
		"body": "RPR_MarkProjectDirty(${1:ReaProject proj})",
		"description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences."
	},
	"MarkTrackItemsDirty": {
		"prefix": "MarkTrackItemsDirty",
		"scope": "eel",
		"body": "MarkTrackItemsDirty(${1:MediaTrack track}, ${2:MediaItem item})",
		"description": "If track is supplied, item is ignored"
	},
	"reaper.MarkTrackItemsDirty": {
		"prefix": "reaper.MarkTrackItemsDirty",
		"scope": "lua",
		"body": "reaper.MarkTrackItemsDirty(${1:MediaTrack track}, ${2:MediaItem item})",
		"description": "If track is supplied, item is ignored"
	},
	"RPR_MarkTrackItemsDirty": {
		"prefix": "RPR_MarkTrackItemsDirty",
		"scope": "python",
		"body": "RPR_MarkTrackItemsDirty(${1:MediaTrack track}, ${2:MediaItem item})",
		"description": "If track is supplied, item is ignored"
	},
	"Master_GetPlayRate": {
		"prefix": "Master_GetPlayRate",
		"scope": "eel",
		"body": "${1:${2:double} = }Master_GetPlayRate(${3:ReaProject project})",
		"description": ""
	},
	"reaper.Master_GetPlayRate": {
		"prefix": "reaper.Master_GetPlayRate",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.Master_GetPlayRate(${3:ReaProject project})",
		"description": ""
	},
	"RPR_Master_GetPlayRate": {
		"prefix": "RPR_Master_GetPlayRate",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_Master_GetPlayRate(${3:ReaProject project})",
		"description": ""
	},
	"Master_GetPlayRateAtTime": {
		"prefix": "Master_GetPlayRateAtTime",
		"scope": "eel",
		"body": "${1:${2:double} = }Master_GetPlayRateAtTime(${3:time_s}, ${4:ReaProject proj})",
		"description": ""
	},
	"reaper.Master_GetPlayRateAtTime": {
		"prefix": "reaper.Master_GetPlayRateAtTime",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.Master_GetPlayRateAtTime(${3:number time_s}, ${4:ReaProject proj})",
		"description": ""
	},
	"RPR_Master_GetPlayRateAtTime": {
		"prefix": "RPR_Master_GetPlayRateAtTime",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_Master_GetPlayRateAtTime(${3:Float time_s}, ${4:ReaProject proj})",
		"description": ""
	},
	"Master_GetTempo": {
		"prefix": "Master_GetTempo",
		"scope": "eel",
		"body": "${1:${2:double} = }Master_GetTempo()",
		"description": ""
	},
	"reaper.Master_GetTempo": {
		"prefix": "reaper.Master_GetTempo",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.Master_GetTempo()",
		"description": ""
	},
	"RPR_Master_GetTempo": {
		"prefix": "RPR_Master_GetTempo",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_Master_GetTempo()",
		"description": ""
	},
	"Master_NormalizePlayRate": {
		"prefix": "Master_NormalizePlayRate",
		"scope": "eel",
		"body": "${1:${2:double} = }Master_NormalizePlayRate(${3:playrate}, ${4:bool isnormalized})",
		"description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider."
	},
	"reaper.Master_NormalizePlayRate": {
		"prefix": "reaper.Master_NormalizePlayRate",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.Master_NormalizePlayRate(${3:number playrate}, ${4:boolean isnormalized})",
		"description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider."
	},
	"RPR_Master_NormalizePlayRate": {
		"prefix": "RPR_Master_NormalizePlayRate",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_Master_NormalizePlayRate(${3:Float playrate}, ${4:Boolean isnormalized})",
		"description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider."
	},
	"Master_NormalizeTempo": {
		"prefix": "Master_NormalizeTempo",
		"scope": "eel",
		"body": "${1:${2:double} = }Master_NormalizeTempo(${3:bpm}, ${4:bool isnormalized})",
		"description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm."
	},
	"reaper.Master_NormalizeTempo": {
		"prefix": "reaper.Master_NormalizeTempo",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.Master_NormalizeTempo(${3:number bpm}, ${4:boolean isnormalized})",
		"description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm."
	},
	"RPR_Master_NormalizeTempo": {
		"prefix": "RPR_Master_NormalizeTempo",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_Master_NormalizeTempo(${3:Float bpm}, ${4:Boolean isnormalized})",
		"description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm."
	},
	"MB": {
		"prefix": "MB",
		"scope": "eel",
		"body": "${1:${2:int} = }MB(${3:\"msg\"}, ${4:\"title\"}, ${5:int type})",
		"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
	},
	"reaper.MB": {
		"prefix": "reaper.MB",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.MB(${3:string msg}, ${4:string title}, ${5:integer type})",
		"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
	},
	"RPR_MB": {
		"prefix": "RPR_MB",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_MB(${3:String msg}, ${4:String title}, ${5:Int type})",
		"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
	},
	"MediaItemDescendsFromTrack": {
		"prefix": "MediaItemDescendsFromTrack",
		"scope": "eel",
		"body": "${1:${2:int} = }MediaItemDescendsFromTrack(${3:MediaItem item}, ${4:MediaTrack track})",
		"description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc."
	},
	"reaper.MediaItemDescendsFromTrack": {
		"prefix": "reaper.MediaItemDescendsFromTrack",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.MediaItemDescendsFromTrack(${3:MediaItem item}, ${4:MediaTrack track})",
		"description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc."
	},
	"RPR_MediaItemDescendsFromTrack": {
		"prefix": "RPR_MediaItemDescendsFromTrack",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_MediaItemDescendsFromTrack(${3:MediaItem item}, ${4:MediaTrack track})",
		"description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc."
	},
	"MIDI_CountEvts": {
		"prefix": "MIDI_CountEvts",
		"scope": "eel",
		"body": "${1:${2:int} = }MIDI_CountEvts(${3:MediaItem_Take take}, ${4:int +notecnt}, ${5:int +ccevtcnt}, ${6:int +textsyxevtcnt})",
		"description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item."
	},
	"reaper.MIDI_CountEvts": {
		"prefix": "reaper.MIDI_CountEvts",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:number notecnt}, ${4:number ccevtcnt}, ${5:number textsyxevtcnt} = }reaper.MIDI_CountEvts(${6:MediaItem_Take take})",
		"description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item."
	},
	"RPR_MIDI_CountEvts": {
		"prefix": "RPR_MIDI_CountEvts",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:MediaItem_Take take}, ${4:Int notecntOut}, ${5:Int ccevtcntOut}, ${6:Int textsyxevtcntOut} = }RPR_MIDI_CountEvts(${7:take}, ${8:notecntOut}, ${9:ccevtcntOut}, ${10:textsyxevtcntOut})",
		"description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item."
	},
	"MIDI_DeleteCC": {
		"prefix": "MIDI_DeleteCC",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_DeleteCC(${3:MediaItem_Take take}, ${4:int ccidx})",
		"description": "Delete a MIDI CC event."
	},
	"reaper.MIDI_DeleteCC": {
		"prefix": "reaper.MIDI_DeleteCC",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_DeleteCC(${3:MediaItem_Take take}, ${4:integer ccidx})",
		"description": "Delete a MIDI CC event."
	},
	"RPR_MIDI_DeleteCC": {
		"prefix": "RPR_MIDI_DeleteCC",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_DeleteCC(${3:MediaItem_Take take}, ${4:Int ccidx})",
		"description": "Delete a MIDI CC event."
	},
	"MIDI_DeleteEvt": {
		"prefix": "MIDI_DeleteEvt",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_DeleteEvt(${3:MediaItem_Take take}, ${4:int evtidx})",
		"description": "Delete a MIDI event."
	},
	"reaper.MIDI_DeleteEvt": {
		"prefix": "reaper.MIDI_DeleteEvt",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_DeleteEvt(${3:MediaItem_Take take}, ${4:integer evtidx})",
		"description": "Delete a MIDI event."
	},
	"RPR_MIDI_DeleteEvt": {
		"prefix": "RPR_MIDI_DeleteEvt",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_DeleteEvt(${3:MediaItem_Take take}, ${4:Int evtidx})",
		"description": "Delete a MIDI event."
	},
	"MIDI_DeleteNote": {
		"prefix": "MIDI_DeleteNote",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_DeleteNote(${3:MediaItem_Take take}, ${4:int noteidx})",
		"description": "Delete a MIDI note."
	},
	"reaper.MIDI_DeleteNote": {
		"prefix": "reaper.MIDI_DeleteNote",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_DeleteNote(${3:MediaItem_Take take}, ${4:integer noteidx})",
		"description": "Delete a MIDI note."
	},
	"RPR_MIDI_DeleteNote": {
		"prefix": "RPR_MIDI_DeleteNote",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_DeleteNote(${3:MediaItem_Take take}, ${4:Int noteidx})",
		"description": "Delete a MIDI note."
	},
	"MIDI_DeleteTextSysexEvt": {
		"prefix": "MIDI_DeleteTextSysexEvt",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_DeleteTextSysexEvt(${3:MediaItem_Take take}, ${4:int textsyxevtidx})",
		"description": "Delete a MIDI text or sysex event."
	},
	"reaper.MIDI_DeleteTextSysexEvt": {
		"prefix": "reaper.MIDI_DeleteTextSysexEvt",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_DeleteTextSysexEvt(${3:MediaItem_Take take}, ${4:integer textsyxevtidx})",
		"description": "Delete a MIDI text or sysex event."
	},
	"RPR_MIDI_DeleteTextSysexEvt": {
		"prefix": "RPR_MIDI_DeleteTextSysexEvt",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_DeleteTextSysexEvt(${3:MediaItem_Take take}, ${4:Int textsyxevtidx})",
		"description": "Delete a MIDI text or sysex event."
	},
	"MIDI_EnumSelCC": {
		"prefix": "MIDI_EnumSelCC",
		"scope": "eel",
		"body": "${1:${2:int} = }MIDI_EnumSelCC(${3:MediaItem_Take take}, ${4:int ccidx})",
		"description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events)."
	},
	"reaper.MIDI_EnumSelCC": {
		"prefix": "reaper.MIDI_EnumSelCC",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.MIDI_EnumSelCC(${3:MediaItem_Take take}, ${4:integer ccidx})",
		"description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events)."
	},
	"RPR_MIDI_EnumSelCC": {
		"prefix": "RPR_MIDI_EnumSelCC",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_MIDI_EnumSelCC(${3:MediaItem_Take take}, ${4:Int ccidx})",
		"description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events)."
	},
	"MIDI_EnumSelEvts": {
		"prefix": "MIDI_EnumSelEvts",
		"scope": "eel",
		"body": "${1:${2:int} = }MIDI_EnumSelEvts(${3:MediaItem_Take take}, ${4:int evtidx})",
		"description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events)."
	},
	"reaper.MIDI_EnumSelEvts": {
		"prefix": "reaper.MIDI_EnumSelEvts",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.MIDI_EnumSelEvts(${3:MediaItem_Take take}, ${4:integer evtidx})",
		"description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events)."
	},
	"RPR_MIDI_EnumSelEvts": {
		"prefix": "RPR_MIDI_EnumSelEvts",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_MIDI_EnumSelEvts(${3:MediaItem_Take take}, ${4:Int evtidx})",
		"description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events)."
	},
	"MIDI_EnumSelNotes": {
		"prefix": "MIDI_EnumSelNotes",
		"scope": "eel",
		"body": "${1:${2:int} = }MIDI_EnumSelNotes(${3:MediaItem_Take take}, ${4:int noteidx})",
		"description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events)."
	},
	"reaper.MIDI_EnumSelNotes": {
		"prefix": "reaper.MIDI_EnumSelNotes",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.MIDI_EnumSelNotes(${3:MediaItem_Take take}, ${4:integer noteidx})",
		"description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events)."
	},
	"RPR_MIDI_EnumSelNotes": {
		"prefix": "RPR_MIDI_EnumSelNotes",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_MIDI_EnumSelNotes(${3:MediaItem_Take take}, ${4:Int noteidx})",
		"description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events)."
	},
	"MIDI_EnumSelTextSysexEvts": {
		"prefix": "MIDI_EnumSelTextSysexEvts",
		"scope": "eel",
		"body": "${1:${2:int} = }MIDI_EnumSelTextSysexEvts(${3:MediaItem_Take take}, ${4:int textsyxidx})",
		"description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events)."
	},
	"reaper.MIDI_EnumSelTextSysexEvts": {
		"prefix": "reaper.MIDI_EnumSelTextSysexEvts",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.MIDI_EnumSelTextSysexEvts(${3:MediaItem_Take take}, ${4:integer textsyxidx})",
		"description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events)."
	},
	"RPR_MIDI_EnumSelTextSysexEvts": {
		"prefix": "RPR_MIDI_EnumSelTextSysexEvts",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_MIDI_EnumSelTextSysexEvts(${3:MediaItem_Take take}, ${4:Int textsyxidx})",
		"description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events)."
	},
	"MIDI_GetAllEvts": {
		"prefix": "MIDI_GetAllEvts",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_GetAllEvts(${3:MediaItem_Take take}, ${4:#buf})",
		"description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: +1=selected +2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_SetAllEvts."
	},
	"reaper.MIDI_GetAllEvts": {
		"prefix": "reaper.MIDI_GetAllEvts",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.MIDI_GetAllEvts(${4:MediaItem_Take take}, ${5:string buf})",
		"description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: +1=selected +2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_SetAllEvts."
	},
	"RPR_MIDI_GetAllEvts": {
		"prefix": "RPR_MIDI_GetAllEvts",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:String bufNeedBig}, ${5:Int bufNeedBig_sz} = }RPR_MIDI_GetAllEvts(${6:take}, ${7:bufNeedBig}, ${8:bufNeedBig_sz})",
		"description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: +1=selected +2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_SetAllEvts."
	},
	"MIDI_GetCC": {
		"prefix": "MIDI_GetCC",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_GetCC(${3:MediaItem_Take take}, ${4:int ccidx}, ${5:bool +selected}, ${6:bool +muted}, ${7:+ppqpos}, ${8:int +chanmsg}, ${9:int +chan}, ${10:int +msg2}, ${11:int +msg3})",
		"description": "Get MIDI CC event properties."
	},
	"reaper.MIDI_GetCC": {
		"prefix": "reaper.MIDI_GetCC",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:boolean selected}, ${4:boolean muted}, ${5:number ppqpos}, ${6:number chanmsg}, ${7:number chan}, ${8:number msg2}, ${9:number msg3} = }reaper.MIDI_GetCC(${10:MediaItem_Take take}, ${11:integer ccidx})",
		"description": "Get MIDI CC event properties."
	},
	"RPR_MIDI_GetCC": {
		"prefix": "RPR_MIDI_GetCC",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int ccidx}, ${5:Boolean selectedOut}, ${6:Boolean mutedOut}, ${7:Float ppqposOut}, ${8:Int chanmsgOut}, ${9:Int chanOut}, ${10:Int msg2Out}, ${11:Int msg3Out} = }RPR_MIDI_GetCC(${12:take}, ${13:ccidx}, ${14:selectedOut}, ${15:mutedOut}, ${16:ppqposOut}, ${17:chanmsgOut}, ${18:chanOut}, ${19:msg2Out}, ${20:msg3Out})",
		"description": "Get MIDI CC event properties."
	},
	"MIDI_GetEvt": {
		"prefix": "MIDI_GetEvt",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_GetEvt(${3:MediaItem_Take take}, ${4:int evtidx}, ${5:bool +selected}, ${6:bool +muted}, ${7:+ppqpos}, ${8:#msg})",
		"description": "Get MIDI event properties."
	},
	"reaper.MIDI_GetEvt": {
		"prefix": "reaper.MIDI_GetEvt",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:boolean selected}, ${4:boolean muted}, ${5:number ppqpos}, ${6:string msg} = }reaper.MIDI_GetEvt(${7:MediaItem_Take take}, ${8:integer evtidx}, ${9:boolean selected}, ${10:boolean muted}, ${11:number ppqpos}, ${12:string msg})",
		"description": "Get MIDI event properties."
	},
	"RPR_MIDI_GetEvt": {
		"prefix": "RPR_MIDI_GetEvt",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int evtidx}, ${5:Boolean selectedOut}, ${6:Boolean mutedOut}, ${7:Float ppqposOut}, ${8:String msg}, ${9:Int msg_sz} = }RPR_MIDI_GetEvt(${10:take}, ${11:evtidx}, ${12:selectedOut}, ${13:mutedOut}, ${14:ppqposOut}, ${15:msg}, ${16:msg_sz})",
		"description": "Get MIDI event properties."
	},
	"MIDI_GetGrid": {
		"prefix": "MIDI_GetGrid",
		"scope": "eel",
		"body": "${1:${2:double} = }MIDI_GetGrid(${3:MediaItem_Take take}, ${4:optional +swing}, ${5:optional +noteLen})",
		"description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size."
	},
	"reaper.MIDI_GetGrid": {
		"prefix": "reaper.MIDI_GetGrid",
		"scope": "lua",
		"body": "${1:${2:number retval}, ${3:optional number swing}, ${4:optional number noteLen} = }reaper.MIDI_GetGrid(${5:MediaItem_Take take})",
		"description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size."
	},
	"RPR_MIDI_GetGrid": {
		"prefix": "RPR_MIDI_GetGrid",
		"scope": "python",
		"body": "${1:${2:Float retval}, ${3:MediaItem_Take take}, ${4:Float swingOutOptional}, ${5:Float noteLenOutOptional} = }RPR_MIDI_GetGrid(${6:take}, ${7:swingOutOptional}, ${8:noteLenOutOptional})",
		"description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size."
	},
	"MIDI_GetHash": {
		"prefix": "MIDI_GetHash",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_GetHash(${3:MediaItem_Take take}, ${4:bool notesonly}, ${5:#hash})",
		"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash"
	},
	"reaper.MIDI_GetHash": {
		"prefix": "reaper.MIDI_GetHash",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string hash} = }reaper.MIDI_GetHash(${4:MediaItem_Take take}, ${5:boolean notesonly}, ${6:string hash})",
		"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash"
	},
	"RPR_MIDI_GetHash": {
		"prefix": "RPR_MIDI_GetHash",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Boolean notesonly}, ${5:String hash}, ${6:Int hash_sz} = }RPR_MIDI_GetHash(${7:take}, ${8:notesonly}, ${9:hash}, ${10:hash_sz})",
		"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash"
	},
	"MIDI_GetNote": {
		"prefix": "MIDI_GetNote",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_GetNote(${3:MediaItem_Take take}, ${4:int noteidx}, ${5:bool +selected}, ${6:bool +muted}, ${7:+startppqpos}, ${8:+endppqpos}, ${9:int +chan}, ${10:int +pitch}, ${11:int +vel})",
		"description": "Get MIDI note properties."
	},
	"reaper.MIDI_GetNote": {
		"prefix": "reaper.MIDI_GetNote",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:boolean selected}, ${4:boolean muted}, ${5:number startppqpos}, ${6:number endppqpos}, ${7:number chan}, ${8:number pitch}, ${9:number vel} = }reaper.MIDI_GetNote(${10:MediaItem_Take take}, ${11:integer noteidx})",
		"description": "Get MIDI note properties."
	},
	"RPR_MIDI_GetNote": {
		"prefix": "RPR_MIDI_GetNote",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int noteidx}, ${5:Boolean selectedOut}, ${6:Boolean mutedOut}, ${7:Float startppqposOut}, ${8:Float endppqposOut}, ${9:Int chanOut}, ${10:Int pitchOut}, ${11:Int velOut} = }RPR_MIDI_GetNote(${12:take}, ${13:noteidx}, ${14:selectedOut}, ${15:mutedOut}, ${16:startppqposOut}, ${17:endppqposOut}, ${18:chanOut}, ${19:pitchOut}, ${20:velOut})",
		"description": "Get MIDI note properties."
	},
	"MIDI_GetPPQPos_EndOfMeasure": {
		"prefix": "MIDI_GetPPQPos_EndOfMeasure",
		"scope": "eel",
		"body": "${1:${2:double} = }MIDI_GetPPQPos_EndOfMeasure(${3:MediaItem_Take take}, ${4:ppqpos})",
		"description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure."
	},
	"reaper.MIDI_GetPPQPos_EndOfMeasure": {
		"prefix": "reaper.MIDI_GetPPQPos_EndOfMeasure",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.MIDI_GetPPQPos_EndOfMeasure(${3:MediaItem_Take take}, ${4:number ppqpos})",
		"description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure."
	},
	"RPR_MIDI_GetPPQPos_EndOfMeasure": {
		"prefix": "RPR_MIDI_GetPPQPos_EndOfMeasure",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_MIDI_GetPPQPos_EndOfMeasure(${3:MediaItem_Take take}, ${4:Float ppqpos})",
		"description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure."
	},
	"MIDI_GetPPQPos_StartOfMeasure": {
		"prefix": "MIDI_GetPPQPos_StartOfMeasure",
		"scope": "eel",
		"body": "${1:${2:double} = }MIDI_GetPPQPos_StartOfMeasure(${3:MediaItem_Take take}, ${4:ppqpos})",
		"description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure."
	},
	"reaper.MIDI_GetPPQPos_StartOfMeasure": {
		"prefix": "reaper.MIDI_GetPPQPos_StartOfMeasure",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.MIDI_GetPPQPos_StartOfMeasure(${3:MediaItem_Take take}, ${4:number ppqpos})",
		"description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure."
	},
	"RPR_MIDI_GetPPQPos_StartOfMeasure": {
		"prefix": "RPR_MIDI_GetPPQPos_StartOfMeasure",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_MIDI_GetPPQPos_StartOfMeasure(${3:MediaItem_Take take}, ${4:Float ppqpos})",
		"description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure."
	},
	"MIDI_GetPPQPosFromProjQN": {
		"prefix": "MIDI_GetPPQPosFromProjQN",
		"scope": "eel",
		"body": "${1:${2:double} = }MIDI_GetPPQPosFromProjQN(${3:MediaItem_Take take}, ${4:projqn})",
		"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes."
	},
	"reaper.MIDI_GetPPQPosFromProjQN": {
		"prefix": "reaper.MIDI_GetPPQPosFromProjQN",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.MIDI_GetPPQPosFromProjQN(${3:MediaItem_Take take}, ${4:number projqn})",
		"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes."
	},
	"RPR_MIDI_GetPPQPosFromProjQN": {
		"prefix": "RPR_MIDI_GetPPQPosFromProjQN",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_MIDI_GetPPQPosFromProjQN(${3:MediaItem_Take take}, ${4:Float projqn})",
		"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes."
	},
	"MIDI_GetPPQPosFromProjTime": {
		"prefix": "MIDI_GetPPQPosFromProjTime",
		"scope": "eel",
		"body": "${1:${2:double} = }MIDI_GetPPQPosFromProjTime(${3:MediaItem_Take take}, ${4:projtime})",
		"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds."
	},
	"reaper.MIDI_GetPPQPosFromProjTime": {
		"prefix": "reaper.MIDI_GetPPQPosFromProjTime",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.MIDI_GetPPQPosFromProjTime(${3:MediaItem_Take take}, ${4:number projtime})",
		"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds."
	},
	"RPR_MIDI_GetPPQPosFromProjTime": {
		"prefix": "RPR_MIDI_GetPPQPosFromProjTime",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_MIDI_GetPPQPosFromProjTime(${3:MediaItem_Take take}, ${4:Float projtime})",
		"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds."
	},
	"MIDI_GetProjQNFromPPQPos": {
		"prefix": "MIDI_GetProjQNFromPPQPos",
		"scope": "eel",
		"body": "${1:${2:double} = }MIDI_GetProjQNFromPPQPos(${3:MediaItem_Take take}, ${4:ppqpos})",
		"description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position."
	},
	"reaper.MIDI_GetProjQNFromPPQPos": {
		"prefix": "reaper.MIDI_GetProjQNFromPPQPos",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.MIDI_GetProjQNFromPPQPos(${3:MediaItem_Take take}, ${4:number ppqpos})",
		"description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position."
	},
	"RPR_MIDI_GetProjQNFromPPQPos": {
		"prefix": "RPR_MIDI_GetProjQNFromPPQPos",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_MIDI_GetProjQNFromPPQPos(${3:MediaItem_Take take}, ${4:Float ppqpos})",
		"description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position."
	},
	"MIDI_GetProjTimeFromPPQPos": {
		"prefix": "MIDI_GetProjTimeFromPPQPos",
		"scope": "eel",
		"body": "${1:${2:double} = }MIDI_GetProjTimeFromPPQPos(${3:MediaItem_Take take}, ${4:ppqpos})",
		"description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position."
	},
	"reaper.MIDI_GetProjTimeFromPPQPos": {
		"prefix": "reaper.MIDI_GetProjTimeFromPPQPos",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.MIDI_GetProjTimeFromPPQPos(${3:MediaItem_Take take}, ${4:number ppqpos})",
		"description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position."
	},
	"RPR_MIDI_GetProjTimeFromPPQPos": {
		"prefix": "RPR_MIDI_GetProjTimeFromPPQPos",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_MIDI_GetProjTimeFromPPQPos(${3:MediaItem_Take take}, ${4:Float ppqpos})",
		"description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position."
	},
	"MIDI_GetScale": {
		"prefix": "MIDI_GetScale",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_GetScale(${3:MediaItem_Take take}, ${4:int +root}, ${5:int +scale}, ${6:#name})",
		"description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale +0x1=root, +0x2=minor 2nd, +0x4=major 2nd, +0x8=minor 3rd, +0xF=fourth, etc."
	},
	"reaper.MIDI_GetScale": {
		"prefix": "reaper.MIDI_GetScale",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number root}, ${4:number scale}, ${5:string name} = }reaper.MIDI_GetScale(${6:MediaItem_Take take}, ${7:number root}, ${8:number scale}, ${9:string name})",
		"description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale +0x1=root, +0x2=minor 2nd, +0x4=major 2nd, +0x8=minor 3rd, +0xF=fourth, etc."
	},
	"RPR_MIDI_GetScale": {
		"prefix": "RPR_MIDI_GetScale",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int rootOut}, ${5:Int scaleOut}, ${6:String name}, ${7:Int name_sz} = }RPR_MIDI_GetScale(${8:take}, ${9:rootOut}, ${10:scaleOut}, ${11:name}, ${12:name_sz})",
		"description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale +0x1=root, +0x2=minor 2nd, +0x4=major 2nd, +0x8=minor 3rd, +0xF=fourth, etc."
	},
	"MIDI_GetTextSysexEvt": {
		"prefix": "MIDI_GetTextSysexEvt",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_GetTextSysexEvt(${3:MediaItem_Take take}, ${4:int textsyxevtidx}, ${5:optional bool +selected}, ${6:optional bool +muted}, ${7:optional +ppqpos}, ${8:optional int +type}, ${9:optional #msg})",
		"description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types."
	},
	"reaper.MIDI_GetTextSysexEvt": {
		"prefix": "reaper.MIDI_GetTextSysexEvt",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:optional boolean selected}, ${4:optional boolean muted}, ${5:optional number ppqpos}, ${6:optional number type}, ${7:optional string msg} = }reaper.MIDI_GetTextSysexEvt(${8:MediaItem_Take take}, ${9:integer textsyxevtidx}, ${10:optional boolean selected}, ${11:optional boolean muted}, ${12:optional number ppqpos}, ${13:optional number type}, ${14:optional string msg})",
		"description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types."
	},
	"RPR_MIDI_GetTextSysexEvt": {
		"prefix": "RPR_MIDI_GetTextSysexEvt",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int textsyxevtidx}, ${5:Boolean selectedOutOptional}, ${6:Boolean mutedOutOptional}, ${7:Float ppqposOutOptional}, ${8:Int typeOutOptional}, ${9:String msgOptional}, ${10:Int msgOptional_sz} = }RPR_MIDI_GetTextSysexEvt(${11:take}, ${12:textsyxevtidx}, ${13:selectedOutOptional}, ${14:mutedOutOptional}, ${15:ppqposOutOptional}, ${16:typeOutOptional}, ${17:msgOptional}, ${18:msgOptional_sz})",
		"description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types."
	},
	"MIDI_GetTrackHash": {
		"prefix": "MIDI_GetTrackHash",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_GetTrackHash(${3:MediaTrack track}, ${4:bool notesonly}, ${5:#hash})",
		"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash"
	},
	"reaper.MIDI_GetTrackHash": {
		"prefix": "reaper.MIDI_GetTrackHash",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string hash} = }reaper.MIDI_GetTrackHash(${4:MediaTrack track}, ${5:boolean notesonly}, ${6:string hash})",
		"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash"
	},
	"RPR_MIDI_GetTrackHash": {
		"prefix": "RPR_MIDI_GetTrackHash",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Boolean notesonly}, ${5:String hash}, ${6:Int hash_sz} = }RPR_MIDI_GetTrackHash(${7:track}, ${8:notesonly}, ${9:hash}, ${10:hash_sz})",
		"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash"
	},
	"MIDI_InsertCC": {
		"prefix": "MIDI_InsertCC",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_InsertCC(${3:MediaItem_Take take}, ${4:bool selected}, ${5:bool muted}, ${6:ppqpos}, ${7:int chanmsg}, ${8:int chan}, ${9:int msg2}, ${10:int msg3})",
		"description": "Insert a new MIDI CC event."
	},
	"reaper.MIDI_InsertCC": {
		"prefix": "reaper.MIDI_InsertCC",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_InsertCC(${3:MediaItem_Take take}, ${4:boolean selected}, ${5:boolean muted}, ${6:number ppqpos}, ${7:integer chanmsg}, ${8:integer chan}, ${9:integer msg2}, ${10:integer msg3})",
		"description": "Insert a new MIDI CC event."
	},
	"RPR_MIDI_InsertCC": {
		"prefix": "RPR_MIDI_InsertCC",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_InsertCC(${3:MediaItem_Take take}, ${4:Boolean selected}, ${5:Boolean muted}, ${6:Float ppqpos}, ${7:Int chanmsg}, ${8:Int chan}, ${9:Int msg2}, ${10:Int msg3})",
		"description": "Insert a new MIDI CC event."
	},
	"MIDI_InsertEvt": {
		"prefix": "MIDI_InsertEvt",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_InsertEvt(${3:MediaItem_Take take}, ${4:bool selected}, ${5:bool muted}, ${6:ppqpos}, ${7:\"bytestr\"})",
		"description": "Insert a new MIDI event."
	},
	"reaper.MIDI_InsertEvt": {
		"prefix": "reaper.MIDI_InsertEvt",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_InsertEvt(${3:MediaItem_Take take}, ${4:boolean selected}, ${5:boolean muted}, ${6:number ppqpos}, ${7:string bytestr})",
		"description": "Insert a new MIDI event."
	},
	"RPR_MIDI_InsertEvt": {
		"prefix": "RPR_MIDI_InsertEvt",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_InsertEvt(${3:MediaItem_Take take}, ${4:Boolean selected}, ${5:Boolean muted}, ${6:Float ppqpos}, ${7:String bytestr}, ${8:Int bytestr_sz})",
		"description": "Insert a new MIDI event."
	},
	"MIDI_InsertNote": {
		"prefix": "MIDI_InsertNote",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_InsertNote(${3:MediaItem_Take take}, ${4:bool selected}, ${5:bool muted}, ${6:startppqpos}, ${7:endppqpos}, ${8:int chan}, ${9:int pitch}, ${10:int vel}, ${11:optional bool noSortIn})",
		"description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done."
	},
	"reaper.MIDI_InsertNote": {
		"prefix": "reaper.MIDI_InsertNote",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_InsertNote(${3:MediaItem_Take take}, ${4:boolean selected}, ${5:boolean muted}, ${6:number startppqpos}, ${7:number endppqpos}, ${8:integer chan}, ${9:integer pitch}, ${10:integer vel}, ${11:optional boolean noSortIn})",
		"description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done."
	},
	"RPR_MIDI_InsertNote": {
		"prefix": "RPR_MIDI_InsertNote",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_InsertNote(${3:MediaItem_Take take}, ${4:Boolean selected}, ${5:Boolean muted}, ${6:Float startppqpos}, ${7:Float endppqpos}, ${8:Int chan}, ${9:Int pitch}, ${10:Int vel}, ${11:const bool noSortInOptional})",
		"description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_InsertTextSysexEvt": {
		"prefix": "MIDI_InsertTextSysexEvt",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_InsertTextSysexEvt(${3:MediaItem_Take take}, ${4:bool selected}, ${5:bool muted}, ${6:ppqpos}, ${7:int type}, ${8:\"bytestr\"})",
		"description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types."
	},
	"reaper.MIDI_InsertTextSysexEvt": {
		"prefix": "reaper.MIDI_InsertTextSysexEvt",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_InsertTextSysexEvt(${3:MediaItem_Take take}, ${4:boolean selected}, ${5:boolean muted}, ${6:number ppqpos}, ${7:integer type}, ${8:string bytestr})",
		"description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types."
	},
	"RPR_MIDI_InsertTextSysexEvt": {
		"prefix": "RPR_MIDI_InsertTextSysexEvt",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_InsertTextSysexEvt(${3:MediaItem_Take take}, ${4:Boolean selected}, ${5:Boolean muted}, ${6:Float ppqpos}, ${7:Int type}, ${8:String bytestr}, ${9:Int bytestr_sz})",
		"description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types."
	},
	"midi_reinit": {
		"prefix": "midi_reinit",
		"scope": "eel",
		"body": "midi_reinit()",
		"description": "Reset all MIDI devices"
	},
	"reaper.midi_reinit": {
		"prefix": "reaper.midi_reinit",
		"scope": "lua",
		"body": "reaper.midi_reinit()",
		"description": "Reset all MIDI devices"
	},
	"RPR_midi_reinit": {
		"prefix": "RPR_midi_reinit",
		"scope": "python",
		"body": "RPR_midi_reinit()",
		"description": "Reset all MIDI devices"
	},
	"MIDI_SelectAll": {
		"prefix": "MIDI_SelectAll",
		"scope": "eel",
		"body": "MIDI_SelectAll(${1:MediaItem_Take take}, ${2:bool select})",
		"description": "Select or deselect all MIDI content."
	},
	"reaper.MIDI_SelectAll": {
		"prefix": "reaper.MIDI_SelectAll",
		"scope": "lua",
		"body": "reaper.MIDI_SelectAll(${1:MediaItem_Take take}, ${2:boolean select})",
		"description": "Select or deselect all MIDI content."
	},
	"RPR_MIDI_SelectAll": {
		"prefix": "RPR_MIDI_SelectAll",
		"scope": "python",
		"body": "RPR_MIDI_SelectAll(${1:MediaItem_Take take}, ${2:Boolean select})",
		"description": "Select or deselect all MIDI content."
	},
	"MIDI_SetAllEvts": {
		"prefix": "MIDI_SetAllEvts",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_SetAllEvts(${3:MediaItem_Take take}, ${4:\"buf\"})",
		"description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: +1=selected +2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_GetAllEvts."
	},
	"reaper.MIDI_SetAllEvts": {
		"prefix": "reaper.MIDI_SetAllEvts",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_SetAllEvts(${3:MediaItem_Take take}, ${4:string buf})",
		"description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: +1=selected +2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_GetAllEvts."
	},
	"RPR_MIDI_SetAllEvts": {
		"prefix": "RPR_MIDI_SetAllEvts",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_SetAllEvts(${3:MediaItem_Take take}, ${4:String buf}, ${5:Int buf_sz})",
		"description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: +1=selected +2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_GetAllEvts."
	},
	"MIDI_SetCC": {
		"prefix": "MIDI_SetCC",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_SetCC(${3:MediaItem_Take take}, ${4:int ccidx}, ${5:optional bool selectedIn}, ${6:optional bool mutedIn}, ${7:optional ppqposIn}, ${8:optional int chanmsgIn}, ${9:optional int chanIn}, ${10:optional int msg2In}, ${11:optional int msg3In}, ${12:optional bool noSortIn})",
		"description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"reaper.MIDI_SetCC": {
		"prefix": "reaper.MIDI_SetCC",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_SetCC(${3:MediaItem_Take take}, ${4:integer ccidx}, ${5:optional boolean selectedIn}, ${6:optional boolean mutedIn}, ${7:optional number ppqposIn}, ${8:optional number chanmsgIn}, ${9:optional number chanIn}, ${10:optional number msg2In}, ${11:optional number msg3In}, ${12:optional boolean noSortIn})",
		"description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"RPR_MIDI_SetCC": {
		"prefix": "RPR_MIDI_SetCC",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_SetCC(${3:MediaItem_Take take}, ${4:Int ccidx}, ${5:const bool selectedInOptional}, ${6:const bool mutedInOptional}, ${7:const double ppqposInOptional}, ${8:const int chanmsgInOptional}, ${9:const int chanInOptional}, ${10:const int msg2InOptional}, ${11:const int msg3InOptional}, ${12:const bool noSortInOptional})",
		"description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_SetEvt": {
		"prefix": "MIDI_SetEvt",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_SetEvt(${3:MediaItem_Take take}, ${4:int evtidx}, ${5:optional bool selectedIn}, ${6:optional bool mutedIn}, ${7:optional ppqposIn}, ${8:optional \"msg\"}, ${9:optional bool noSortIn})",
		"description": "Set MIDI event properties. Properties passed as NULL will not be set.  set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"reaper.MIDI_SetEvt": {
		"prefix": "reaper.MIDI_SetEvt",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_SetEvt(${3:MediaItem_Take take}, ${4:integer evtidx}, ${5:optional boolean selectedIn}, ${6:optional boolean mutedIn}, ${7:optional number ppqposIn}, ${8:optional string msg}, ${9:optional boolean noSortIn})",
		"description": "Set MIDI event properties. Properties passed as NULL will not be set.  set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"RPR_MIDI_SetEvt": {
		"prefix": "RPR_MIDI_SetEvt",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_SetEvt(${3:MediaItem_Take take}, ${4:Int evtidx}, ${5:const bool selectedInOptional}, ${6:const bool mutedInOptional}, ${7:const double ppqposInOptional}, ${8:String msgOptional}, ${9:Int msgOptional_sz}, ${10:const bool noSortInOptional})",
		"description": "Set MIDI event properties. Properties passed as NULL will not be set.  set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_SetItemExtents": {
		"prefix": "MIDI_SetItemExtents",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_SetItemExtents(${3:MediaItem item}, ${4:startQN}, ${5:endQN})",
		"description": "Set the start/end positions of a media item that contains a MIDI take."
	},
	"reaper.MIDI_SetItemExtents": {
		"prefix": "reaper.MIDI_SetItemExtents",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_SetItemExtents(${3:MediaItem item}, ${4:number startQN}, ${5:number endQN})",
		"description": "Set the start/end positions of a media item that contains a MIDI take."
	},
	"RPR_MIDI_SetItemExtents": {
		"prefix": "RPR_MIDI_SetItemExtents",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_SetItemExtents(${3:MediaItem item}, ${4:Float startQN}, ${5:Float endQN})",
		"description": "Set the start/end positions of a media item that contains a MIDI take."
	},
	"MIDI_SetNote": {
		"prefix": "MIDI_SetNote",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_SetNote(${3:MediaItem_Take take}, ${4:int noteidx}, ${5:optional bool selectedIn}, ${6:optional bool mutedIn}, ${7:optional startppqposIn}, ${8:optional endppqposIn}, ${9:optional int chanIn}, ${10:optional int pitchIn}, ${11:optional int velIn}, ${12:optional bool noSortIn})",
		"description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes."
	},
	"reaper.MIDI_SetNote": {
		"prefix": "reaper.MIDI_SetNote",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_SetNote(${3:MediaItem_Take take}, ${4:integer noteidx}, ${5:optional boolean selectedIn}, ${6:optional boolean mutedIn}, ${7:optional number startppqposIn}, ${8:optional number endppqposIn}, ${9:optional number chanIn}, ${10:optional number pitchIn}, ${11:optional number velIn}, ${12:optional boolean noSortIn})",
		"description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes."
	},
	"RPR_MIDI_SetNote": {
		"prefix": "RPR_MIDI_SetNote",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_SetNote(${3:MediaItem_Take take}, ${4:Int noteidx}, ${5:const bool selectedInOptional}, ${6:const bool mutedInOptional}, ${7:const double startppqposInOptional}, ${8:const double endppqposInOptional}, ${9:const int chanInOptional}, ${10:const int pitchInOptional}, ${11:const int velInOptional}, ${12:const bool noSortInOptional})",
		"description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes."
	},
	"MIDI_SetTextSysexEvt": {
		"prefix": "MIDI_SetTextSysexEvt",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDI_SetTextSysexEvt(${3:MediaItem_Take take}, ${4:int textsyxevtidx}, ${5:optional bool selectedIn}, ${6:optional bool mutedIn}, ${7:optional ppqposIn}, ${8:optional int typeIn}, ${9:optional \"msg\"}, ${10:optional bool noSortIn})",
		"description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types. set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"reaper.MIDI_SetTextSysexEvt": {
		"prefix": "reaper.MIDI_SetTextSysexEvt",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDI_SetTextSysexEvt(${3:MediaItem_Take take}, ${4:integer textsyxevtidx}, ${5:optional boolean selectedIn}, ${6:optional boolean mutedIn}, ${7:optional number ppqposIn}, ${8:optional number typeIn}, ${9:optional string msg}, ${10:optional boolean noSortIn})",
		"description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types. set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"RPR_MIDI_SetTextSysexEvt": {
		"prefix": "RPR_MIDI_SetTextSysexEvt",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDI_SetTextSysexEvt(${3:MediaItem_Take take}, ${4:Int textsyxevtidx}, ${5:const bool selectedInOptional}, ${6:const bool mutedInOptional}, ${7:const double ppqposInOptional}, ${8:const int typeInOptional}, ${9:String msgOptional}, ${10:Int msgOptional_sz}, ${11:const bool noSortInOptional})",
		"description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types. set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_Sort": {
		"prefix": "MIDI_Sort",
		"scope": "eel",
		"body": "MIDI_Sort(${1:MediaItem_Take take})",
		"description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc."
	},
	"reaper.MIDI_Sort": {
		"prefix": "reaper.MIDI_Sort",
		"scope": "lua",
		"body": "reaper.MIDI_Sort(${1:MediaItem_Take take})",
		"description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc."
	},
	"RPR_MIDI_Sort": {
		"prefix": "RPR_MIDI_Sort",
		"scope": "python",
		"body": "RPR_MIDI_Sort(${1:MediaItem_Take take})",
		"description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc."
	},
	"MIDIEditor_GetActive": {
		"prefix": "MIDIEditor_GetActive",
		"scope": "eel",
		"body": "${1:${2:HWND} = }MIDIEditor_GetActive()",
		"description": "get a pointer to the focused MIDI editor window\n\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand"
	},
	"reaper.MIDIEditor_GetActive": {
		"prefix": "reaper.MIDIEditor_GetActive",
		"scope": "lua",
		"body": "${1:${2:HWND} = }reaper.MIDIEditor_GetActive()",
		"description": "get a pointer to the focused MIDI editor window\n\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand"
	},
	"RPR_MIDIEditor_GetActive": {
		"prefix": "RPR_MIDIEditor_GetActive",
		"scope": "python",
		"body": "${1:${2:HWND} = }RPR_MIDIEditor_GetActive()",
		"description": "get a pointer to the focused MIDI editor window\n\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand"
	},
	"MIDIEditor_GetMode": {
		"prefix": "MIDIEditor_GetMode",
		"scope": "eel",
		"body": "${1:${2:int} = }MIDIEditor_GetMode(${3:HWND midieditor})",
		"description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\n\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand"
	},
	"reaper.MIDIEditor_GetMode": {
		"prefix": "reaper.MIDIEditor_GetMode",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.MIDIEditor_GetMode(${3:HWND midieditor})",
		"description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\n\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand"
	},
	"RPR_MIDIEditor_GetMode": {
		"prefix": "RPR_MIDIEditor_GetMode",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_MIDIEditor_GetMode(${3:HWND midieditor})",
		"description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\n\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand"
	},
	"MIDIEditor_GetSetting_int": {
		"prefix": "MIDIEditor_GetSetting_int",
		"scope": "eel",
		"body": "${1:${2:int} = }MIDIEditor_GetSetting_int(${3:HWND midieditor}, ${4:\"setting_desc\"})",
		"description": "Get settings from a MIDI editor. setting_desc can be:\n\nsnap_enabled: returns 0 or 1\n\nactive_note_row: returns 0-127\n\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media item lane\n\ndefault_note_vel: returns 0-127\n\ndefault_note_chan: returns 0-15\n\ndefault_note_len: returns default length in MIDI ticks\n\nscale_enabled: returns 0-1\n\nscale_root: returns 0-12 (0=C)\n\nif setting_desc is unsupported, the function returns -1.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_str"
	},
	"reaper.MIDIEditor_GetSetting_int": {
		"prefix": "reaper.MIDIEditor_GetSetting_int",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.MIDIEditor_GetSetting_int(${3:HWND midieditor}, ${4:string setting_desc})",
		"description": "Get settings from a MIDI editor. setting_desc can be:\n\nsnap_enabled: returns 0 or 1\n\nactive_note_row: returns 0-127\n\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media item lane\n\ndefault_note_vel: returns 0-127\n\ndefault_note_chan: returns 0-15\n\ndefault_note_len: returns default length in MIDI ticks\n\nscale_enabled: returns 0-1\n\nscale_root: returns 0-12 (0=C)\n\nif setting_desc is unsupported, the function returns -1.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_str"
	},
	"RPR_MIDIEditor_GetSetting_int": {
		"prefix": "RPR_MIDIEditor_GetSetting_int",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_MIDIEditor_GetSetting_int(${3:HWND midieditor}, ${4:String setting_desc})",
		"description": "Get settings from a MIDI editor. setting_desc can be:\n\nsnap_enabled: returns 0 or 1\n\nactive_note_row: returns 0-127\n\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media item lane\n\ndefault_note_vel: returns 0-127\n\ndefault_note_chan: returns 0-15\n\ndefault_note_len: returns default length in MIDI ticks\n\nscale_enabled: returns 0-1\n\nscale_root: returns 0-12 (0=C)\n\nif setting_desc is unsupported, the function returns -1.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_str"
	},
	"MIDIEditor_GetSetting_str": {
		"prefix": "MIDIEditor_GetSetting_str",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDIEditor_GetSetting_str(${3:HWND midieditor}, ${4:\"setting_desc\"}, ${5:#buf})",
		"description": "Get settings from a MIDI editor. setting_desc can be:\n\nlast_clicked_cc_lane: returns text description (\"velocity\", \"pitch\", etc)\n\nscale: returns the scale record, for example \"102034050607\" for a major scale\n\nif setting_desc is unsupported, the function returns false.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int"
	},
	"reaper.MIDIEditor_GetSetting_str": {
		"prefix": "reaper.MIDIEditor_GetSetting_str",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.MIDIEditor_GetSetting_str(${4:HWND midieditor}, ${5:string setting_desc}, ${6:string buf})",
		"description": "Get settings from a MIDI editor. setting_desc can be:\n\nlast_clicked_cc_lane: returns text description (\"velocity\", \"pitch\", etc)\n\nscale: returns the scale record, for example \"102034050607\" for a major scale\n\nif setting_desc is unsupported, the function returns false.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int"
	},
	"RPR_MIDIEditor_GetSetting_str": {
		"prefix": "RPR_MIDIEditor_GetSetting_str",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:HWND midieditor}, ${4:String setting_desc}, ${5:String buf}, ${6:Int buf_sz} = }RPR_MIDIEditor_GetSetting_str(${7:midieditor}, ${8:setting_desc}, ${9:buf}, ${10:buf_sz})",
		"description": "Get settings from a MIDI editor. setting_desc can be:\n\nlast_clicked_cc_lane: returns text description (\"velocity\", \"pitch\", etc)\n\nscale: returns the scale record, for example \"102034050607\" for a major scale\n\nif setting_desc is unsupported, the function returns false.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int"
	},
	"MIDIEditor_GetTake": {
		"prefix": "MIDIEditor_GetTake",
		"scope": "eel",
		"body": "${1:${2:MediaItem_Take} = }MIDIEditor_GetTake(${3:HWND midieditor})",
		"description": "get the take that is currently being edited in this MIDI editor"
	},
	"reaper.MIDIEditor_GetTake": {
		"prefix": "reaper.MIDIEditor_GetTake",
		"scope": "lua",
		"body": "${1:${2:MediaItem_Take} = }reaper.MIDIEditor_GetTake(${3:HWND midieditor})",
		"description": "get the take that is currently being edited in this MIDI editor"
	},
	"RPR_MIDIEditor_GetTake": {
		"prefix": "RPR_MIDIEditor_GetTake",
		"scope": "python",
		"body": "${1:${2:MediaItem_Take} = }RPR_MIDIEditor_GetTake(${3:HWND midieditor})",
		"description": "get the take that is currently being edited in this MIDI editor"
	},
	"MIDIEditor_LastFocused_OnCommand": {
		"prefix": "MIDIEditor_LastFocused_OnCommand",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDIEditor_LastFocused_OnCommand(${3:int command_id}, ${4:bool islistviewcommand})",
		"description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\n\nsee MIDIEditor_OnCommand"
	},
	"reaper.MIDIEditor_LastFocused_OnCommand": {
		"prefix": "reaper.MIDIEditor_LastFocused_OnCommand",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDIEditor_LastFocused_OnCommand(${3:integer command_id}, ${4:boolean islistviewcommand})",
		"description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\n\nsee MIDIEditor_OnCommand"
	},
	"RPR_MIDIEditor_LastFocused_OnCommand": {
		"prefix": "RPR_MIDIEditor_LastFocused_OnCommand",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDIEditor_LastFocused_OnCommand(${3:Int command_id}, ${4:Boolean islistviewcommand})",
		"description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\n\nsee MIDIEditor_OnCommand"
	},
	"MIDIEditor_OnCommand": {
		"prefix": "MIDIEditor_OnCommand",
		"scope": "eel",
		"body": "${1:${2:bool} = }MIDIEditor_OnCommand(${3:HWND midieditor}, ${4:int command_id})",
		"description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\n\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand"
	},
	"reaper.MIDIEditor_OnCommand": {
		"prefix": "reaper.MIDIEditor_OnCommand",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MIDIEditor_OnCommand(${3:HWND midieditor}, ${4:integer command_id})",
		"description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\n\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand"
	},
	"RPR_MIDIEditor_OnCommand": {
		"prefix": "RPR_MIDIEditor_OnCommand",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MIDIEditor_OnCommand(${3:HWND midieditor}, ${4:Int command_id})",
		"description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\n\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand"
	},
	"mkpanstr": {
		"prefix": "mkpanstr",
		"scope": "eel",
		"body": "mkpanstr(${1:#strNeed64}, ${2:pan})",
		"description": ""
	},
	"reaper.mkpanstr": {
		"prefix": "reaper.mkpanstr",
		"scope": "lua",
		"body": "${1:${2:string strNeed64} = }reaper.mkpanstr(${3:string strNeed64}, ${4:number pan})",
		"description": ""
	},
	"RPR_mkpanstr": {
		"prefix": "RPR_mkpanstr",
		"scope": "python",
		"body": "${1:${2:String strNeed64}, ${3:Float pan} = }RPR_mkpanstr(${4:strNeed64}, ${5:pan})",
		"description": ""
	},
	"mkvolpanstr": {
		"prefix": "mkvolpanstr",
		"scope": "eel",
		"body": "mkvolpanstr(${1:#strNeed64}, ${2:vol}, ${3:pan})",
		"description": ""
	},
	"reaper.mkvolpanstr": {
		"prefix": "reaper.mkvolpanstr",
		"scope": "lua",
		"body": "${1:${2:string strNeed64} = }reaper.mkvolpanstr(${3:string strNeed64}, ${4:number vol}, ${5:number pan})",
		"description": ""
	},
	"RPR_mkvolpanstr": {
		"prefix": "RPR_mkvolpanstr",
		"scope": "python",
		"body": "${1:${2:String strNeed64}, ${3:Float vol}, ${4:Float pan} = }RPR_mkvolpanstr(${5:strNeed64}, ${6:vol}, ${7:pan})",
		"description": ""
	},
	"mkvolstr": {
		"prefix": "mkvolstr",
		"scope": "eel",
		"body": "mkvolstr(${1:#strNeed64}, ${2:vol})",
		"description": ""
	},
	"reaper.mkvolstr": {
		"prefix": "reaper.mkvolstr",
		"scope": "lua",
		"body": "${1:${2:string strNeed64} = }reaper.mkvolstr(${3:string strNeed64}, ${4:number vol})",
		"description": ""
	},
	"RPR_mkvolstr": {
		"prefix": "RPR_mkvolstr",
		"scope": "python",
		"body": "${1:${2:String strNeed64}, ${3:Float vol} = }RPR_mkvolstr(${4:strNeed64}, ${5:vol})",
		"description": ""
	},
	"MoveEditCursor": {
		"prefix": "MoveEditCursor",
		"scope": "eel",
		"body": "MoveEditCursor(${1:adjamt}, ${2:bool dosel})",
		"description": ""
	},
	"reaper.MoveEditCursor": {
		"prefix": "reaper.MoveEditCursor",
		"scope": "lua",
		"body": "reaper.MoveEditCursor(${1:number adjamt}, ${2:boolean dosel})",
		"description": ""
	},
	"RPR_MoveEditCursor": {
		"prefix": "RPR_MoveEditCursor",
		"scope": "python",
		"body": "RPR_MoveEditCursor(${1:Float adjamt}, ${2:Boolean dosel})",
		"description": ""
	},
	"MoveMediaItemToTrack": {
		"prefix": "MoveMediaItemToTrack",
		"scope": "eel",
		"body": "${1:${2:bool} = }MoveMediaItemToTrack(${3:MediaItem item}, ${4:MediaTrack desttr})",
		"description": "returns TRUE if move succeeded"
	},
	"reaper.MoveMediaItemToTrack": {
		"prefix": "reaper.MoveMediaItemToTrack",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.MoveMediaItemToTrack(${3:MediaItem item}, ${4:MediaTrack desttr})",
		"description": "returns TRUE if move succeeded"
	},
	"RPR_MoveMediaItemToTrack": {
		"prefix": "RPR_MoveMediaItemToTrack",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_MoveMediaItemToTrack(${3:MediaItem item}, ${4:MediaTrack desttr})",
		"description": "returns TRUE if move succeeded"
	},
	"MuteAllTracks": {
		"prefix": "MuteAllTracks",
		"scope": "eel",
		"body": "MuteAllTracks(${1:bool mute})",
		"description": ""
	},
	"reaper.MuteAllTracks": {
		"prefix": "reaper.MuteAllTracks",
		"scope": "lua",
		"body": "reaper.MuteAllTracks(${1:boolean mute})",
		"description": ""
	},
	"RPR_MuteAllTracks": {
		"prefix": "RPR_MuteAllTracks",
		"scope": "python",
		"body": "RPR_MuteAllTracks(${1:Boolean mute})",
		"description": ""
	},
	"my_getViewport": {
		"prefix": "my_getViewport",
		"scope": "eel",
		"body": "my_getViewport(${1:int &r.left}, ${2:int &r.top}, ${3:int &r.right}, ${4:int &r.bot}, ${5:int sr.left}, ${6:int sr.top}, ${7:int sr.right}, ${8:int sr.bot}, ${9:bool wantWorkArea})",
		"description": ""
	},
	"reaper.my_getViewport": {
		"prefix": "reaper.my_getViewport",
		"scope": "lua",
		"body": "reaper.my_getViewport(${1:numberr.left}, ${2:numberr.top}, ${3:numberr.right}, ${4:numberr.bot}, ${5:number sr.left}, ${6:number sr.top}, ${7:number sr.right}, ${8:number sr.bot}, ${9:boolean wantWorkArea})",
		"description": ""
	},
	"RPR_my_getViewport": {
		"prefix": "RPR_my_getViewport",
		"scope": "python",
		"body": "RPR_my_getViewport(${1:RECT r}, ${2:const RECT sr}, ${3:Boolean wantWorkArea})",
		"description": ""
	},
	"NamedCommandLookup": {
		"prefix": "NamedCommandLookup",
		"scope": "eel",
		"body": "${1:${2:int} = }NamedCommandLookup(${3:\"command_name\"})",
		"description": "Get the command ID number for named command that was registered by an extension such as \"_SWS_ABOUT\" or \"_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a custom action."
	},
	"reaper.NamedCommandLookup": {
		"prefix": "reaper.NamedCommandLookup",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.NamedCommandLookup(${3:string command_name})",
		"description": "Get the command ID number for named command that was registered by an extension such as \"_SWS_ABOUT\" or \"_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a custom action."
	},
	"RPR_NamedCommandLookup": {
		"prefix": "RPR_NamedCommandLookup",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_NamedCommandLookup(${3:String command_name})",
		"description": "Get the command ID number for named command that was registered by an extension such as \"_SWS_ABOUT\" or \"_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a custom action."
	},
	"OnPauseButton": {
		"prefix": "OnPauseButton",
		"scope": "eel",
		"body": "OnPauseButton()",
		"description": "direct way to simulate pause button hit"
	},
	"reaper.OnPauseButton": {
		"prefix": "reaper.OnPauseButton",
		"scope": "lua",
		"body": "reaper.OnPauseButton()",
		"description": "direct way to simulate pause button hit"
	},
	"RPR_OnPauseButton": {
		"prefix": "RPR_OnPauseButton",
		"scope": "python",
		"body": "RPR_OnPauseButton()",
		"description": "direct way to simulate pause button hit"
	},
	"OnPauseButtonEx": {
		"prefix": "OnPauseButtonEx",
		"scope": "eel",
		"body": "OnPauseButtonEx(${1:ReaProject proj})",
		"description": "direct way to simulate pause button hit"
	},
	"reaper.OnPauseButtonEx": {
		"prefix": "reaper.OnPauseButtonEx",
		"scope": "lua",
		"body": "reaper.OnPauseButtonEx(${1:ReaProject proj})",
		"description": "direct way to simulate pause button hit"
	},
	"RPR_OnPauseButtonEx": {
		"prefix": "RPR_OnPauseButtonEx",
		"scope": "python",
		"body": "RPR_OnPauseButtonEx(${1:ReaProject proj})",
		"description": "direct way to simulate pause button hit"
	},
	"OnPlayButton": {
		"prefix": "OnPlayButton",
		"scope": "eel",
		"body": "OnPlayButton()",
		"description": "direct way to simulate play button hit"
	},
	"reaper.OnPlayButton": {
		"prefix": "reaper.OnPlayButton",
		"scope": "lua",
		"body": "reaper.OnPlayButton()",
		"description": "direct way to simulate play button hit"
	},
	"RPR_OnPlayButton": {
		"prefix": "RPR_OnPlayButton",
		"scope": "python",
		"body": "RPR_OnPlayButton()",
		"description": "direct way to simulate play button hit"
	},
	"OnPlayButtonEx": {
		"prefix": "OnPlayButtonEx",
		"scope": "eel",
		"body": "OnPlayButtonEx(${1:ReaProject proj})",
		"description": "direct way to simulate play button hit"
	},
	"reaper.OnPlayButtonEx": {
		"prefix": "reaper.OnPlayButtonEx",
		"scope": "lua",
		"body": "reaper.OnPlayButtonEx(${1:ReaProject proj})",
		"description": "direct way to simulate play button hit"
	},
	"RPR_OnPlayButtonEx": {
		"prefix": "RPR_OnPlayButtonEx",
		"scope": "python",
		"body": "RPR_OnPlayButtonEx(${1:ReaProject proj})",
		"description": "direct way to simulate play button hit"
	},
	"OnStopButton": {
		"prefix": "OnStopButton",
		"scope": "eel",
		"body": "OnStopButton()",
		"description": "direct way to simulate stop button hit"
	},
	"reaper.OnStopButton": {
		"prefix": "reaper.OnStopButton",
		"scope": "lua",
		"body": "reaper.OnStopButton()",
		"description": "direct way to simulate stop button hit"
	},
	"RPR_OnStopButton": {
		"prefix": "RPR_OnStopButton",
		"scope": "python",
		"body": "RPR_OnStopButton()",
		"description": "direct way to simulate stop button hit"
	},
	"OnStopButtonEx": {
		"prefix": "OnStopButtonEx",
		"scope": "eel",
		"body": "OnStopButtonEx(${1:ReaProject proj})",
		"description": "direct way to simulate stop button hit"
	},
	"reaper.OnStopButtonEx": {
		"prefix": "reaper.OnStopButtonEx",
		"scope": "lua",
		"body": "reaper.OnStopButtonEx(${1:ReaProject proj})",
		"description": "direct way to simulate stop button hit"
	},
	"RPR_OnStopButtonEx": {
		"prefix": "RPR_OnStopButtonEx",
		"scope": "python",
		"body": "RPR_OnStopButtonEx(${1:ReaProject proj})",
		"description": "direct way to simulate stop button hit"
	},
	"OpenColorThemeFile": {
		"prefix": "OpenColorThemeFile",
		"scope": "eel",
		"body": "${1:${2:bool} = }OpenColorThemeFile(${3:\"fn\"})",
		"description": ""
	},
	"reaper.OpenColorThemeFile": {
		"prefix": "reaper.OpenColorThemeFile",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.OpenColorThemeFile(${3:string fn})",
		"description": ""
	},
	"RPR_OpenColorThemeFile": {
		"prefix": "RPR_OpenColorThemeFile",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_OpenColorThemeFile(${3:String fn})",
		"description": ""
	},
	"OpenMediaExplorer": {
		"prefix": "OpenMediaExplorer",
		"scope": "eel",
		"body": "${1:${2:HWND} = }OpenMediaExplorer(${3:\"mediafn\"}, ${4:bool play})",
		"description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it."
	},
	"reaper.OpenMediaExplorer": {
		"prefix": "reaper.OpenMediaExplorer",
		"scope": "lua",
		"body": "${1:${2:HWND} = }reaper.OpenMediaExplorer(${3:string mediafn}, ${4:boolean play})",
		"description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it."
	},
	"RPR_OpenMediaExplorer": {
		"prefix": "RPR_OpenMediaExplorer",
		"scope": "python",
		"body": "${1:${2:HWND} = }RPR_OpenMediaExplorer(${3:String mediafn}, ${4:Boolean play})",
		"description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it."
	},
	"OscLocalMessageToHost": {
		"prefix": "OscLocalMessageToHost",
		"scope": "eel",
		"body": "OscLocalMessageToHost(${1:\"message\"}, ${2:optional valueIn})",
		"description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns. Only supported if control surface support was enabled when installing REAPER."
	},
	"reaper.OscLocalMessageToHost": {
		"prefix": "reaper.OscLocalMessageToHost",
		"scope": "lua",
		"body": "reaper.OscLocalMessageToHost(${1:string message}, ${2:optional number valueIn})",
		"description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns. Only supported if control surface support was enabled when installing REAPER."
	},
	"RPR_OscLocalMessageToHost": {
		"prefix": "RPR_OscLocalMessageToHost",
		"scope": "python",
		"body": "RPR_OscLocalMessageToHost(${1:String message}, ${2:const double valueInOptional})",
		"description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns. Only supported if control surface support was enabled when installing REAPER."
	},
	"parse_timestr": {
		"prefix": "parse_timestr",
		"scope": "eel",
		"body": "${1:${2:double} = }parse_timestr(${3:\"buf\"})",
		"description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len."
	},
	"reaper.parse_timestr": {
		"prefix": "reaper.parse_timestr",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.parse_timestr(${3:string buf})",
		"description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len."
	},
	"RPR_parse_timestr": {
		"prefix": "RPR_parse_timestr",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_parse_timestr(${3:String buf})",
		"description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len."
	},
	"parse_timestr_len": {
		"prefix": "parse_timestr_len",
		"scope": "eel",
		"body": "${1:${2:double} = }parse_timestr_len(${3:\"buf\"}, ${4:offset}, ${5:int modeoverride})",
		"description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f"
	},
	"reaper.parse_timestr_len": {
		"prefix": "reaper.parse_timestr_len",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.parse_timestr_len(${3:string buf}, ${4:number offset}, ${5:integer modeoverride})",
		"description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f"
	},
	"RPR_parse_timestr_len": {
		"prefix": "RPR_parse_timestr_len",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_parse_timestr_len(${3:String buf}, ${4:Float offset}, ${5:Int modeoverride})",
		"description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f"
	},
	"parse_timestr_pos": {
		"prefix": "parse_timestr_pos",
		"scope": "eel",
		"body": "${1:${2:double} = }parse_timestr_pos(${3:\"buf\"}, ${4:int modeoverride})",
		"description": "Parse time string, time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f"
	},
	"reaper.parse_timestr_pos": {
		"prefix": "reaper.parse_timestr_pos",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.parse_timestr_pos(${3:string buf}, ${4:integer modeoverride})",
		"description": "Parse time string, time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f"
	},
	"RPR_parse_timestr_pos": {
		"prefix": "RPR_parse_timestr_pos",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_parse_timestr_pos(${3:String buf}, ${4:Int modeoverride})",
		"description": "Parse time string, time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f"
	},
	"parsepanstr": {
		"prefix": "parsepanstr",
		"scope": "eel",
		"body": "${1:${2:double} = }parsepanstr(${3:\"str\"})",
		"description": ""
	},
	"reaper.parsepanstr": {
		"prefix": "reaper.parsepanstr",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.parsepanstr(${3:string str})",
		"description": ""
	},
	"RPR_parsepanstr": {
		"prefix": "RPR_parsepanstr",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_parsepanstr(${3:String str})",
		"description": ""
	},
	"PCM_Sink_Enum": {
		"prefix": "PCM_Sink_Enum",
		"scope": "eel",
		"body": "${1:${2:uint} = }PCM_Sink_Enum(${3:int idx}, ${4:#descstr})",
		"description": ""
	},
	"reaper.PCM_Sink_Enum": {
		"prefix": "reaper.PCM_Sink_Enum",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:string descstr} = }reaper.PCM_Sink_Enum(${4:integer idx})",
		"description": ""
	},
	"RPR_PCM_Sink_Enum": {
		"prefix": "RPR_PCM_Sink_Enum",
		"scope": "python",
		"body": "${1:${2:Unknown} = }RPR_PCM_Sink_Enum(${3:Int idx}, ${4:String descstrOut})",
		"description": ""
	},
	"PCM_Sink_GetExtension": {
		"prefix": "PCM_Sink_GetExtension",
		"scope": "eel",
		"body": "${1:${2:bool} = }PCM_Sink_GetExtension(${3:#retval}, ${4:\"data\"})",
		"description": ""
	},
	"reaper.PCM_Sink_GetExtension": {
		"prefix": "reaper.PCM_Sink_GetExtension",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.PCM_Sink_GetExtension(${3:string data})",
		"description": ""
	},
	"RPR_PCM_Sink_GetExtension": {
		"prefix": "RPR_PCM_Sink_GetExtension",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_PCM_Sink_GetExtension(${3:String data}, ${4:Int data_sz})",
		"description": ""
	},
	"PCM_Sink_ShowConfig": {
		"prefix": "PCM_Sink_ShowConfig",
		"scope": "eel",
		"body": "${1:${2:HWND} = }PCM_Sink_ShowConfig(${3:\"cfg\"}, ${4:HWND hwndParent})",
		"description": ""
	},
	"reaper.PCM_Sink_ShowConfig": {
		"prefix": "reaper.PCM_Sink_ShowConfig",
		"scope": "lua",
		"body": "${1:${2:HWND} = }reaper.PCM_Sink_ShowConfig(${3:string cfg}, ${4:HWND hwndParent})",
		"description": ""
	},
	"RPR_PCM_Sink_ShowConfig": {
		"prefix": "RPR_PCM_Sink_ShowConfig",
		"scope": "python",
		"body": "${1:${2:HWND} = }RPR_PCM_Sink_ShowConfig(${3:String cfg}, ${4:Int cfg_sz}, ${5:HWND hwndParent})",
		"description": ""
	},
	"PCM_Source_CreateFromFile": {
		"prefix": "PCM_Source_CreateFromFile",
		"scope": "eel",
		"body": "${1:${2:PCM_source} = }PCM_Source_CreateFromFile(${3:\"filename\"})",
		"description": "See PCM_Source_CreateFromFileEx."
	},
	"reaper.PCM_Source_CreateFromFile": {
		"prefix": "reaper.PCM_Source_CreateFromFile",
		"scope": "lua",
		"body": "${1:${2:PCM_source} = }reaper.PCM_Source_CreateFromFile(${3:string filename})",
		"description": "See PCM_Source_CreateFromFileEx."
	},
	"RPR_PCM_Source_CreateFromFile": {
		"prefix": "RPR_PCM_Source_CreateFromFile",
		"scope": "python",
		"body": "${1:${2:PCM_source} = }RPR_PCM_Source_CreateFromFile(${3:String filename})",
		"description": "See PCM_Source_CreateFromFileEx."
	},
	"PCM_Source_CreateFromFileEx": {
		"prefix": "PCM_Source_CreateFromFileEx",
		"scope": "eel",
		"body": "${1:${2:PCM_source} = }PCM_Source_CreateFromFileEx(${3:\"filename\"}, ${4:bool forcenoMidiImp})",
		"description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events."
	},
	"reaper.PCM_Source_CreateFromFileEx": {
		"prefix": "reaper.PCM_Source_CreateFromFileEx",
		"scope": "lua",
		"body": "${1:${2:PCM_source} = }reaper.PCM_Source_CreateFromFileEx(${3:string filename}, ${4:boolean forcenoMidiImp})",
		"description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events."
	},
	"RPR_PCM_Source_CreateFromFileEx": {
		"prefix": "RPR_PCM_Source_CreateFromFileEx",
		"scope": "python",
		"body": "${1:${2:PCM_source} = }RPR_PCM_Source_CreateFromFileEx(${3:String filename}, ${4:Boolean forcenoMidiImp})",
		"description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events."
	},
	"PCM_Source_CreateFromType": {
		"prefix": "PCM_Source_CreateFromType",
		"scope": "eel",
		"body": "${1:${2:PCM_source} = }PCM_Source_CreateFromType(${3:\"sourcetype\"})",
		"description": "Create a PCM_source from a \"type\" (use this if you're going to load its state via LoadState/ProjectStateContext).\n\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well."
	},
	"reaper.PCM_Source_CreateFromType": {
		"prefix": "reaper.PCM_Source_CreateFromType",
		"scope": "lua",
		"body": "${1:${2:PCM_source} = }reaper.PCM_Source_CreateFromType(${3:string sourcetype})",
		"description": "Create a PCM_source from a \"type\" (use this if you're going to load its state via LoadState/ProjectStateContext).\n\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well."
	},
	"RPR_PCM_Source_CreateFromType": {
		"prefix": "RPR_PCM_Source_CreateFromType",
		"scope": "python",
		"body": "${1:${2:PCM_source} = }RPR_PCM_Source_CreateFromType(${3:String sourcetype})",
		"description": "Create a PCM_source from a \"type\" (use this if you're going to load its state via LoadState/ProjectStateContext).\n\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well."
	},
	"PCM_Source_Destroy": {
		"prefix": "PCM_Source_Destroy",
		"scope": "eel",
		"body": "PCM_Source_Destroy(${1:PCM_source src})",
		"description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source"
	},
	"reaper.PCM_Source_Destroy": {
		"prefix": "reaper.PCM_Source_Destroy",
		"scope": "lua",
		"body": "reaper.PCM_Source_Destroy(${1:PCM_source src})",
		"description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source"
	},
	"RPR_PCM_Source_Destroy": {
		"prefix": "RPR_PCM_Source_Destroy",
		"scope": "python",
		"body": "RPR_PCM_Source_Destroy(${1:PCM_source src})",
		"description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source"
	},
	"PCM_Source_GetPeaks": {
		"prefix": "PCM_Source_GetPeaks",
		"scope": "eel",
		"body": "${1:${2:int} = }PCM_Source_GetPeaks(${3:PCM_source src}, ${4:peakrate}, ${5:starttime}, ${6:int numchannels}, ${7:int numsamplesperchannel}, ${8:int want_extra_type}, ${9:buffer_ptr buf})",
		"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
	},
	"reaper.PCM_Source_GetPeaks": {
		"prefix": "reaper.PCM_Source_GetPeaks",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.PCM_Source_GetPeaks(${3:PCM_source src}, ${4:number peakrate}, ${5:number starttime}, ${6:integer numchannels}, ${7:integer numsamplesperchannel}, ${8:integer want_extra_type}, ${9:reaper.array buf})",
		"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
	},
	"RPR_PCM_Source_GetPeaks": {
		"prefix": "RPR_PCM_Source_GetPeaks",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:PCM_source src}, ${4:Float peakrate}, ${5:Float starttime}, ${6:Int numchannels}, ${7:Int numsamplesperchannel}, ${8:Int want_extra_type}, ${9:Float buf} = }RPR_PCM_Source_GetPeaks(${10:src}, ${11:peakrate}, ${12:starttime}, ${13:numchannels}, ${14:numsamplesperchannel}, ${15:want_extra_type}, ${16:buf})",
		"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
	},
	"PCM_Source_GetSectionInfo": {
		"prefix": "PCM_Source_GetSectionInfo",
		"scope": "eel",
		"body": "${1:${2:bool} = }PCM_Source_GetSectionInfo(${3:PCM_source src}, ${4:+offs}, ${5:+len}, ${6:bool +rev})",
		"description": "If a section/reverse block, retrieves offset/len/reverse. return true if success"
	},
	"reaper.PCM_Source_GetSectionInfo": {
		"prefix": "reaper.PCM_Source_GetSectionInfo",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number offs}, ${4:number len}, ${5:boolean rev} = }reaper.PCM_Source_GetSectionInfo(${6:PCM_source src})",
		"description": "If a section/reverse block, retrieves offset/len/reverse. return true if success"
	},
	"RPR_PCM_Source_GetSectionInfo": {
		"prefix": "RPR_PCM_Source_GetSectionInfo",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:PCM_source src}, ${4:Float offsOut}, ${5:Float lenOut}, ${6:Boolean revOut} = }RPR_PCM_Source_GetSectionInfo(${7:src}, ${8:offsOut}, ${9:lenOut}, ${10:revOut})",
		"description": "If a section/reverse block, retrieves offset/len/reverse. return true if success"
	},
	"PluginWantsAlwaysRunFx": {
		"prefix": "PluginWantsAlwaysRunFx",
		"scope": "eel",
		"body": "PluginWantsAlwaysRunFx(${1:int amt})",
		"description": ""
	},
	"reaper.PluginWantsAlwaysRunFx": {
		"prefix": "reaper.PluginWantsAlwaysRunFx",
		"scope": "lua",
		"body": "reaper.PluginWantsAlwaysRunFx(${1:integer amt})",
		"description": ""
	},
	"RPR_PluginWantsAlwaysRunFx": {
		"prefix": "RPR_PluginWantsAlwaysRunFx",
		"scope": "python",
		"body": "RPR_PluginWantsAlwaysRunFx(${1:Int amt})",
		"description": ""
	},
	"PreventUIRefresh": {
		"prefix": "PreventUIRefresh",
		"scope": "eel",
		"body": "PreventUIRefresh(${1:int prevent_count})",
		"description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur"
	},
	"reaper.PreventUIRefresh": {
		"prefix": "reaper.PreventUIRefresh",
		"scope": "lua",
		"body": "reaper.PreventUIRefresh(${1:integer prevent_count})",
		"description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur"
	},
	"RPR_PreventUIRefresh": {
		"prefix": "RPR_PreventUIRefresh",
		"scope": "python",
		"body": "RPR_PreventUIRefresh(${1:Int prevent_count})",
		"description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur"
	},
	"ReaScriptError": {
		"prefix": "ReaScriptError",
		"scope": "eel",
		"body": "ReaScriptError(${1:\"errmsg\"})",
		"description": "Causes REAPER to display the error message after the current ReaScript finishes."
	},
	"reaper.ReaScriptError": {
		"prefix": "reaper.ReaScriptError",
		"scope": "lua",
		"body": "reaper.ReaScriptError(${1:string errmsg})",
		"description": "Causes REAPER to display the error message after the current ReaScript finishes."
	},
	"RPR_ReaScriptError": {
		"prefix": "RPR_ReaScriptError",
		"scope": "python",
		"body": "RPR_ReaScriptError(${1:String errmsg})",
		"description": "Causes REAPER to display the error message after the current ReaScript finishes."
	},
	"RecursiveCreateDirectory": {
		"prefix": "RecursiveCreateDirectory",
		"scope": "eel",
		"body": "${1:${2:int} = }RecursiveCreateDirectory(${3:\"path\"}, ${4:size_t ignored})",
		"description": "returns positive value on success, 0 on failure."
	},
	"reaper.RecursiveCreateDirectory": {
		"prefix": "reaper.RecursiveCreateDirectory",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.RecursiveCreateDirectory(${3:string path}, ${4:integer ignored})",
		"description": "returns positive value on success, 0 on failure."
	},
	"RPR_RecursiveCreateDirectory": {
		"prefix": "RPR_RecursiveCreateDirectory",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_RecursiveCreateDirectory(${3:String path}, ${4:Unknown ignored})",
		"description": "returns positive value on success, 0 on failure."
	},
	"RefreshToolbar": {
		"prefix": "RefreshToolbar",
		"scope": "eel",
		"body": "RefreshToolbar(${1:int command_id})",
		"description": "See RefreshToolbar2."
	},
	"reaper.RefreshToolbar": {
		"prefix": "reaper.RefreshToolbar",
		"scope": "lua",
		"body": "reaper.RefreshToolbar(${1:integer command_id})",
		"description": "See RefreshToolbar2."
	},
	"RPR_RefreshToolbar": {
		"prefix": "RPR_RefreshToolbar",
		"scope": "python",
		"body": "RPR_RefreshToolbar(${1:Int command_id})",
		"description": "See RefreshToolbar2."
	},
	"RefreshToolbar2": {
		"prefix": "RefreshToolbar2",
		"scope": "eel",
		"body": "RefreshToolbar2(${1:int section_id}, ${2:int command_id})",
		"description": "Refresh the toolbar button states of a toggle action."
	},
	"reaper.RefreshToolbar2": {
		"prefix": "reaper.RefreshToolbar2",
		"scope": "lua",
		"body": "reaper.RefreshToolbar2(${1:integer section_id}, ${2:integer command_id})",
		"description": "Refresh the toolbar button states of a toggle action."
	},
	"RPR_RefreshToolbar2": {
		"prefix": "RPR_RefreshToolbar2",
		"scope": "python",
		"body": "RPR_RefreshToolbar2(${1:Int section_id}, ${2:Int command_id})",
		"description": "Refresh the toolbar button states of a toggle action."
	},
	"relative_fn": {
		"prefix": "relative_fn",
		"scope": "eel",
		"body": "relative_fn(${1:\"in\"}, ${2:#out})",
		"description": "Makes a filename \"in\" relative to the current project, if any."
	},
	"reaper.relative_fn": {
		"prefix": "reaper.relative_fn",
		"scope": "lua",
		"body": "${1:${2:string out} = }reaper.relative_fn(${3:string in}, ${4:string out})",
		"description": "Makes a filename \"in\" relative to the current project, if any."
	},
	"RPR_relative_fn": {
		"prefix": "RPR_relative_fn",
		"scope": "python",
		"body": "${1:${2:String in}, ${3:String out}, ${4:Int out_sz} = }RPR_relative_fn(${5:in}, ${6:out}, ${7:out_sz})",
		"description": "Makes a filename \"in\" relative to the current project, if any."
	},
	"RemoveTrackSend": {
		"prefix": "RemoveTrackSend",
		"scope": "eel",
		"body": "${1:${2:bool} = }RemoveTrackSend(${3:MediaTrack tr}, ${4:int category}, ${5:int sendidx})",
		"description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends."
	},
	"reaper.RemoveTrackSend": {
		"prefix": "reaper.RemoveTrackSend",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.RemoveTrackSend(${3:MediaTrack tr}, ${4:integer category}, ${5:integer sendidx})",
		"description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends."
	},
	"RPR_RemoveTrackSend": {
		"prefix": "RPR_RemoveTrackSend",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_RemoveTrackSend(${3:MediaTrack tr}, ${4:Int category}, ${5:Int sendidx})",
		"description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends."
	},
	"RenderFileSection": {
		"prefix": "RenderFileSection",
		"scope": "eel",
		"body": "${1:${2:bool} = }RenderFileSection(${3:\"source_filename\"}, ${4:\"target_filename\"}, ${5:start_percent}, ${6:end_percent}, ${7:playrate})",
		"description": "Not available while playing back."
	},
	"reaper.RenderFileSection": {
		"prefix": "reaper.RenderFileSection",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.RenderFileSection(${3:string source_filename}, ${4:string target_filename}, ${5:number start_percent}, ${6:number end_percent}, ${7:number playrate})",
		"description": "Not available while playing back."
	},
	"RPR_RenderFileSection": {
		"prefix": "RPR_RenderFileSection",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_RenderFileSection(${3:String source_filename}, ${4:String target_filename}, ${5:Float start_percent}, ${6:Float end_percent}, ${7:Float playrate})",
		"description": "Not available while playing back."
	},
	"ReorderSelectedTracks": {
		"prefix": "ReorderSelectedTracks",
		"scope": "eel",
		"body": "${1:${2:bool} = }ReorderSelectedTracks(${3:int beforeTrackIdx}, ${4:int makePrevFolder})",
		"description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder"
	},
	"reaper.ReorderSelectedTracks": {
		"prefix": "reaper.ReorderSelectedTracks",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.ReorderSelectedTracks(${3:integer beforeTrackIdx}, ${4:integer makePrevFolder})",
		"description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder"
	},
	"RPR_ReorderSelectedTracks": {
		"prefix": "RPR_ReorderSelectedTracks",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_ReorderSelectedTracks(${3:Int beforeTrackIdx}, ${4:Int makePrevFolder})",
		"description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder"
	},
	"Resample_EnumModes": {
		"prefix": "Resample_EnumModes",
		"scope": "eel",
		"body": "${1:${2:bool} = }Resample_EnumModes(${3:#retval}, ${4:int mode})",
		"description": ""
	},
	"reaper.Resample_EnumModes": {
		"prefix": "reaper.Resample_EnumModes",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.Resample_EnumModes(${3:integer mode})",
		"description": ""
	},
	"RPR_Resample_EnumModes": {
		"prefix": "RPR_Resample_EnumModes",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_Resample_EnumModes(${3:Int mode})",
		"description": ""
	},
	"resolve_fn": {
		"prefix": "resolve_fn",
		"scope": "eel",
		"body": "resolve_fn(${1:\"in\"}, ${2:#out})",
		"description": "See resolve_fn2."
	},
	"reaper.resolve_fn": {
		"prefix": "reaper.resolve_fn",
		"scope": "lua",
		"body": "${1:${2:string out} = }reaper.resolve_fn(${3:string in}, ${4:string out})",
		"description": "See resolve_fn2."
	},
	"RPR_resolve_fn": {
		"prefix": "RPR_resolve_fn",
		"scope": "python",
		"body": "${1:${2:String in}, ${3:String out}, ${4:Int out_sz} = }RPR_resolve_fn(${5:in}, ${6:out}, ${7:out_sz})",
		"description": "See resolve_fn2."
	},
	"resolve_fn2": {
		"prefix": "resolve_fn2",
		"scope": "eel",
		"body": "resolve_fn2(${1:\"in\"}, ${2:#out}, ${3:optional \"checkSubDir\"})",
		"description": "Resolves a filename \"in\" by using project settings etc. If no file found, out will be a copy of in."
	},
	"reaper.resolve_fn2": {
		"prefix": "reaper.resolve_fn2",
		"scope": "lua",
		"body": "${1:${2:string out} = }reaper.resolve_fn2(${3:string in}, ${4:string out}, ${5:optional string checkSubDir})",
		"description": "Resolves a filename \"in\" by using project settings etc. If no file found, out will be a copy of in."
	},
	"RPR_resolve_fn2": {
		"prefix": "RPR_resolve_fn2",
		"scope": "python",
		"body": "${1:${2:String in}, ${3:String out}, ${4:Int out_sz}, ${5:String checkSubDirOptional} = }RPR_resolve_fn2(${6:in}, ${7:out}, ${8:out_sz}, ${9:checkSubDirOptional})",
		"description": "Resolves a filename \"in\" by using project settings etc. If no file found, out will be a copy of in."
	},
	"ReverseNamedCommandLookup": {
		"prefix": "ReverseNamedCommandLookup",
		"scope": "eel",
		"body": "${1:${2:bool} = }ReverseNamedCommandLookup(${3:#retval}, ${4:int command_id})",
		"description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action."
	},
	"reaper.ReverseNamedCommandLookup": {
		"prefix": "reaper.ReverseNamedCommandLookup",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.ReverseNamedCommandLookup(${3:integer command_id})",
		"description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action."
	},
	"RPR_ReverseNamedCommandLookup": {
		"prefix": "RPR_ReverseNamedCommandLookup",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_ReverseNamedCommandLookup(${3:Int command_id})",
		"description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action."
	},
	"ScaleFromEnvelopeMode": {
		"prefix": "ScaleFromEnvelopeMode",
		"scope": "eel",
		"body": "${1:${2:double} = }ScaleFromEnvelopeMode(${3:int scaling_mode}, ${4:val})",
		"description": "See GetEnvelopeScalingMode."
	},
	"reaper.ScaleFromEnvelopeMode": {
		"prefix": "reaper.ScaleFromEnvelopeMode",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.ScaleFromEnvelopeMode(${3:integer scaling_mode}, ${4:number val})",
		"description": "See GetEnvelopeScalingMode."
	},
	"RPR_ScaleFromEnvelopeMode": {
		"prefix": "RPR_ScaleFromEnvelopeMode",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_ScaleFromEnvelopeMode(${3:Int scaling_mode}, ${4:Float val})",
		"description": "See GetEnvelopeScalingMode."
	},
	"ScaleToEnvelopeMode": {
		"prefix": "ScaleToEnvelopeMode",
		"scope": "eel",
		"body": "${1:${2:double} = }ScaleToEnvelopeMode(${3:int scaling_mode}, ${4:val})",
		"description": "See GetEnvelopeScalingMode."
	},
	"reaper.ScaleToEnvelopeMode": {
		"prefix": "reaper.ScaleToEnvelopeMode",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.ScaleToEnvelopeMode(${3:integer scaling_mode}, ${4:number val})",
		"description": "See GetEnvelopeScalingMode."
	},
	"RPR_ScaleToEnvelopeMode": {
		"prefix": "RPR_ScaleToEnvelopeMode",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_ScaleToEnvelopeMode(${3:Int scaling_mode}, ${4:Float val})",
		"description": "See GetEnvelopeScalingMode."
	},
	"SelectAllMediaItems": {
		"prefix": "SelectAllMediaItems",
		"scope": "eel",
		"body": "SelectAllMediaItems(${1:ReaProject proj}, ${2:bool selected})",
		"description": ""
	},
	"reaper.SelectAllMediaItems": {
		"prefix": "reaper.SelectAllMediaItems",
		"scope": "lua",
		"body": "reaper.SelectAllMediaItems(${1:ReaProject proj}, ${2:boolean selected})",
		"description": ""
	},
	"RPR_SelectAllMediaItems": {
		"prefix": "RPR_SelectAllMediaItems",
		"scope": "python",
		"body": "RPR_SelectAllMediaItems(${1:ReaProject proj}, ${2:Boolean selected})",
		"description": ""
	},
	"SelectProjectInstance": {
		"prefix": "SelectProjectInstance",
		"scope": "eel",
		"body": "SelectProjectInstance(${1:ReaProject proj})",
		"description": ""
	},
	"reaper.SelectProjectInstance": {
		"prefix": "reaper.SelectProjectInstance",
		"scope": "lua",
		"body": "reaper.SelectProjectInstance(${1:ReaProject proj})",
		"description": ""
	},
	"RPR_SelectProjectInstance": {
		"prefix": "RPR_SelectProjectInstance",
		"scope": "python",
		"body": "RPR_SelectProjectInstance(${1:ReaProject proj})",
		"description": ""
	},
	"SetActiveTake": {
		"prefix": "SetActiveTake",
		"scope": "eel",
		"body": "SetActiveTake(${1:MediaItem_Take take})",
		"description": "set this take active in this media item"
	},
	"reaper.SetActiveTake": {
		"prefix": "reaper.SetActiveTake",
		"scope": "lua",
		"body": "reaper.SetActiveTake(${1:MediaItem_Take take})",
		"description": "set this take active in this media item"
	},
	"RPR_SetActiveTake": {
		"prefix": "RPR_SetActiveTake",
		"scope": "python",
		"body": "RPR_SetActiveTake(${1:MediaItem_Take take})",
		"description": "set this take active in this media item"
	},
	"SetAutomationMode": {
		"prefix": "SetAutomationMode",
		"scope": "eel",
		"body": "SetAutomationMode(${1:int mode}, ${2:bool onlySel})",
		"description": "sets all or selected tracks to mode."
	},
	"reaper.SetAutomationMode": {
		"prefix": "reaper.SetAutomationMode",
		"scope": "lua",
		"body": "reaper.SetAutomationMode(${1:integer mode}, ${2:boolean onlySel})",
		"description": "sets all or selected tracks to mode."
	},
	"RPR_SetAutomationMode": {
		"prefix": "RPR_SetAutomationMode",
		"scope": "python",
		"body": "RPR_SetAutomationMode(${1:Int mode}, ${2:Boolean onlySel})",
		"description": "sets all or selected tracks to mode."
	},
	"SetCurrentBPM": {
		"prefix": "SetCurrentBPM",
		"scope": "eel",
		"body": "SetCurrentBPM(${1:ReaProject __proj}, ${2:bpm}, ${3:bool wantUndo})",
		"description": "set current BPM in project, set wantUndo=true to add undo point"
	},
	"reaper.SetCurrentBPM": {
		"prefix": "reaper.SetCurrentBPM",
		"scope": "lua",
		"body": "reaper.SetCurrentBPM(${1:ReaProject __proj}, ${2:number bpm}, ${3:boolean wantUndo})",
		"description": "set current BPM in project, set wantUndo=true to add undo point"
	},
	"RPR_SetCurrentBPM": {
		"prefix": "RPR_SetCurrentBPM",
		"scope": "python",
		"body": "RPR_SetCurrentBPM(${1:ReaProject __proj}, ${2:Float bpm}, ${3:Boolean wantUndo})",
		"description": "set current BPM in project, set wantUndo=true to add undo point"
	},
	"SetCursorContext": {
		"prefix": "SetCursorContext",
		"scope": "eel",
		"body": "SetCursorContext(${1:int mode}, ${2:TrackEnvelope envIn})",
		"description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)"
	},
	"reaper.SetCursorContext": {
		"prefix": "reaper.SetCursorContext",
		"scope": "lua",
		"body": "reaper.SetCursorContext(${1:integer mode}, ${2:TrackEnvelope envIn})",
		"description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)"
	},
	"RPR_SetCursorContext": {
		"prefix": "RPR_SetCursorContext",
		"scope": "python",
		"body": "RPR_SetCursorContext(${1:Int mode}, ${2:TrackEnvelope envInOptional})",
		"description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)"
	},
	"SetEditCurPos": {
		"prefix": "SetEditCurPos",
		"scope": "eel",
		"body": "SetEditCurPos(${1:time}, ${2:bool moveview}, ${3:bool seekplay})",
		"description": ""
	},
	"reaper.SetEditCurPos": {
		"prefix": "reaper.SetEditCurPos",
		"scope": "lua",
		"body": "reaper.SetEditCurPos(${1:number time}, ${2:boolean moveview}, ${3:boolean seekplay})",
		"description": ""
	},
	"RPR_SetEditCurPos": {
		"prefix": "RPR_SetEditCurPos",
		"scope": "python",
		"body": "RPR_SetEditCurPos(${1:Float time}, ${2:Boolean moveview}, ${3:Boolean seekplay})",
		"description": ""
	},
	"SetEditCurPos2": {
		"prefix": "SetEditCurPos2",
		"scope": "eel",
		"body": "SetEditCurPos2(${1:ReaProject proj}, ${2:time}, ${3:bool moveview}, ${4:bool seekplay})",
		"description": ""
	},
	"reaper.SetEditCurPos2": {
		"prefix": "reaper.SetEditCurPos2",
		"scope": "lua",
		"body": "reaper.SetEditCurPos2(${1:ReaProject proj}, ${2:number time}, ${3:boolean moveview}, ${4:boolean seekplay})",
		"description": ""
	},
	"RPR_SetEditCurPos2": {
		"prefix": "RPR_SetEditCurPos2",
		"scope": "python",
		"body": "RPR_SetEditCurPos2(${1:ReaProject proj}, ${2:Float time}, ${3:Boolean moveview}, ${4:Boolean seekplay})",
		"description": ""
	},
	"SetEnvelopePoint": {
		"prefix": "SetEnvelopePoint",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetEnvelopePoint(${3:TrackEnvelope envelope}, ${4:int ptidx}, ${5:optional timeIn}, ${6:optional valueIn}, ${7:optional int shapeIn}, ${8:optional tensionIn}, ${9:optional bool selectedIn}, ${10:optional bool noSortIn})",
		"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode."
	},
	"reaper.SetEnvelopePoint": {
		"prefix": "reaper.SetEnvelopePoint",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetEnvelopePoint(${3:TrackEnvelope envelope}, ${4:integer ptidx}, ${5:optional number timeIn}, ${6:optional number valueIn}, ${7:optional number shapeIn}, ${8:optional number tensionIn}, ${9:optional boolean selectedIn}, ${10:optional boolean noSortIn})",
		"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode."
	},
	"RPR_SetEnvelopePoint": {
		"prefix": "RPR_SetEnvelopePoint",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:TrackEnvelope envelope}, ${4:Int ptidx}, ${5:Float timeInOptional}, ${6:Float valueInOptional}, ${7:Int shapeInOptional}, ${8:Float tensionInOptional}, ${9:Boolean selectedInOptional}, ${10:Boolean noSortInOptional} = }RPR_SetEnvelopePoint(${11:envelope}, ${12:ptidx}, ${13:timeInOptional}, ${14:valueInOptional}, ${15:shapeInOptional}, ${16:tensionInOptional}, ${17:selectedInOptional}, ${18:noSortInOptional})",
		"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode."
	},
	"SetEnvelopePointEx": {
		"prefix": "SetEnvelopePointEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetEnvelopePointEx(${3:TrackEnvelope envelope}, ${4:int autoitem_idx}, ${5:int ptidx}, ${6:optional timeIn}, ${7:optional valueIn}, ${8:optional int shapeIn}, ${9:optional tensionIn}, ${10:optional bool selectedIn}, ${11:optional bool noSortIn})",
		"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. Tautoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode."
	},
	"reaper.SetEnvelopePointEx": {
		"prefix": "reaper.SetEnvelopePointEx",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetEnvelopePointEx(${3:TrackEnvelope envelope}, ${4:integer autoitem_idx}, ${5:integer ptidx}, ${6:optional number timeIn}, ${7:optional number valueIn}, ${8:optional number shapeIn}, ${9:optional number tensionIn}, ${10:optional boolean selectedIn}, ${11:optional boolean noSortIn})",
		"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. Tautoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode."
	},
	"RPR_SetEnvelopePointEx": {
		"prefix": "RPR_SetEnvelopePointEx",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:TrackEnvelope envelope}, ${4:Int autoitem_idx}, ${5:Int ptidx}, ${6:Float timeInOptional}, ${7:Float valueInOptional}, ${8:Int shapeInOptional}, ${9:Float tensionInOptional}, ${10:Boolean selectedInOptional}, ${11:Boolean noSortInOptional} = }RPR_SetEnvelopePointEx(${12:envelope}, ${13:autoitem_idx}, ${14:ptidx}, ${15:timeInOptional}, ${16:valueInOptional}, ${17:shapeInOptional}, ${18:tensionInOptional}, ${19:selectedInOptional}, ${20:noSortInOptional})",
		"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. Tautoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode."
	},
	"SetEnvelopeStateChunk": {
		"prefix": "SetEnvelopeStateChunk",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetEnvelopeStateChunk(${3:TrackEnvelope env}, ${4:\"str\"}, ${5:bool isundo})",
		"description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
	},
	"reaper.SetEnvelopeStateChunk": {
		"prefix": "reaper.SetEnvelopeStateChunk",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetEnvelopeStateChunk(${3:TrackEnvelope env}, ${4:string str}, ${5:boolean isundo})",
		"description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
	},
	"RPR_SetEnvelopeStateChunk": {
		"prefix": "RPR_SetEnvelopeStateChunk",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetEnvelopeStateChunk(${3:TrackEnvelope env}, ${4:String str}, ${5:Boolean isundoOptional})",
		"description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
	},
	"SetExtState": {
		"prefix": "SetExtState",
		"scope": "eel",
		"body": "SetExtState(${1:\"section\"}, ${2:\"key\"}, ${3:\"value\"}, ${4:bool persist})",
		"description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState."
	},
	"reaper.SetExtState": {
		"prefix": "reaper.SetExtState",
		"scope": "lua",
		"body": "reaper.SetExtState(${1:string section}, ${2:string key}, ${3:string value}, ${4:boolean persist})",
		"description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState."
	},
	"RPR_SetExtState": {
		"prefix": "RPR_SetExtState",
		"scope": "python",
		"body": "RPR_SetExtState(${1:String section}, ${2:String key}, ${3:String value}, ${4:Boolean persist})",
		"description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState."
	},
	"SetGlobalAutomationOverride": {
		"prefix": "SetGlobalAutomationOverride",
		"scope": "eel",
		"body": "SetGlobalAutomationOverride(${1:int mode})",
		"description": "mode: see GetGlobalAutomationOverride"
	},
	"reaper.SetGlobalAutomationOverride": {
		"prefix": "reaper.SetGlobalAutomationOverride",
		"scope": "lua",
		"body": "reaper.SetGlobalAutomationOverride(${1:integer mode})",
		"description": "mode: see GetGlobalAutomationOverride"
	},
	"RPR_SetGlobalAutomationOverride": {
		"prefix": "RPR_SetGlobalAutomationOverride",
		"scope": "python",
		"body": "RPR_SetGlobalAutomationOverride(${1:Int mode})",
		"description": "mode: see GetGlobalAutomationOverride"
	},
	"SetItemStateChunk": {
		"prefix": "SetItemStateChunk",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetItemStateChunk(${3:MediaItem item}, ${4:\"str\"}, ${5:bool isundo})",
		"description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
	},
	"reaper.SetItemStateChunk": {
		"prefix": "reaper.SetItemStateChunk",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetItemStateChunk(${3:MediaItem item}, ${4:string str}, ${5:boolean isundo})",
		"description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
	},
	"RPR_SetItemStateChunk": {
		"prefix": "RPR_SetItemStateChunk",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetItemStateChunk(${3:MediaItem item}, ${4:String str}, ${5:Boolean isundoOptional})",
		"description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
	},
	"SetMasterTrackVisibility": {
		"prefix": "SetMasterTrackVisibility",
		"scope": "eel",
		"body": "${1:${2:int} = }SetMasterTrackVisibility(${3:int flag})",
		"description": "set +1 to show the master track in the TCP, +2 to show in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility."
	},
	"reaper.SetMasterTrackVisibility": {
		"prefix": "reaper.SetMasterTrackVisibility",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.SetMasterTrackVisibility(${3:integer flag})",
		"description": "set +1 to show the master track in the TCP, +2 to show in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility."
	},
	"RPR_SetMasterTrackVisibility": {
		"prefix": "RPR_SetMasterTrackVisibility",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_SetMasterTrackVisibility(${3:Int flag})",
		"description": "set +1 to show the master track in the TCP, +2 to show in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility."
	},
	"SetMediaItemInfo_Value": {
		"prefix": "SetMediaItemInfo_Value",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetMediaItemInfo_Value(${3:MediaItem item}, ${4:\"parmname\"}, ${5:newvalue})",
		"description": "Set media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (+1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)"
	},
	"reaper.SetMediaItemInfo_Value": {
		"prefix": "reaper.SetMediaItemInfo_Value",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetMediaItemInfo_Value(${3:MediaItem item}, ${4:string parmname}, ${5:number newvalue})",
		"description": "Set media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (+1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)"
	},
	"RPR_SetMediaItemInfo_Value": {
		"prefix": "RPR_SetMediaItemInfo_Value",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetMediaItemInfo_Value(${3:MediaItem item}, ${4:String parmname}, ${5:Float newvalue})",
		"description": "Set media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (+1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)"
	},
	"SetMediaItemLength": {
		"prefix": "SetMediaItemLength",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetMediaItemLength(${3:MediaItem item}, ${4:length}, ${5:bool refreshUI})",
		"description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange()."
	},
	"reaper.SetMediaItemLength": {
		"prefix": "reaper.SetMediaItemLength",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetMediaItemLength(${3:MediaItem item}, ${4:number length}, ${5:boolean refreshUI})",
		"description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange()."
	},
	"RPR_SetMediaItemLength": {
		"prefix": "RPR_SetMediaItemLength",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetMediaItemLength(${3:MediaItem item}, ${4:Float length}, ${5:Boolean refreshUI})",
		"description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange()."
	},
	"SetMediaItemPosition": {
		"prefix": "SetMediaItemPosition",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetMediaItemPosition(${3:MediaItem item}, ${4:position}, ${5:bool refreshUI})",
		"description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange()."
	},
	"reaper.SetMediaItemPosition": {
		"prefix": "reaper.SetMediaItemPosition",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetMediaItemPosition(${3:MediaItem item}, ${4:number position}, ${5:boolean refreshUI})",
		"description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange()."
	},
	"RPR_SetMediaItemPosition": {
		"prefix": "RPR_SetMediaItemPosition",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetMediaItemPosition(${3:MediaItem item}, ${4:Float position}, ${5:Boolean refreshUI})",
		"description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange()."
	},
	"SetMediaItemSelected": {
		"prefix": "SetMediaItemSelected",
		"scope": "eel",
		"body": "SetMediaItemSelected(${1:MediaItem item}, ${2:bool selected})",
		"description": ""
	},
	"reaper.SetMediaItemSelected": {
		"prefix": "reaper.SetMediaItemSelected",
		"scope": "lua",
		"body": "reaper.SetMediaItemSelected(${1:MediaItem item}, ${2:boolean selected})",
		"description": ""
	},
	"RPR_SetMediaItemSelected": {
		"prefix": "RPR_SetMediaItemSelected",
		"scope": "python",
		"body": "RPR_SetMediaItemSelected(${1:MediaItem item}, ${2:Boolean selected})",
		"description": ""
	},
	"SetMediaItemTake_Source": {
		"prefix": "SetMediaItemTake_Source",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetMediaItemTake_Source(${3:MediaItem_Take take}, ${4:PCM_source source})",
		"description": "Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly."
	},
	"reaper.SetMediaItemTake_Source": {
		"prefix": "reaper.SetMediaItemTake_Source",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetMediaItemTake_Source(${3:MediaItem_Take take}, ${4:PCM_source source})",
		"description": "Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly."
	},
	"RPR_SetMediaItemTake_Source": {
		"prefix": "RPR_SetMediaItemTake_Source",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetMediaItemTake_Source(${3:MediaItem_Take take}, ${4:PCM_source source})",
		"description": "Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly."
	},
	"SetMediaItemTakeInfo_Value": {
		"prefix": "SetMediaItemTakeInfo_Value",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetMediaItemTakeInfo_Value(${3:MediaItem_Take take}, ${4:\"parmname\"}, ${5:newvalue})",
		"description": "Set media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)"
	},
	"reaper.SetMediaItemTakeInfo_Value": {
		"prefix": "reaper.SetMediaItemTakeInfo_Value",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetMediaItemTakeInfo_Value(${3:MediaItem_Take take}, ${4:string parmname}, ${5:number newvalue})",
		"description": "Set media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)"
	},
	"RPR_SetMediaItemTakeInfo_Value": {
		"prefix": "RPR_SetMediaItemTakeInfo_Value",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetMediaItemTakeInfo_Value(${3:MediaItem_Take take}, ${4:String parmname}, ${5:Float newvalue})",
		"description": "Set media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)"
	},
	"SetMediaTrackInfo_Value": {
		"prefix": "SetMediaTrackInfo_Value",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetMediaTrackInfo_Value(${3:MediaTrack tr}, ${4:\"parmname\"}, ${5:newvalue})",
		"description": "Set track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (+1=no media buffering, +2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)"
	},
	"reaper.SetMediaTrackInfo_Value": {
		"prefix": "reaper.SetMediaTrackInfo_Value",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetMediaTrackInfo_Value(${3:MediaTrack tr}, ${4:string parmname}, ${5:number newvalue})",
		"description": "Set track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (+1=no media buffering, +2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)"
	},
	"RPR_SetMediaTrackInfo_Value": {
		"prefix": "RPR_SetMediaTrackInfo_Value",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetMediaTrackInfo_Value(${3:MediaTrack tr}, ${4:String parmname}, ${5:Float newvalue})",
		"description": "Set track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (+1=no media buffering, +2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)"
	},
	"SetMIDIEditorGrid": {
		"prefix": "SetMIDIEditorGrid",
		"scope": "eel",
		"body": "SetMIDIEditorGrid(${1:ReaProject project}, ${2:division})",
		"description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc."
	},
	"reaper.SetMIDIEditorGrid": {
		"prefix": "reaper.SetMIDIEditorGrid",
		"scope": "lua",
		"body": "reaper.SetMIDIEditorGrid(${1:ReaProject project}, ${2:number division})",
		"description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc."
	},
	"RPR_SetMIDIEditorGrid": {
		"prefix": "RPR_SetMIDIEditorGrid",
		"scope": "python",
		"body": "RPR_SetMIDIEditorGrid(${1:ReaProject project}, ${2:Float division})",
		"description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc."
	},
	"SetMixerScroll": {
		"prefix": "SetMixerScroll",
		"scope": "eel",
		"body": "${1:${2:MediaTrack} = }SetMixerScroll(${3:MediaTrack leftmosttrack})",
		"description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right."
	},
	"reaper.SetMixerScroll": {
		"prefix": "reaper.SetMixerScroll",
		"scope": "lua",
		"body": "${1:${2:MediaTrack} = }reaper.SetMixerScroll(${3:MediaTrack leftmosttrack})",
		"description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right."
	},
	"RPR_SetMixerScroll": {
		"prefix": "RPR_SetMixerScroll",
		"scope": "python",
		"body": "${1:${2:MediaTrack} = }RPR_SetMixerScroll(${3:MediaTrack leftmosttrack})",
		"description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right."
	},
	"SetMouseModifier": {
		"prefix": "SetMouseModifier",
		"scope": "eel",
		"body": "SetMouseModifier(${1:\"context\"}, ${2:int modifier_flag}, ${3:\"action\"})",
		"description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\nContext is a string like \"MM_CTX_ITEM\". Find these strings by modifying an assignment in \n\nPreferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\n\nFor left-click and double-click contexts, the action can be any built-in command ID number\n\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n\n(enable \"show action IDs\" in the context menu), and find custom action ID strings in reaper-kb.ini.\n\nFor built-in mouse modifier behaviors, find action IDs (which will be low numbers)\n\nby modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nAssigning an action of -1 will reset that mouse modifier behavior to factory default.\n\nSee GetMouseModifier."
	},
	"reaper.SetMouseModifier": {
		"prefix": "reaper.SetMouseModifier",
		"scope": "lua",
		"body": "reaper.SetMouseModifier(${1:string context}, ${2:integer modifier_flag}, ${3:string action})",
		"description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\nContext is a string like \"MM_CTX_ITEM\". Find these strings by modifying an assignment in \n\nPreferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\n\nFor left-click and double-click contexts, the action can be any built-in command ID number\n\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n\n(enable \"show action IDs\" in the context menu), and find custom action ID strings in reaper-kb.ini.\n\nFor built-in mouse modifier behaviors, find action IDs (which will be low numbers)\n\nby modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nAssigning an action of -1 will reset that mouse modifier behavior to factory default.\n\nSee GetMouseModifier."
	},
	"RPR_SetMouseModifier": {
		"prefix": "RPR_SetMouseModifier",
		"scope": "python",
		"body": "RPR_SetMouseModifier(${1:String context}, ${2:Int modifier_flag}, ${3:String action})",
		"description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\nContext is a string like \"MM_CTX_ITEM\". Find these strings by modifying an assignment in \n\nPreferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\n\nFor left-click and double-click contexts, the action can be any built-in command ID number\n\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n\n(enable \"show action IDs\" in the context menu), and find custom action ID strings in reaper-kb.ini.\n\nFor built-in mouse modifier behaviors, find action IDs (which will be low numbers)\n\nby modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nAssigning an action of -1 will reset that mouse modifier behavior to factory default.\n\nSee GetMouseModifier."
	},
	"SetOnlyTrackSelected": {
		"prefix": "SetOnlyTrackSelected",
		"scope": "eel",
		"body": "SetOnlyTrackSelected(${1:MediaTrack track})",
		"description": "Set exactly one track selected, deselect all others"
	},
	"reaper.SetOnlyTrackSelected": {
		"prefix": "reaper.SetOnlyTrackSelected",
		"scope": "lua",
		"body": "reaper.SetOnlyTrackSelected(${1:MediaTrack track})",
		"description": "Set exactly one track selected, deselect all others"
	},
	"RPR_SetOnlyTrackSelected": {
		"prefix": "RPR_SetOnlyTrackSelected",
		"scope": "python",
		"body": "RPR_SetOnlyTrackSelected(${1:MediaTrack track})",
		"description": "Set exactly one track selected, deselect all others"
	},
	"SetProjectGrid": {
		"prefix": "SetProjectGrid",
		"scope": "eel",
		"body": "SetProjectGrid(${1:ReaProject project}, ${2:division})",
		"description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc."
	},
	"reaper.SetProjectGrid": {
		"prefix": "reaper.SetProjectGrid",
		"scope": "lua",
		"body": "reaper.SetProjectGrid(${1:ReaProject project}, ${2:number division})",
		"description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc."
	},
	"RPR_SetProjectGrid": {
		"prefix": "RPR_SetProjectGrid",
		"scope": "python",
		"body": "RPR_SetProjectGrid(${1:ReaProject project}, ${2:Float division})",
		"description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc."
	},
	"SetProjectMarker": {
		"prefix": "SetProjectMarker",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetProjectMarker(${3:int markrgnindexnumber}, ${4:bool isrgn}, ${5:pos}, ${6:rgnend}, ${7:\"name\"})",
		"description": ""
	},
	"reaper.SetProjectMarker": {
		"prefix": "reaper.SetProjectMarker",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetProjectMarker(${3:integer markrgnindexnumber}, ${4:boolean isrgn}, ${5:number pos}, ${6:number rgnend}, ${7:string name})",
		"description": ""
	},
	"RPR_SetProjectMarker": {
		"prefix": "RPR_SetProjectMarker",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetProjectMarker(${3:Int markrgnindexnumber}, ${4:Boolean isrgn}, ${5:Float pos}, ${6:Float rgnend}, ${7:String name})",
		"description": ""
	},
	"SetProjectMarker2": {
		"prefix": "SetProjectMarker2",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetProjectMarker2(${3:ReaProject proj}, ${4:int markrgnindexnumber}, ${5:bool isrgn}, ${6:pos}, ${7:rgnend}, ${8:\"name\"})",
		"description": ""
	},
	"reaper.SetProjectMarker2": {
		"prefix": "reaper.SetProjectMarker2",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetProjectMarker2(${3:ReaProject proj}, ${4:integer markrgnindexnumber}, ${5:boolean isrgn}, ${6:number pos}, ${7:number rgnend}, ${8:string name})",
		"description": ""
	},
	"RPR_SetProjectMarker2": {
		"prefix": "RPR_SetProjectMarker2",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetProjectMarker2(${3:ReaProject proj}, ${4:Int markrgnindexnumber}, ${5:Boolean isrgn}, ${6:Float pos}, ${7:Float rgnend}, ${8:String name})",
		"description": ""
	},
	"SetProjectMarker3": {
		"prefix": "SetProjectMarker3",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetProjectMarker3(${3:ReaProject proj}, ${4:int markrgnindexnumber}, ${5:bool isrgn}, ${6:pos}, ${7:rgnend}, ${8:\"name\"}, ${9:int color})",
		"description": ""
	},
	"reaper.SetProjectMarker3": {
		"prefix": "reaper.SetProjectMarker3",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetProjectMarker3(${3:ReaProject proj}, ${4:integer markrgnindexnumber}, ${5:boolean isrgn}, ${6:number pos}, ${7:number rgnend}, ${8:string name}, ${9:integer color})",
		"description": ""
	},
	"RPR_SetProjectMarker3": {
		"prefix": "RPR_SetProjectMarker3",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetProjectMarker3(${3:ReaProject proj}, ${4:Int markrgnindexnumber}, ${5:Boolean isrgn}, ${6:Float pos}, ${7:Float rgnend}, ${8:String name}, ${9:Int color})",
		"description": ""
	},
	"SetProjectMarker4": {
		"prefix": "SetProjectMarker4",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetProjectMarker4(${3:ReaProject proj}, ${4:int markrgnindexnumber}, ${5:bool isrgn}, ${6:pos}, ${7:rgnend}, ${8:\"name\"}, ${9:int color}, ${10:int flags})",
		"description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags+1 to clear name"
	},
	"reaper.SetProjectMarker4": {
		"prefix": "reaper.SetProjectMarker4",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetProjectMarker4(${3:ReaProject proj}, ${4:integer markrgnindexnumber}, ${5:boolean isrgn}, ${6:number pos}, ${7:number rgnend}, ${8:string name}, ${9:integer color}, ${10:integer flags})",
		"description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags+1 to clear name"
	},
	"RPR_SetProjectMarker4": {
		"prefix": "RPR_SetProjectMarker4",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetProjectMarker4(${3:ReaProject proj}, ${4:Int markrgnindexnumber}, ${5:Boolean isrgn}, ${6:Float pos}, ${7:Float rgnend}, ${8:String name}, ${9:Int color}, ${10:Int flags})",
		"description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags+1 to clear name"
	},
	"SetProjectMarkerByIndex": {
		"prefix": "SetProjectMarkerByIndex",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetProjectMarkerByIndex(${3:ReaProject proj}, ${4:int markrgnidx}, ${5:bool isrgn}, ${6:pos}, ${7:rgnend}, ${8:int IDnumber}, ${9:\"name\"}, ${10:int color})",
		"description": "See SetProjectMarkerByIndex2."
	},
	"reaper.SetProjectMarkerByIndex": {
		"prefix": "reaper.SetProjectMarkerByIndex",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetProjectMarkerByIndex(${3:ReaProject proj}, ${4:integer markrgnidx}, ${5:boolean isrgn}, ${6:number pos}, ${7:number rgnend}, ${8:integer IDnumber}, ${9:string name}, ${10:integer color})",
		"description": "See SetProjectMarkerByIndex2."
	},
	"RPR_SetProjectMarkerByIndex": {
		"prefix": "RPR_SetProjectMarkerByIndex",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetProjectMarkerByIndex(${3:ReaProject proj}, ${4:Int markrgnidx}, ${5:Boolean isrgn}, ${6:Float pos}, ${7:Float rgnend}, ${8:Int IDnumber}, ${9:String name}, ${10:Int color})",
		"description": "See SetProjectMarkerByIndex2."
	},
	"SetProjectMarkerByIndex2": {
		"prefix": "SetProjectMarkerByIndex2",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetProjectMarkerByIndex2(${3:ReaProject proj}, ${4:int markrgnidx}, ${5:bool isrgn}, ${6:pos}, ${7:rgnend}, ${8:int IDnumber}, ${9:\"name\"}, ${10:int color}, ${11:int flags})",
		"description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags+1 to clear name."
	},
	"reaper.SetProjectMarkerByIndex2": {
		"prefix": "reaper.SetProjectMarkerByIndex2",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetProjectMarkerByIndex2(${3:ReaProject proj}, ${4:integer markrgnidx}, ${5:boolean isrgn}, ${6:number pos}, ${7:number rgnend}, ${8:integer IDnumber}, ${9:string name}, ${10:integer color}, ${11:integer flags})",
		"description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags+1 to clear name."
	},
	"RPR_SetProjectMarkerByIndex2": {
		"prefix": "RPR_SetProjectMarkerByIndex2",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetProjectMarkerByIndex2(${3:ReaProject proj}, ${4:Int markrgnidx}, ${5:Boolean isrgn}, ${6:Float pos}, ${7:Float rgnend}, ${8:Int IDnumber}, ${9:String name}, ${10:Int color}, ${11:Int flags})",
		"description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags+1 to clear name."
	},
	"SetProjExtState": {
		"prefix": "SetProjExtState",
		"scope": "eel",
		"body": "${1:${2:int} = }SetProjExtState(${3:ReaProject proj}, ${4:\"extname\"}, ${5:\"key\"}, ${6:\"value\"})",
		"description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or \"\", all extended data for that extname will be deleted.  If val is NULL or \"\", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState."
	},
	"reaper.SetProjExtState": {
		"prefix": "reaper.SetProjExtState",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.SetProjExtState(${3:ReaProject proj}, ${4:string extname}, ${5:string key}, ${6:string value})",
		"description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or \"\", all extended data for that extname will be deleted.  If val is NULL or \"\", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState."
	},
	"RPR_SetProjExtState": {
		"prefix": "RPR_SetProjExtState",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_SetProjExtState(${3:ReaProject proj}, ${4:String extname}, ${5:String key}, ${6:String value})",
		"description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or \"\", all extended data for that extname will be deleted.  If val is NULL or \"\", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState."
	},
	"SetRegionRenderMatrix": {
		"prefix": "SetRegionRenderMatrix",
		"scope": "eel",
		"body": "SetRegionRenderMatrix(${1:ReaProject proj}, ${2:int regionindex}, ${3:MediaTrack track}, ${4:int addorremove})",
		"description": "Add (addorremove > 0) or remove (addorremove < 0) a track from this region when using the region render matrix."
	},
	"reaper.SetRegionRenderMatrix": {
		"prefix": "reaper.SetRegionRenderMatrix",
		"scope": "lua",
		"body": "reaper.SetRegionRenderMatrix(${1:ReaProject proj}, ${2:integer regionindex}, ${3:MediaTrack track}, ${4:integer addorremove})",
		"description": "Add (addorremove > 0) or remove (addorremove < 0) a track from this region when using the region render matrix."
	},
	"RPR_SetRegionRenderMatrix": {
		"prefix": "RPR_SetRegionRenderMatrix",
		"scope": "python",
		"body": "RPR_SetRegionRenderMatrix(${1:ReaProject proj}, ${2:Int regionindex}, ${3:MediaTrack track}, ${4:Int addorremove})",
		"description": "Add (addorremove > 0) or remove (addorremove < 0) a track from this region when using the region render matrix."
	},
	"SetTakeStretchMarker": {
		"prefix": "SetTakeStretchMarker",
		"scope": "eel",
		"body": "${1:${2:int} = }SetTakeStretchMarker(${3:MediaItem_Take take}, ${4:int idx}, ${5:pos}, ${6:optional srcposIn})",
		"description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time)."
	},
	"reaper.SetTakeStretchMarker": {
		"prefix": "reaper.SetTakeStretchMarker",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.SetTakeStretchMarker(${3:MediaItem_Take take}, ${4:integer idx}, ${5:number pos}, ${6:optional number srcposIn})",
		"description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time)."
	},
	"RPR_SetTakeStretchMarker": {
		"prefix": "RPR_SetTakeStretchMarker",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_SetTakeStretchMarker(${3:MediaItem_Take take}, ${4:Int idx}, ${5:Float pos}, ${6:const double srcposInOptional})",
		"description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time)."
	},
	"SetTakeStretchMarkerSlope": {
		"prefix": "SetTakeStretchMarkerSlope",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetTakeStretchMarkerSlope(${3:MediaItem_Take take}, ${4:int idx}, ${5:slope})",
		"description": "See GetTakeStretchMarkerSlope"
	},
	"reaper.SetTakeStretchMarkerSlope": {
		"prefix": "reaper.SetTakeStretchMarkerSlope",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetTakeStretchMarkerSlope(${3:MediaItem_Take take}, ${4:integer idx}, ${5:number slope})",
		"description": "See GetTakeStretchMarkerSlope"
	},
	"RPR_SetTakeStretchMarkerSlope": {
		"prefix": "RPR_SetTakeStretchMarkerSlope",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetTakeStretchMarkerSlope(${3:MediaItem_Take take}, ${4:Int idx}, ${5:Float slope})",
		"description": "See GetTakeStretchMarkerSlope"
	},
	"SetTempoTimeSigMarker": {
		"prefix": "SetTempoTimeSigMarker",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetTempoTimeSigMarker(${3:ReaProject proj}, ${4:int ptidx}, ${5:timepos}, ${6:int measurepos}, ${7:beatpos}, ${8:bpm}, ${9:int timesig_num}, ${10:int timesig_denom}, ${11:bool lineartempo})",
		"description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"reaper.SetTempoTimeSigMarker": {
		"prefix": "reaper.SetTempoTimeSigMarker",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetTempoTimeSigMarker(${3:ReaProject proj}, ${4:integer ptidx}, ${5:number timepos}, ${6:integer measurepos}, ${7:number beatpos}, ${8:number bpm}, ${9:integer timesig_num}, ${10:integer timesig_denom}, ${11:boolean lineartempo})",
		"description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"RPR_SetTempoTimeSigMarker": {
		"prefix": "RPR_SetTempoTimeSigMarker",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetTempoTimeSigMarker(${3:ReaProject proj}, ${4:Int ptidx}, ${5:Float timepos}, ${6:Int measurepos}, ${7:Float beatpos}, ${8:Float bpm}, ${9:Int timesig_num}, ${10:Int timesig_denom}, ${11:Boolean lineartempo})",
		"description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"SetToggleCommandState": {
		"prefix": "SetToggleCommandState",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetToggleCommandState(${3:int section_id}, ${4:int command_id}, ${5:int state})",
		"description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2."
	},
	"reaper.SetToggleCommandState": {
		"prefix": "reaper.SetToggleCommandState",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetToggleCommandState(${3:integer section_id}, ${4:integer command_id}, ${5:integer state})",
		"description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2."
	},
	"RPR_SetToggleCommandState": {
		"prefix": "RPR_SetToggleCommandState",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetToggleCommandState(${3:Int section_id}, ${4:Int command_id}, ${5:Int state})",
		"description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2."
	},
	"SetTrackAutomationMode": {
		"prefix": "SetTrackAutomationMode",
		"scope": "eel",
		"body": "SetTrackAutomationMode(${1:MediaTrack tr}, ${2:int mode})",
		"description": ""
	},
	"reaper.SetTrackAutomationMode": {
		"prefix": "reaper.SetTrackAutomationMode",
		"scope": "lua",
		"body": "reaper.SetTrackAutomationMode(${1:MediaTrack tr}, ${2:integer mode})",
		"description": ""
	},
	"RPR_SetTrackAutomationMode": {
		"prefix": "RPR_SetTrackAutomationMode",
		"scope": "python",
		"body": "RPR_SetTrackAutomationMode(${1:MediaTrack tr}, ${2:Int mode})",
		"description": ""
	},
	"SetTrackColor": {
		"prefix": "SetTrackColor",
		"scope": "eel",
		"body": "SetTrackColor(${1:MediaTrack track}, ${2:int color})",
		"description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b)."
	},
	"reaper.SetTrackColor": {
		"prefix": "reaper.SetTrackColor",
		"scope": "lua",
		"body": "reaper.SetTrackColor(${1:MediaTrack track}, ${2:integer color})",
		"description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b)."
	},
	"RPR_SetTrackColor": {
		"prefix": "RPR_SetTrackColor",
		"scope": "python",
		"body": "RPR_SetTrackColor(${1:MediaTrack track}, ${2:Int color})",
		"description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b)."
	},
	"SetTrackMIDILyrics": {
		"prefix": "SetTrackMIDILyrics",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetTrackMIDILyrics(${3:MediaTrack track}, ${4:int flag}, ${5:\"str\"})",
		"description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t.1.1\\tLyric for measure 2 beat 1\t\"). See GetTrackMIDILyrics"
	},
	"reaper.SetTrackMIDILyrics": {
		"prefix": "reaper.SetTrackMIDILyrics",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetTrackMIDILyrics(${3:MediaTrack track}, ${4:integer flag}, ${5:string str})",
		"description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t.1.1\\tLyric for measure 2 beat 1\t\"). See GetTrackMIDILyrics"
	},
	"RPR_SetTrackMIDILyrics": {
		"prefix": "RPR_SetTrackMIDILyrics",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetTrackMIDILyrics(${3:MediaTrack track}, ${4:Int flag}, ${5:String str})",
		"description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t.1.1\\tLyric for measure 2 beat 1\t\"). See GetTrackMIDILyrics"
	},
	"SetTrackMIDINoteName": {
		"prefix": "SetTrackMIDINoteName",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetTrackMIDINoteName(${3:int track}, ${4:int pitch}, ${5:int chan}, ${6:\"name\"})",
		"description": "channel < 0 assigns these note names to all channels."
	},
	"reaper.SetTrackMIDINoteName": {
		"prefix": "reaper.SetTrackMIDINoteName",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetTrackMIDINoteName(${3:integer track}, ${4:integer pitch}, ${5:integer chan}, ${6:string name})",
		"description": "channel < 0 assigns these note names to all channels."
	},
	"RPR_SetTrackMIDINoteName": {
		"prefix": "RPR_SetTrackMIDINoteName",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetTrackMIDINoteName(${3:Int track}, ${4:Int pitch}, ${5:Int chan}, ${6:String name})",
		"description": "channel < 0 assigns these note names to all channels."
	},
	"SetTrackMIDINoteNameEx": {
		"prefix": "SetTrackMIDINoteNameEx",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetTrackMIDINoteNameEx(${3:ReaProject proj}, ${4:MediaTrack track}, ${5:int pitch}, ${6:int chan}, ${7:\"name\"})",
		"description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc."
	},
	"reaper.SetTrackMIDINoteNameEx": {
		"prefix": "reaper.SetTrackMIDINoteNameEx",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetTrackMIDINoteNameEx(${3:ReaProject proj}, ${4:MediaTrack track}, ${5:integer pitch}, ${6:integer chan}, ${7:string name})",
		"description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc."
	},
	"RPR_SetTrackMIDINoteNameEx": {
		"prefix": "RPR_SetTrackMIDINoteNameEx",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetTrackMIDINoteNameEx(${3:ReaProject proj}, ${4:MediaTrack track}, ${5:Int pitch}, ${6:Int chan}, ${7:String name})",
		"description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc."
	},
	"SetTrackSelected": {
		"prefix": "SetTrackSelected",
		"scope": "eel",
		"body": "SetTrackSelected(${1:MediaTrack track}, ${2:bool selected})",
		"description": ""
	},
	"reaper.SetTrackSelected": {
		"prefix": "reaper.SetTrackSelected",
		"scope": "lua",
		"body": "reaper.SetTrackSelected(${1:MediaTrack track}, ${2:boolean selected})",
		"description": ""
	},
	"RPR_SetTrackSelected": {
		"prefix": "RPR_SetTrackSelected",
		"scope": "python",
		"body": "RPR_SetTrackSelected(${1:MediaTrack track}, ${2:Boolean selected})",
		"description": ""
	},
	"SetTrackSendInfo_Value": {
		"prefix": "SetTrackSendInfo_Value",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetTrackSendInfo_Value(${3:MediaTrack tr}, ${4:int category}, ${5:int sendidx}, ${6:\"parmname\"}, ${7:newvalue})",
		"description": "Set send/receive/hardware output numerical-value attributes, return true on success.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,+1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, +1024=mono, otherwise stereo pair, hwout:+512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
	},
	"reaper.SetTrackSendInfo_Value": {
		"prefix": "reaper.SetTrackSendInfo_Value",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetTrackSendInfo_Value(${3:MediaTrack tr}, ${4:integer category}, ${5:integer sendidx}, ${6:string parmname}, ${7:number newvalue})",
		"description": "Set send/receive/hardware output numerical-value attributes, return true on success.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,+1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, +1024=mono, otherwise stereo pair, hwout:+512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
	},
	"RPR_SetTrackSendInfo_Value": {
		"prefix": "RPR_SetTrackSendInfo_Value",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetTrackSendInfo_Value(${3:MediaTrack tr}, ${4:Int category}, ${5:Int sendidx}, ${6:String parmname}, ${7:Float newvalue})",
		"description": "Set send/receive/hardware output numerical-value attributes, return true on success.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,+1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, +1024=mono, otherwise stereo pair, hwout:+512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
	},
	"SetTrackSendUIPan": {
		"prefix": "SetTrackSendUIPan",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetTrackSendUIPan(${3:MediaTrack track}, ${4:int send_idx}, ${5:pan}, ${6:int isend})",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
	},
	"reaper.SetTrackSendUIPan": {
		"prefix": "reaper.SetTrackSendUIPan",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetTrackSendUIPan(${3:MediaTrack track}, ${4:integer send_idx}, ${5:number pan}, ${6:integer isend})",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
	},
	"RPR_SetTrackSendUIPan": {
		"prefix": "RPR_SetTrackSendUIPan",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetTrackSendUIPan(${3:MediaTrack track}, ${4:Int send_idx}, ${5:Float pan}, ${6:Int isend})",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
	},
	"SetTrackSendUIVol": {
		"prefix": "SetTrackSendUIVol",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetTrackSendUIVol(${3:MediaTrack track}, ${4:int send_idx}, ${5:vol}, ${6:int isend})",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
	},
	"reaper.SetTrackSendUIVol": {
		"prefix": "reaper.SetTrackSendUIVol",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetTrackSendUIVol(${3:MediaTrack track}, ${4:integer send_idx}, ${5:number vol}, ${6:integer isend})",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
	},
	"RPR_SetTrackSendUIVol": {
		"prefix": "RPR_SetTrackSendUIVol",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetTrackSendUIVol(${3:MediaTrack track}, ${4:Int send_idx}, ${5:Float vol}, ${6:Int isend})",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
	},
	"SetTrackStateChunk": {
		"prefix": "SetTrackStateChunk",
		"scope": "eel",
		"body": "${1:${2:bool} = }SetTrackStateChunk(${3:MediaTrack track}, ${4:\"str\"}, ${5:bool isundo})",
		"description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
	},
	"reaper.SetTrackStateChunk": {
		"prefix": "reaper.SetTrackStateChunk",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.SetTrackStateChunk(${3:MediaTrack track}, ${4:string str}, ${5:boolean isundo})",
		"description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
	},
	"RPR_SetTrackStateChunk": {
		"prefix": "RPR_SetTrackStateChunk",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_SetTrackStateChunk(${3:MediaTrack track}, ${4:String str}, ${5:Boolean isundoOptional})",
		"description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
	},
	"ShowActionList": {
		"prefix": "ShowActionList",
		"scope": "eel",
		"body": "ShowActionList(${1:KbdSectionInfo caller}, ${2:HWND callerWnd})",
		"description": ""
	},
	"reaper.ShowActionList": {
		"prefix": "reaper.ShowActionList",
		"scope": "lua",
		"body": "reaper.ShowActionList(${1:KbdSectionInfo caller}, ${2:HWND callerWnd})",
		"description": ""
	},
	"RPR_ShowActionList": {
		"prefix": "RPR_ShowActionList",
		"scope": "python",
		"body": "RPR_ShowActionList(${1:KbdSectionInfo caller}, ${2:HWND callerWnd})",
		"description": ""
	},
	"ShowConsoleMsg": {
		"prefix": "ShowConsoleMsg",
		"scope": "eel",
		"body": "ShowConsoleMsg(${1:\"msg\"})",
		"description": "Show a message to the user (also useful for debugging). Send \"\\n\" for newline, \"\" to clear the console. See ClearConsole"
	},
	"reaper.ShowConsoleMsg": {
		"prefix": "reaper.ShowConsoleMsg",
		"scope": "lua",
		"body": "reaper.ShowConsoleMsg(${1:string msg})",
		"description": "Show a message to the user (also useful for debugging). Send \"\\n\" for newline, \"\" to clear the console. See ClearConsole"
	},
	"RPR_ShowConsoleMsg": {
		"prefix": "RPR_ShowConsoleMsg",
		"scope": "python",
		"body": "RPR_ShowConsoleMsg(${1:String msg})",
		"description": "Show a message to the user (also useful for debugging). Send \"\\n\" for newline, \"\" to clear the console. See ClearConsole"
	},
	"ShowMessageBox": {
		"prefix": "ShowMessageBox",
		"scope": "eel",
		"body": "${1:${2:int} = }ShowMessageBox(${3:\"msg\"}, ${4:\"title\"}, ${5:int type})",
		"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
	},
	"reaper.ShowMessageBox": {
		"prefix": "reaper.ShowMessageBox",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.ShowMessageBox(${3:string msg}, ${4:string title}, ${5:integer type})",
		"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
	},
	"RPR_ShowMessageBox": {
		"prefix": "RPR_ShowMessageBox",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_ShowMessageBox(${3:String msg}, ${4:String title}, ${5:Int type})",
		"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
	},
	"ShowPopupMenu": {
		"prefix": "ShowPopupMenu",
		"scope": "eel",
		"body": "ShowPopupMenu(${1:\"name\"}, ${2:int x}, ${3:int y}, ${4:HWND hwndParent}, ${5:void* ctx}, ${6:int ctx2}, ${7:int ctx3})",
		"description": "shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)"
	},
	"reaper.ShowPopupMenu": {
		"prefix": "reaper.ShowPopupMenu",
		"scope": "lua",
		"body": "reaper.ShowPopupMenu(${1:string name}, ${2:integer x}, ${3:integer y}, ${4:HWND hwndParent}, ${5:identifier ctx}, ${6:integer ctx2}, ${7:integer ctx3})",
		"description": "shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)"
	},
	"RPR_ShowPopupMenu": {
		"prefix": "RPR_ShowPopupMenu",
		"scope": "python",
		"body": "RPR_ShowPopupMenu(${1:String name}, ${2:Int x}, ${3:Int y}, ${4:HWND hwndParentOptional}, ${5:void ctxOptional}, ${6:Int ctx2Optional}, ${7:Int ctx3Optional})",
		"description": "shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)"
	},
	"SLIDER2DB": {
		"prefix": "SLIDER2DB",
		"scope": "eel",
		"body": "${1:${2:double} = }SLIDER2DB(${3:y})",
		"description": ""
	},
	"reaper.SLIDER2DB": {
		"prefix": "reaper.SLIDER2DB",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.SLIDER2DB(${3:number y})",
		"description": ""
	},
	"RPR_SLIDER2DB": {
		"prefix": "RPR_SLIDER2DB",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_SLIDER2DB(${3:Float y})",
		"description": ""
	},
	"SnapToGrid": {
		"prefix": "SnapToGrid",
		"scope": "eel",
		"body": "${1:${2:double} = }SnapToGrid(${3:ReaProject project}, ${4:time_pos})",
		"description": ""
	},
	"reaper.SnapToGrid": {
		"prefix": "reaper.SnapToGrid",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.SnapToGrid(${3:ReaProject project}, ${4:number time_pos})",
		"description": ""
	},
	"RPR_SnapToGrid": {
		"prefix": "RPR_SnapToGrid",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_SnapToGrid(${3:ReaProject project}, ${4:Float time_pos})",
		"description": ""
	},
	"SoloAllTracks": {
		"prefix": "SoloAllTracks",
		"scope": "eel",
		"body": "SoloAllTracks(${1:int solo})",
		"description": "solo=2 for SIP"
	},
	"reaper.SoloAllTracks": {
		"prefix": "reaper.SoloAllTracks",
		"scope": "lua",
		"body": "reaper.SoloAllTracks(${1:integer solo})",
		"description": "solo=2 for SIP"
	},
	"RPR_SoloAllTracks": {
		"prefix": "RPR_SoloAllTracks",
		"scope": "python",
		"body": "RPR_SoloAllTracks(${1:Int solo})",
		"description": "solo=2 for SIP"
	},
	"Splash_GetWnd": {
		"prefix": "Splash_GetWnd",
		"scope": "eel",
		"body": "${1:${2:HWND} = }Splash_GetWnd()",
		"description": "gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed."
	},
	"reaper.Splash_GetWnd": {
		"prefix": "reaper.Splash_GetWnd",
		"scope": "lua",
		"body": "${1:${2:HWND} = }reaper.Splash_GetWnd()",
		"description": "gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed."
	},
	"RPR_Splash_GetWnd": {
		"prefix": "RPR_Splash_GetWnd",
		"scope": "python",
		"body": "${1:${2:HWND} = }RPR_Splash_GetWnd()",
		"description": "gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed."
	},
	"SplitMediaItem": {
		"prefix": "SplitMediaItem",
		"scope": "eel",
		"body": "${1:${2:MediaItem} = }SplitMediaItem(${3:MediaItem item}, ${4:position})",
		"description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)"
	},
	"reaper.SplitMediaItem": {
		"prefix": "reaper.SplitMediaItem",
		"scope": "lua",
		"body": "${1:${2:MediaItem} = }reaper.SplitMediaItem(${3:MediaItem item}, ${4:number position})",
		"description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)"
	},
	"RPR_SplitMediaItem": {
		"prefix": "RPR_SplitMediaItem",
		"scope": "python",
		"body": "${1:${2:MediaItem} = }RPR_SplitMediaItem(${3:MediaItem item}, ${4:Float position})",
		"description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)"
	},
	"stringToGuid": {
		"prefix": "stringToGuid",
		"scope": "eel",
		"body": "stringToGuid(${1:\"str\"}, ${2:#gGUID})",
		"description": ""
	},
	"reaper.stringToGuid": {
		"prefix": "reaper.stringToGuid",
		"scope": "lua",
		"body": "${1:${2:string gGUID} = }reaper.stringToGuid(${3:string str}, ${4:string gGUID})",
		"description": ""
	},
	"RPR_stringToGuid": {
		"prefix": "RPR_stringToGuid",
		"scope": "python",
		"body": "RPR_stringToGuid(${1:String str}, ${2:GUID g})",
		"description": ""
	},
	"StuffMIDIMessage": {
		"prefix": "StuffMIDIMessage",
		"scope": "eel",
		"body": "StuffMIDIMessage(${1:int mode}, ${2:int msg1}, ${3:int msg2}, ${4:int msg3})",
		"description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName."
	},
	"reaper.StuffMIDIMessage": {
		"prefix": "reaper.StuffMIDIMessage",
		"scope": "lua",
		"body": "reaper.StuffMIDIMessage(${1:integer mode}, ${2:integer msg1}, ${3:integer msg2}, ${4:integer msg3})",
		"description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName."
	},
	"RPR_StuffMIDIMessage": {
		"prefix": "RPR_StuffMIDIMessage",
		"scope": "python",
		"body": "RPR_StuffMIDIMessage(${1:Int mode}, ${2:Int msg1}, ${3:Int msg2}, ${4:Int msg3})",
		"description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName."
	},
	"TakeFX_AddByName": {
		"prefix": "TakeFX_AddByName",
		"scope": "eel",
		"body": "${1:${2:int} = }TakeFX_AddByName(${3:MediaItem_Take take}, ${4:\"fxname\"}, ${5:int instantiate})",
		"description": "Adds or queries the position of a named FX in a take. Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found."
	},
	"reaper.TakeFX_AddByName": {
		"prefix": "reaper.TakeFX_AddByName",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TakeFX_AddByName(${3:MediaItem_Take take}, ${4:string fxname}, ${5:integer instantiate})",
		"description": "Adds or queries the position of a named FX in a take. Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found."
	},
	"RPR_TakeFX_AddByName": {
		"prefix": "RPR_TakeFX_AddByName",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TakeFX_AddByName(${3:MediaItem_Take take}, ${4:String fxname}, ${5:Int instantiate})",
		"description": "Adds or queries the position of a named FX in a take. Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found."
	},
	"TakeFX_CopyToTake": {
		"prefix": "TakeFX_CopyToTake",
		"scope": "eel",
		"body": "TakeFX_CopyToTake(${1:MediaItem_Take src_take}, ${2:int src_fx}, ${3:MediaItem_Take dest_take}, ${4:int dest_fx}, ${5:bool is_move})",
		"description": "Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder."
	},
	"reaper.TakeFX_CopyToTake": {
		"prefix": "reaper.TakeFX_CopyToTake",
		"scope": "lua",
		"body": "reaper.TakeFX_CopyToTake(${1:MediaItem_Take src_take}, ${2:integer src_fx}, ${3:MediaItem_Take dest_take}, ${4:integer dest_fx}, ${5:boolean is_move})",
		"description": "Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder."
	},
	"RPR_TakeFX_CopyToTake": {
		"prefix": "RPR_TakeFX_CopyToTake",
		"scope": "python",
		"body": "RPR_TakeFX_CopyToTake(${1:MediaItem_Take src_take}, ${2:Int src_fx}, ${3:MediaItem_Take dest_take}, ${4:Int dest_fx}, ${5:Boolean is_move})",
		"description": "Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder."
	},
	"TakeFX_CopyToTrack": {
		"prefix": "TakeFX_CopyToTrack",
		"scope": "eel",
		"body": "TakeFX_CopyToTrack(${1:MediaItem_Take src_take}, ${2:int src_fx}, ${3:MediaTrack dest_track}, ${4:int dest_fx}, ${5:bool is_move})",
		"description": "Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX."
	},
	"reaper.TakeFX_CopyToTrack": {
		"prefix": "reaper.TakeFX_CopyToTrack",
		"scope": "lua",
		"body": "reaper.TakeFX_CopyToTrack(${1:MediaItem_Take src_take}, ${2:integer src_fx}, ${3:MediaTrack dest_track}, ${4:integer dest_fx}, ${5:boolean is_move})",
		"description": "Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX."
	},
	"RPR_TakeFX_CopyToTrack": {
		"prefix": "RPR_TakeFX_CopyToTrack",
		"scope": "python",
		"body": "RPR_TakeFX_CopyToTrack(${1:MediaItem_Take src_take}, ${2:Int src_fx}, ${3:MediaTrack dest_track}, ${4:Int dest_fx}, ${5:Boolean is_move})",
		"description": "Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX."
	},
	"TakeFX_Delete": {
		"prefix": "TakeFX_Delete",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_Delete(${3:MediaItem_Take take}, ${4:int fx})",
		"description": "Remove a FX from take chain (returns true on success)"
	},
	"reaper.TakeFX_Delete": {
		"prefix": "reaper.TakeFX_Delete",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_Delete(${3:MediaItem_Take take}, ${4:integer fx})",
		"description": "Remove a FX from take chain (returns true on success)"
	},
	"RPR_TakeFX_Delete": {
		"prefix": "RPR_TakeFX_Delete",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_Delete(${3:MediaItem_Take take}, ${4:Int fx})",
		"description": "Remove a FX from take chain (returns true on success)"
	},
	"TakeFX_EndParamEdit": {
		"prefix": "TakeFX_EndParamEdit",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_EndParamEdit(${3:MediaItem_Take take}, ${4:int fx}, ${5:int param})",
		"description": ""
	},
	"reaper.TakeFX_EndParamEdit": {
		"prefix": "reaper.TakeFX_EndParamEdit",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_EndParamEdit(${3:MediaItem_Take take}, ${4:integer fx}, ${5:integer param})",
		"description": ""
	},
	"RPR_TakeFX_EndParamEdit": {
		"prefix": "RPR_TakeFX_EndParamEdit",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_EndParamEdit(${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int param})",
		"description": ""
	},
	"TakeFX_FormatParamValue": {
		"prefix": "TakeFX_FormatParamValue",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_FormatParamValue(${3:MediaItem_Take take}, ${4:int fx}, ${5:int param}, ${6:val}, ${7:#buf})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"reaper.TakeFX_FormatParamValue": {
		"prefix": "reaper.TakeFX_FormatParamValue",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TakeFX_FormatParamValue(${4:MediaItem_Take take}, ${5:integer fx}, ${6:integer param}, ${7:number val}, ${8:string buf})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"RPR_TakeFX_FormatParamValue": {
		"prefix": "RPR_TakeFX_FormatParamValue",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int param}, ${6:Float val}, ${7:String buf}, ${8:Int buf_sz} = }RPR_TakeFX_FormatParamValue(${9:take}, ${10:fx}, ${11:param}, ${12:val}, ${13:buf}, ${14:buf_sz})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"TakeFX_FormatParamValueNormalized": {
		"prefix": "TakeFX_FormatParamValueNormalized",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_FormatParamValueNormalized(${3:MediaItem_Take take}, ${4:int fx}, ${5:int param}, ${6:value}, ${7:#buf})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"reaper.TakeFX_FormatParamValueNormalized": {
		"prefix": "reaper.TakeFX_FormatParamValueNormalized",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TakeFX_FormatParamValueNormalized(${4:MediaItem_Take take}, ${5:integer fx}, ${6:integer param}, ${7:number value}, ${8:string buf})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"RPR_TakeFX_FormatParamValueNormalized": {
		"prefix": "RPR_TakeFX_FormatParamValueNormalized",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int param}, ${6:Float value}, ${7:String buf}, ${8:Int buf_sz} = }RPR_TakeFX_FormatParamValueNormalized(${9:take}, ${10:fx}, ${11:param}, ${12:value}, ${13:buf}, ${14:buf_sz})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"TakeFX_GetChainVisible": {
		"prefix": "TakeFX_GetChainVisible",
		"scope": "eel",
		"body": "${1:${2:int} = }TakeFX_GetChainVisible(${3:MediaItem_Take take})",
		"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"reaper.TakeFX_GetChainVisible": {
		"prefix": "reaper.TakeFX_GetChainVisible",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TakeFX_GetChainVisible(${3:MediaItem_Take take})",
		"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"RPR_TakeFX_GetChainVisible": {
		"prefix": "RPR_TakeFX_GetChainVisible",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TakeFX_GetChainVisible(${3:MediaItem_Take take})",
		"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"TakeFX_GetCount": {
		"prefix": "TakeFX_GetCount",
		"scope": "eel",
		"body": "${1:${2:int} = }TakeFX_GetCount(${3:MediaItem_Take take})",
		"description": ""
	},
	"reaper.TakeFX_GetCount": {
		"prefix": "reaper.TakeFX_GetCount",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TakeFX_GetCount(${3:MediaItem_Take take})",
		"description": ""
	},
	"RPR_TakeFX_GetCount": {
		"prefix": "RPR_TakeFX_GetCount",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TakeFX_GetCount(${3:MediaItem_Take take})",
		"description": ""
	},
	"TakeFX_GetEnabled": {
		"prefix": "TakeFX_GetEnabled",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_GetEnabled(${3:MediaItem_Take take}, ${4:int fx})",
		"description": "See TakeFX_SetEnabled"
	},
	"reaper.TakeFX_GetEnabled": {
		"prefix": "reaper.TakeFX_GetEnabled",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_GetEnabled(${3:MediaItem_Take take}, ${4:integer fx})",
		"description": "See TakeFX_SetEnabled"
	},
	"RPR_TakeFX_GetEnabled": {
		"prefix": "RPR_TakeFX_GetEnabled",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_GetEnabled(${3:MediaItem_Take take}, ${4:Int fx})",
		"description": "See TakeFX_SetEnabled"
	},
	"TakeFX_GetEnvelope": {
		"prefix": "TakeFX_GetEnvelope",
		"scope": "eel",
		"body": "${1:${2:TrackEnvelope} = }TakeFX_GetEnvelope(${3:MediaItem_Take take}, ${4:int fxindex}, ${5:int parameterindex}, ${6:bool create})",
		"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created."
	},
	"reaper.TakeFX_GetEnvelope": {
		"prefix": "reaper.TakeFX_GetEnvelope",
		"scope": "lua",
		"body": "${1:${2:TrackEnvelope} = }reaper.TakeFX_GetEnvelope(${3:MediaItem_Take take}, ${4:integer fxindex}, ${5:integer parameterindex}, ${6:boolean create})",
		"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created."
	},
	"RPR_TakeFX_GetEnvelope": {
		"prefix": "RPR_TakeFX_GetEnvelope",
		"scope": "python",
		"body": "${1:${2:TrackEnvelope} = }RPR_TakeFX_GetEnvelope(${3:MediaItem_Take take}, ${4:Int fxindex}, ${5:Int parameterindex}, ${6:Boolean create})",
		"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created."
	},
	"TakeFX_GetFloatingWindow": {
		"prefix": "TakeFX_GetFloatingWindow",
		"scope": "eel",
		"body": "${1:${2:HWND} = }TakeFX_GetFloatingWindow(${3:MediaItem_Take take}, ${4:int index})",
		"description": "returns HWND of floating window for effect index, if any"
	},
	"reaper.TakeFX_GetFloatingWindow": {
		"prefix": "reaper.TakeFX_GetFloatingWindow",
		"scope": "lua",
		"body": "${1:${2:HWND} = }reaper.TakeFX_GetFloatingWindow(${3:MediaItem_Take take}, ${4:integer index})",
		"description": "returns HWND of floating window for effect index, if any"
	},
	"RPR_TakeFX_GetFloatingWindow": {
		"prefix": "RPR_TakeFX_GetFloatingWindow",
		"scope": "python",
		"body": "${1:${2:HWND} = }RPR_TakeFX_GetFloatingWindow(${3:MediaItem_Take take}, ${4:Int index})",
		"description": "returns HWND of floating window for effect index, if any"
	},
	"TakeFX_GetFormattedParamValue": {
		"prefix": "TakeFX_GetFormattedParamValue",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_GetFormattedParamValue(${3:MediaItem_Take take}, ${4:int fx}, ${5:int param}, ${6:#buf})",
		"description": ""
	},
	"reaper.TakeFX_GetFormattedParamValue": {
		"prefix": "reaper.TakeFX_GetFormattedParamValue",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TakeFX_GetFormattedParamValue(${4:MediaItem_Take take}, ${5:integer fx}, ${6:integer param}, ${7:string buf})",
		"description": ""
	},
	"RPR_TakeFX_GetFormattedParamValue": {
		"prefix": "RPR_TakeFX_GetFormattedParamValue",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int param}, ${6:String buf}, ${7:Int buf_sz} = }RPR_TakeFX_GetFormattedParamValue(${8:take}, ${9:fx}, ${10:param}, ${11:buf}, ${12:buf_sz})",
		"description": ""
	},
	"TakeFX_GetFXGUID": {
		"prefix": "TakeFX_GetFXGUID",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_GetFXGUID(${3:#retguid}, ${4:MediaItem_Take take}, ${5:int fx})",
		"description": ""
	},
	"reaper.TakeFX_GetFXGUID": {
		"prefix": "reaper.TakeFX_GetFXGUID",
		"scope": "lua",
		"body": "${1:${2:string GUID} = }reaper.TakeFX_GetFXGUID(${3:MediaItem_Take take}, ${4:integer fx})",
		"description": ""
	},
	"RPR_TakeFX_GetFXGUID": {
		"prefix": "RPR_TakeFX_GetFXGUID",
		"scope": "python",
		"body": "${1:${2:GUID} = }RPR_TakeFX_GetFXGUID(${3:MediaItem_Take take}, ${4:Int fx})",
		"description": ""
	},
	"TakeFX_GetFXName": {
		"prefix": "TakeFX_GetFXName",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_GetFXName(${3:MediaItem_Take take}, ${4:int fx}, ${5:#buf})",
		"description": ""
	},
	"reaper.TakeFX_GetFXName": {
		"prefix": "reaper.TakeFX_GetFXName",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TakeFX_GetFXName(${4:MediaItem_Take take}, ${5:integer fx}, ${6:string buf})",
		"description": ""
	},
	"RPR_TakeFX_GetFXName": {
		"prefix": "RPR_TakeFX_GetFXName",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:String buf}, ${6:Int buf_sz} = }RPR_TakeFX_GetFXName(${7:take}, ${8:fx}, ${9:buf}, ${10:buf_sz})",
		"description": ""
	},
	"TakeFX_GetIOSize": {
		"prefix": "TakeFX_GetIOSize",
		"scope": "eel",
		"body": "${1:${2:int} = }TakeFX_GetIOSize(${3:MediaItem_Take take}, ${4:int fx}, ${5:optional int +inputPins}, ${6:optional int +outputPins})",
		"description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error"
	},
	"reaper.TakeFX_GetIOSize": {
		"prefix": "reaper.TakeFX_GetIOSize",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:optional number inputPins}, ${4:optional number outputPins} = }reaper.TakeFX_GetIOSize(${5:MediaItem_Take take}, ${6:integer fx})",
		"description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error"
	},
	"RPR_TakeFX_GetIOSize": {
		"prefix": "RPR_TakeFX_GetIOSize",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int inputPinsOutOptional}, ${6:Int outputPinsOutOptional} = }RPR_TakeFX_GetIOSize(${7:take}, ${8:fx}, ${9:inputPinsOutOptional}, ${10:outputPinsOutOptional})",
		"description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error"
	},
	"TakeFX_GetNamedConfigParm": {
		"prefix": "TakeFX_GetNamedConfigParm",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_GetNamedConfigParm(${3:MediaItem_Take take}, ${4:int fx}, ${5:\"parmname\"}, ${6:#buf})",
		"description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm"
	},
	"reaper.TakeFX_GetNamedConfigParm": {
		"prefix": "reaper.TakeFX_GetNamedConfigParm",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TakeFX_GetNamedConfigParm(${4:MediaItem_Take take}, ${5:integer fx}, ${6:string parmname})",
		"description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm"
	},
	"RPR_TakeFX_GetNamedConfigParm": {
		"prefix": "RPR_TakeFX_GetNamedConfigParm",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:String parmname}, ${6:String bufOut}, ${7:Int bufOut_sz} = }RPR_TakeFX_GetNamedConfigParm(${8:take}, ${9:fx}, ${10:parmname}, ${11:bufOut}, ${12:bufOut_sz})",
		"description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm"
	},
	"TakeFX_GetNumParams": {
		"prefix": "TakeFX_GetNumParams",
		"scope": "eel",
		"body": "${1:${2:int} = }TakeFX_GetNumParams(${3:MediaItem_Take take}, ${4:int fx})",
		"description": ""
	},
	"reaper.TakeFX_GetNumParams": {
		"prefix": "reaper.TakeFX_GetNumParams",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TakeFX_GetNumParams(${3:MediaItem_Take take}, ${4:integer fx})",
		"description": ""
	},
	"RPR_TakeFX_GetNumParams": {
		"prefix": "RPR_TakeFX_GetNumParams",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TakeFX_GetNumParams(${3:MediaItem_Take take}, ${4:Int fx})",
		"description": ""
	},
	"TakeFX_GetOffline": {
		"prefix": "TakeFX_GetOffline",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_GetOffline(${3:MediaItem_Take take}, ${4:int fx})",
		"description": "See TakeFX_SetOffline"
	},
	"reaper.TakeFX_GetOffline": {
		"prefix": "reaper.TakeFX_GetOffline",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_GetOffline(${3:MediaItem_Take take}, ${4:integer fx})",
		"description": "See TakeFX_SetOffline"
	},
	"RPR_TakeFX_GetOffline": {
		"prefix": "RPR_TakeFX_GetOffline",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_GetOffline(${3:MediaItem_Take take}, ${4:Int fx})",
		"description": "See TakeFX_SetOffline"
	},
	"TakeFX_GetOpen": {
		"prefix": "TakeFX_GetOpen",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_GetOpen(${3:MediaItem_Take take}, ${4:int fx})",
		"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen"
	},
	"reaper.TakeFX_GetOpen": {
		"prefix": "reaper.TakeFX_GetOpen",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_GetOpen(${3:MediaItem_Take take}, ${4:integer fx})",
		"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen"
	},
	"RPR_TakeFX_GetOpen": {
		"prefix": "RPR_TakeFX_GetOpen",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_GetOpen(${3:MediaItem_Take take}, ${4:Int fx})",
		"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen"
	},
	"TakeFX_GetParam": {
		"prefix": "TakeFX_GetParam",
		"scope": "eel",
		"body": "${1:${2:double} = }TakeFX_GetParam(${3:MediaItem_Take take}, ${4:int fx}, ${5:int param}, ${6:+minval}, ${7:+maxval})",
		"description": ""
	},
	"reaper.TakeFX_GetParam": {
		"prefix": "reaper.TakeFX_GetParam",
		"scope": "lua",
		"body": "${1:${2:number retval}, ${3:number minval}, ${4:number maxval} = }reaper.TakeFX_GetParam(${5:MediaItem_Take take}, ${6:integer fx}, ${7:integer param})",
		"description": ""
	},
	"RPR_TakeFX_GetParam": {
		"prefix": "RPR_TakeFX_GetParam",
		"scope": "python",
		"body": "${1:${2:Float retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int param}, ${6:Float minvalOut}, ${7:Float maxvalOut} = }RPR_TakeFX_GetParam(${8:take}, ${9:fx}, ${10:param}, ${11:minvalOut}, ${12:maxvalOut})",
		"description": ""
	},
	"TakeFX_GetParameterStepSizes": {
		"prefix": "TakeFX_GetParameterStepSizes",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_GetParameterStepSizes(${3:MediaItem_Take take}, ${4:int fx}, ${5:int param}, ${6:+step}, ${7:+smallstep}, ${8:+largestep}, ${9:bool +istoggle})",
		"description": ""
	},
	"reaper.TakeFX_GetParameterStepSizes": {
		"prefix": "reaper.TakeFX_GetParameterStepSizes",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number step}, ${4:number smallstep}, ${5:number largestep}, ${6:boolean istoggle} = }reaper.TakeFX_GetParameterStepSizes(${7:MediaItem_Take take}, ${8:integer fx}, ${9:integer param})",
		"description": ""
	},
	"RPR_TakeFX_GetParameterStepSizes": {
		"prefix": "RPR_TakeFX_GetParameterStepSizes",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int param}, ${6:Float stepOut}, ${7:Float smallstepOut}, ${8:Float largestepOut}, ${9:Boolean istoggleOut} = }RPR_TakeFX_GetParameterStepSizes(${10:take}, ${11:fx}, ${12:param}, ${13:stepOut}, ${14:smallstepOut}, ${15:largestepOut}, ${16:istoggleOut})",
		"description": ""
	},
	"TakeFX_GetParamEx": {
		"prefix": "TakeFX_GetParamEx",
		"scope": "eel",
		"body": "${1:${2:double} = }TakeFX_GetParamEx(${3:MediaItem_Take take}, ${4:int fx}, ${5:int param}, ${6:+minval}, ${7:+maxval}, ${8:+midval})",
		"description": ""
	},
	"reaper.TakeFX_GetParamEx": {
		"prefix": "reaper.TakeFX_GetParamEx",
		"scope": "lua",
		"body": "${1:${2:number retval}, ${3:number minval}, ${4:number maxval}, ${5:number midval} = }reaper.TakeFX_GetParamEx(${6:MediaItem_Take take}, ${7:integer fx}, ${8:integer param})",
		"description": ""
	},
	"RPR_TakeFX_GetParamEx": {
		"prefix": "RPR_TakeFX_GetParamEx",
		"scope": "python",
		"body": "${1:${2:Float retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int param}, ${6:Float minvalOut}, ${7:Float maxvalOut}, ${8:Float midvalOut} = }RPR_TakeFX_GetParamEx(${9:take}, ${10:fx}, ${11:param}, ${12:minvalOut}, ${13:maxvalOut}, ${14:midvalOut})",
		"description": ""
	},
	"TakeFX_GetParamName": {
		"prefix": "TakeFX_GetParamName",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_GetParamName(${3:MediaItem_Take take}, ${4:int fx}, ${5:int param}, ${6:#buf})",
		"description": ""
	},
	"reaper.TakeFX_GetParamName": {
		"prefix": "reaper.TakeFX_GetParamName",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TakeFX_GetParamName(${4:MediaItem_Take take}, ${5:integer fx}, ${6:integer param}, ${7:string buf})",
		"description": ""
	},
	"RPR_TakeFX_GetParamName": {
		"prefix": "RPR_TakeFX_GetParamName",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int param}, ${6:String buf}, ${7:Int buf_sz} = }RPR_TakeFX_GetParamName(${8:take}, ${9:fx}, ${10:param}, ${11:buf}, ${12:buf_sz})",
		"description": ""
	},
	"TakeFX_GetParamNormalized": {
		"prefix": "TakeFX_GetParamNormalized",
		"scope": "eel",
		"body": "${1:${2:double} = }TakeFX_GetParamNormalized(${3:MediaItem_Take take}, ${4:int fx}, ${5:int param})",
		"description": ""
	},
	"reaper.TakeFX_GetParamNormalized": {
		"prefix": "reaper.TakeFX_GetParamNormalized",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TakeFX_GetParamNormalized(${3:MediaItem_Take take}, ${4:integer fx}, ${5:integer param})",
		"description": ""
	},
	"RPR_TakeFX_GetParamNormalized": {
		"prefix": "RPR_TakeFX_GetParamNormalized",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TakeFX_GetParamNormalized(${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int param})",
		"description": ""
	},
	"TakeFX_GetPinMappings": {
		"prefix": "TakeFX_GetPinMappings",
		"scope": "eel",
		"body": "${1:${2:int} = }TakeFX_GetPinMappings(${3:MediaItem_Take tr}, ${4:int fx}, ${5:int isoutput}, ${6:int pin}, ${7:optional int +high32})",
		"description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits"
	},
	"reaper.TakeFX_GetPinMappings": {
		"prefix": "reaper.TakeFX_GetPinMappings",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:optional number high32} = }reaper.TakeFX_GetPinMappings(${4:MediaItem_Take tr}, ${5:integer fx}, ${6:integer isoutput}, ${7:integer pin})",
		"description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits"
	},
	"RPR_TakeFX_GetPinMappings": {
		"prefix": "RPR_TakeFX_GetPinMappings",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:MediaItem_Take tr}, ${4:Int fx}, ${5:Int isoutput}, ${6:Int pin}, ${7:Int high32OutOptional} = }RPR_TakeFX_GetPinMappings(${8:tr}, ${9:fx}, ${10:isoutput}, ${11:pin}, ${12:high32OutOptional})",
		"description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits"
	},
	"TakeFX_GetPreset": {
		"prefix": "TakeFX_GetPreset",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_GetPreset(${3:MediaItem_Take take}, ${4:int fx}, ${5:#presetname})",
		"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TakeFX_SetPreset."
	},
	"reaper.TakeFX_GetPreset": {
		"prefix": "reaper.TakeFX_GetPreset",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string presetname} = }reaper.TakeFX_GetPreset(${4:MediaItem_Take take}, ${5:integer fx}, ${6:string presetname})",
		"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TakeFX_SetPreset."
	},
	"RPR_TakeFX_GetPreset": {
		"prefix": "RPR_TakeFX_GetPreset",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:String presetname}, ${6:Int presetname_sz} = }RPR_TakeFX_GetPreset(${7:take}, ${8:fx}, ${9:presetname}, ${10:presetname_sz})",
		"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TakeFX_SetPreset."
	},
	"TakeFX_GetPresetIndex": {
		"prefix": "TakeFX_GetPresetIndex",
		"scope": "eel",
		"body": "${1:${2:int} = }TakeFX_GetPresetIndex(${3:MediaItem_Take take}, ${4:int fx}, ${5:int +numberOfPresets})",
		"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex"
	},
	"reaper.TakeFX_GetPresetIndex": {
		"prefix": "reaper.TakeFX_GetPresetIndex",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:number numberOfPresets} = }reaper.TakeFX_GetPresetIndex(${4:MediaItem_Take take}, ${5:integer fx})",
		"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex"
	},
	"RPR_TakeFX_GetPresetIndex": {
		"prefix": "RPR_TakeFX_GetPresetIndex",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int numberOfPresetsOut} = }RPR_TakeFX_GetPresetIndex(${6:take}, ${7:fx}, ${8:numberOfPresetsOut})",
		"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex"
	},
	"TakeFX_GetUserPresetFilename": {
		"prefix": "TakeFX_GetUserPresetFilename",
		"scope": "eel",
		"body": "TakeFX_GetUserPresetFilename(${1:MediaItem_Take take}, ${2:int fx}, ${3:#fn})",
		"description": ""
	},
	"reaper.TakeFX_GetUserPresetFilename": {
		"prefix": "reaper.TakeFX_GetUserPresetFilename",
		"scope": "lua",
		"body": "${1:${2:string fn} = }reaper.TakeFX_GetUserPresetFilename(${3:MediaItem_Take take}, ${4:integer fx}, ${5:string fn})",
		"description": ""
	},
	"RPR_TakeFX_GetUserPresetFilename": {
		"prefix": "RPR_TakeFX_GetUserPresetFilename",
		"scope": "python",
		"body": "${1:${2:MediaItem_Take take}, ${3:Int fx}, ${4:String fn}, ${5:Int fn_sz} = }RPR_TakeFX_GetUserPresetFilename(${6:take}, ${7:fx}, ${8:fn}, ${9:fn_sz})",
		"description": ""
	},
	"TakeFX_NavigatePresets": {
		"prefix": "TakeFX_NavigatePresets",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_NavigatePresets(${3:MediaItem_Take take}, ${4:int fx}, ${5:int presetmove})",
		"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc."
	},
	"reaper.TakeFX_NavigatePresets": {
		"prefix": "reaper.TakeFX_NavigatePresets",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_NavigatePresets(${3:MediaItem_Take take}, ${4:integer fx}, ${5:integer presetmove})",
		"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc."
	},
	"RPR_TakeFX_NavigatePresets": {
		"prefix": "RPR_TakeFX_NavigatePresets",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_NavigatePresets(${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int presetmove})",
		"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc."
	},
	"TakeFX_SetEnabled": {
		"prefix": "TakeFX_SetEnabled",
		"scope": "eel",
		"body": "TakeFX_SetEnabled(${1:MediaItem_Take take}, ${2:int fx}, ${3:bool enabled})",
		"description": "See TakeFX_GetEnabled"
	},
	"reaper.TakeFX_SetEnabled": {
		"prefix": "reaper.TakeFX_SetEnabled",
		"scope": "lua",
		"body": "reaper.TakeFX_SetEnabled(${1:MediaItem_Take take}, ${2:integer fx}, ${3:boolean enabled})",
		"description": "See TakeFX_GetEnabled"
	},
	"RPR_TakeFX_SetEnabled": {
		"prefix": "RPR_TakeFX_SetEnabled",
		"scope": "python",
		"body": "RPR_TakeFX_SetEnabled(${1:MediaItem_Take take}, ${2:Int fx}, ${3:Boolean enabled})",
		"description": "See TakeFX_GetEnabled"
	},
	"TakeFX_SetNamedConfigParm": {
		"prefix": "TakeFX_SetNamedConfigParm",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_SetNamedConfigParm(${3:MediaItem_Take take}, ${4:int fx}, ${5:\"parmname\"}, ${6:\"value\"})",
		"description": "gets plug-in specific named configuration value (returns true on success)"
	},
	"reaper.TakeFX_SetNamedConfigParm": {
		"prefix": "reaper.TakeFX_SetNamedConfigParm",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_SetNamedConfigParm(${3:MediaItem_Take take}, ${4:integer fx}, ${5:string parmname}, ${6:string value})",
		"description": "gets plug-in specific named configuration value (returns true on success)"
	},
	"RPR_TakeFX_SetNamedConfigParm": {
		"prefix": "RPR_TakeFX_SetNamedConfigParm",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_SetNamedConfigParm(${3:MediaItem_Take take}, ${4:Int fx}, ${5:String parmname}, ${6:String value})",
		"description": "gets plug-in specific named configuration value (returns true on success)"
	},
	"TakeFX_SetOffline": {
		"prefix": "TakeFX_SetOffline",
		"scope": "eel",
		"body": "TakeFX_SetOffline(${1:MediaItem_Take take}, ${2:int fx}, ${3:bool offline})",
		"description": "See TakeFX_GetOffline"
	},
	"reaper.TakeFX_SetOffline": {
		"prefix": "reaper.TakeFX_SetOffline",
		"scope": "lua",
		"body": "reaper.TakeFX_SetOffline(${1:MediaItem_Take take}, ${2:integer fx}, ${3:boolean offline})",
		"description": "See TakeFX_GetOffline"
	},
	"RPR_TakeFX_SetOffline": {
		"prefix": "RPR_TakeFX_SetOffline",
		"scope": "python",
		"body": "RPR_TakeFX_SetOffline(${1:MediaItem_Take take}, ${2:Int fx}, ${3:Boolean offline})",
		"description": "See TakeFX_GetOffline"
	},
	"TakeFX_SetOpen": {
		"prefix": "TakeFX_SetOpen",
		"scope": "eel",
		"body": "TakeFX_SetOpen(${1:MediaItem_Take take}, ${2:int fx}, ${3:bool open})",
		"description": "Open this FX UI. See TakeFX_GetOpen"
	},
	"reaper.TakeFX_SetOpen": {
		"prefix": "reaper.TakeFX_SetOpen",
		"scope": "lua",
		"body": "reaper.TakeFX_SetOpen(${1:MediaItem_Take take}, ${2:integer fx}, ${3:boolean open})",
		"description": "Open this FX UI. See TakeFX_GetOpen"
	},
	"RPR_TakeFX_SetOpen": {
		"prefix": "RPR_TakeFX_SetOpen",
		"scope": "python",
		"body": "RPR_TakeFX_SetOpen(${1:MediaItem_Take take}, ${2:Int fx}, ${3:Boolean open})",
		"description": "Open this FX UI. See TakeFX_GetOpen"
	},
	"TakeFX_SetParam": {
		"prefix": "TakeFX_SetParam",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_SetParam(${3:MediaItem_Take take}, ${4:int fx}, ${5:int param}, ${6:val})",
		"description": ""
	},
	"reaper.TakeFX_SetParam": {
		"prefix": "reaper.TakeFX_SetParam",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_SetParam(${3:MediaItem_Take take}, ${4:integer fx}, ${5:integer param}, ${6:number val})",
		"description": ""
	},
	"RPR_TakeFX_SetParam": {
		"prefix": "RPR_TakeFX_SetParam",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_SetParam(${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int param}, ${6:Float val})",
		"description": ""
	},
	"TakeFX_SetParamNormalized": {
		"prefix": "TakeFX_SetParamNormalized",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_SetParamNormalized(${3:MediaItem_Take take}, ${4:int fx}, ${5:int param}, ${6:value})",
		"description": ""
	},
	"reaper.TakeFX_SetParamNormalized": {
		"prefix": "reaper.TakeFX_SetParamNormalized",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_SetParamNormalized(${3:MediaItem_Take take}, ${4:integer fx}, ${5:integer param}, ${6:number value})",
		"description": ""
	},
	"RPR_TakeFX_SetParamNormalized": {
		"prefix": "RPR_TakeFX_SetParamNormalized",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_SetParamNormalized(${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int param}, ${6:Float value})",
		"description": ""
	},
	"TakeFX_SetPinMappings": {
		"prefix": "TakeFX_SetPinMappings",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_SetPinMappings(${3:MediaItem_Take tr}, ${4:int fx}, ${5:int isoutput}, ${6:int pin}, ${7:int low32bits}, ${8:int hi32bits})",
		"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)"
	},
	"reaper.TakeFX_SetPinMappings": {
		"prefix": "reaper.TakeFX_SetPinMappings",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_SetPinMappings(${3:MediaItem_Take tr}, ${4:integer fx}, ${5:integer isoutput}, ${6:integer pin}, ${7:integer low32bits}, ${8:integer hi32bits})",
		"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)"
	},
	"RPR_TakeFX_SetPinMappings": {
		"prefix": "RPR_TakeFX_SetPinMappings",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_SetPinMappings(${3:MediaItem_Take tr}, ${4:Int fx}, ${5:Int isoutput}, ${6:Int pin}, ${7:Int low32bits}, ${8:Int hi32bits})",
		"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)"
	},
	"TakeFX_SetPreset": {
		"prefix": "TakeFX_SetPreset",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_SetPreset(${3:MediaItem_Take take}, ${4:int fx}, ${5:\"presetname\"})",
		"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset."
	},
	"reaper.TakeFX_SetPreset": {
		"prefix": "reaper.TakeFX_SetPreset",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_SetPreset(${3:MediaItem_Take take}, ${4:integer fx}, ${5:string presetname})",
		"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset."
	},
	"RPR_TakeFX_SetPreset": {
		"prefix": "RPR_TakeFX_SetPreset",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_SetPreset(${3:MediaItem_Take take}, ${4:Int fx}, ${5:String presetname})",
		"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset."
	},
	"TakeFX_SetPresetByIndex": {
		"prefix": "TakeFX_SetPresetByIndex",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeFX_SetPresetByIndex(${3:MediaItem_Take take}, ${4:int fx}, ${5:int idx})",
		"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex."
	},
	"reaper.TakeFX_SetPresetByIndex": {
		"prefix": "reaper.TakeFX_SetPresetByIndex",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeFX_SetPresetByIndex(${3:MediaItem_Take take}, ${4:integer fx}, ${5:integer idx})",
		"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex."
	},
	"RPR_TakeFX_SetPresetByIndex": {
		"prefix": "RPR_TakeFX_SetPresetByIndex",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeFX_SetPresetByIndex(${3:MediaItem_Take take}, ${4:Int fx}, ${5:Int idx})",
		"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex."
	},
	"TakeFX_Show": {
		"prefix": "TakeFX_Show",
		"scope": "eel",
		"body": "TakeFX_Show(${1:MediaItem_Take take}, ${2:int index}, ${3:int showFlag})",
		"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)"
	},
	"reaper.TakeFX_Show": {
		"prefix": "reaper.TakeFX_Show",
		"scope": "lua",
		"body": "reaper.TakeFX_Show(${1:MediaItem_Take take}, ${2:integer index}, ${3:integer showFlag})",
		"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)"
	},
	"RPR_TakeFX_Show": {
		"prefix": "RPR_TakeFX_Show",
		"scope": "python",
		"body": "RPR_TakeFX_Show(${1:MediaItem_Take take}, ${2:Int index}, ${3:Int showFlag})",
		"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)"
	},
	"TakeIsMIDI": {
		"prefix": "TakeIsMIDI",
		"scope": "eel",
		"body": "${1:${2:bool} = }TakeIsMIDI(${3:MediaItem_Take take})",
		"description": "Returns true if the active take contains MIDI."
	},
	"reaper.TakeIsMIDI": {
		"prefix": "reaper.TakeIsMIDI",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TakeIsMIDI(${3:MediaItem_Take take})",
		"description": "Returns true if the active take contains MIDI."
	},
	"RPR_TakeIsMIDI": {
		"prefix": "RPR_TakeIsMIDI",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TakeIsMIDI(${3:MediaItem_Take take})",
		"description": "Returns true if the active take contains MIDI."
	},
	"reaper.time_precise": {
		"prefix": "reaper.time_precise",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.time_precise()",
		"description": "Gets a precise system timestamp in seconds"
	},
	"RPR_time_precise": {
		"prefix": "RPR_time_precise",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_time_precise()",
		"description": "Gets a precise system timestamp in seconds"
	},
	"TimeMap2_beatsToTime": {
		"prefix": "TimeMap2_beatsToTime",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap2_beatsToTime(${3:ReaProject proj}, ${4:tpos}, ${5:optional int measuresIn})",
		"description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time."
	},
	"reaper.TimeMap2_beatsToTime": {
		"prefix": "reaper.TimeMap2_beatsToTime",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TimeMap2_beatsToTime(${3:ReaProject proj}, ${4:number tpos}, ${5:optional number measuresIn})",
		"description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time."
	},
	"RPR_TimeMap2_beatsToTime": {
		"prefix": "RPR_TimeMap2_beatsToTime",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TimeMap2_beatsToTime(${3:ReaProject proj}, ${4:Float tpos}, ${5:const int measuresInOptional})",
		"description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time."
	},
	"TimeMap2_GetDividedBpmAtTime": {
		"prefix": "TimeMap2_GetDividedBpmAtTime",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap2_GetDividedBpmAtTime(${3:ReaProject proj}, ${4:time})",
		"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
	},
	"reaper.TimeMap2_GetDividedBpmAtTime": {
		"prefix": "reaper.TimeMap2_GetDividedBpmAtTime",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TimeMap2_GetDividedBpmAtTime(${3:ReaProject proj}, ${4:number time})",
		"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
	},
	"RPR_TimeMap2_GetDividedBpmAtTime": {
		"prefix": "RPR_TimeMap2_GetDividedBpmAtTime",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TimeMap2_GetDividedBpmAtTime(${3:ReaProject proj}, ${4:Float time})",
		"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
	},
	"TimeMap2_GetNextChangeTime": {
		"prefix": "TimeMap2_GetNextChangeTime",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap2_GetNextChangeTime(${3:ReaProject proj}, ${4:time})",
		"description": "when does the next time map (tempo or time sig) change occur"
	},
	"reaper.TimeMap2_GetNextChangeTime": {
		"prefix": "reaper.TimeMap2_GetNextChangeTime",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TimeMap2_GetNextChangeTime(${3:ReaProject proj}, ${4:number time})",
		"description": "when does the next time map (tempo or time sig) change occur"
	},
	"RPR_TimeMap2_GetNextChangeTime": {
		"prefix": "RPR_TimeMap2_GetNextChangeTime",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TimeMap2_GetNextChangeTime(${3:ReaProject proj}, ${4:Float time})",
		"description": "when does the next time map (tempo or time sig) change occur"
	},
	"TimeMap2_QNToTime": {
		"prefix": "TimeMap2_QNToTime",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap2_QNToTime(${3:ReaProject proj}, ${4:qn})",
		"description": "converts project QN position to time."
	},
	"reaper.TimeMap2_QNToTime": {
		"prefix": "reaper.TimeMap2_QNToTime",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TimeMap2_QNToTime(${3:ReaProject proj}, ${4:number qn})",
		"description": "converts project QN position to time."
	},
	"RPR_TimeMap2_QNToTime": {
		"prefix": "RPR_TimeMap2_QNToTime",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TimeMap2_QNToTime(${3:ReaProject proj}, ${4:Float qn})",
		"description": "converts project QN position to time."
	},
	"TimeMap2_timeToBeats": {
		"prefix": "TimeMap2_timeToBeats",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap2_timeToBeats(${3:ReaProject proj}, ${4:tpos}, ${5:optional int +measures}, ${6:optional int +cml}, ${7:optional +fullbeats}, ${8:optional int +cdenom})",
		"description": "convert a time into beats.\n\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\n\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\n\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\n\nif cdenom is non-NULL, will be set to the current time signature denominator."
	},
	"reaper.TimeMap2_timeToBeats": {
		"prefix": "reaper.TimeMap2_timeToBeats",
		"scope": "lua",
		"body": "${1:${2:number retval}, ${3:optional number measures}, ${4:optional number cml}, ${5:optional number fullbeats}, ${6:optional number cdenom} = }reaper.TimeMap2_timeToBeats(${7:ReaProject proj}, ${8:number tpos})",
		"description": "convert a time into beats.\n\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\n\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\n\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\n\nif cdenom is non-NULL, will be set to the current time signature denominator."
	},
	"RPR_TimeMap2_timeToBeats": {
		"prefix": "RPR_TimeMap2_timeToBeats",
		"scope": "python",
		"body": "${1:${2:Float retval}, ${3:ReaProject proj}, ${4:Float tpos}, ${5:Int measuresOutOptional}, ${6:Int cmlOutOptional}, ${7:Float fullbeatsOutOptional}, ${8:Int cdenomOutOptional} = }RPR_TimeMap2_timeToBeats(${9:proj}, ${10:tpos}, ${11:measuresOutOptional}, ${12:cmlOutOptional}, ${13:fullbeatsOutOptional}, ${14:cdenomOutOptional})",
		"description": "convert a time into beats.\n\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\n\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\n\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\n\nif cdenom is non-NULL, will be set to the current time signature denominator."
	},
	"TimeMap2_timeToQN": {
		"prefix": "TimeMap2_timeToQN",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap2_timeToQN(${3:ReaProject proj}, ${4:tpos})",
		"description": "converts project time position to QN position."
	},
	"reaper.TimeMap2_timeToQN": {
		"prefix": "reaper.TimeMap2_timeToQN",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TimeMap2_timeToQN(${3:ReaProject proj}, ${4:number tpos})",
		"description": "converts project time position to QN position."
	},
	"RPR_TimeMap2_timeToQN": {
		"prefix": "RPR_TimeMap2_timeToQN",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TimeMap2_timeToQN(${3:ReaProject proj}, ${4:Float tpos})",
		"description": "converts project time position to QN position."
	},
	"TimeMap_curFrameRate": {
		"prefix": "TimeMap_curFrameRate",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap_curFrameRate(${3:ReaProject proj}, ${4:optional bool +dropFrame})",
		"description": "Gets project framerate, and optionally whether it is drop-frame timecode"
	},
	"reaper.TimeMap_curFrameRate": {
		"prefix": "reaper.TimeMap_curFrameRate",
		"scope": "lua",
		"body": "${1:${2:number retval}, ${3:optional boolean dropFrame} = }reaper.TimeMap_curFrameRate(${4:ReaProject proj})",
		"description": "Gets project framerate, and optionally whether it is drop-frame timecode"
	},
	"RPR_TimeMap_curFrameRate": {
		"prefix": "RPR_TimeMap_curFrameRate",
		"scope": "python",
		"body": "${1:${2:Float retval}, ${3:ReaProject proj}, ${4:Boolean dropFrameOutOptional} = }RPR_TimeMap_curFrameRate(${5:proj}, ${6:dropFrameOutOptional})",
		"description": "Gets project framerate, and optionally whether it is drop-frame timecode"
	},
	"TimeMap_GetDividedBpmAtTime": {
		"prefix": "TimeMap_GetDividedBpmAtTime",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap_GetDividedBpmAtTime(${3:time})",
		"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
	},
	"reaper.TimeMap_GetDividedBpmAtTime": {
		"prefix": "reaper.TimeMap_GetDividedBpmAtTime",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TimeMap_GetDividedBpmAtTime(${3:number time})",
		"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
	},
	"RPR_TimeMap_GetDividedBpmAtTime": {
		"prefix": "RPR_TimeMap_GetDividedBpmAtTime",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TimeMap_GetDividedBpmAtTime(${3:Float time})",
		"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
	},
	"TimeMap_GetMeasureInfo": {
		"prefix": "TimeMap_GetMeasureInfo",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap_GetMeasureInfo(${3:ReaProject proj}, ${4:int measure}, ${5:+qn_start}, ${6:+qn_end}, ${7:int +timesig_num}, ${8:int +timesig_denom}, ${9:+tempo})",
		"description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start."
	},
	"reaper.TimeMap_GetMeasureInfo": {
		"prefix": "reaper.TimeMap_GetMeasureInfo",
		"scope": "lua",
		"body": "${1:${2:number retval}, ${3:number qn_start}, ${4:number qn_end}, ${5:number timesig_num}, ${6:number timesig_denom}, ${7:number tempo} = }reaper.TimeMap_GetMeasureInfo(${8:ReaProject proj}, ${9:integer measure})",
		"description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start."
	},
	"RPR_TimeMap_GetMeasureInfo": {
		"prefix": "RPR_TimeMap_GetMeasureInfo",
		"scope": "python",
		"body": "${1:${2:Float retval}, ${3:ReaProject proj}, ${4:Int measure}, ${5:Float qn_startOut}, ${6:Float qn_endOut}, ${7:Int timesig_numOut}, ${8:Int timesig_denomOut}, ${9:Float tempoOut} = }RPR_TimeMap_GetMeasureInfo(${10:proj}, ${11:measure}, ${12:qn_startOut}, ${13:qn_endOut}, ${14:timesig_numOut}, ${15:timesig_denomOut}, ${16:tempoOut})",
		"description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start."
	},
	"TimeMap_GetMetronomePattern": {
		"prefix": "TimeMap_GetMetronomePattern",
		"scope": "eel",
		"body": "${1:${2:int} = }TimeMap_GetMetronomePattern(${3:ReaProject proj}, ${4:time}, ${5:#pattern})",
		"description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\". The length of the string is the time signature numerator, and the function returns the time signature denominator."
	},
	"reaper.TimeMap_GetMetronomePattern": {
		"prefix": "reaper.TimeMap_GetMetronomePattern",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:string pattern} = }reaper.TimeMap_GetMetronomePattern(${4:ReaProject proj}, ${5:number time}, ${6:string pattern})",
		"description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\". The length of the string is the time signature numerator, and the function returns the time signature denominator."
	},
	"RPR_TimeMap_GetMetronomePattern": {
		"prefix": "RPR_TimeMap_GetMetronomePattern",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:ReaProject proj}, ${4:Float time}, ${5:String pattern}, ${6:Int pattern_sz} = }RPR_TimeMap_GetMetronomePattern(${7:proj}, ${8:time}, ${9:pattern}, ${10:pattern_sz})",
		"description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\". The length of the string is the time signature numerator, and the function returns the time signature denominator."
	},
	"TimeMap_GetTimeSigAtTime": {
		"prefix": "TimeMap_GetTimeSigAtTime",
		"scope": "eel",
		"body": "TimeMap_GetTimeSigAtTime(${1:ReaProject proj}, ${2:time}, ${3:int +timesig_num}, ${4:int +timesig_denom}, ${5:+tempo})",
		"description": "get the effective time signature and tempo"
	},
	"reaper.TimeMap_GetTimeSigAtTime": {
		"prefix": "reaper.TimeMap_GetTimeSigAtTime",
		"scope": "lua",
		"body": "${1:${2:number timesig_num}, ${3:number timesig_denom}, ${4:number tempo} = }reaper.TimeMap_GetTimeSigAtTime(${5:ReaProject proj}, ${6:number time})",
		"description": "get the effective time signature and tempo"
	},
	"RPR_TimeMap_GetTimeSigAtTime": {
		"prefix": "RPR_TimeMap_GetTimeSigAtTime",
		"scope": "python",
		"body": "${1:${2:ReaProject proj}, ${3:Float time}, ${4:Int timesig_numOut}, ${5:Int timesig_denomOut}, ${6:Float tempoOut} = }RPR_TimeMap_GetTimeSigAtTime(${7:proj}, ${8:time}, ${9:timesig_numOut}, ${10:timesig_denomOut}, ${11:tempoOut})",
		"description": "get the effective time signature and tempo"
	},
	"TimeMap_QNToMeasures": {
		"prefix": "TimeMap_QNToMeasures",
		"scope": "eel",
		"body": "${1:${2:int} = }TimeMap_QNToMeasures(${3:ReaProject proj}, ${4:qn}, ${5:optional +qnMeasureStart}, ${6:optional +qnMeasureEnd})",
		"description": "Find which measure the given QN position falls in."
	},
	"reaper.TimeMap_QNToMeasures": {
		"prefix": "reaper.TimeMap_QNToMeasures",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:optional number qnMeasureStart}, ${4:optional number qnMeasureEnd} = }reaper.TimeMap_QNToMeasures(${5:ReaProject proj}, ${6:number qn})",
		"description": "Find which measure the given QN position falls in."
	},
	"RPR_TimeMap_QNToMeasures": {
		"prefix": "RPR_TimeMap_QNToMeasures",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:ReaProject proj}, ${4:Float qn}, ${5:Float qnMeasureStartOutOptional}, ${6:Float qnMeasureEndOutOptional} = }RPR_TimeMap_QNToMeasures(${7:proj}, ${8:qn}, ${9:qnMeasureStartOutOptional}, ${10:qnMeasureEndOutOptional})",
		"description": "Find which measure the given QN position falls in."
	},
	"TimeMap_QNToTime": {
		"prefix": "TimeMap_QNToTime",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap_QNToTime(${3:qn})",
		"description": "converts project QN position to time."
	},
	"reaper.TimeMap_QNToTime": {
		"prefix": "reaper.TimeMap_QNToTime",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TimeMap_QNToTime(${3:number qn})",
		"description": "converts project QN position to time."
	},
	"RPR_TimeMap_QNToTime": {
		"prefix": "RPR_TimeMap_QNToTime",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TimeMap_QNToTime(${3:Float qn})",
		"description": "converts project QN position to time."
	},
	"TimeMap_QNToTime_abs": {
		"prefix": "TimeMap_QNToTime_abs",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap_QNToTime_abs(${3:ReaProject proj}, ${4:qn})",
		"description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime"
	},
	"reaper.TimeMap_QNToTime_abs": {
		"prefix": "reaper.TimeMap_QNToTime_abs",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TimeMap_QNToTime_abs(${3:ReaProject proj}, ${4:number qn})",
		"description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime"
	},
	"RPR_TimeMap_QNToTime_abs": {
		"prefix": "RPR_TimeMap_QNToTime_abs",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TimeMap_QNToTime_abs(${3:ReaProject proj}, ${4:Float qn})",
		"description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime"
	},
	"TimeMap_timeToQN": {
		"prefix": "TimeMap_timeToQN",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap_timeToQN(${3:tpos})",
		"description": "converts project QN position to time."
	},
	"reaper.TimeMap_timeToQN": {
		"prefix": "reaper.TimeMap_timeToQN",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TimeMap_timeToQN(${3:number tpos})",
		"description": "converts project QN position to time."
	},
	"RPR_TimeMap_timeToQN": {
		"prefix": "RPR_TimeMap_timeToQN",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TimeMap_timeToQN(${3:Float tpos})",
		"description": "converts project QN position to time."
	},
	"TimeMap_timeToQN_abs": {
		"prefix": "TimeMap_timeToQN_abs",
		"scope": "eel",
		"body": "${1:${2:double} = }TimeMap_timeToQN_abs(${3:ReaProject proj}, ${4:tpos})",
		"description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN"
	},
	"reaper.TimeMap_timeToQN_abs": {
		"prefix": "reaper.TimeMap_timeToQN_abs",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TimeMap_timeToQN_abs(${3:ReaProject proj}, ${4:number tpos})",
		"description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN"
	},
	"RPR_TimeMap_timeToQN_abs": {
		"prefix": "RPR_TimeMap_timeToQN_abs",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TimeMap_timeToQN_abs(${3:ReaProject proj}, ${4:Float tpos})",
		"description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN"
	},
	"ToggleTrackSendUIMute": {
		"prefix": "ToggleTrackSendUIMute",
		"scope": "eel",
		"body": "${1:${2:bool} = }ToggleTrackSendUIMute(${3:MediaTrack track}, ${4:int send_idx})",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends."
	},
	"reaper.ToggleTrackSendUIMute": {
		"prefix": "reaper.ToggleTrackSendUIMute",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.ToggleTrackSendUIMute(${3:MediaTrack track}, ${4:integer send_idx})",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends."
	},
	"RPR_ToggleTrackSendUIMute": {
		"prefix": "RPR_ToggleTrackSendUIMute",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_ToggleTrackSendUIMute(${3:MediaTrack track}, ${4:Int send_idx})",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends."
	},
	"Track_GetPeakHoldDB": {
		"prefix": "Track_GetPeakHoldDB",
		"scope": "eel",
		"body": "${1:${2:double} = }Track_GetPeakHoldDB(${3:MediaTrack track}, ${4:int channel}, ${5:bool clear})",
		"description": ""
	},
	"reaper.Track_GetPeakHoldDB": {
		"prefix": "reaper.Track_GetPeakHoldDB",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.Track_GetPeakHoldDB(${3:MediaTrack track}, ${4:integer channel}, ${5:boolean clear})",
		"description": ""
	},
	"RPR_Track_GetPeakHoldDB": {
		"prefix": "RPR_Track_GetPeakHoldDB",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_Track_GetPeakHoldDB(${3:MediaTrack track}, ${4:Int channel}, ${5:Boolean clear})",
		"description": ""
	},
	"Track_GetPeakInfo": {
		"prefix": "Track_GetPeakInfo",
		"scope": "eel",
		"body": "${1:${2:double} = }Track_GetPeakInfo(${3:MediaTrack track}, ${4:int channel})",
		"description": ""
	},
	"reaper.Track_GetPeakInfo": {
		"prefix": "reaper.Track_GetPeakInfo",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.Track_GetPeakInfo(${3:MediaTrack track}, ${4:integer channel})",
		"description": ""
	},
	"RPR_Track_GetPeakInfo": {
		"prefix": "RPR_Track_GetPeakInfo",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_Track_GetPeakInfo(${3:MediaTrack track}, ${4:Int channel})",
		"description": ""
	},
	"TrackCtl_SetToolTip": {
		"prefix": "TrackCtl_SetToolTip",
		"scope": "eel",
		"body": "TrackCtl_SetToolTip(${1:\"fmt\"}, ${2:int xpos}, ${3:int ypos}, ${4:bool topmost})",
		"description": "displays tooltip at location, or removes if empty string"
	},
	"reaper.TrackCtl_SetToolTip": {
		"prefix": "reaper.TrackCtl_SetToolTip",
		"scope": "lua",
		"body": "reaper.TrackCtl_SetToolTip(${1:string fmt}, ${2:integer xpos}, ${3:integer ypos}, ${4:boolean topmost})",
		"description": "displays tooltip at location, or removes if empty string"
	},
	"RPR_TrackCtl_SetToolTip": {
		"prefix": "RPR_TrackCtl_SetToolTip",
		"scope": "python",
		"body": "RPR_TrackCtl_SetToolTip(${1:String fmt}, ${2:Int xpos}, ${3:Int ypos}, ${4:Boolean topmost})",
		"description": "displays tooltip at location, or removes if empty string"
	},
	"TrackFX_AddByName": {
		"prefix": "TrackFX_AddByName",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_AddByName(${3:MediaTrack track}, ${4:\"fxname\"}, ${5:bool recFX}, ${6:int instantiate})",
		"description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:."
	},
	"reaper.TrackFX_AddByName": {
		"prefix": "reaper.TrackFX_AddByName",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TrackFX_AddByName(${3:MediaTrack track}, ${4:string fxname}, ${5:boolean recFX}, ${6:integer instantiate})",
		"description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:."
	},
	"RPR_TrackFX_AddByName": {
		"prefix": "RPR_TrackFX_AddByName",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TrackFX_AddByName(${3:MediaTrack track}, ${4:String fxname}, ${5:Boolean recFX}, ${6:Int instantiate})",
		"description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:."
	},
	"TrackFX_CopyToTake": {
		"prefix": "TrackFX_CopyToTake",
		"scope": "eel",
		"body": "TrackFX_CopyToTake(${1:MediaTrack src_track}, ${2:int src_fx}, ${3:MediaItem_Take dest_take}, ${4:int dest_fx}, ${5:bool is_move})",
		"description": "Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX."
	},
	"reaper.TrackFX_CopyToTake": {
		"prefix": "reaper.TrackFX_CopyToTake",
		"scope": "lua",
		"body": "reaper.TrackFX_CopyToTake(${1:MediaTrack src_track}, ${2:integer src_fx}, ${3:MediaItem_Take dest_take}, ${4:integer dest_fx}, ${5:boolean is_move})",
		"description": "Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX."
	},
	"RPR_TrackFX_CopyToTake": {
		"prefix": "RPR_TrackFX_CopyToTake",
		"scope": "python",
		"body": "RPR_TrackFX_CopyToTake(${1:MediaTrack src_track}, ${2:Int src_fx}, ${3:MediaItem_Take dest_take}, ${4:Int dest_fx}, ${5:Boolean is_move})",
		"description": "Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX."
	},
	"TrackFX_CopyToTrack": {
		"prefix": "TrackFX_CopyToTrack",
		"scope": "eel",
		"body": "TrackFX_CopyToTrack(${1:MediaTrack src_track}, ${2:int src_fx}, ${3:MediaTrack dest_track}, ${4:int dest_fx}, ${5:bool is_move})",
		"description": "Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX."
	},
	"reaper.TrackFX_CopyToTrack": {
		"prefix": "reaper.TrackFX_CopyToTrack",
		"scope": "lua",
		"body": "reaper.TrackFX_CopyToTrack(${1:MediaTrack src_track}, ${2:integer src_fx}, ${3:MediaTrack dest_track}, ${4:integer dest_fx}, ${5:boolean is_move})",
		"description": "Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX."
	},
	"RPR_TrackFX_CopyToTrack": {
		"prefix": "RPR_TrackFX_CopyToTrack",
		"scope": "python",
		"body": "RPR_TrackFX_CopyToTrack(${1:MediaTrack src_track}, ${2:Int src_fx}, ${3:MediaTrack dest_track}, ${4:Int dest_fx}, ${5:Boolean is_move})",
		"description": "Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX."
	},
	"TrackFX_Delete": {
		"prefix": "TrackFX_Delete",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_Delete(${3:MediaTrack track}, ${4:int fx})",
		"description": "Remove a FX from track chain (returns true on success)"
	},
	"reaper.TrackFX_Delete": {
		"prefix": "reaper.TrackFX_Delete",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_Delete(${3:MediaTrack track}, ${4:integer fx})",
		"description": "Remove a FX from track chain (returns true on success)"
	},
	"RPR_TrackFX_Delete": {
		"prefix": "RPR_TrackFX_Delete",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_Delete(${3:MediaTrack track}, ${4:Int fx})",
		"description": "Remove a FX from track chain (returns true on success)"
	},
	"TrackFX_EndParamEdit": {
		"prefix": "TrackFX_EndParamEdit",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_EndParamEdit(${3:MediaTrack track}, ${4:int fx}, ${5:int param})",
		"description": ""
	},
	"reaper.TrackFX_EndParamEdit": {
		"prefix": "reaper.TrackFX_EndParamEdit",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_EndParamEdit(${3:MediaTrack track}, ${4:integer fx}, ${5:integer param})",
		"description": ""
	},
	"RPR_TrackFX_EndParamEdit": {
		"prefix": "RPR_TrackFX_EndParamEdit",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_EndParamEdit(${3:MediaTrack track}, ${4:Int fx}, ${5:Int param})",
		"description": ""
	},
	"TrackFX_FormatParamValue": {
		"prefix": "TrackFX_FormatParamValue",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_FormatParamValue(${3:MediaTrack track}, ${4:int fx}, ${5:int param}, ${6:val}, ${7:#buf})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"reaper.TrackFX_FormatParamValue": {
		"prefix": "reaper.TrackFX_FormatParamValue",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TrackFX_FormatParamValue(${4:MediaTrack track}, ${5:integer fx}, ${6:integer param}, ${7:number val}, ${8:string buf})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"RPR_TrackFX_FormatParamValue": {
		"prefix": "RPR_TrackFX_FormatParamValue",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:Int param}, ${6:Float val}, ${7:String buf}, ${8:Int buf_sz} = }RPR_TrackFX_FormatParamValue(${9:track}, ${10:fx}, ${11:param}, ${12:val}, ${13:buf}, ${14:buf_sz})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"TrackFX_FormatParamValueNormalized": {
		"prefix": "TrackFX_FormatParamValueNormalized",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_FormatParamValueNormalized(${3:MediaTrack track}, ${4:int fx}, ${5:int param}, ${6:value}, ${7:#buf})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"reaper.TrackFX_FormatParamValueNormalized": {
		"prefix": "reaper.TrackFX_FormatParamValueNormalized",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TrackFX_FormatParamValueNormalized(${4:MediaTrack track}, ${5:integer fx}, ${6:integer param}, ${7:number value}, ${8:string buf})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"RPR_TrackFX_FormatParamValueNormalized": {
		"prefix": "RPR_TrackFX_FormatParamValueNormalized",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:Int param}, ${6:Float value}, ${7:String buf}, ${8:Int buf_sz} = }RPR_TrackFX_FormatParamValueNormalized(${9:track}, ${10:fx}, ${11:param}, ${12:value}, ${13:buf}, ${14:buf_sz})",
		"description": "Note: only works with FX that support Cockos VST extensions."
	},
	"TrackFX_GetByName": {
		"prefix": "TrackFX_GetByName",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_GetByName(${3:MediaTrack track}, ${4:\"fxname\"}, ${5:bool instantiate})",
		"description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName."
	},
	"reaper.TrackFX_GetByName": {
		"prefix": "reaper.TrackFX_GetByName",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TrackFX_GetByName(${3:MediaTrack track}, ${4:string fxname}, ${5:boolean instantiate})",
		"description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName."
	},
	"RPR_TrackFX_GetByName": {
		"prefix": "RPR_TrackFX_GetByName",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TrackFX_GetByName(${3:MediaTrack track}, ${4:String fxname}, ${5:Boolean instantiate})",
		"description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName."
	},
	"TrackFX_GetChainVisible": {
		"prefix": "TrackFX_GetChainVisible",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_GetChainVisible(${3:MediaTrack track})",
		"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"reaper.TrackFX_GetChainVisible": {
		"prefix": "reaper.TrackFX_GetChainVisible",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TrackFX_GetChainVisible(${3:MediaTrack track})",
		"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"RPR_TrackFX_GetChainVisible": {
		"prefix": "RPR_TrackFX_GetChainVisible",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TrackFX_GetChainVisible(${3:MediaTrack track})",
		"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"TrackFX_GetCount": {
		"prefix": "TrackFX_GetCount",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_GetCount(${3:MediaTrack track})",
		"description": ""
	},
	"reaper.TrackFX_GetCount": {
		"prefix": "reaper.TrackFX_GetCount",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TrackFX_GetCount(${3:MediaTrack track})",
		"description": ""
	},
	"RPR_TrackFX_GetCount": {
		"prefix": "RPR_TrackFX_GetCount",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TrackFX_GetCount(${3:MediaTrack track})",
		"description": ""
	},
	"TrackFX_GetEnabled": {
		"prefix": "TrackFX_GetEnabled",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetEnabled(${3:MediaTrack track}, ${4:int fx})",
		"description": "See TrackFX_SetEnabled"
	},
	"reaper.TrackFX_GetEnabled": {
		"prefix": "reaper.TrackFX_GetEnabled",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_GetEnabled(${3:MediaTrack track}, ${4:integer fx})",
		"description": "See TrackFX_SetEnabled"
	},
	"RPR_TrackFX_GetEnabled": {
		"prefix": "RPR_TrackFX_GetEnabled",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_GetEnabled(${3:MediaTrack track}, ${4:Int fx})",
		"description": "See TrackFX_SetEnabled"
	},
	"TrackFX_GetEQ": {
		"prefix": "TrackFX_GetEQ",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_GetEQ(${3:MediaTrack track}, ${4:bool instantiate})",
		"description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName."
	},
	"reaper.TrackFX_GetEQ": {
		"prefix": "reaper.TrackFX_GetEQ",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TrackFX_GetEQ(${3:MediaTrack track}, ${4:boolean instantiate})",
		"description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName."
	},
	"RPR_TrackFX_GetEQ": {
		"prefix": "RPR_TrackFX_GetEQ",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TrackFX_GetEQ(${3:MediaTrack track}, ${4:Boolean instantiate})",
		"description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName."
	},
	"TrackFX_GetEQBandEnabled": {
		"prefix": "TrackFX_GetEQBandEnabled",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetEQBandEnabled(${3:MediaTrack track}, ${4:int fxidx}, ${5:int bandtype}, ${6:int bandidx})",
		"description": "Returns true if the EQ band is enabled.\n\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled."
	},
	"reaper.TrackFX_GetEQBandEnabled": {
		"prefix": "reaper.TrackFX_GetEQBandEnabled",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_GetEQBandEnabled(${3:MediaTrack track}, ${4:integer fxidx}, ${5:integer bandtype}, ${6:integer bandidx})",
		"description": "Returns true if the EQ band is enabled.\n\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled."
	},
	"RPR_TrackFX_GetEQBandEnabled": {
		"prefix": "RPR_TrackFX_GetEQBandEnabled",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_GetEQBandEnabled(${3:MediaTrack track}, ${4:Int fxidx}, ${5:Int bandtype}, ${6:Int bandidx})",
		"description": "Returns true if the EQ band is enabled.\n\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled."
	},
	"TrackFX_GetEQParam": {
		"prefix": "TrackFX_GetEQParam",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetEQParam(${3:MediaTrack track}, ${4:int fxidx}, ${5:int paramidx}, ${6:int +bandtype}, ${7:int +bandidx}, ${8:int +paramtype}, ${9:+normval})",
		"description": "Returns false if track/fxidx is not ReaEQ.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled."
	},
	"reaper.TrackFX_GetEQParam": {
		"prefix": "reaper.TrackFX_GetEQParam",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number bandtype}, ${4:number bandidx}, ${5:number paramtype}, ${6:number normval} = }reaper.TrackFX_GetEQParam(${7:MediaTrack track}, ${8:integer fxidx}, ${9:integer paramidx})",
		"description": "Returns false if track/fxidx is not ReaEQ.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled."
	},
	"RPR_TrackFX_GetEQParam": {
		"prefix": "RPR_TrackFX_GetEQParam",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int fxidx}, ${5:Int paramidx}, ${6:Int bandtypeOut}, ${7:Int bandidxOut}, ${8:Int paramtypeOut}, ${9:Float normvalOut} = }RPR_TrackFX_GetEQParam(${10:track}, ${11:fxidx}, ${12:paramidx}, ${13:bandtypeOut}, ${14:bandidxOut}, ${15:paramtypeOut}, ${16:normvalOut})",
		"description": "Returns false if track/fxidx is not ReaEQ.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled."
	},
	"TrackFX_GetFloatingWindow": {
		"prefix": "TrackFX_GetFloatingWindow",
		"scope": "eel",
		"body": "${1:${2:HWND} = }TrackFX_GetFloatingWindow(${3:MediaTrack track}, ${4:int index})",
		"description": "returns HWND of floating window for effect index, if any"
	},
	"reaper.TrackFX_GetFloatingWindow": {
		"prefix": "reaper.TrackFX_GetFloatingWindow",
		"scope": "lua",
		"body": "${1:${2:HWND} = }reaper.TrackFX_GetFloatingWindow(${3:MediaTrack track}, ${4:integer index})",
		"description": "returns HWND of floating window for effect index, if any"
	},
	"RPR_TrackFX_GetFloatingWindow": {
		"prefix": "RPR_TrackFX_GetFloatingWindow",
		"scope": "python",
		"body": "${1:${2:HWND} = }RPR_TrackFX_GetFloatingWindow(${3:MediaTrack track}, ${4:Int index})",
		"description": "returns HWND of floating window for effect index, if any"
	},
	"TrackFX_GetFormattedParamValue": {
		"prefix": "TrackFX_GetFormattedParamValue",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetFormattedParamValue(${3:MediaTrack track}, ${4:int fx}, ${5:int param}, ${6:#buf})",
		"description": ""
	},
	"reaper.TrackFX_GetFormattedParamValue": {
		"prefix": "reaper.TrackFX_GetFormattedParamValue",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TrackFX_GetFormattedParamValue(${4:MediaTrack track}, ${5:integer fx}, ${6:integer param}, ${7:string buf})",
		"description": ""
	},
	"RPR_TrackFX_GetFormattedParamValue": {
		"prefix": "RPR_TrackFX_GetFormattedParamValue",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:Int param}, ${6:String buf}, ${7:Int buf_sz} = }RPR_TrackFX_GetFormattedParamValue(${8:track}, ${9:fx}, ${10:param}, ${11:buf}, ${12:buf_sz})",
		"description": ""
	},
	"TrackFX_GetFXGUID": {
		"prefix": "TrackFX_GetFXGUID",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetFXGUID(${3:#retguid}, ${4:MediaTrack track}, ${5:int fx})",
		"description": ""
	},
	"reaper.TrackFX_GetFXGUID": {
		"prefix": "reaper.TrackFX_GetFXGUID",
		"scope": "lua",
		"body": "${1:${2:string GUID} = }reaper.TrackFX_GetFXGUID(${3:MediaTrack track}, ${4:integer fx})",
		"description": ""
	},
	"RPR_TrackFX_GetFXGUID": {
		"prefix": "RPR_TrackFX_GetFXGUID",
		"scope": "python",
		"body": "${1:${2:GUID} = }RPR_TrackFX_GetFXGUID(${3:MediaTrack track}, ${4:Int fx})",
		"description": ""
	},
	"TrackFX_GetFXName": {
		"prefix": "TrackFX_GetFXName",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetFXName(${3:MediaTrack track}, ${4:int fx}, ${5:#buf})",
		"description": ""
	},
	"reaper.TrackFX_GetFXName": {
		"prefix": "reaper.TrackFX_GetFXName",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TrackFX_GetFXName(${4:MediaTrack track}, ${5:integer fx}, ${6:string buf})",
		"description": ""
	},
	"RPR_TrackFX_GetFXName": {
		"prefix": "RPR_TrackFX_GetFXName",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:String buf}, ${6:Int buf_sz} = }RPR_TrackFX_GetFXName(${7:track}, ${8:fx}, ${9:buf}, ${10:buf_sz})",
		"description": ""
	},
	"TrackFX_GetInstrument": {
		"prefix": "TrackFX_GetInstrument",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_GetInstrument(${3:MediaTrack track})",
		"description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName."
	},
	"reaper.TrackFX_GetInstrument": {
		"prefix": "reaper.TrackFX_GetInstrument",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TrackFX_GetInstrument(${3:MediaTrack track})",
		"description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName."
	},
	"RPR_TrackFX_GetInstrument": {
		"prefix": "RPR_TrackFX_GetInstrument",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TrackFX_GetInstrument(${3:MediaTrack track})",
		"description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName."
	},
	"TrackFX_GetIOSize": {
		"prefix": "TrackFX_GetIOSize",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_GetIOSize(${3:MediaTrack track}, ${4:int fx}, ${5:optional int +inputPins}, ${6:optional int +outputPins})",
		"description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error"
	},
	"reaper.TrackFX_GetIOSize": {
		"prefix": "reaper.TrackFX_GetIOSize",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:optional number inputPins}, ${4:optional number outputPins} = }reaper.TrackFX_GetIOSize(${5:MediaTrack track}, ${6:integer fx})",
		"description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error"
	},
	"RPR_TrackFX_GetIOSize": {
		"prefix": "RPR_TrackFX_GetIOSize",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:Int inputPinsOutOptional}, ${6:Int outputPinsOutOptional} = }RPR_TrackFX_GetIOSize(${7:track}, ${8:fx}, ${9:inputPinsOutOptional}, ${10:outputPinsOutOptional})",
		"description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error"
	},
	"TrackFX_GetNamedConfigParm": {
		"prefix": "TrackFX_GetNamedConfigParm",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetNamedConfigParm(${3:MediaTrack track}, ${4:int fx}, ${5:\"parmname\"}, ${6:#buf})",
		"description": "gets plug-in specific named configuration value (returns true on success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns name of first input pin (if available), 'out_pin_0' returns name of first output pin (if available), etc."
	},
	"reaper.TrackFX_GetNamedConfigParm": {
		"prefix": "reaper.TrackFX_GetNamedConfigParm",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TrackFX_GetNamedConfigParm(${4:MediaTrack track}, ${5:integer fx}, ${6:string parmname})",
		"description": "gets plug-in specific named configuration value (returns true on success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns name of first input pin (if available), 'out_pin_0' returns name of first output pin (if available), etc."
	},
	"RPR_TrackFX_GetNamedConfigParm": {
		"prefix": "RPR_TrackFX_GetNamedConfigParm",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:String parmname}, ${6:String bufOut}, ${7:Int bufOut_sz} = }RPR_TrackFX_GetNamedConfigParm(${8:track}, ${9:fx}, ${10:parmname}, ${11:bufOut}, ${12:bufOut_sz})",
		"description": "gets plug-in specific named configuration value (returns true on success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns name of first input pin (if available), 'out_pin_0' returns name of first output pin (if available), etc."
	},
	"TrackFX_GetNumParams": {
		"prefix": "TrackFX_GetNumParams",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_GetNumParams(${3:MediaTrack track}, ${4:int fx})",
		"description": ""
	},
	"reaper.TrackFX_GetNumParams": {
		"prefix": "reaper.TrackFX_GetNumParams",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TrackFX_GetNumParams(${3:MediaTrack track}, ${4:integer fx})",
		"description": ""
	},
	"RPR_TrackFX_GetNumParams": {
		"prefix": "RPR_TrackFX_GetNumParams",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TrackFX_GetNumParams(${3:MediaTrack track}, ${4:Int fx})",
		"description": ""
	},
	"TrackFX_GetOffline": {
		"prefix": "TrackFX_GetOffline",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetOffline(${3:MediaTrack track}, ${4:int fx})",
		"description": "See TrackFX_SetOffline"
	},
	"reaper.TrackFX_GetOffline": {
		"prefix": "reaper.TrackFX_GetOffline",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_GetOffline(${3:MediaTrack track}, ${4:integer fx})",
		"description": "See TrackFX_SetOffline"
	},
	"RPR_TrackFX_GetOffline": {
		"prefix": "RPR_TrackFX_GetOffline",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_GetOffline(${3:MediaTrack track}, ${4:Int fx})",
		"description": "See TrackFX_SetOffline"
	},
	"TrackFX_GetOpen": {
		"prefix": "TrackFX_GetOpen",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetOpen(${3:MediaTrack track}, ${4:int fx})",
		"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen"
	},
	"reaper.TrackFX_GetOpen": {
		"prefix": "reaper.TrackFX_GetOpen",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_GetOpen(${3:MediaTrack track}, ${4:integer fx})",
		"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen"
	},
	"RPR_TrackFX_GetOpen": {
		"prefix": "RPR_TrackFX_GetOpen",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_GetOpen(${3:MediaTrack track}, ${4:Int fx})",
		"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen"
	},
	"TrackFX_GetParam": {
		"prefix": "TrackFX_GetParam",
		"scope": "eel",
		"body": "${1:${2:double} = }TrackFX_GetParam(${3:MediaTrack track}, ${4:int fx}, ${5:int param}, ${6:+minval}, ${7:+maxval})",
		"description": ""
	},
	"reaper.TrackFX_GetParam": {
		"prefix": "reaper.TrackFX_GetParam",
		"scope": "lua",
		"body": "${1:${2:number retval}, ${3:number minval}, ${4:number maxval} = }reaper.TrackFX_GetParam(${5:MediaTrack track}, ${6:integer fx}, ${7:integer param})",
		"description": ""
	},
	"RPR_TrackFX_GetParam": {
		"prefix": "RPR_TrackFX_GetParam",
		"scope": "python",
		"body": "${1:${2:Float retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:Int param}, ${6:Float minvalOut}, ${7:Float maxvalOut} = }RPR_TrackFX_GetParam(${8:track}, ${9:fx}, ${10:param}, ${11:minvalOut}, ${12:maxvalOut})",
		"description": ""
	},
	"TrackFX_GetParameterStepSizes": {
		"prefix": "TrackFX_GetParameterStepSizes",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetParameterStepSizes(${3:MediaTrack track}, ${4:int fx}, ${5:int param}, ${6:+step}, ${7:+smallstep}, ${8:+largestep}, ${9:bool +istoggle})",
		"description": ""
	},
	"reaper.TrackFX_GetParameterStepSizes": {
		"prefix": "reaper.TrackFX_GetParameterStepSizes",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:number step}, ${4:number smallstep}, ${5:number largestep}, ${6:boolean istoggle} = }reaper.TrackFX_GetParameterStepSizes(${7:MediaTrack track}, ${8:integer fx}, ${9:integer param})",
		"description": ""
	},
	"RPR_TrackFX_GetParameterStepSizes": {
		"prefix": "RPR_TrackFX_GetParameterStepSizes",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:Int param}, ${6:Float stepOut}, ${7:Float smallstepOut}, ${8:Float largestepOut}, ${9:Boolean istoggleOut} = }RPR_TrackFX_GetParameterStepSizes(${10:track}, ${11:fx}, ${12:param}, ${13:stepOut}, ${14:smallstepOut}, ${15:largestepOut}, ${16:istoggleOut})",
		"description": ""
	},
	"TrackFX_GetParamEx": {
		"prefix": "TrackFX_GetParamEx",
		"scope": "eel",
		"body": "${1:${2:double} = }TrackFX_GetParamEx(${3:MediaTrack track}, ${4:int fx}, ${5:int param}, ${6:+minval}, ${7:+maxval}, ${8:+midval})",
		"description": ""
	},
	"reaper.TrackFX_GetParamEx": {
		"prefix": "reaper.TrackFX_GetParamEx",
		"scope": "lua",
		"body": "${1:${2:number retval}, ${3:number minval}, ${4:number maxval}, ${5:number midval} = }reaper.TrackFX_GetParamEx(${6:MediaTrack track}, ${7:integer fx}, ${8:integer param})",
		"description": ""
	},
	"RPR_TrackFX_GetParamEx": {
		"prefix": "RPR_TrackFX_GetParamEx",
		"scope": "python",
		"body": "${1:${2:Float retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:Int param}, ${6:Float minvalOut}, ${7:Float maxvalOut}, ${8:Float midvalOut} = }RPR_TrackFX_GetParamEx(${9:track}, ${10:fx}, ${11:param}, ${12:minvalOut}, ${13:maxvalOut}, ${14:midvalOut})",
		"description": ""
	},
	"TrackFX_GetParamName": {
		"prefix": "TrackFX_GetParamName",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetParamName(${3:MediaTrack track}, ${4:int fx}, ${5:int param}, ${6:#buf})",
		"description": ""
	},
	"reaper.TrackFX_GetParamName": {
		"prefix": "reaper.TrackFX_GetParamName",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string buf} = }reaper.TrackFX_GetParamName(${4:MediaTrack track}, ${5:integer fx}, ${6:integer param}, ${7:string buf})",
		"description": ""
	},
	"RPR_TrackFX_GetParamName": {
		"prefix": "RPR_TrackFX_GetParamName",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:Int param}, ${6:String buf}, ${7:Int buf_sz} = }RPR_TrackFX_GetParamName(${8:track}, ${9:fx}, ${10:param}, ${11:buf}, ${12:buf_sz})",
		"description": ""
	},
	"TrackFX_GetParamNormalized": {
		"prefix": "TrackFX_GetParamNormalized",
		"scope": "eel",
		"body": "${1:${2:double} = }TrackFX_GetParamNormalized(${3:MediaTrack track}, ${4:int fx}, ${5:int param})",
		"description": ""
	},
	"reaper.TrackFX_GetParamNormalized": {
		"prefix": "reaper.TrackFX_GetParamNormalized",
		"scope": "lua",
		"body": "${1:${2:number} = }reaper.TrackFX_GetParamNormalized(${3:MediaTrack track}, ${4:integer fx}, ${5:integer param})",
		"description": ""
	},
	"RPR_TrackFX_GetParamNormalized": {
		"prefix": "RPR_TrackFX_GetParamNormalized",
		"scope": "python",
		"body": "${1:${2:Float} = }RPR_TrackFX_GetParamNormalized(${3:MediaTrack track}, ${4:Int fx}, ${5:Int param})",
		"description": ""
	},
	"TrackFX_GetPinMappings": {
		"prefix": "TrackFX_GetPinMappings",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_GetPinMappings(${3:MediaTrack tr}, ${4:int fx}, ${5:int isoutput}, ${6:int pin}, ${7:optional int +high32})",
		"description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits"
	},
	"reaper.TrackFX_GetPinMappings": {
		"prefix": "reaper.TrackFX_GetPinMappings",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:optional number high32} = }reaper.TrackFX_GetPinMappings(${4:MediaTrack tr}, ${5:integer fx}, ${6:integer isoutput}, ${7:integer pin})",
		"description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits"
	},
	"RPR_TrackFX_GetPinMappings": {
		"prefix": "RPR_TrackFX_GetPinMappings",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:MediaTrack tr}, ${4:Int fx}, ${5:Int isoutput}, ${6:Int pin}, ${7:Int high32OutOptional} = }RPR_TrackFX_GetPinMappings(${8:tr}, ${9:fx}, ${10:isoutput}, ${11:pin}, ${12:high32OutOptional})",
		"description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits"
	},
	"TrackFX_GetPreset": {
		"prefix": "TrackFX_GetPreset",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_GetPreset(${3:MediaTrack track}, ${4:int fx}, ${5:#presetname})",
		"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TrackFX_SetPreset."
	},
	"reaper.TrackFX_GetPreset": {
		"prefix": "reaper.TrackFX_GetPreset",
		"scope": "lua",
		"body": "${1:${2:boolean retval}, ${3:string presetname} = }reaper.TrackFX_GetPreset(${4:MediaTrack track}, ${5:integer fx}, ${6:string presetname})",
		"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TrackFX_SetPreset."
	},
	"RPR_TrackFX_GetPreset": {
		"prefix": "RPR_TrackFX_GetPreset",
		"scope": "python",
		"body": "${1:${2:Boolean retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:String presetname}, ${6:Int presetname_sz} = }RPR_TrackFX_GetPreset(${7:track}, ${8:fx}, ${9:presetname}, ${10:presetname_sz})",
		"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TrackFX_SetPreset."
	},
	"TrackFX_GetPresetIndex": {
		"prefix": "TrackFX_GetPresetIndex",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_GetPresetIndex(${3:MediaTrack track}, ${4:int fx}, ${5:int +numberOfPresets})",
		"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex"
	},
	"reaper.TrackFX_GetPresetIndex": {
		"prefix": "reaper.TrackFX_GetPresetIndex",
		"scope": "lua",
		"body": "${1:${2:integer retval}, ${3:number numberOfPresets} = }reaper.TrackFX_GetPresetIndex(${4:MediaTrack track}, ${5:integer fx})",
		"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex"
	},
	"RPR_TrackFX_GetPresetIndex": {
		"prefix": "RPR_TrackFX_GetPresetIndex",
		"scope": "python",
		"body": "${1:${2:Int retval}, ${3:MediaTrack track}, ${4:Int fx}, ${5:Int numberOfPresetsOut} = }RPR_TrackFX_GetPresetIndex(${6:track}, ${7:fx}, ${8:numberOfPresetsOut})",
		"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex"
	},
	"TrackFX_GetRecChainVisible": {
		"prefix": "TrackFX_GetRecChainVisible",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_GetRecChainVisible(${3:MediaTrack track})",
		"description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"reaper.TrackFX_GetRecChainVisible": {
		"prefix": "reaper.TrackFX_GetRecChainVisible",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TrackFX_GetRecChainVisible(${3:MediaTrack track})",
		"description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"RPR_TrackFX_GetRecChainVisible": {
		"prefix": "RPR_TrackFX_GetRecChainVisible",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TrackFX_GetRecChainVisible(${3:MediaTrack track})",
		"description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"TrackFX_GetRecCount": {
		"prefix": "TrackFX_GetRecCount",
		"scope": "eel",
		"body": "${1:${2:int} = }TrackFX_GetRecCount(${3:MediaTrack track})",
		"description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX."
	},
	"reaper.TrackFX_GetRecCount": {
		"prefix": "reaper.TrackFX_GetRecCount",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.TrackFX_GetRecCount(${3:MediaTrack track})",
		"description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX."
	},
	"RPR_TrackFX_GetRecCount": {
		"prefix": "RPR_TrackFX_GetRecCount",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_TrackFX_GetRecCount(${3:MediaTrack track})",
		"description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX."
	},
	"TrackFX_GetUserPresetFilename": {
		"prefix": "TrackFX_GetUserPresetFilename",
		"scope": "eel",
		"body": "TrackFX_GetUserPresetFilename(${1:MediaTrack track}, ${2:int fx}, ${3:#fn})",
		"description": ""
	},
	"reaper.TrackFX_GetUserPresetFilename": {
		"prefix": "reaper.TrackFX_GetUserPresetFilename",
		"scope": "lua",
		"body": "${1:${2:string fn} = }reaper.TrackFX_GetUserPresetFilename(${3:MediaTrack track}, ${4:integer fx}, ${5:string fn})",
		"description": ""
	},
	"RPR_TrackFX_GetUserPresetFilename": {
		"prefix": "RPR_TrackFX_GetUserPresetFilename",
		"scope": "python",
		"body": "${1:${2:MediaTrack track}, ${3:Int fx}, ${4:String fn}, ${5:Int fn_sz} = }RPR_TrackFX_GetUserPresetFilename(${6:track}, ${7:fx}, ${8:fn}, ${9:fn_sz})",
		"description": ""
	},
	"TrackFX_NavigatePresets": {
		"prefix": "TrackFX_NavigatePresets",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_NavigatePresets(${3:MediaTrack track}, ${4:int fx}, ${5:int presetmove})",
		"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc."
	},
	"reaper.TrackFX_NavigatePresets": {
		"prefix": "reaper.TrackFX_NavigatePresets",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_NavigatePresets(${3:MediaTrack track}, ${4:integer fx}, ${5:integer presetmove})",
		"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc."
	},
	"RPR_TrackFX_NavigatePresets": {
		"prefix": "RPR_TrackFX_NavigatePresets",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_NavigatePresets(${3:MediaTrack track}, ${4:Int fx}, ${5:Int presetmove})",
		"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc."
	},
	"TrackFX_SetEnabled": {
		"prefix": "TrackFX_SetEnabled",
		"scope": "eel",
		"body": "TrackFX_SetEnabled(${1:MediaTrack track}, ${2:int fx}, ${3:bool enabled})",
		"description": "See TrackFX_GetEnabled"
	},
	"reaper.TrackFX_SetEnabled": {
		"prefix": "reaper.TrackFX_SetEnabled",
		"scope": "lua",
		"body": "reaper.TrackFX_SetEnabled(${1:MediaTrack track}, ${2:integer fx}, ${3:boolean enabled})",
		"description": "See TrackFX_GetEnabled"
	},
	"RPR_TrackFX_SetEnabled": {
		"prefix": "RPR_TrackFX_SetEnabled",
		"scope": "python",
		"body": "RPR_TrackFX_SetEnabled(${1:MediaTrack track}, ${2:Int fx}, ${3:Boolean enabled})",
		"description": "See TrackFX_GetEnabled"
	},
	"TrackFX_SetEQBandEnabled": {
		"prefix": "TrackFX_SetEQBandEnabled",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_SetEQBandEnabled(${3:MediaTrack track}, ${4:int fxidx}, ${5:int bandtype}, ${6:int bandidx}, ${7:bool enable})",
		"description": "Enable or disable a ReaEQ band.\n\nReturns false if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled."
	},
	"reaper.TrackFX_SetEQBandEnabled": {
		"prefix": "reaper.TrackFX_SetEQBandEnabled",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_SetEQBandEnabled(${3:MediaTrack track}, ${4:integer fxidx}, ${5:integer bandtype}, ${6:integer bandidx}, ${7:boolean enable})",
		"description": "Enable or disable a ReaEQ band.\n\nReturns false if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled."
	},
	"RPR_TrackFX_SetEQBandEnabled": {
		"prefix": "RPR_TrackFX_SetEQBandEnabled",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_SetEQBandEnabled(${3:MediaTrack track}, ${4:Int fxidx}, ${5:Int bandtype}, ${6:Int bandidx}, ${7:Boolean enable})",
		"description": "Enable or disable a ReaEQ band.\n\nReturns false if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled."
	},
	"TrackFX_SetEQParam": {
		"prefix": "TrackFX_SetEQParam",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_SetEQParam(${3:MediaTrack track}, ${4:int fxidx}, ${5:int bandtype}, ${6:int bandidx}, ${7:int paramtype}, ${8:val}, ${9:bool isnorm})",
		"description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled."
	},
	"reaper.TrackFX_SetEQParam": {
		"prefix": "reaper.TrackFX_SetEQParam",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_SetEQParam(${3:MediaTrack track}, ${4:integer fxidx}, ${5:integer bandtype}, ${6:integer bandidx}, ${7:integer paramtype}, ${8:number val}, ${9:boolean isnorm})",
		"description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled."
	},
	"RPR_TrackFX_SetEQParam": {
		"prefix": "RPR_TrackFX_SetEQParam",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_SetEQParam(${3:MediaTrack track}, ${4:Int fxidx}, ${5:Int bandtype}, ${6:Int bandidx}, ${7:Int paramtype}, ${8:Float val}, ${9:Boolean isnorm})",
		"description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled."
	},
	"TrackFX_SetNamedConfigParm": {
		"prefix": "TrackFX_SetNamedConfigParm",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_SetNamedConfigParm(${3:MediaTrack track}, ${4:int fx}, ${5:\"parmname\"}, ${6:\"value\"})",
		"description": "sets plug-in specific named configuration value (returns true on success)"
	},
	"reaper.TrackFX_SetNamedConfigParm": {
		"prefix": "reaper.TrackFX_SetNamedConfigParm",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_SetNamedConfigParm(${3:MediaTrack track}, ${4:integer fx}, ${5:string parmname}, ${6:string value})",
		"description": "sets plug-in specific named configuration value (returns true on success)"
	},
	"RPR_TrackFX_SetNamedConfigParm": {
		"prefix": "RPR_TrackFX_SetNamedConfigParm",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_SetNamedConfigParm(${3:MediaTrack track}, ${4:Int fx}, ${5:String parmname}, ${6:String value})",
		"description": "sets plug-in specific named configuration value (returns true on success)"
	},
	"TrackFX_SetOffline": {
		"prefix": "TrackFX_SetOffline",
		"scope": "eel",
		"body": "TrackFX_SetOffline(${1:MediaTrack track}, ${2:int fx}, ${3:bool offline})",
		"description": "See TrackFX_GetOffline"
	},
	"reaper.TrackFX_SetOffline": {
		"prefix": "reaper.TrackFX_SetOffline",
		"scope": "lua",
		"body": "reaper.TrackFX_SetOffline(${1:MediaTrack track}, ${2:integer fx}, ${3:boolean offline})",
		"description": "See TrackFX_GetOffline"
	},
	"RPR_TrackFX_SetOffline": {
		"prefix": "RPR_TrackFX_SetOffline",
		"scope": "python",
		"body": "RPR_TrackFX_SetOffline(${1:MediaTrack track}, ${2:Int fx}, ${3:Boolean offline})",
		"description": "See TrackFX_GetOffline"
	},
	"TrackFX_SetOpen": {
		"prefix": "TrackFX_SetOpen",
		"scope": "eel",
		"body": "TrackFX_SetOpen(${1:MediaTrack track}, ${2:int fx}, ${3:bool open})",
		"description": "Open this FX UI. See TrackFX_GetOpen"
	},
	"reaper.TrackFX_SetOpen": {
		"prefix": "reaper.TrackFX_SetOpen",
		"scope": "lua",
		"body": "reaper.TrackFX_SetOpen(${1:MediaTrack track}, ${2:integer fx}, ${3:boolean open})",
		"description": "Open this FX UI. See TrackFX_GetOpen"
	},
	"RPR_TrackFX_SetOpen": {
		"prefix": "RPR_TrackFX_SetOpen",
		"scope": "python",
		"body": "RPR_TrackFX_SetOpen(${1:MediaTrack track}, ${2:Int fx}, ${3:Boolean open})",
		"description": "Open this FX UI. See TrackFX_GetOpen"
	},
	"TrackFX_SetParam": {
		"prefix": "TrackFX_SetParam",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_SetParam(${3:MediaTrack track}, ${4:int fx}, ${5:int param}, ${6:val})",
		"description": ""
	},
	"reaper.TrackFX_SetParam": {
		"prefix": "reaper.TrackFX_SetParam",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_SetParam(${3:MediaTrack track}, ${4:integer fx}, ${5:integer param}, ${6:number val})",
		"description": ""
	},
	"RPR_TrackFX_SetParam": {
		"prefix": "RPR_TrackFX_SetParam",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_SetParam(${3:MediaTrack track}, ${4:Int fx}, ${5:Int param}, ${6:Float val})",
		"description": ""
	},
	"TrackFX_SetParamNormalized": {
		"prefix": "TrackFX_SetParamNormalized",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_SetParamNormalized(${3:MediaTrack track}, ${4:int fx}, ${5:int param}, ${6:value})",
		"description": ""
	},
	"reaper.TrackFX_SetParamNormalized": {
		"prefix": "reaper.TrackFX_SetParamNormalized",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_SetParamNormalized(${3:MediaTrack track}, ${4:integer fx}, ${5:integer param}, ${6:number value})",
		"description": ""
	},
	"RPR_TrackFX_SetParamNormalized": {
		"prefix": "RPR_TrackFX_SetParamNormalized",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_SetParamNormalized(${3:MediaTrack track}, ${4:Int fx}, ${5:Int param}, ${6:Float value})",
		"description": ""
	},
	"TrackFX_SetPinMappings": {
		"prefix": "TrackFX_SetPinMappings",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_SetPinMappings(${3:MediaTrack tr}, ${4:int fx}, ${5:int isoutput}, ${6:int pin}, ${7:int low32bits}, ${8:int hi32bits})",
		"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)"
	},
	"reaper.TrackFX_SetPinMappings": {
		"prefix": "reaper.TrackFX_SetPinMappings",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_SetPinMappings(${3:MediaTrack tr}, ${4:integer fx}, ${5:integer isoutput}, ${6:integer pin}, ${7:integer low32bits}, ${8:integer hi32bits})",
		"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)"
	},
	"RPR_TrackFX_SetPinMappings": {
		"prefix": "RPR_TrackFX_SetPinMappings",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_SetPinMappings(${3:MediaTrack tr}, ${4:Int fx}, ${5:Int isoutput}, ${6:Int pin}, ${7:Int low32bits}, ${8:Int hi32bits})",
		"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)"
	},
	"TrackFX_SetPreset": {
		"prefix": "TrackFX_SetPreset",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_SetPreset(${3:MediaTrack track}, ${4:int fx}, ${5:\"presetname\"})",
		"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset."
	},
	"reaper.TrackFX_SetPreset": {
		"prefix": "reaper.TrackFX_SetPreset",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_SetPreset(${3:MediaTrack track}, ${4:integer fx}, ${5:string presetname})",
		"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset."
	},
	"RPR_TrackFX_SetPreset": {
		"prefix": "RPR_TrackFX_SetPreset",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_SetPreset(${3:MediaTrack track}, ${4:Int fx}, ${5:String presetname})",
		"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset."
	},
	"TrackFX_SetPresetByIndex": {
		"prefix": "TrackFX_SetPresetByIndex",
		"scope": "eel",
		"body": "${1:${2:bool} = }TrackFX_SetPresetByIndex(${3:MediaTrack track}, ${4:int fx}, ${5:int idx})",
		"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex."
	},
	"reaper.TrackFX_SetPresetByIndex": {
		"prefix": "reaper.TrackFX_SetPresetByIndex",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.TrackFX_SetPresetByIndex(${3:MediaTrack track}, ${4:integer fx}, ${5:integer idx})",
		"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex."
	},
	"RPR_TrackFX_SetPresetByIndex": {
		"prefix": "RPR_TrackFX_SetPresetByIndex",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_TrackFX_SetPresetByIndex(${3:MediaTrack track}, ${4:Int fx}, ${5:Int idx})",
		"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex."
	},
	"TrackFX_Show": {
		"prefix": "TrackFX_Show",
		"scope": "eel",
		"body": "TrackFX_Show(${1:MediaTrack track}, ${2:int index}, ${3:int showFlag})",
		"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)"
	},
	"reaper.TrackFX_Show": {
		"prefix": "reaper.TrackFX_Show",
		"scope": "lua",
		"body": "reaper.TrackFX_Show(${1:MediaTrack track}, ${2:integer index}, ${3:integer showFlag})",
		"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)"
	},
	"RPR_TrackFX_Show": {
		"prefix": "RPR_TrackFX_Show",
		"scope": "python",
		"body": "RPR_TrackFX_Show(${1:MediaTrack track}, ${2:Int index}, ${3:Int showFlag})",
		"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)"
	},
	"TrackList_AdjustWindows": {
		"prefix": "TrackList_AdjustWindows",
		"scope": "eel",
		"body": "TrackList_AdjustWindows(${1:bool isMinor})",
		"description": ""
	},
	"reaper.TrackList_AdjustWindows": {
		"prefix": "reaper.TrackList_AdjustWindows",
		"scope": "lua",
		"body": "reaper.TrackList_AdjustWindows(${1:boolean isMinor})",
		"description": ""
	},
	"RPR_TrackList_AdjustWindows": {
		"prefix": "RPR_TrackList_AdjustWindows",
		"scope": "python",
		"body": "RPR_TrackList_AdjustWindows(${1:Boolean isMinor})",
		"description": ""
	},
	"TrackList_UpdateAllExternalSurfaces": {
		"prefix": "TrackList_UpdateAllExternalSurfaces",
		"scope": "eel",
		"body": "TrackList_UpdateAllExternalSurfaces()",
		"description": ""
	},
	"reaper.TrackList_UpdateAllExternalSurfaces": {
		"prefix": "reaper.TrackList_UpdateAllExternalSurfaces",
		"scope": "lua",
		"body": "reaper.TrackList_UpdateAllExternalSurfaces()",
		"description": ""
	},
	"RPR_TrackList_UpdateAllExternalSurfaces": {
		"prefix": "RPR_TrackList_UpdateAllExternalSurfaces",
		"scope": "python",
		"body": "RPR_TrackList_UpdateAllExternalSurfaces()",
		"description": ""
	},
	"Undo_BeginBlock": {
		"prefix": "Undo_BeginBlock",
		"scope": "eel",
		"body": "Undo_BeginBlock()",
		"description": "call to start a new block"
	},
	"reaper.Undo_BeginBlock": {
		"prefix": "reaper.Undo_BeginBlock",
		"scope": "lua",
		"body": "reaper.Undo_BeginBlock()",
		"description": "call to start a new block"
	},
	"RPR_Undo_BeginBlock": {
		"prefix": "RPR_Undo_BeginBlock",
		"scope": "python",
		"body": "RPR_Undo_BeginBlock()",
		"description": "call to start a new block"
	},
	"Undo_BeginBlock2": {
		"prefix": "Undo_BeginBlock2",
		"scope": "eel",
		"body": "Undo_BeginBlock2(${1:ReaProject proj})",
		"description": "call to start a new block"
	},
	"reaper.Undo_BeginBlock2": {
		"prefix": "reaper.Undo_BeginBlock2",
		"scope": "lua",
		"body": "reaper.Undo_BeginBlock2(${1:ReaProject proj})",
		"description": "call to start a new block"
	},
	"RPR_Undo_BeginBlock2": {
		"prefix": "RPR_Undo_BeginBlock2",
		"scope": "python",
		"body": "RPR_Undo_BeginBlock2(${1:ReaProject proj})",
		"description": "call to start a new block"
	},
	"Undo_CanRedo2": {
		"prefix": "Undo_CanRedo2",
		"scope": "eel",
		"body": "${1:${2:bool} = }Undo_CanRedo2(${3:#retval}, ${4:ReaProject proj})",
		"description": "returns string of next action,if able,NULL if not"
	},
	"reaper.Undo_CanRedo2": {
		"prefix": "reaper.Undo_CanRedo2",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.Undo_CanRedo2(${3:ReaProject proj})",
		"description": "returns string of next action,if able,NULL if not"
	},
	"RPR_Undo_CanRedo2": {
		"prefix": "RPR_Undo_CanRedo2",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_Undo_CanRedo2(${3:ReaProject proj})",
		"description": "returns string of next action,if able,NULL if not"
	},
	"Undo_CanUndo2": {
		"prefix": "Undo_CanUndo2",
		"scope": "eel",
		"body": "${1:${2:bool} = }Undo_CanUndo2(${3:#retval}, ${4:ReaProject proj})",
		"description": "returns string of last action,if able,NULL if not"
	},
	"reaper.Undo_CanUndo2": {
		"prefix": "reaper.Undo_CanUndo2",
		"scope": "lua",
		"body": "${1:${2:string} = }reaper.Undo_CanUndo2(${3:ReaProject proj})",
		"description": "returns string of last action,if able,NULL if not"
	},
	"RPR_Undo_CanUndo2": {
		"prefix": "RPR_Undo_CanUndo2",
		"scope": "python",
		"body": "${1:${2:String} = }RPR_Undo_CanUndo2(${3:ReaProject proj})",
		"description": "returns string of last action,if able,NULL if not"
	},
	"Undo_DoRedo2": {
		"prefix": "Undo_DoRedo2",
		"scope": "eel",
		"body": "${1:${2:int} = }Undo_DoRedo2(${3:ReaProject proj})",
		"description": "nonzero if success"
	},
	"reaper.Undo_DoRedo2": {
		"prefix": "reaper.Undo_DoRedo2",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.Undo_DoRedo2(${3:ReaProject proj})",
		"description": "nonzero if success"
	},
	"RPR_Undo_DoRedo2": {
		"prefix": "RPR_Undo_DoRedo2",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_Undo_DoRedo2(${3:ReaProject proj})",
		"description": "nonzero if success"
	},
	"Undo_DoUndo2": {
		"prefix": "Undo_DoUndo2",
		"scope": "eel",
		"body": "${1:${2:int} = }Undo_DoUndo2(${3:ReaProject proj})",
		"description": "nonzero if success"
	},
	"reaper.Undo_DoUndo2": {
		"prefix": "reaper.Undo_DoUndo2",
		"scope": "lua",
		"body": "${1:${2:integer} = }reaper.Undo_DoUndo2(${3:ReaProject proj})",
		"description": "nonzero if success"
	},
	"RPR_Undo_DoUndo2": {
		"prefix": "RPR_Undo_DoUndo2",
		"scope": "python",
		"body": "${1:${2:Int} = }RPR_Undo_DoUndo2(${3:ReaProject proj})",
		"description": "nonzero if success"
	},
	"Undo_EndBlock": {
		"prefix": "Undo_EndBlock",
		"scope": "eel",
		"body": "Undo_EndBlock(${1:\"descchange\"}, ${2:int extraflags})",
		"description": "call to end the block,with extra flags if any,and a descriptio"
	},
	"reaper.Undo_EndBlock": {
		"prefix": "reaper.Undo_EndBlock",
		"scope": "lua",
		"body": "reaper.Undo_EndBlock(${1:string descchange}, ${2:integer extraflags})",
		"description": "call to end the block,with extra flags if any,and a descriptio"
	},
	"RPR_Undo_EndBlock": {
		"prefix": "RPR_Undo_EndBlock",
		"scope": "python",
		"body": "RPR_Undo_EndBlock(${1:String descchange}, ${2:Int extraflags})",
		"description": "call to end the block,with extra flags if any,and a descriptio"
	},
	"Undo_EndBlock2": {
		"prefix": "Undo_EndBlock2",
		"scope": "eel",
		"body": "Undo_EndBlock2(${1:ReaProject proj}, ${2:\"descchange\"}, ${3:int extraflags})",
		"description": "call to end the block,with extra flags if any,and a descriptio"
	},
	"reaper.Undo_EndBlock2": {
		"prefix": "reaper.Undo_EndBlock2",
		"scope": "lua",
		"body": "reaper.Undo_EndBlock2(${1:ReaProject proj}, ${2:string descchange}, ${3:integer extraflags})",
		"description": "call to end the block,with extra flags if any,and a descriptio"
	},
	"RPR_Undo_EndBlock2": {
		"prefix": "RPR_Undo_EndBlock2",
		"scope": "python",
		"body": "RPR_Undo_EndBlock2(${1:ReaProject proj}, ${2:String descchange}, ${3:Int extraflags})",
		"description": "call to end the block,with extra flags if any,and a descriptio"
	},
	"Undo_OnStateChange": {
		"prefix": "Undo_OnStateChange",
		"scope": "eel",
		"body": "Undo_OnStateChange(${1:\"descchange\"})",
		"description": "limited state change to items"
	},
	"reaper.Undo_OnStateChange": {
		"prefix": "reaper.Undo_OnStateChange",
		"scope": "lua",
		"body": "reaper.Undo_OnStateChange(${1:string descchange})",
		"description": "limited state change to items"
	},
	"RPR_Undo_OnStateChange": {
		"prefix": "RPR_Undo_OnStateChange",
		"scope": "python",
		"body": "RPR_Undo_OnStateChange(${1:String descchange})",
		"description": "limited state change to items"
	},
	"Undo_OnStateChange2": {
		"prefix": "Undo_OnStateChange2",
		"scope": "eel",
		"body": "Undo_OnStateChange2(${1:ReaProject proj}, ${2:\"descchange\"})",
		"description": "limited state change to items"
	},
	"reaper.Undo_OnStateChange2": {
		"prefix": "reaper.Undo_OnStateChange2",
		"scope": "lua",
		"body": "reaper.Undo_OnStateChange2(${1:ReaProject proj}, ${2:string descchange})",
		"description": "limited state change to items"
	},
	"RPR_Undo_OnStateChange2": {
		"prefix": "RPR_Undo_OnStateChange2",
		"scope": "python",
		"body": "RPR_Undo_OnStateChange2(${1:ReaProject proj}, ${2:String descchange})",
		"description": "limited state change to items"
	},
	"Undo_OnStateChange_Item": {
		"prefix": "Undo_OnStateChange_Item",
		"scope": "eel",
		"body": "Undo_OnStateChange_Item(${1:ReaProject proj}, ${2:\"name\"}, ${3:MediaItem item})",
		"description": ""
	},
	"reaper.Undo_OnStateChange_Item": {
		"prefix": "reaper.Undo_OnStateChange_Item",
		"scope": "lua",
		"body": "reaper.Undo_OnStateChange_Item(${1:ReaProject proj}, ${2:string name}, ${3:MediaItem item})",
		"description": ""
	},
	"RPR_Undo_OnStateChange_Item": {
		"prefix": "RPR_Undo_OnStateChange_Item",
		"scope": "python",
		"body": "RPR_Undo_OnStateChange_Item(${1:ReaProject proj}, ${2:String name}, ${3:MediaItem item})",
		"description": ""
	},
	"Undo_OnStateChangeEx": {
		"prefix": "Undo_OnStateChangeEx",
		"scope": "eel",
		"body": "Undo_OnStateChangeEx(${1:\"descchange\"}, ${2:int whichStates}, ${3:int trackparm})",
		"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
	},
	"reaper.Undo_OnStateChangeEx": {
		"prefix": "reaper.Undo_OnStateChangeEx",
		"scope": "lua",
		"body": "reaper.Undo_OnStateChangeEx(${1:string descchange}, ${2:integer whichStates}, ${3:integer trackparm})",
		"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
	},
	"RPR_Undo_OnStateChangeEx": {
		"prefix": "RPR_Undo_OnStateChangeEx",
		"scope": "python",
		"body": "RPR_Undo_OnStateChangeEx(${1:String descchange}, ${2:Int whichStates}, ${3:Int trackparm})",
		"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
	},
	"Undo_OnStateChangeEx2": {
		"prefix": "Undo_OnStateChangeEx2",
		"scope": "eel",
		"body": "Undo_OnStateChangeEx2(${1:ReaProject proj}, ${2:\"descchange\"}, ${3:int whichStates}, ${4:int trackparm})",
		"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
	},
	"reaper.Undo_OnStateChangeEx2": {
		"prefix": "reaper.Undo_OnStateChangeEx2",
		"scope": "lua",
		"body": "reaper.Undo_OnStateChangeEx2(${1:ReaProject proj}, ${2:string descchange}, ${3:integer whichStates}, ${4:integer trackparm})",
		"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
	},
	"RPR_Undo_OnStateChangeEx2": {
		"prefix": "RPR_Undo_OnStateChangeEx2",
		"scope": "python",
		"body": "RPR_Undo_OnStateChangeEx2(${1:ReaProject proj}, ${2:String descchange}, ${3:Int whichStates}, ${4:Int trackparm})",
		"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
	},
	"UpdateArrange": {
		"prefix": "UpdateArrange",
		"scope": "eel",
		"body": "UpdateArrange()",
		"description": "Redraw the arrange view"
	},
	"reaper.UpdateArrange": {
		"prefix": "reaper.UpdateArrange",
		"scope": "lua",
		"body": "reaper.UpdateArrange()",
		"description": "Redraw the arrange view"
	},
	"RPR_UpdateArrange": {
		"prefix": "RPR_UpdateArrange",
		"scope": "python",
		"body": "RPR_UpdateArrange()",
		"description": "Redraw the arrange view"
	},
	"UpdateItemInProject": {
		"prefix": "UpdateItemInProject",
		"scope": "eel",
		"body": "UpdateItemInProject(${1:MediaItem item})",
		"description": ""
	},
	"reaper.UpdateItemInProject": {
		"prefix": "reaper.UpdateItemInProject",
		"scope": "lua",
		"body": "reaper.UpdateItemInProject(${1:MediaItem item})",
		"description": ""
	},
	"RPR_UpdateItemInProject": {
		"prefix": "RPR_UpdateItemInProject",
		"scope": "python",
		"body": "RPR_UpdateItemInProject(${1:MediaItem item})",
		"description": ""
	},
	"UpdateTimeline": {
		"prefix": "UpdateTimeline",
		"scope": "eel",
		"body": "UpdateTimeline()",
		"description": "Redraw the arrange view and ruler"
	},
	"reaper.UpdateTimeline": {
		"prefix": "reaper.UpdateTimeline",
		"scope": "lua",
		"body": "reaper.UpdateTimeline()",
		"description": "Redraw the arrange view and ruler"
	},
	"RPR_UpdateTimeline": {
		"prefix": "RPR_UpdateTimeline",
		"scope": "python",
		"body": "RPR_UpdateTimeline()",
		"description": "Redraw the arrange view and ruler"
	},
	"ValidatePtr": {
		"prefix": "ValidatePtr",
		"scope": "eel",
		"body": "${1:${2:bool} = }ValidatePtr(${3:void* pointer}, ${4:\"ctypename\"})",
		"description": "see ValidatePtr2"
	},
	"reaper.ValidatePtr": {
		"prefix": "reaper.ValidatePtr",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.ValidatePtr(${3:identifier pointer}, ${4:string ctypename})",
		"description": "see ValidatePtr2"
	},
	"RPR_ValidatePtr": {
		"prefix": "RPR_ValidatePtr",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_ValidatePtr(${3:void pointer}, ${4:String ctypename})",
		"description": "see ValidatePtr2"
	},
	"ValidatePtr2": {
		"prefix": "ValidatePtr2",
		"scope": "eel",
		"body": "${1:${2:bool} = }ValidatePtr2(${3:ReaProject proj}, ${4:void* pointer}, ${5:\"ctypename\"})",
		"description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*."
	},
	"reaper.ValidatePtr2": {
		"prefix": "reaper.ValidatePtr2",
		"scope": "lua",
		"body": "${1:${2:boolean} = }reaper.ValidatePtr2(${3:ReaProject proj}, ${4:identifier pointer}, ${5:string ctypename})",
		"description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*."
	},
	"RPR_ValidatePtr2": {
		"prefix": "RPR_ValidatePtr2",
		"scope": "python",
		"body": "${1:${2:Boolean} = }RPR_ValidatePtr2(${3:ReaProject proj}, ${4:void pointer}, ${5:String ctypename})",
		"description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*."
	},
	"ViewPrefs": {
		"prefix": "ViewPrefs",
		"scope": "eel",
		"body": "ViewPrefs(${1:int page}, ${2:\"pageByName\"})",
		"description": "Opens the prefs to a page, use pageByName if page is 0."
	},
	"reaper.ViewPrefs": {
		"prefix": "reaper.ViewPrefs",
		"scope": "lua",
		"body": "reaper.ViewPrefs(${1:integer page}, ${2:string pageByName})",
		"description": "Opens the prefs to a page, use pageByName if page is 0."
	},
	"RPR_ViewPrefs": {
		"prefix": "RPR_ViewPrefs",
		"scope": "python",
		"body": "RPR_ViewPrefs(${1:Int page}, ${2:String pageByName})",
		"description": "Opens the prefs to a page, use pageByName if page is 0."
	},
	"abs": {
		"prefix": "abs",
		"scope": "eel",
		"body": "abs(${1:value})",
		"description": "Returns the absolute value of the parameter."
	},
	"acos": {
		"prefix": "acos",
		"scope": "eel",
		"body": "acos(${1:value})",
		"description": "Returns the arc cosine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined."
	},
	"asin": {
		"prefix": "asin",
		"scope": "eel",
		"body": "asin(${1:value})",
		"description": "Returns the arc sine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined."
	},
	"atan": {
		"prefix": "atan",
		"scope": "eel",
		"body": "atan(${1:value})",
		"description": "Returns the arc tangent of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined."
	},
	"atan2": {
		"prefix": "atan2",
		"scope": "eel",
		"body": "atan2(${1:numerator}, ${2:denominator})",
		"description": "Returns the arc tangent of the numerator divided by the denominator, allowing the denominator to be 0, and using their signs to produce a more meaningful result."
	},
	"atexit": {
		"prefix": "atexit",
		"scope": "eel",
		"body": "atexit(${1:\"code\"})",
		"description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code."
	},
	"ceil": {
		"prefix": "ceil",
		"scope": "eel",
		"body": "ceil(${1:value})",
		"description": "Returns the value rounded to the next highest integer (ceil(3.1)==4, ceil(-3.9)==-3)."
	},
	"convolve_c": {
		"prefix": "convolve_c",
		"scope": "eel",
		"body": "convolve_c(${1:dest}, ${2:src}, ${3:size})",
		"description": "Multiplies each of size complex pairs in dest by the complex pairs in src. Often used for convolution."
	},
	"cos": {
		"prefix": "cos",
		"scope": "eel",
		"body": "cos(${1:angle})",
		"description": "Returns the cosine of the angle specified (specified in radians)."
	},
	"defer": {
		"prefix": "defer",
		"scope": "eel",
		"body": "defer(${1:\"code\"})",
		"description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly."
	},
	"eval": {
		"prefix": "eval",
		"scope": "eel",
		"body": "eval(${1:\"code\"})",
		"description": "Executes code passed in. Code can use functions, but functions created in code can't be used elsewhere."
	},
	"exp": {
		"prefix": "exp",
		"scope": "eel",
		"body": "exp(${1:exponent})",
		"description": "Returns the number e ($e, approximately 2.718) raised to the parameter-th power. This function is significantly faster than pow() or the ^ operator."
	},
	"extension_api": {
		"prefix": "extension_api",
		"scope": "eel",
		"body": "extension_api(${1:\"function_name\"}, ${2:${3:[...]})",
		"description": "Used to call functions exported by extension plugins. The first parameter must be the exported function name, then its own parameters (as if the function was called directly)."
	},
	"fclose": {
		"prefix": "fclose",
		"scope": "eel",
		"body": "fclose(${1:fp})",
		"description": "Closes a file previously opened with fopen()."
	},
	"feof": {
		"prefix": "feof",
		"scope": "eel",
		"body": "feof(${1:fp})",
		"description": "Returns nonzero if the file fp is at the end of file."
	},
	"fflush": {
		"prefix": "fflush",
		"scope": "eel",
		"body": "fflush(${1:fp})",
		"description": "If file fp is open for writing, flushes out any buffered data to disk."
	},
	"fft": {
		"prefix": "fft",
		"scope": "eel",
		"body": "fft(${1:buffer}, ${2:size})",
		"description": "Performs a FFT on the data in the local memory buffer at the offset specified by the first parameter. The size of the FFT is specified by the second parameter, which must be 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The outputs are permuted, so if you plan to use them in-order, call fft_permute(buffer, size) before and fft_ipermute(buffer,size) after your in-order use. Your inputs or outputs will need to be scaled down by 1/size, if used.\nNote that fft()/ifft() require real / imaginary input pairs, so a 256 point FFT actually works with 512 items.\nNote that fft()/ifft() must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly."
	},
	"fft_ipermute": {
		"prefix": "fft_ipermute",
		"scope": "eel",
		"body": "fft_ipermute(${1:buffer}, ${2:size})",
		"description": "Permute the input for ifft(), taking bands from in-order to the order ifft() requires. See fft() for more information."
	},
	"fft_permute": {
		"prefix": "fft_permute",
		"scope": "eel",
		"body": "fft_permute(${1:buffer}, ${2:size})",
		"description": "Permute the output of fft() to have bands in-order. See fft() for more information."
	},
	"fft_real": {
		"prefix": "fft_real",
		"scope": "eel",
		"body": "fft_real(${1:buffer}, ${2:size})",
		"description": "Performs an FFT, but takes size input samples and produces size/2 complex output pairs. Usually used along with fft_permute(size/2). Inputs/outputs will need to be scaled by 0.5/size."
	},
	"fgetc": {
		"prefix": "fgetc",
		"scope": "eel",
		"body": "fgetc(${1:fp})",
		"description": "Reads a character from file fp, returns -1 if EOF."
	},
	"fgets": {
		"prefix": "fgets",
		"scope": "eel",
		"body": "fgets(${1:fp}, ${2:#str})",
		"description": "Reads a line from file fp into #str. Returns length of #str read."
	},
	"floor": {
		"prefix": "floor",
		"scope": "eel",
		"body": "floor(${1:value})",
		"description": "Returns the value rounded to the next lowest integer (floor(3.9)==3, floor(-3.1)==-4)."
	},
	"fopen": {
		"prefix": "fopen",
		"scope": "eel",
		"body": "fopen(${1:\"fn\"}, ${2:\"mode\"})",
		"description": "Opens a file \"fn\" with mode \"mode\". For read, use \"r\" or \"rb\", write \"w\" or \"wb\". Returns a positive integer on success."
	},
	"fprintf": {
		"prefix": "fprintf",
		"scope": "eel",
		"body": "fprintf(${1:fp}, ${2:\"format\"}, ${3:${4:[...]})",
		"description": "Formats a string and writes it to file fp. For more information on format specifiers, see sprintf(). Returns bytes written to file."
	},
	"fread": {
		"prefix": "fread",
		"scope": "eel",
		"body": "fread(${1:fp}, ${2:#str}, ${3:length})",
		"description": "Reads from file fp into #str, up to length bytes. Returns actual length read, or negative if error."
	},
	"freembuf": {
		"prefix": "freembuf",
		"scope": "eel",
		"body": "freembuf(${1:address})",
		"description": "Hints the runtime that memory above the address specified may no longer be used. The runtime may, at its leisure, choose to lose the contents of memory above the address specified."
	},
	"fseek": {
		"prefix": "fseek",
		"scope": "eel",
		"body": "fseek(${1:fp}, ${2:offset}, ${3:whence})",
		"description": "Seeks file fp, offset bytes from whence reference. Whence negative specifies start of file, positive whence specifies end of file, and zero whence specifies current file position."
	},
	"ftell": {
		"prefix": "ftell",
		"scope": "eel",
		"body": "ftell(${1:fp})",
		"description": "Retunrs the current file position."
	},
	"fwrite": {
		"prefix": "fwrite",
		"scope": "eel",
		"body": "fwrite(${1:fp}, ${2:#str}, ${3:len})",
		"description": "Writes up to len characters of #str to file fp. If len is less than 1, the full contents of #str will be written. Returns the number of bytes written to file."
	},
	"get_action_context": {
		"prefix": "get_action_context",
		"scope": "eel",
		"body": "get_action_context(${1:#filename}, ${2:sectionID}, ${3:cmdID}, ${4:mode}, ${5:resolution}, ${6:val})",
		"description": "Queries contextual information about the script, typically MIDI/OSC input values.\nReturns true if a new value has been updated.\nval will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.\nNotes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC."
	},
	"eel gfx_r": {
		"prefix": "gfx_r",
		"scope": "eel",
		"body": "gfx_r",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx_a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)"
	},
	"eel gfx_g": {
		"prefix": "gfx_g",
		"scope": "eel",
		"body": "gfx_g",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx_a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)"
	},
	"eel gfx_b": {
		"prefix": "gfx_b",
		"scope": "eel",
		"body": "gfx_b",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx_a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)"
	},
	"eel gfx_a2": {
		"prefix": "gfx_a2",
		"scope": "eel",
		"body": "gfx_a2",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx_a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)"
	},
	"eel gfx_a": {
		"prefix": "gfx_a",
		"scope": "eel",
		"body": "gfx_a",
		"description": "Alpha and blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx_a to negative and use gfx_mode as additive). Add 2.0 to disable source alpha for gfx_blit(). Add 4.0 to disable filtering for gfx_blit()."
	},
	"eel gfx_mode": {
		"prefix": "gfx_mode",
		"scope": "eel",
		"body": "gfx_mode",
		"description": "Alpha and blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx_a to negative and use gfx_mode as additive). Add 2.0 to disable source alpha for gfx_blit(). Add 4.0 to disable filtering for gfx_blit()."
	},
	"eel gfx_w": {
		"prefix": "gfx_w",
		"scope": "eel",
		"body": "gfx_w",
		"description": "These are set to the current width and height of the UI framebuffer."
	},
	"eel gfx_h": {
		"prefix": "gfx_h",
		"scope": "eel",
		"body": "gfx_h",
		"description": "These are set to the current width and height of the UI framebuffer."
	},
	"eel gfx_x": {
		"prefix": "gfx_x",
		"scope": "eel",
		"body": "gfx_x",
		"description": "These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well."
	},
	"eel gfx_y": {
		"prefix": "gfx_y",
		"scope": "eel",
		"body": "gfx_y",
		"description": "These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well."
	},
	"eel gfx_clear": {
		"prefix": "gfx_clear",
		"scope": "eel",
		"body": "gfx_clear",
		"description": "If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black)."
	},
	"eel gfx_dest": {
		"prefix": "gfx_dest",
		"scope": "eel",
		"body": "gfx_dest",
		"description": "Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image)."
	},
	"eel gfx_texth": {
		"prefix": "gfx_texth",
		"scope": "eel",
		"body": "gfx_texth",
		"description": "Set to the height of a line of text in the current font. Do not modify this variable."
	},
	"eel gfx_ext_retina": {
		"prefix": "gfx_ext_retina",
		"scope": "eel",
		"body": "gfx_ext_retina",
		"description": "If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx_w/gfx_h/etc will be doubled."
	},
	"eel mouse_x": {
		"prefix": "mouse_x",
		"scope": "eel",
		"body": "mouse_x",
		"description": "mouse_x and mouse_y are set to the coordinates of the mouse relative to the graphics window."
	},
	"eel mouse_y": {
		"prefix": "mouse_y",
		"scope": "eel",
		"body": "mouse_y",
		"description": "mouse_x and mouse_y are set to the coordinates of the mouse relative to the graphics window."
	},
	"eel mouse_wheel": {
		"prefix": "mouse_wheel",
		"scope": "eel",
		"body": "mouse_wheel",
		"description": "mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it."
	},
	"eel mouse_hwheel": {
		"prefix": "mouse_hwheel",
		"scope": "eel",
		"body": "mouse_hwheel",
		"description": "mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it."
	},
	"eel mouse_cap": {
		"prefix": "mouse_cap",
		"scope": "eel",
		"body": "mouse_cap",
		"description": "a bitfield of mouse and keyboard modifier state.\n\t1: left mouse button\n\t2: right mouse button\n\t4: Command key\n\t8: Shift key\n\t16: Option key\n\t32: Control key\n\t64: middle mouse button"
	},
	"gfx_arc": {
		"prefix": "gfx_arc",
		"scope": "eel",
		"body": "gfx_arc(${1:x}, ${2:y}, ${3:r}, ${4:ang1}, ${5:ang2}, ${6:${7:[antialias]})",
		"description": "Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians."
	},
	"gfx_blit": {
		"prefix": "gfx_blit",
		"scope": "eel",
		"body": "gfx_blit(${1:source}, ${2:scale}, ${3:rotation}, ${4:${5:[srcx}, ${6:srcy}, ${7:srcw}, ${8:srch}, ${9:destx}, ${10:desty}, ${11:destw}, ${12:desth}, ${13:rotxoffs}, ${14:rotyoffs]}})",
		"description": "srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size), destx/desty/destw/desth specify dest rectangle (if not specified, these will default to reasonable defaults -- destw/desth default to srcw/srch * scale)."
	},
	"gfx_blit": {
		"prefix": "gfx_blit",
		"scope": "eel",
		"body": "gfx_blit(${1:source}, ${2:scale}, ${3:rotation})",
		"description": "If three parameters are specified, copies the entirity of the source bitmap to gfx_x,gfx_y using current opacity and copy mode (set with gfx_a, gfx_mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians).\nFor the \"source\" parameter specify -1 to use the main framebuffer as source, or an image index (see gfx_loadimg())."
	},
	"gfx_blitext": {
		"prefix": "gfx_blitext",
		"scope": "eel",
		"body": "gfx_blitext(${1:source}, ${2:coordinatelist}, ${3:rotation})",
		"description": "Deprecated, use gfx_blit instead."
	},
	"gfx_blurto": {
		"prefix": "gfx_blurto",
		"scope": "eel",
		"body": "gfx_blurto(${1:x}, ${2:y})",
		"description": "Blurs the region of the screen between gfx_x,gfx_y and x,y, and updates gfx_x,gfx_y to x,y."
	},
	"gfx_circle": {
		"prefix": "gfx_circle",
		"scope": "eel",
		"body": "gfx_circle(${1:x}, ${2:y}, ${3:r}, ${4:${5:[fill}, ${6:antialias]}})",
		"description": "Draws a circle, optionally filling/antialiasing."
	},
	"gfx_clienttoscreen": {
		"prefix": "gfx_clienttoscreen",
		"scope": "eel",
		"body": "gfx_clienttoscreen(${1:x}, ${2:y})",
		"description": "Converts client coordinates x,y to screen coordinates."
	},
	"gfx_deltablit": {
		"prefix": "gfx_deltablit",
		"scope": "eel",
		"body": "gfx_deltablit(${1:srcimg}, ${2:srcs}, ${3:srct}, ${4:srcw}, ${5:srch}, ${6:destx}, ${7:desty}, ${8:destw}, ${9:desth}, ${10:dsdx}, ${11:dtdx}, ${12:dsdy}, ${13:dtdy}, ${14:dsdxdy}, ${15:dtdxdy}, ${16:${17:[usecliprect=1]})",
		"description": "Blits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored."
	},
	"gfx_dock": {
		"prefix": "gfx_dock",
		"scope": "eel",
		"body": "gfx_dock(${1:v}, ${2:${3:[wx}, ${4:wy}, ${5:ww}, ${6:wh]}})",
		"description": "Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is +1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh are specified, they will be filled with the undocked window position/size"
	},
	"gfx_drawchar": {
		"prefix": "gfx_drawchar",
		"scope": "eel",
		"body": "gfx_drawchar(${1:char})",
		"description": "Draws the character (can be a numeric ASCII code as well), to gfx_x, gfx_y, and moves gfx_x over by the size of the character."
	},
	"gfx_drawnumber": {
		"prefix": "gfx_drawnumber",
		"scope": "eel",
		"body": "gfx_drawnumber(${1:n}, ${2:ndigits})",
		"description": "Draws the number n with ndigits of precision to gfx_x, gfx_y, and updates gfx_x to the right side of the drawing. The text height is gfx_texth."
	},
	"gfx_drawstr": {
		"prefix": "gfx_drawstr",
		"scope": "eel",
		"body": "gfx_drawstr(${1:\"str\"}, ${2:${3:[flags}, ${4:right}, ${5:bottom]}})",
		"description": "Draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y so that subsequent draws will occur in a similar place.\n\nIf flags, right ,bottom passed in:\nflags+1: center horizontally\nflags+2: right justify\nflags+4: center vertically\nflags+8: bottom justify\nflags+256: ignore right/bottom, otherwise text is clipped to (gfx_x, gfx_y, right, bottom)"
	},
	"gfx_getchar": {
		"prefix": "gfx_getchar",
		"scope": "eel",
		"body": "gfx_getchar(${1:}, ${2:${3:[char]})",
		"description": "If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.\n\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. \n\nModified and special keys can also be returned, including:\nCtrl/Cmd+A..Ctrl+Z as 1..26\nCtrl/Cmd+Alt+A..Z as 257..282\nAlt+A..Z as 'A'+256..'Z'+256\n27 for ESC\n13 for Enter\n' ' for space\n65536 for query of special flags, returns: +1 (supported), +2=window has focus, +4=window is visible\n"
	},
	"gfx_getdropfile": {
		"prefix": "gfx_getdropfile",
		"scope": "eel",
		"body": "gfx_getdropfile(${1:idx}, ${2:${3:[#str]})",
		"description": "Enumerates any drag/dropped files. call gfx_dropfile(-1) to clear the list when finished. Returns 1 if idx is valid, 0 if idx is out of range."
	},
	"gfx_getfont": {
		"prefix": "gfx_getfont",
		"scope": "eel",
		"body": "gfx_getfont(${1:}, ${2:${3:[#str]})",
		"description": "Returns current font index. If a string is passed, it will receive the actual font face used by this font, if available."
	},
	"gfx_getimgdim": {
		"prefix": "gfx_getimgdim",
		"scope": "eel",
		"body": "gfx_getimgdim(${1:image}, ${2:w}, ${3:h})",
		"description": "Retreives the dimensions of image (representing a filename: index number) into w and h. Sets these values to 0 if an image failed loading (or if the filename index is invalid)."
	},
	"gfx_getpixel": {
		"prefix": "gfx_getpixel",
		"scope": "eel",
		"body": "gfx_getpixel(${1:r}, ${2:g}, ${3:b})",
		"description": "Gets the value of the pixel at gfx_x,gfx_y into r,g,b."
	},
	"gfx_gradrect": {
		"prefix": "gfx_gradrect",
		"scope": "eel",
		"body": "gfx_gradrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:r}, ${6:g}, ${7:b}, ${8:a}, ${9:${10:[drdx}, ${11:dgdx}, ${12:dbdx}, ${13:dadx}, ${14:drdy}, ${15:dgdy}, ${16:dbdy}, ${17:dady]}})",
		"description": "Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc."
	},
	"gfx_init": {
		"prefix": "gfx_init",
		"scope": "eel",
		"body": "gfx_init(${1:\"name\"}, ${2:${3:[width}, ${4:height}, ${5:dockstate}, ${6:xpos}, ${7:ypos]}})",
		"description": "Initializes the graphics window with title name. Suggested width and height can be specified.\n\nOnce the graphics window is open, gfx_update() should be called periodically."
	},
	"gfx_line": {
		"prefix": "gfx_line",
		"scope": "eel",
		"body": "gfx_line(${1:x}, ${2:y}, ${3:x2}, ${4:y2}, ${5:${6:[aa]})",
		"description": "Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased."
	},
	"gfx_lineto": {
		"prefix": "gfx_lineto",
		"scope": "eel",
		"body": "gfx_lineto(${1:x}, ${2:y}, ${3:${4:[aa]})",
		"description": "Draws a line from gfx_x,gfx_y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx_x and gfx_y to x,y."
	},
	"gfx_loadimg": {
		"prefix": "gfx_loadimg",
		"scope": "eel",
		"body": "gfx_loadimg(${1:image}, ${2:\"filename\"})",
		"description": "Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file."
	},
	"gfx_measurechar": {
		"prefix": "gfx_measurechar",
		"scope": "eel",
		"body": "gfx_measurechar(${1:character}, ${2:+w}, ${3:+h})",
		"description": "Measures the drawing dimensions of a character with the current font (as set by gfx_setfont)."
	},
	"gfx_measurestr": {
		"prefix": "gfx_measurestr",
		"scope": "eel",
		"body": "gfx_measurestr(${1:\"str\"}, ${2:+w}, ${3:+h})",
		"description": "Measures the drawing dimensions of a string with the current font (as set by gfx_setfont)."
	},
	"gfx_muladdrect": {
		"prefix": "gfx_muladdrect",
		"scope": "eel",
		"body": "gfx_muladdrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:mul_r}, ${6:mul_g}, ${7:mul_b}, ${8:${9:[mul_a}, ${10:add_r}, ${11:add_g}, ${12:add_b}, ${13:add_a]}})",
		"description": "Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects."
	},
	"gfx_printf": {
		"prefix": "gfx_printf",
		"scope": "eel",
		"body": "gfx_printf(${1:\"format\"}, ${2:${3:[...]})",
		"description": "Formats and draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()"
	},
	"gfx_quit": {
		"prefix": "gfx_quit",
		"scope": "eel",
		"body": "gfx_quit()",
		"description": "Closes the graphics window."
	},
	"gfx_rect": {
		"prefix": "gfx_rect",
		"scope": "eel",
		"body": "gfx_rect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:${6:[filled]})",
		"description": "Fills a rectangle at x,y, w,h pixels in dimension, filled by default."
	},
	"gfx_rectto": {
		"prefix": "gfx_rectto",
		"scope": "eel",
		"body": "gfx_rectto(${1:x}, ${2:y})",
		"description": "Fills a rectangle from gfx_x,gfx_y to x,y. Updates gfx_x,gfx_y to x,y."
	},
	"gfx_roundrect": {
		"prefix": "gfx_roundrect",
		"scope": "eel",
		"body": "gfx_roundrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:radius}, ${6:${7:[antialias]})",
		"description": "Draws a rectangle with rounded corners."
	},
	"gfx_screentoclient": {
		"prefix": "gfx_screentoclient",
		"scope": "eel",
		"body": "gfx_screentoclient(${1:x}, ${2:y})",
		"description": "Converts screen coordinates x,y to client coordinates."
	},
	"gfx_set": {
		"prefix": "gfx_set",
		"scope": "eel",
		"body": "gfx_set(${1:r}, ${2:${3:[g}, ${4:b}, ${5:a}, ${6:mode}, ${7:dest}, ${8:a2]}})",
		"description": "Sets gfx_r/gfx_g/gfx_b/gfx_a/gfx_mode/gfx_a2, sets gfx_dest if final parameter specified"
	},
	"gfx_setcursor": {
		"prefix": "gfx_setcursor",
		"scope": "eel",
		"body": "gfx_setcursor(${1:resource_id}, ${2:custom_cursor_name})",
		"description": "Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like \"arrow\" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional."
	},
	"gfx_setfont": {
		"prefix": "gfx_setfont",
		"scope": "eel",
		"body": "gfx_setfont(${1:idx}, ${2:${3:[\"fontface\"}, ${4:sz}, ${5:flags]}})",
		"description": "Can select a font and optionally configure it. idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font, specify fontface such as \"Arial\", sz of 8-100, and optionally specify flags, which is a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. These flags may or may not be supported depending on the font and OS. After calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height."
	},
	"gfx_setimgdim": {
		"prefix": "gfx_setimgdim",
		"scope": "eel",
		"body": "gfx_setimgdim(${1:image}, ${2:w}, ${3:h})",
		"description": "Resize image referenced by index 0..1024-1, width and height must be 0-2048. The contents of the image will be undefined after the resize."
	},
	"gfx_setpixel": {
		"prefix": "gfx_setpixel",
		"scope": "eel",
		"body": "gfx_setpixel(${1:r}, ${2:g}, ${3:b})",
		"description": "Writes a pixel of r,g,b to gfx_x,gfx_y."
	},
	"gfx_showmenu": {
		"prefix": "gfx_showmenu",
		"scope": "eel",
		"body": "gfx_showmenu(${1:\"str\"})",
		"description": "Shows a popup menu at gfx_x,gfx_y. str is a list of fields separated by | characters. Each field represents a menu item.\nFields can start with special characters:\n\n# : grayed out\n! : checked\n> : this menu item shows a submenu\n< : last item in the current submenu\n\nAn empty field will appear as a separator in the menu. gfx_showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.\nExample:\n\ngfx_showmenu(\"first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu\")"
	},
	"gfx_transformblit": {
		"prefix": "gfx_transformblit",
		"scope": "eel",
		"body": "gfx_transformblit(${1:srcimg}, ${2:destx}, ${3:desty}, ${4:destw}, ${5:desth}, ${6:div_w}, ${7:div_h}, ${8:table})",
		"description": "Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (this table must not cross a 65536 item boundary). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination."
	},
	"gfx_triangle": {
		"prefix": "gfx_triangle",
		"scope": "eel",
		"body": "gfx_triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:${8:[x4y4...]})",
		"description": "Draws a filled triangle, or any convex polygon."
	},
	"gfx_update": {
		"prefix": "gfx_update",
		"scope": "eel",
		"body": "gfx_update()",
		"description": "Updates the graphics display, if opened"
	},
	"ifft": {
		"prefix": "ifft",
		"scope": "eel",
		"body": "ifft(${1:buffer}, ${2:size})",
		"description": "Perform an inverse FFT. For more information see fft()."
	},
	"ifft_real": {
		"prefix": "ifft_real",
		"scope": "eel",
		"body": "ifft_real(${1:buffer}, ${2:size})",
		"description": "Performs an inverse FFT, but takes size/2 complex input pairs and produces size real output values. Usually used along with fft_ipermute(size/2)."
	},
	"invsqrt": {
		"prefix": "invsqrt",
		"scope": "eel",
		"body": "invsqrt(${1:value})",
		"description": "Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter."
	},
	"log": {
		"prefix": "log",
		"scope": "eel",
		"body": "log(${1:value})",
		"description": "Returns the natural logarithm (base e) of the parameter. If the value is not greater than 0, the return value is undefined."
	},
	"log10": {
		"prefix": "log10",
		"scope": "eel",
		"body": "log10(${1:value})",
		"description": "Returns the base-10 logarithm of the parameter. If the value is not greater than 0, the return value is undefined."
	},
	"loop": {
		"prefix": "loop",
		"scope": "eel",
		"body": "loop(${1:count}, ${2:expression})",
		"description": "Evaluates count once, and then executes expression count, but not more than 1048576, times."
	},
	"match": {
		"prefix": "match",
		"scope": "eel",
		"body": "match(${1:\"needle\"}, ${2:\"haystack\"}, ${3:${4:[...]})",
		"description": "Searches for the first parameter in the second parameter, using a simplified regular expression syntax.\n* = match 0 or more characters\n*? = match 0 or more characters, lazy\n+ = match 1 or more characters\n+? = match 1 or more characters, lazy\n? = match one character\n\nYou can also use format specifiers to match certain types of data, and optionally put that into a variable:\n%s means 1 or more chars\n%0s means 0 or more chars\n%5s means exactly 5 chars\n%5-s means 5 or more chars\n%-10s means 1-10 chars\n%3-5s means 3-5 chars\n%0-5s means 0-5 chars\n%x, %d, %u, and %f are available for use similarly\n%c can be used, but can't take any length modifiers\nUse uppercase (%S, %D, etc) for lazy matching\n\nSee also sprintf() for other notes, including specifying direct variable references via {}."
	},
	"matchi": {
		"prefix": "matchi",
		"scope": "eel",
		"body": "matchi(${1:\"needle\"}, ${2:\"haystack\"}, ${3:${4:[...]})",
		"description": "Case-insensitive version of match()."
	},
	"max": {
		"prefix": "max",
		"scope": "eel",
		"body": "max(${1:+value}, ${2:+value})",
		"description": "Returns (by reference) the maximum value of the two parameters. Since max() returns by reference, expressions such as max(x,y) = 5 are possible."
	},
	"mem_get_values": {
		"prefix": "mem_get_values",
		"scope": "eel",
		"body": "mem_get_values(${1:offset}, ${2:...})",
		"description": "Reads values from memory starting at offset into variables specified. Slower than regular memory reads for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables."
	},
	"mem_set_values": {
		"prefix": "mem_set_values",
		"scope": "eel",
		"body": "mem_set_values(${1:offset}, ${2:...})",
		"description": "Writes values to memory starting at offset from variables specified. Slower than regular memory writes for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables."
	},
	"memcpy": {
		"prefix": "memcpy",
		"scope": "eel",
		"body": "memcpy(${1:dest}, ${2:src}, ${3:length})",
		"description": "Copies length items of memory from src to dest. Regions are permitted to overlap."
	},
	"memset": {
		"prefix": "memset",
		"scope": "eel",
		"body": "memset(${1:offset}, ${2:value}, ${3:length})",
		"description": "Sets length items of memory at offset to value."
	},
	"min": {
		"prefix": "min",
		"scope": "eel",
		"body": "min(${1:+value}, ${2:+value})",
		"description": "Returns (by reference) the minimum value of the two parameters. Since min() returns by reference, expressions such as min(x,y) = 5 are possible."
	},
	"printf": {
		"prefix": "printf",
		"scope": "eel",
		"body": "printf(${1:\"format\"}, ${2:${3:[...]})",
		"description": "Output formatted string to system-specific destination, see sprintf() for more informatio"
	},
	"rand": {
		"prefix": "rand",
		"scope": "eel",
		"body": "rand(${1:}, ${2:${3:[max]})",
		"description": "Returns a psuedorandom real number between 0 and the parameter, inclusive. If the parameter is omitted or less than 1.0, 1.0 is used as a maximum instead."
	},
	"runloop": {
		"prefix": "runloop",
		"scope": "eel",
		"body": "runloop(${1:\"code\"})",
		"description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly."
	},
	"sign": {
		"prefix": "sign",
		"scope": "eel",
		"body": "sign(${1:value})",
		"description": "Returns 1.0 if the parameter is greater than 0, -1.0 if the parameter is less than 0, or 0 if the parameter is 0."
	},
	"sin": {
		"prefix": "sin",
		"scope": "eel",
		"body": "sin(${1:angle})",
		"description": "Returns the sine of the angle specified (specified in radians -- to convert from degrees to radians, multiply by $pi/180, or 0.017453)."
	},
	"sleep": {
		"prefix": "sleep",
		"scope": "eel",
		"body": "sleep(${1:ms})",
		"description": "Yields the CPU for the millisecond count specified, calling Sleep() on Windows or usleep() on other platforms."
	},
	"sprintf": {
		"prefix": "sprintf",
		"scope": "eel",
		"body": "sprintf(${1:#dest}, ${2:\"format\"}, ${3:${4:[...]})",
		"description": "Formats a string and stores it in #dest. Format specifiers begin with %, and may include:\n %% = %\n %s = string from parameter\n %d = parameter as integer\n %i = parameter as integer\n %u = parameter as unsigned integer\n %x = parameter as hex (lowercase) integer\n %X = parameter as hex (uppercase) integer\n %c = parameter as character\n %f = parameter as floating point\n %e = parameter as floating point (scientific notation, lowercase)\n %E = parameter as floating point (scientific notation, uppercase)\n %g = parameter as floating point (shortest representation, lowercase)\n %G = parameter as floating point (shortest representation, uppercase)\n\nMany standard C printf() modifiers can be used, including:\n %.10s = string, but only print up to 10 characters\n %-10s = string, left justified to 10 characters\n %10s = string, right justified to 10 characters\n %+f = floating point, always show sign\n %.4f = floating point, minimum of 4 digits after decimal point\n %10d = integer, minimum of 10 digits (space padded)\n %010f = integer, minimum of 10 digits (zero padded)\n\nValues for format specifiers can be specified as additional parameters to sprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used)."
	},
	"sqr": {
		"prefix": "sqr",
		"scope": "eel",
		"body": "sqr(${1:value})",
		"description": "Returns the square of the parameter (similar to value*value, but only evaluating value once)."
	},
	"sqrt": {
		"prefix": "sqrt",
		"scope": "eel",
		"body": "sqrt(${1:value})",
		"description": "Returns the square root of the parameter. If the parameter is negative, the return value is undefined."
	},
	"stack_exch": {
		"prefix": "stack_exch",
		"scope": "eel",
		"body": "stack_exch(${1:+value})",
		"description": "Exchanges a value with the top of the stack, and returns a reference to the parameter (with the new value)."
	},
	"stack_peek": {
		"prefix": "stack_peek",
		"scope": "eel",
		"body": "stack_peek(${1:index})",
		"description": "Returns a reference to the item on the top of the stack (if index is 0), or to the Nth item on the stack if index is greater than 0."
	},
	"stack_pop": {
		"prefix": "stack_pop",
		"scope": "eel",
		"body": "stack_pop(${1:+value})",
		"description": "Pops a value from the user stack into value, or into a temporary buffer if value is not specified, and returns a reference to where the stack was popped. Note that no checking is done to determine if the stack is empty, and as such stack_pop() will never fail."
	},
	"stack_push": {
		"prefix": "stack_push",
		"scope": "eel",
		"body": "stack_push(${1:+value})",
		"description": "Pushes value onto the user stack, returns a reference to the parameter."
	},
	"str_delsub": {
		"prefix": "str_delsub",
		"scope": "eel",
		"body": "str_delsub(${1:#str}, ${2:pos}, ${3:len})",
		"description": "Deletes len characters at offset pos from #str, and returns #str."
	},
	"str_getchar": {
		"prefix": "str_getchar",
		"scope": "eel",
		"body": "str_getchar(${1:\"str\"}, ${2:offset}, ${3:${4:[type]})",
		"description": "Returns the data at byte-offset offset of str. If offset is negative, position is relative to end of string.type defaults to signed char, but can be specified to read raw binary data in other formats (note the single quotes, these are single/multi-byte characters):\n'c' - signed char\n'cu' - unsigned char\n's' - signed short\n'S' - signed short, big endian\n'su' - unsigned short\n'Su' - unsigned short, big endian\n'i' - signed int\n'I' - signed int, big endian\n'iu' - unsigned int\n'Iu' - unsigned int, big endian\n'f' - float\n'F' - float, big endian\n'd' - double\n'D' - double, big endian\n"
	},
	"str_insert": {
		"prefix": "str_insert",
		"scope": "eel",
		"body": "str_insert(${1:#str}, ${2:\"srcstr\"}, ${3:pos})",
		"description": "Inserts srcstr into #str at offset pos. Returns #str"
	},
	"str_setchar": {
		"prefix": "str_setchar",
		"scope": "eel",
		"body": "str_setchar(${1:#str}, ${2:offset}, ${3:val}, ${4:${5:[type])})",
		"description": "Sets value at offset offset, type optional. offset may be negative to refer to offset relative to end of string, or between 0 and length, inclusive, and if set to length it will lengthen string. See str_getchar() for more information on types."
	},
	"str_setlen": {
		"prefix": "str_setlen",
		"scope": "eel",
		"body": "str_setlen(${1:#str}, ${2:len})",
		"description": "Sets length of #str (if increasing, will be space-padded), and returns #str."
	},
	"strcat": {
		"prefix": "strcat",
		"scope": "eel",
		"body": "strcat(${1:#str}, ${2:\"srcstr\"})",
		"description": "Appends srcstr to #str, and returns #str"
	},
	"strcmp": {
		"prefix": "strcmp",
		"scope": "eel",
		"body": "strcmp(${1:\"str\"}, ${2:\"str2\"})",
		"description": "Compares strings, returning 0 if equal"
	},
	"strcpy": {
		"prefix": "strcpy",
		"scope": "eel",
		"body": "strcpy(${1:#str}, ${2:\"srcstr\"})",
		"description": "Copies the contents of srcstr to #str, and returns #str"
	},
	"strcpy_from": {
		"prefix": "strcpy_from",
		"scope": "eel",
		"body": "strcpy_from(${1:#str}, ${2:\"srcstr\"}, ${3:offset})",
		"description": "Copies srcstr to #str, but starts reading srcstr at offset offset"
	},
	"strcpy_substr": {
		"prefix": "strcpy_substr",
		"scope": "eel",
		"body": "strcpy_substr(${1:#str}, ${2:\"srcstr\"}, ${3:offs}, ${4:ml)})",
		"description": "PHP-style (start at offs, offs<0 means from end, ml for maxlen, ml<0 = reduce length by this amt)"
	},
	"stricmp": {
		"prefix": "stricmp",
		"scope": "eel",
		"body": "stricmp(${1:\"str\"}, ${2:\"str2\"})",
		"description": "Compares strings ignoring case, returning 0 if equal"
	},
	"strlen": {
		"prefix": "strlen",
		"scope": "eel",
		"body": "strlen(${1:\"str\"})",
		"description": "Returns the length of the string passed as a parameter"
	},
	"strncat": {
		"prefix": "strncat",
		"scope": "eel",
		"body": "strncat(${1:#str}, ${2:\"srcstr\"}, ${3:maxlen})",
		"description": "Appends srcstr to #str, stopping after maxlen characters of srcstr. Returns #str."
	},
	"strncmp": {
		"prefix": "strncmp",
		"scope": "eel",
		"body": "strncmp(${1:\"str\"}, ${2:\"str2\"}, ${3:maxlen})",
		"description": "Compares strings giving up after maxlen characters, returning 0 if equal"
	},
	"strncpy": {
		"prefix": "strncpy",
		"scope": "eel",
		"body": "strncpy(${1:#str}, ${2:\"srcstr\"}, ${3:maxlen})",
		"description": "Copies srcstr to #str, stopping after maxlen characters. Returns #str."
	},
	"strnicmp": {
		"prefix": "strnicmp",
		"scope": "eel",
		"body": "strnicmp(${1:\"str\"}, ${2:\"str2\"}, ${3:maxlen})",
		"description": "Compares strings giving up after maxlen characters, ignoring case, returning 0 if equal"
	},
	"tan": {
		"prefix": "tan",
		"scope": "eel",
		"body": "tan(${1:angle})",
		"description": "Returns the tangent of the angle specified (specified in radians)."
	},
	"tcp_close": {
		"prefix": "tcp_close",
		"scope": "eel",
		"body": "tcp_close(${1:connection})",
		"description": "Closes a TCP connection created by tcp_listen() or tcp_connect()."
	},
	"tcp_connect": {
		"prefix": "tcp_connect",
		"scope": "eel",
		"body": "tcp_connect(${1:\"address\"}, ${2:port}, ${3:${4:[block]})",
		"description": "Create a new TCP connection to address:port. If block is specified and 0, connection will be made nonblocking. Returns TCP connection ID greater than 0 on success."
	},
	"tcp_listen": {
		"prefix": "tcp_listen",
		"scope": "eel",
		"body": "tcp_listen(${1:port}, ${2:${3:[\"interface\"}, ${4:#ip_out]}})",
		"description": "Listens on port specified. Returns less than 0 if could not listen, 0 if no new connection available, or greater than 0 (as a TCP connection ID) if a new connection was made. If a connection made and #ip_out specified, it will be set to the remote IP. interface can be empty for all interfaces, otherwise an interface IP as a string."
	},
	"tcp_listen_end": {
		"prefix": "tcp_listen_end",
		"scope": "eel",
		"body": "tcp_listen_end(${1:port})",
		"description": "Ends listening on port specified."
	},
	"tcp_recv": {
		"prefix": "tcp_recv",
		"scope": "eel",
		"body": "tcp_recv(${1:connection}, ${2:#str}, ${3:${4:[maxlen]})",
		"description": "Receives data from a connection to #str. If maxlen is specified, no more than maxlen bytes will be received. If non-blocking, 0 will be returned if would block. Returns less than 0 if error."
	},
	"tcp_send": {
		"prefix": "tcp_send",
		"scope": "eel",
		"body": "tcp_send(${1:connection}, ${2:\"str\"}, ${3:${4:[len]})",
		"description": "Sends a string to connection. Returns -1 on error, 0 if connection is non-blocking and would block, otherwise returns length sent. If len is specified and not less than 1, only the first len bytes of the string parameter will be sent."
	},
	"tcp_set_block": {
		"prefix": "tcp_set_block",
		"scope": "eel",
		"body": "tcp_set_block(${1:connection}, ${2:block})",
		"description": "Sets whether a connection blocks."
	},
	"time": {
		"prefix": "time",
		"scope": "eel",
		"body": "time(${1:}, ${2:${3:[+val]})",
		"description": "Sets the parameter (or a temporary buffer if omitted) to the number of seconds since January 1, 1970, and returns a reference to that value. The granularity of the value returned is 1 second."
	},
	"time_precise": {
		"prefix": "time_precise",
		"scope": "eel",
		"body": "time_precise(${1:}, ${2:${3:[+val]})",
		"description": "Sets the parameter (or a temporary buffer if omitted) to a system-local timestamp in seconds, and returns a reference to that value. The granularity of the value returned is system defined (but generally significantly smaller than one second)."
	},
	"while": {
		"prefix": "while",
		"scope": "eel",
		"body": "while(${1:expression})",
		"description": "Executes expression until expression evaluates to zero, or until 1048576iterations occur. An alternate and more useful syntax is while (expression) ( statements ), which evaluates statements after every non-zero evaluation of expression."
	},
	"reaper.atexit": {
		"prefix": "reaper.atexit",
		"scope": "lua",
		"body": "reaper.atexit(${1:function})",
		"description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code."
	},
	"reaper.defer": {
		"prefix": "reaper.defer",
		"scope": "lua",
		"body": "reaper.defer(${1:function})",
		"description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly."
	},
	"reaper.get_action_context": {
		"prefix": "reaper.get_action_context",
		"scope": "lua",
		"body": "reaper.get_action_context()",
		"description": "is_new_value,filename,sectionID,cmdID,mode,resolution,val = reaper.get_action_context()\nReturns contextual information about the script, typically MIDI/OSC input values.\n\nval will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.\nNotes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC."
	},
	"lua gfx.r": {
		"prefix": "gfx.r",
		"scope": "lua",
		"body": "gfx.r",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx.a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)"
	},
	"lua gfx.g": {
		"prefix": "gfx.g",
		"scope": "lua",
		"body": "gfx.g",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx.a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)"
	},
	"lua gfx.b": {
		"prefix": "gfx.b",
		"scope": "lua",
		"body": "gfx.b",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx.a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)"
	},
	"lua gfx.a2": {
		"prefix": "gfx.a2",
		"scope": "lua",
		"body": "gfx.a2",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx.a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)"
	},
	"lua gfx.a": {
		"prefix": "gfx.a",
		"scope": "lua",
		"body": "gfx.a",
		"description": "Alpha and blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit()."
	},
	"lua gfx.mode": {
		"prefix": "gfx.mode",
		"scope": "lua",
		"body": "gfx.mode",
		"description": "Alpha and blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit()."
	},
	"lua gfx.w": {
		"prefix": "gfx.w",
		"scope": "lua",
		"body": "gfx.w",
		"description": "These are set to the current width and height of the UI framebuffer."
	},
	"lua gfx.h": {
		"prefix": "gfx.h",
		"scope": "lua",
		"body": "gfx.h",
		"description": "These are set to the current width and height of the UI framebuffer."
	},
	"lua gfx.x": {
		"prefix": "gfx.x",
		"scope": "lua",
		"body": "gfx.x",
		"description": "These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well."
	},
	"lua gfx.y": {
		"prefix": "gfx.y",
		"scope": "lua",
		"body": "gfx.y",
		"description": "These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well."
	},
	"lua gfx.clear": {
		"prefix": "gfx.clear",
		"scope": "lua",
		"body": "gfx.clear",
		"description": "If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black)."
	},
	"lua gfx.dest": {
		"prefix": "gfx.dest",
		"scope": "lua",
		"body": "gfx.dest",
		"description": "Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image)."
	},
	"lua gfx.texth": {
		"prefix": "gfx.texth",
		"scope": "lua",
		"body": "gfx.texth",
		"description": "Set to the height of a line of text in the current font. Do not modify this variable."
	},
	"lua gfx.ext_retina": {
		"prefix": "gfx.ext_retina",
		"scope": "lua",
		"body": "gfx.ext_retina",
		"description": "If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx.w/gfx.h/etc will be doubled."
	},
	"lua gfx.mouse_x": {
		"prefix": "gfx.mouse_x",
		"scope": "lua",
		"body": "gfx.mouse_x",
		"description": "gfx.mouse_x and gfx.mouse_y are set to the coordinates of the mouse relative to the graphics window."
	},
	"lua gfx.mouse_y": {
		"prefix": "gfx.mouse_y",
		"scope": "lua",
		"body": "gfx.mouse_y",
		"description": "gfx.mouse_x and gfx.mouse_y are set to the coordinates of the mouse relative to the graphics window."
	},
	"lua gfx.mouse_wheel": {
		"prefix": "gfx.mouse_wheel",
		"scope": "lua",
		"body": "gfx.mouse_wheel",
		"description": "mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it."
	},
	"lua gfx.mouse_hwheel": {
		"prefix": "gfx.mouse_hwheel",
		"scope": "lua",
		"body": "gfx.mouse_hwheel",
		"description": "mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it."
	},
	"lua gfx.mouse_cap": {
		"prefix": "gfx.mouse_cap",
		"scope": "lua",
		"body": "gfx.mouse_cap",
		"description": "a bitfield of mouse and keyboard modifier state.\n\t1: left mouse button\n\t2: right mouse button\n\t4: Command key\n\t8: Shift key\n\t16: Option key\n\t32: Control key\n\t64: middle mouse button"
	},
	"gfx.arc": {
		"prefix": "gfx.arc",
		"scope": "lua",
		"body": "gfx.arc(${1:x}, ${2:y}, ${3:r}, ${4:ang1}, ${5:ang2}, ${6:${7:[antialias]})",
		"description": "Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians."
	},
	"gfx.blit": {
		"prefix": "gfx.blit",
		"scope": "lua",
		"body": "gfx.blit(${1:source}, ${2:scale}, ${3:rotation}, ${4:${5:[srcx}, ${6:srcy}, ${7:srcw}, ${8:srch}, ${9:destx}, ${10:desty}, ${11:destw}, ${12:desth}, ${13:rotxoffs}, ${14:rotyoffs]}})",
		"description": "srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size), destx/desty/destw/desth specify dest rectangle (if not specified, these will default to reasonable defaults -- destw/desth default to srcw/srch * scale)."
	},
	"gfx.blit": {
		"prefix": "gfx.blit",
		"scope": "lua",
		"body": "gfx.blit(${1:source}, ${2:scale}, ${3:rotation})",
		"description": "If three parameters are specified, copies the entirity of the source bitmap to gfx.x,gfx.y using current opacity and copy mode (set with gfx.a, gfx.mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians).\nFor the \"source\" parameter specify -1 to use the main framebuffer as source, or an image index (see gfx.loadimg())."
	},
	"gfx.blitext": {
		"prefix": "gfx.blitext",
		"scope": "lua",
		"body": "gfx.blitext(${1:source}, ${2:coordinatelist}, ${3:rotation})",
		"description": "Deprecated, use gfx.blit instead."
	},
	"gfx.blurto": {
		"prefix": "gfx.blurto",
		"scope": "lua",
		"body": "gfx.blurto(${1:x}, ${2:y})",
		"description": "Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y."
	},
	"gfx.circle": {
		"prefix": "gfx.circle",
		"scope": "lua",
		"body": "gfx.circle(${1:x}, ${2:y}, ${3:r}, ${4:${5:[fill}, ${6:antialias]}})",
		"description": "Draws a circle, optionally filling/antialiasing."
	},
	"gfx.clienttoscreen": {
		"prefix": "gfx.clienttoscreen",
		"scope": "lua",
		"body": "gfx.clienttoscreen(${1:x}, ${2:y})",
		"description": "Converts the coordinates x,y to screen coordinates, returns those values."
	},
	"gfx.deltablit": {
		"prefix": "gfx.deltablit",
		"scope": "lua",
		"body": "gfx.deltablit(${1:srcimg}, ${2:srcs}, ${3:srct}, ${4:srcw}, ${5:srch}, ${6:destx}, ${7:desty}, ${8:destw}, ${9:desth}, ${10:dsdx}, ${11:dtdx}, ${12:dsdy}, ${13:dtdy}, ${14:dsdxdy}, ${15:dtdxdy}, ${16:${17:[usecliprect=1]})",
		"description": "Blits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored."
	},
	"gfx.dock": {
		"prefix": "gfx.dock",
		"scope": "lua",
		"body": "gfx.dock(${1:v}, ${2:${3:[wx}, ${4:wy}, ${5:ww}, ${6:wh]}})",
		"description": "Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is +1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh specified, additional values will be returned with the undocked window position/size"
	},
	"gfx.drawchar": {
		"prefix": "gfx.drawchar",
		"scope": "lua",
		"body": "gfx.drawchar(${1:char})",
		"description": "Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character."
	},
	"gfx.drawnumber": {
		"prefix": "gfx.drawnumber",
		"scope": "lua",
		"body": "gfx.drawnumber(${1:n}, ${2:ndigits})",
		"description": "Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth."
	},
	"gfx.drawstr": {
		"prefix": "gfx.drawstr",
		"scope": "lua",
		"body": "gfx.drawstr(${1:\"str\"}, ${2:${3:[flags}, ${4:right}, ${5:bottom]}})",
		"description": "Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.\n\nIf flags, right ,bottom passed in:\nflags+1: center horizontally\nflags+2: right justify\nflags+4: center vertically\nflags+8: bottom justify\nflags+256: ignore right/bottom, otherwise text is clipped to (gfx.x, gfx.y, right, bottom)"
	},
	"gfx.getchar": {
		"prefix": "gfx.getchar",
		"scope": "lua",
		"body": "gfx.getchar(${1:}, ${2:${3:[char]})",
		"description": "If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.\n\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. \n\nModified and special keys can also be returned, including:\nCtrl/Cmd+A..Ctrl+Z as 1..26\nCtrl/Cmd+Alt+A..Z as 257..282\nAlt+A..Z as 'A'+256..'Z'+256\n27 for ESC\n13 for Enter\n' ' for space\n65536 for query of special flags, returns: +1 (supported), +2=window has focus, +4=window is visible\n"
	},
	"gfx.getdropfile": {
		"prefix": "gfx.getdropfile",
		"scope": "lua",
		"body": "gfx.getdropfile(${1:idx})",
		"description": "Returns success,string for dropped file index idx. call gfx.dropfile(-1) to clear the list when finished."
	},
	"gfx.getfont": {
		"prefix": "gfx.getfont",
		"scope": "lua",
		"body": "gfx.getfont()",
		"description": "Returns current font index, and the actual font face used by this font (if available)."
	},
	"gfx.getimgdim": {
		"prefix": "gfx.getimgdim",
		"scope": "lua",
		"body": "gfx.getimgdim(${1:handle})",
		"description": "Retreives the dimensions of an image specified by handle, returns w, h pair."
	},
	"gfx.getpixel": {
		"prefix": "gfx.getpixel",
		"scope": "lua",
		"body": "gfx.getpixel()",
		"description": "Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)"
	},
	"gfx.gradrect": {
		"prefix": "gfx.gradrect",
		"scope": "lua",
		"body": "gfx.gradrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:r}, ${6:g}, ${7:b}, ${8:a}, ${9:${10:[drdx}, ${11:dgdx}, ${12:dbdx}, ${13:dadx}, ${14:drdy}, ${15:dgdy}, ${16:dbdy}, ${17:dady]}})",
		"description": "Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc."
	},
	"gfx.init": {
		"prefix": "gfx.init",
		"scope": "lua",
		"body": "gfx.init(${1:\"name\"}, ${2:${3:[width}, ${4:height}, ${5:dockstate}, ${6:xpos}, ${7:ypos]}})",
		"description": "Initializes the graphics window with title name. Suggested width and height can be specified.\n\nOnce the graphics window is open, gfx.update() should be called periodically."
	},
	"gfx.line": {
		"prefix": "gfx.line",
		"scope": "lua",
		"body": "gfx.line(${1:x}, ${2:y}, ${3:x2}, ${4:y2}, ${5:${6:[aa]})",
		"description": "Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased."
	},
	"gfx.lineto": {
		"prefix": "gfx.lineto",
		"scope": "lua",
		"body": "gfx.lineto(${1:x}, ${2:y}, ${3:${4:[aa]})",
		"description": "Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y."
	},
	"gfx.loadimg": {
		"prefix": "gfx.loadimg",
		"scope": "lua",
		"body": "gfx.loadimg(${1:image}, ${2:\"filename\"})",
		"description": "Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file."
	},
	"gfx.measurechar": {
		"prefix": "gfx.measurechar",
		"scope": "lua",
		"body": "gfx.measurechar(${1:char})",
		"description": "Measures the drawing dimensions of a character with the current font (as set by gfx.setfont). Returns width and height of character."
	},
	"gfx.measurestr": {
		"prefix": "gfx.measurestr",
		"scope": "lua",
		"body": "gfx.measurestr(${1:\"str\"})",
		"description": "Measures the drawing dimensions of a string with the current font (as set by gfx.setfont). Returns width and height of string."
	},
	"gfx.muladdrect": {
		"prefix": "gfx.muladdrect",
		"scope": "lua",
		"body": "gfx.muladdrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:mul_r}, ${6:mul_g}, ${7:mul_b}, ${8:${9:[mul_a}, ${10:add_r}, ${11:add_g}, ${12:add_b}, ${13:add_a]}})",
		"description": "Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects."
	},
	"gfx.printf": {
		"prefix": "gfx.printf",
		"scope": "lua",
		"body": "gfx.printf(${1:\"format\"}, ${2:${3:[...]})",
		"description": "Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()"
	},
	"gfx.quit": {
		"prefix": "gfx.quit",
		"scope": "lua",
		"body": "gfx.quit()",
		"description": "Closes the graphics window."
	},
	"gfx.rect": {
		"prefix": "gfx.rect",
		"scope": "lua",
		"body": "gfx.rect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:${6:[filled]})",
		"description": "Fills a rectangle at x,y, w,h pixels in dimension, filled by default."
	},
	"gfx.rectto": {
		"prefix": "gfx.rectto",
		"scope": "lua",
		"body": "gfx.rectto(${1:x}, ${2:y})",
		"description": "Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y."
	},
	"gfx.roundrect": {
		"prefix": "gfx.roundrect",
		"scope": "lua",
		"body": "gfx.roundrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:radius}, ${6:${7:[antialias]})",
		"description": "Draws a rectangle with rounded corners."
	},
	"gfx.screentoclient": {
		"prefix": "gfx.screentoclient",
		"scope": "lua",
		"body": "gfx.screentoclient(${1:x}, ${2:y})",
		"description": "Converts the screen coordinates x,y to client coordinates, returns those values."
	},
	"gfx.set": {
		"prefix": "gfx.set",
		"scope": "lua",
		"body": "gfx.set(${1:r}, ${2:${3:[g}, ${4:b}, ${5:a}, ${6:mode}, ${7:dest}, ${8:a2]}})",
		"description": "Sets gfx.r/gfx.g/gfx.b/gfx.a/gfx.mode/gfx.a2, sets gfx.dest if final parameter specified"
	},
	"gfx.setcursor": {
		"prefix": "gfx.setcursor",
		"scope": "lua",
		"body": "gfx.setcursor(${1:resource_id}, ${2:custom_cursor_name})",
		"description": "Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like \"arrow\" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional."
	},
	"gfx.setfont": {
		"prefix": "gfx.setfont",
		"scope": "lua",
		"body": "gfx.setfont(${1:idx}, ${2:${3:[\"fontface\"}, ${4:sz}, ${5:flags]}})",
		"description": "Can select a font and optionally configure it. idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font, specify fontface such as \"Arial\", sz of 8-100, and optionally specify flags, which is a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. These flags may or may not be supported depending on the font and OS. After calling gfx.setfont(), gfx.texth may be updated to reflect the new average line height."
	},
	"gfx.setimgdim": {
		"prefix": "gfx.setimgdim",
		"scope": "lua",
		"body": "gfx.setimgdim(${1:image}, ${2:w}, ${3:h})",
		"description": "Resize image referenced by index 0..1024-1, width and height must be 0-2048. The contents of the image will be undefined after the resize."
	},
	"gfx.setpixel": {
		"prefix": "gfx.setpixel",
		"scope": "lua",
		"body": "gfx.setpixel(${1:r}, ${2:g}, ${3:b})",
		"description": "Writes a pixel of r,g,b to gfx.x,gfx.y."
	},
	"gfx.showmenu": {
		"prefix": "gfx.showmenu",
		"scope": "lua",
		"body": "gfx.showmenu(${1:\"str\"})",
		"description": "Shows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. Each field represents a menu item.\nFields can start with special characters:\n\n# : grayed out\n! : checked\n> : this menu item shows a submenu\n< : last item in the current submenu\n\nAn empty field will appear as a separator in the menu. gfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.\nExample:\n\ngfx.showmenu(\"first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu\")"
	},
	"gfx.transformblit": {
		"prefix": "gfx.transformblit",
		"scope": "lua",
		"body": "gfx.transformblit(${1:srcimg}, ${2:destx}, ${3:desty}, ${4:destw}, ${5:desth}, ${6:div_w}, ${7:div_h}, ${8:table})",
		"description": "Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a reaper.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination."
	},
	"gfx.triangle": {
		"prefix": "gfx.triangle",
		"scope": "lua",
		"body": "gfx.triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:${8:[x4y4...]})",
		"description": "Draws a filled triangle, or any convex polygon."
	},
	"gfx.update": {
		"prefix": "gfx.update",
		"scope": "lua",
		"body": "gfx.update()",
		"description": "Updates the graphics display, if opened"
	},
	"reaper.gmem_attach": {
		"prefix": "reaper.gmem_attach",
		"scope": "lua",
		"body": "reaper.gmem_attach(${1:sharedMemoryName})",
		"description": "Causes gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment named by parameter. Set to empty string to detach."
	},
	"reaper.gmem_read": {
		"prefix": "reaper.gmem_read",
		"scope": "lua",
		"body": "reaper.gmem_read(${1:index})",
		"description": "Read (number) value from shared memory attached-to by gmem_attach(). index can be [0..1<<25)."
	},
	"reaper.gmem_write": {
		"prefix": "reaper.gmem_write",
		"scope": "lua",
		"body": "reaper.gmem_write(${1:index}, ${2:value})",
		"description": "Write (number) value to shared memory attached-to by gmem_attach(). index can be [0..1<<25)."
	},
	"reaper.new_array": {
		"prefix": "reaper.new_array",
		"scope": "lua",
		"body": "reaper.new_array(${1:}, ${2:${3:[table|array]}, ${4:${5:[size]})",
		"description": "Creates a new reaper.array object of maximum and initial size size, if specified, or from the size/values of a table/array. Both size and table/array can be specified, the size parameter will override the table/array size."
	},
	"reaper.runloop": {
		"prefix": "reaper.runloop",
		"scope": "lua",
		"body": "reaper.runloop(${1:function})",
		"description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly."
	},
	"{reaper.array}.clear": {
		"prefix": "{reaper.array}.clear",
		"scope": "lua",
		"body": "{reaper.array}.clear(${1:}, ${2:${3:[valueoffset}, ${4:size]}})",
		"description": "Sets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set."
	},
	"{reaper.array}.convolve": {
		"prefix": "{reaper.array}.convolve",
		"scope": "lua",
		"body": "{reaper.array}.convolve(${1:}, ${2:${3:[srcsrcoffs}, ${4:size}, ${5:destoffs]}})",
		"description": "Convolves complex value pairs from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)"
	},
	"{reaper.array}.copy": {
		"prefix": "{reaper.array}.copy",
		"scope": "lua",
		"body": "{reaper.array}.copy(${1:}, ${2:${3:[srcsrcoffs}, ${4:size}, ${5:destoffs]}})",
		"description": "Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs."
	},
	"{reaper.array}.fft": {
		"prefix": "{reaper.array}.fft",
		"scope": "lua",
		"body": "{reaper.array}.fft(${1:size}, ${2:${3:[permute}, ${4:offset]}})",
		"description": "Performs a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order."
	},
	"{reaper.array}.fft_real": {
		"prefix": "{reaper.array}.fft_real",
		"scope": "lua",
		"body": "{reaper.array}.fft_real(${1:size}, ${2:${3:[permute}, ${4:offset]}})",
		"description": "Performs a forward real->complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order."
	},
	"{reaper.array}.get_alloc": {
		"prefix": "{reaper.array}.get_alloc",
		"scope": "lua",
		"body": "{reaper.array}.get_alloc()",
		"description": "Returns the maximum (allocated) size of the array."
	},
	"{reaper.array}.ifft": {
		"prefix": "{reaper.array}.ifft",
		"scope": "lua",
		"body": "{reaper.array}.ifft(${1:size}, ${2:${3:[permute}, ${4:offset]}})",
		"description": "Performs a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order."
	},
	"{reaper.array}.ifft_real": {
		"prefix": "{reaper.array}.ifft_real",
		"scope": "lua",
		"body": "{reaper.array}.ifft_real(${1:size}, ${2:${3:[permute}, ${4:offset]}})",
		"description": "Performs a backwards complex->real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order."
	},
	"{reaper.array}.multiply": {
		"prefix": "{reaper.array}.multiply",
		"scope": "lua",
		"body": "{reaper.array}.multiply(${1:}, ${2:${3:[srcsrcoffs}, ${4:size}, ${5:destoffs]}})",
		"description": "Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs."
	},
	"{reaper.array}.resize": {
		"prefix": "{reaper.array}.resize",
		"scope": "lua",
		"body": "{reaper.array}.resize(${1:size})",
		"description": "Resizes an array object to size. size must be [0..max_size]."
	},
	"{reaper.array}.table": {
		"prefix": "{reaper.array}.table",
		"scope": "lua",
		"body": "{reaper.array}.table(${1:}, ${2:${3:[offsetsize]})",
		"description": "Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used."
	},
	"RPR_atexit": {
		"prefix": "RPR_atexit",
		"scope": "python",
		"body": "RPR_atexit(${1:String})",
		"description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code."
	},
	"RPR_defer": {
		"prefix": "RPR_defer",
		"scope": "python",
		"body": "RPR_defer(${1:String code})",
		"description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly."
	},
	"RPR_runloop": {
		"prefix": "RPR_runloop",
		"scope": "python",
		"body": "RPR_runloop(${1:String code})",
		"description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly."
	},
}