{
    "REAPER.ADDMEDIAITEMTOTRACK lua": {
        "prefix": "reaper.AddMediaItemToTrack",
        "scope": "lua",
        "body": "reaper.AddMediaItemToTrack(${1:MediaTrack tr})$0",
        "description": "creates a new media item.\n\n"
    },
    "ADDMEDIAITEMTOTRACK eel2": {
        "prefix": "AddMediaItemToTrack",
        "scope": "eel2",
        "body": "AddMediaItemToTrack(${1:MediaTrack tr})$0",
        "description": "creates a new media item.\n\n"
    },
    "RPR_ADDMEDIAITEMTOTRACK python": {
        "prefix": "RPR_AddMediaItemToTrack",
        "scope": "python",
        "body": "RPR_AddMediaItemToTrack(${1:MediaTrack tr})$0",
        "description": "creates a new media item.\n\n"
    },
    "REAPER.ADDPROJECTMARKER lua": {
        "prefix": "reaper.AddProjectMarker",
        "scope": "lua",
        "body": "reaper.AddProjectMarker(${1:ReaProject proj}, ${2:boolean isrgn}, ${3:number pos}, ${4:number rgnend}, ${5:string name}, ${6:integer wantidx})$0",
        "description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.\n\n"
    },
    "ADDPROJECTMARKER eel2": {
        "prefix": "AddProjectMarker",
        "scope": "eel2",
        "body": "AddProjectMarker(${1:ReaProject proj}, ${2:bool isrgn}, ${3:pos}, ${4:rgnend}, \"${5:name}\", ${6:int wantidx})$0",
        "description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.\n\n"
    },
    "RPR_ADDPROJECTMARKER python": {
        "prefix": "RPR_AddProjectMarker",
        "scope": "python",
        "body": "RPR_AddProjectMarker(${1:ReaProject proj}, ${2:Boolean isrgn}, ${3:Float pos}, ${4:Float rgnend}, ${5:String name}, ${6:Int wantidx})$0",
        "description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.\n\n"
    },
    "REAPER.ADDPROJECTMARKER2 lua": {
        "prefix": "reaper.AddProjectMarker2",
        "scope": "lua",
        "body": "reaper.AddProjectMarker2(${1:ReaProject proj}, ${2:boolean isrgn}, ${3:number pos}, ${4:number rgnend}, ${5:string name}, ${6:integer wantidx}, ${7:integer color})$0",
        "description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000\n\n"
    },
    "ADDPROJECTMARKER2 eel2": {
        "prefix": "AddProjectMarker2",
        "scope": "eel2",
        "body": "AddProjectMarker2(${1:ReaProject proj}, ${2:bool isrgn}, ${3:pos}, ${4:rgnend}, \"${5:name}\", ${6:int wantidx}, ${7:int color})$0",
        "description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000\n\n"
    },
    "RPR_ADDPROJECTMARKER2 python": {
        "prefix": "RPR_AddProjectMarker2",
        "scope": "python",
        "body": "RPR_AddProjectMarker2(${1:ReaProject proj}, ${2:Boolean isrgn}, ${3:Float pos}, ${4:Float rgnend}, ${5:String name}, ${6:Int wantidx}, ${7:Int color})$0",
        "description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000\n\n"
    },
    "REAPER.ADDREMOVEREASCRIPT lua": {
        "prefix": "reaper.AddRemoveReaScript",
        "scope": "lua",
        "body": "reaper.AddRemoveReaScript(${1:boolean add}, ${2:integer sectionID}, ${3:string scriptfn}, ${4:boolean commit})$0",
        "description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.\n\n"
    },
    "ADDREMOVEREASCRIPT eel2": {
        "prefix": "AddRemoveReaScript",
        "scope": "eel2",
        "body": "AddRemoveReaScript(${1:bool add}, ${2:int sectionID}, \"${3:scriptfn}\", ${4:bool commit})$0",
        "description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.\n\n"
    },
    "RPR_ADDREMOVEREASCRIPT python": {
        "prefix": "RPR_AddRemoveReaScript",
        "scope": "python",
        "body": "RPR_AddRemoveReaScript(${1:Boolean add}, ${2:Int sectionID}, ${3:String scriptfn}, ${4:Boolean commit})$0",
        "description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.\n\n"
    },
    "REAPER.ADDTAKETOMEDIAITEM lua": {
        "prefix": "reaper.AddTakeToMediaItem",
        "scope": "lua",
        "body": "reaper.AddTakeToMediaItem(${1:MediaItem item})$0",
        "description": "creates a new take in an item\n\n"
    },
    "ADDTAKETOMEDIAITEM eel2": {
        "prefix": "AddTakeToMediaItem",
        "scope": "eel2",
        "body": "AddTakeToMediaItem(${1:MediaItem item})$0",
        "description": "creates a new take in an item\n\n"
    },
    "RPR_ADDTAKETOMEDIAITEM python": {
        "prefix": "RPR_AddTakeToMediaItem",
        "scope": "python",
        "body": "RPR_AddTakeToMediaItem(${1:MediaItem item})$0",
        "description": "creates a new take in an item\n\n"
    },
    "REAPER.ADDTEMPOTIMESIGMARKER lua": {
        "prefix": "reaper.AddTempoTimeSigMarker",
        "scope": "lua",
        "body": "reaper.AddTempoTimeSigMarker(${1:ReaProject proj}, ${2:number timepos}, ${3:number bpm}, ${4:integer timesig_num}, ${5:integer timesig_denom}, ${6:boolean lineartempochange})$0",
        "description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.\n\n"
    },
    "ADDTEMPOTIMESIGMARKER eel2": {
        "prefix": "AddTempoTimeSigMarker",
        "scope": "eel2",
        "body": "AddTempoTimeSigMarker(${1:ReaProject proj}, ${2:timepos}, ${3:bpm}, ${4:int timesig_num}, ${5:int timesig_denom}, ${6:bool lineartempochange})$0",
        "description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.\n\n"
    },
    "RPR_ADDTEMPOTIMESIGMARKER python": {
        "prefix": "RPR_AddTempoTimeSigMarker",
        "scope": "python",
        "body": "RPR_AddTempoTimeSigMarker(${1:ReaProject proj}, ${2:Float timepos}, ${3:Float bpm}, ${4:Int timesig_num}, ${5:Int timesig_denom}, ${6:Boolean lineartempochange})$0",
        "description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.\n\n"
    },
    "REAPER.ADJUSTZOOM lua": {
        "prefix": "reaper.adjustZoom",
        "scope": "lua",
        "body": "reaper.adjustZoom(${1:number amt}, ${2:integer forceset}, ${3:boolean doupd}, ${4:integer centermode})$0",
        "description": "forceset=0,doupd=true,centermode=-1 for default\n\n"
    },
    "ADJUSTZOOM eel2": {
        "prefix": "adjustZoom",
        "scope": "eel2",
        "body": "adjustZoom(${1:amt}, ${2:int forceset}, ${3:bool doupd}, ${4:int centermode})$0",
        "description": "forceset=0,doupd=true,centermode=-1 for default\n\n"
    },
    "RPR_ADJUSTZOOM python": {
        "prefix": "RPR_adjustZoom",
        "scope": "python",
        "body": "RPR_adjustZoom(${1:Float amt}, ${2:Int forceset}, ${3:Boolean doupd}, ${4:Int centermode})$0",
        "description": "forceset=0,doupd=true,centermode=-1 for default\n\n"
    },
    "REAPER.ANYTRACKSOLO lua": {
        "prefix": "reaper.AnyTrackSolo",
        "scope": "lua",
        "body": "reaper.AnyTrackSolo(${1:ReaProject proj})$0",
        "description": ""
    },
    "ANYTRACKSOLO eel2": {
        "prefix": "AnyTrackSolo",
        "scope": "eel2",
        "body": "AnyTrackSolo(${1:ReaProject proj})$0",
        "description": ""
    },
    "RPR_ANYTRACKSOLO python": {
        "prefix": "RPR_AnyTrackSolo",
        "scope": "python",
        "body": "RPR_AnyTrackSolo(${1:ReaProject proj})$0",
        "description": ""
    },
    "REAPER.APIEXISTS lua": {
        "prefix": "reaper.APIExists",
        "scope": "lua",
        "body": "reaper.APIExists(${1:string function_name})$0",
        "description": "Returns true if function_name exists in the REAPER API\n\n"
    },
    "APIEXISTS eel2": {
        "prefix": "APIExists",
        "scope": "eel2",
        "body": "APIExists(\"${1:function_name}\")$0",
        "description": "Returns true if function_name exists in the REAPER API\n\n"
    },
    "RPR_APIEXISTS python": {
        "prefix": "RPR_APIExists",
        "scope": "python",
        "body": "RPR_APIExists(${1:String function_name})$0",
        "description": "Returns true if function_name exists in the REAPER API\n\n"
    },
    "REAPER.APITEST lua": {
        "prefix": "reaper.APITest",
        "scope": "lua",
        "body": "reaper.APITest()$0",
        "description": "Displays a message window if the API was successfully called.\n\n"
    },
    "APITEST eel2": {
        "prefix": "APITest",
        "scope": "eel2",
        "body": "APITest()$0",
        "description": "Displays a message window if the API was successfully called.\n\n"
    },
    "RPR_APITEST python": {
        "prefix": "RPR_APITest",
        "scope": "python",
        "body": "RPR_APITest()$0",
        "description": "Displays a message window if the API was successfully called.\n\n"
    },
    "REAPER.APPLYNUDGE lua": {
        "prefix": "reaper.ApplyNudge",
        "scope": "lua",
        "body": "reaper.ApplyNudge(${1:ReaProject project}, ${2:integer nudgeflag}, ${3:integer nudgewhat}, ${4:integer nudgeunits}, ${5:number value}, ${6:boolean reverse}, ${7:integer copies})$0",
        "description": "nudgeflag: &1=set to value (otherwise nudge by value), &2=snap\n\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\n\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\n\nvalue: amount to nudge by, or value to set to\n\nreverse: in nudge mode, nudges left (otherwise ignored)\n\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)\n\n"
    },
    "APPLYNUDGE eel2": {
        "prefix": "ApplyNudge",
        "scope": "eel2",
        "body": "ApplyNudge(${1:ReaProject project}, ${2:int nudgeflag}, ${3:int nudgewhat}, ${4:int nudgeunits}, ${5:value}, ${6:bool reverse}, ${7:int copies})$0",
        "description": "nudgeflag: &1=set to value (otherwise nudge by value), &2=snap\n\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\n\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\n\nvalue: amount to nudge by, or value to set to\n\nreverse: in nudge mode, nudges left (otherwise ignored)\n\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)\n\n"
    },
    "RPR_APPLYNUDGE python": {
        "prefix": "RPR_ApplyNudge",
        "scope": "python",
        "body": "RPR_ApplyNudge(${1:ReaProject project}, ${2:Int nudgeflag}, ${3:Int nudgewhat}, ${4:Int nudgeunits}, ${5:Float value}, ${6:Boolean reverse}, ${7:Int copies})$0",
        "description": "nudgeflag: &1=set to value (otherwise nudge by value), &2=snap\n\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\n\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\n\nvalue: amount to nudge by, or value to set to\n\nreverse: in nudge mode, nudges left (otherwise ignored)\n\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)\n\n"
    },
    "REAPER.AUDIO_INIT lua": {
        "prefix": "reaper.Audio_Init",
        "scope": "lua",
        "body": "reaper.Audio_Init()$0",
        "description": "open all audio and MIDI devices, if not open\n\n"
    },
    "AUDIO_INIT eel2": {
        "prefix": "Audio_Init",
        "scope": "eel2",
        "body": "Audio_Init()$0",
        "description": "open all audio and MIDI devices, if not open\n\n"
    },
    "RPR_AUDIO_INIT python": {
        "prefix": "RPR_Audio_Init",
        "scope": "python",
        "body": "RPR_Audio_Init()$0",
        "description": "open all audio and MIDI devices, if not open\n\n"
    },
    "REAPER.AUDIO_ISPREBUFFER lua": {
        "prefix": "reaper.Audio_IsPreBuffer",
        "scope": "lua",
        "body": "reaper.Audio_IsPreBuffer()$0",
        "description": "is in pre-buffer? threadsafe\n\n"
    },
    "AUDIO_ISPREBUFFER eel2": {
        "prefix": "Audio_IsPreBuffer",
        "scope": "eel2",
        "body": "Audio_IsPreBuffer()$0",
        "description": "is in pre-buffer? threadsafe\n\n"
    },
    "RPR_AUDIO_ISPREBUFFER python": {
        "prefix": "RPR_Audio_IsPreBuffer",
        "scope": "python",
        "body": "RPR_Audio_IsPreBuffer()$0",
        "description": "is in pre-buffer? threadsafe\n\n"
    },
    "REAPER.AUDIO_ISRUNNING lua": {
        "prefix": "reaper.Audio_IsRunning",
        "scope": "lua",
        "body": "reaper.Audio_IsRunning()$0",
        "description": "is audio running at all? threadsafe\n\n"
    },
    "AUDIO_ISRUNNING eel2": {
        "prefix": "Audio_IsRunning",
        "scope": "eel2",
        "body": "Audio_IsRunning()$0",
        "description": "is audio running at all? threadsafe\n\n"
    },
    "RPR_AUDIO_ISRUNNING python": {
        "prefix": "RPR_Audio_IsRunning",
        "scope": "python",
        "body": "RPR_Audio_IsRunning()$0",
        "description": "is audio running at all? threadsafe\n\n"
    },
    "REAPER.AUDIO_QUIT lua": {
        "prefix": "reaper.Audio_Quit",
        "scope": "lua",
        "body": "reaper.Audio_Quit()$0",
        "description": "close all audio and MIDI devices, if open\n\n"
    },
    "AUDIO_QUIT eel2": {
        "prefix": "Audio_Quit",
        "scope": "eel2",
        "body": "Audio_Quit()$0",
        "description": "close all audio and MIDI devices, if open\n\n"
    },
    "RPR_AUDIO_QUIT python": {
        "prefix": "RPR_Audio_Quit",
        "scope": "python",
        "body": "RPR_Audio_Quit()$0",
        "description": "close all audio and MIDI devices, if open\n\n"
    },
    "REAPER.AUDIOACCESSORVALIDATESTATE lua": {
        "prefix": "reaper.AudioAccessorValidateState",
        "scope": "lua",
        "body": "reaper.AudioAccessorValidateState(${1:AudioAccessor accessor})$0",
        "description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.\n\n"
    },
    "AUDIOACCESSORVALIDATESTATE eel2": {
        "prefix": "AudioAccessorValidateState",
        "scope": "eel2",
        "body": "AudioAccessorValidateState(${1:AudioAccessor accessor})$0",
        "description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.\n\n"
    },
    "RPR_AUDIOACCESSORVALIDATESTATE python": {
        "prefix": "RPR_AudioAccessorValidateState",
        "scope": "python",
        "body": "RPR_AudioAccessorValidateState(${1:AudioAccessor accessor})$0",
        "description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.\n\n"
    },
    "REAPER.BYPASSFXALLTRACKS lua": {
        "prefix": "reaper.BypassFxAllTracks",
        "scope": "lua",
        "body": "reaper.BypassFxAllTracks(${1:integer bypass})$0",
        "description": "-1 = bypass all if not all bypassed,otherwise unbypass all\n\n"
    },
    "BYPASSFXALLTRACKS eel2": {
        "prefix": "BypassFxAllTracks",
        "scope": "eel2",
        "body": "BypassFxAllTracks(${1:int bypass})$0",
        "description": "-1 = bypass all if not all bypassed,otherwise unbypass all\n\n"
    },
    "RPR_BYPASSFXALLTRACKS python": {
        "prefix": "RPR_BypassFxAllTracks",
        "scope": "python",
        "body": "RPR_BypassFxAllTracks(${1:Int bypass})$0",
        "description": "-1 = bypass all if not all bypassed,otherwise unbypass all\n\n"
    },
    "REAPER.CLEARALLRECARMED lua": {
        "prefix": "reaper.ClearAllRecArmed",
        "scope": "lua",
        "body": "reaper.ClearAllRecArmed()$0",
        "description": ""
    },
    "CLEARALLRECARMED eel2": {
        "prefix": "ClearAllRecArmed",
        "scope": "eel2",
        "body": "ClearAllRecArmed()$0",
        "description": ""
    },
    "RPR_CLEARALLRECARMED python": {
        "prefix": "RPR_ClearAllRecArmed",
        "scope": "python",
        "body": "RPR_ClearAllRecArmed()$0",
        "description": ""
    },
    "REAPER.CLEARCONSOLE lua": {
        "prefix": "reaper.ClearConsole",
        "scope": "lua",
        "body": "reaper.ClearConsole()$0",
        "description": "Clear the ReaScript console. See ShowConsoleMsg\n\n"
    },
    "CLEARCONSOLE eel2": {
        "prefix": "ClearConsole",
        "scope": "eel2",
        "body": "ClearConsole()$0",
        "description": "Clear the ReaScript console. See ShowConsoleMsg\n\n"
    },
    "RPR_CLEARCONSOLE python": {
        "prefix": "RPR_ClearConsole",
        "scope": "python",
        "body": "RPR_ClearConsole()$0",
        "description": "Clear the ReaScript console. See ShowConsoleMsg\n\n"
    },
    "REAPER.CLEARPEAKCACHE lua": {
        "prefix": "reaper.ClearPeakCache",
        "scope": "lua",
        "body": "reaper.ClearPeakCache()$0",
        "description": "resets the global peak caches\n\n"
    },
    "CLEARPEAKCACHE eel2": {
        "prefix": "ClearPeakCache",
        "scope": "eel2",
        "body": "ClearPeakCache()$0",
        "description": "resets the global peak caches\n\n"
    },
    "RPR_CLEARPEAKCACHE python": {
        "prefix": "RPR_ClearPeakCache",
        "scope": "python",
        "body": "RPR_ClearPeakCache()$0",
        "description": "resets the global peak caches\n\n"
    },
    "REAPER.COLORFROMNATIVE lua": {
        "prefix": "reaper.ColorFromNative",
        "scope": "lua",
        "body": "reaper.ColorFromNative(${1:integer col})$0",
        "description": "Extract RGB values from an OS dependent color. See ColorToNative.\n\n"
    },
    "COLORFROMNATIVE eel2": {
        "prefix": "ColorFromNative",
        "scope": "eel2",
        "body": "ColorFromNative(${1:int col}, ${2:int &r}, ${3:int &g}, ${4:int &b})$0",
        "description": "Extract RGB values from an OS dependent color. See ColorToNative.\n\n"
    },
    "RPR_COLORFROMNATIVE python": {
        "prefix": "RPR_ColorFromNative",
        "scope": "python",
        "body": "RPR_ColorFromNative(${1:col}, ${2:rOut}, ${3:gOut}, ${4:bOut})$0",
        "description": "Extract RGB values from an OS dependent color. See ColorToNative.\n\n"
    },
    "REAPER.COLORTONATIVE lua": {
        "prefix": "reaper.ColorToNative",
        "scope": "lua",
        "body": "reaper.ColorToNative(${1:integer r}, ${2:integer g}, ${3:integer b})$0",
        "description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.\n\n"
    },
    "COLORTONATIVE eel2": {
        "prefix": "ColorToNative",
        "scope": "eel2",
        "body": "ColorToNative(${1:int r}, ${2:int g}, ${3:int b})$0",
        "description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.\n\n"
    },
    "RPR_COLORTONATIVE python": {
        "prefix": "RPR_ColorToNative",
        "scope": "python",
        "body": "RPR_ColorToNative(${1:Int r}, ${2:Int g}, ${3:Int b})$0",
        "description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.\n\n"
    },
    "REAPER.COUNTAUTOMATIONITEMS lua": {
        "prefix": "reaper.CountAutomationItems",
        "scope": "lua",
        "body": "reaper.CountAutomationItems(${1:TrackEnvelope env})$0",
        "description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo\n\n"
    },
    "COUNTAUTOMATIONITEMS eel2": {
        "prefix": "CountAutomationItems",
        "scope": "eel2",
        "body": "CountAutomationItems(${1:TrackEnvelope env})$0",
        "description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo\n\n"
    },
    "RPR_COUNTAUTOMATIONITEMS python": {
        "prefix": "RPR_CountAutomationItems",
        "scope": "python",
        "body": "RPR_CountAutomationItems(${1:TrackEnvelope env})$0",
        "description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo\n\n"
    },
    "REAPER.COUNTENVELOPEPOINTS lua": {
        "prefix": "reaper.CountEnvelopePoints",
        "scope": "lua",
        "body": "reaper.CountEnvelopePoints(${1:TrackEnvelope envelope})$0",
        "description": "Returns the number of points in the envelope.\n\n"
    },
    "COUNTENVELOPEPOINTS eel2": {
        "prefix": "CountEnvelopePoints",
        "scope": "eel2",
        "body": "CountEnvelopePoints(${1:TrackEnvelope envelope})$0",
        "description": "Returns the number of points in the envelope.\n\n"
    },
    "RPR_COUNTENVELOPEPOINTS python": {
        "prefix": "RPR_CountEnvelopePoints",
        "scope": "python",
        "body": "RPR_CountEnvelopePoints(${1:TrackEnvelope envelope})$0",
        "description": "Returns the number of points in the envelope.\n\n"
    },
    "REAPER.COUNTENVELOPEPOINTSEX lua": {
        "prefix": "reaper.CountEnvelopePointsEx",
        "scope": "lua",
        "body": "reaper.CountEnvelopePointsEx(${1:TrackEnvelope envelope}, ${2:integer autoitem_idx})$0",
        "description": "Returns the number of points in the envelope. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\n\n"
    },
    "COUNTENVELOPEPOINTSEX eel2": {
        "prefix": "CountEnvelopePointsEx",
        "scope": "eel2",
        "body": "CountEnvelopePointsEx(${1:TrackEnvelope envelope}, ${2:int autoitem_idx})$0",
        "description": "Returns the number of points in the envelope. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\n\n"
    },
    "RPR_COUNTENVELOPEPOINTSEX python": {
        "prefix": "RPR_CountEnvelopePointsEx",
        "scope": "python",
        "body": "RPR_CountEnvelopePointsEx(${1:TrackEnvelope envelope}, ${2:Int autoitem_idx})$0",
        "description": "Returns the number of points in the envelope. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\n\n"
    },
    "REAPER.COUNTMEDIAITEMS lua": {
        "prefix": "reaper.CountMediaItems",
        "scope": "lua",
        "body": "reaper.CountMediaItems(${1:ReaProject proj})$0",
        "description": "count the number of items in the project (proj=0 for active project)\n\n"
    },
    "COUNTMEDIAITEMS eel2": {
        "prefix": "CountMediaItems",
        "scope": "eel2",
        "body": "CountMediaItems(${1:ReaProject proj})$0",
        "description": "count the number of items in the project (proj=0 for active project)\n\n"
    },
    "RPR_COUNTMEDIAITEMS python": {
        "prefix": "RPR_CountMediaItems",
        "scope": "python",
        "body": "RPR_CountMediaItems(${1:ReaProject proj})$0",
        "description": "count the number of items in the project (proj=0 for active project)\n\n"
    },
    "REAPER.COUNTPROJECTMARKERS lua": {
        "prefix": "reaper.CountProjectMarkers",
        "scope": "lua",
        "body": "reaper.CountProjectMarkers(${1:ReaProject proj})$0",
        "description": "num_markersOut and num_regionsOut may be NULL.\n\n"
    },
    "COUNTPROJECTMARKERS eel2": {
        "prefix": "CountProjectMarkers",
        "scope": "eel2",
        "body": "CountProjectMarkers(${1:ReaProject proj}, ${2:int &num_markers}, ${3:int &num_regions})$0",
        "description": "num_markersOut and num_regionsOut may be NULL.\n\n"
    },
    "RPR_COUNTPROJECTMARKERS python": {
        "prefix": "RPR_CountProjectMarkers",
        "scope": "python",
        "body": "RPR_CountProjectMarkers(${1:proj}, ${2:num_markersOut}, ${3:num_regionsOut})$0",
        "description": "num_markersOut and num_regionsOut may be NULL.\n\n"
    },
    "REAPER.COUNTSELECTEDMEDIAITEMS lua": {
        "prefix": "reaper.CountSelectedMediaItems",
        "scope": "lua",
        "body": "reaper.CountSelectedMediaItems(${1:ReaProject proj})$0",
        "description": "count the number of selected items in the project (proj=0 for active project)\n\n"
    },
    "COUNTSELECTEDMEDIAITEMS eel2": {
        "prefix": "CountSelectedMediaItems",
        "scope": "eel2",
        "body": "CountSelectedMediaItems(${1:ReaProject proj})$0",
        "description": "count the number of selected items in the project (proj=0 for active project)\n\n"
    },
    "RPR_COUNTSELECTEDMEDIAITEMS python": {
        "prefix": "RPR_CountSelectedMediaItems",
        "scope": "python",
        "body": "RPR_CountSelectedMediaItems(${1:ReaProject proj})$0",
        "description": "count the number of selected items in the project (proj=0 for active project)\n\n"
    },
    "REAPER.COUNTSELECTEDTRACKS lua": {
        "prefix": "reaper.CountSelectedTracks",
        "scope": "lua",
        "body": "reaper.CountSelectedTracks(${1:ReaProject proj})$0",
        "description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.\n\n"
    },
    "COUNTSELECTEDTRACKS eel2": {
        "prefix": "CountSelectedTracks",
        "scope": "eel2",
        "body": "CountSelectedTracks(${1:ReaProject proj})$0",
        "description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.\n\n"
    },
    "RPR_COUNTSELECTEDTRACKS python": {
        "prefix": "RPR_CountSelectedTracks",
        "scope": "python",
        "body": "RPR_CountSelectedTracks(${1:ReaProject proj})$0",
        "description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.\n\n"
    },
    "REAPER.COUNTSELECTEDTRACKS2 lua": {
        "prefix": "reaper.CountSelectedTracks2",
        "scope": "lua",
        "body": "reaper.CountSelectedTracks2(${1:ReaProject proj}, ${2:boolean wantmaster})$0",
        "description": "Count the number of selected tracks in the project (proj=0 for active project).\n\n"
    },
    "COUNTSELECTEDTRACKS2 eel2": {
        "prefix": "CountSelectedTracks2",
        "scope": "eel2",
        "body": "CountSelectedTracks2(${1:ReaProject proj}, ${2:bool wantmaster})$0",
        "description": "Count the number of selected tracks in the project (proj=0 for active project).\n\n"
    },
    "RPR_COUNTSELECTEDTRACKS2 python": {
        "prefix": "RPR_CountSelectedTracks2",
        "scope": "python",
        "body": "RPR_CountSelectedTracks2(${1:ReaProject proj}, ${2:Boolean wantmaster})$0",
        "description": "Count the number of selected tracks in the project (proj=0 for active project).\n\n"
    },
    "REAPER.COUNTTAKEENVELOPES lua": {
        "prefix": "reaper.CountTakeEnvelopes",
        "scope": "lua",
        "body": "reaper.CountTakeEnvelopes(${1:MediaItem_Take take})$0",
        "description": "See GetTakeEnvelope\n\n"
    },
    "COUNTTAKEENVELOPES eel2": {
        "prefix": "CountTakeEnvelopes",
        "scope": "eel2",
        "body": "CountTakeEnvelopes(${1:MediaItem_Take take})$0",
        "description": "See GetTakeEnvelope\n\n"
    },
    "RPR_COUNTTAKEENVELOPES python": {
        "prefix": "RPR_CountTakeEnvelopes",
        "scope": "python",
        "body": "RPR_CountTakeEnvelopes(${1:MediaItem_Take take})$0",
        "description": "See GetTakeEnvelope\n\n"
    },
    "REAPER.COUNTTAKES lua": {
        "prefix": "reaper.CountTakes",
        "scope": "lua",
        "body": "reaper.CountTakes(${1:MediaItem item})$0",
        "description": "count the number of takes in the item\n\n"
    },
    "COUNTTAKES eel2": {
        "prefix": "CountTakes",
        "scope": "eel2",
        "body": "CountTakes(${1:MediaItem item})$0",
        "description": "count the number of takes in the item\n\n"
    },
    "RPR_COUNTTAKES python": {
        "prefix": "RPR_CountTakes",
        "scope": "python",
        "body": "RPR_CountTakes(${1:MediaItem item})$0",
        "description": "count the number of takes in the item\n\n"
    },
    "REAPER.COUNTTCPFXPARMS lua": {
        "prefix": "reaper.CountTCPFXParms",
        "scope": "lua",
        "body": "reaper.CountTCPFXParms(${1:ReaProject project}, ${2:MediaTrack track})$0",
        "description": "Count the number of FX parameter knobs displayed on the track control panel.\n\n"
    },
    "COUNTTCPFXPARMS eel2": {
        "prefix": "CountTCPFXParms",
        "scope": "eel2",
        "body": "CountTCPFXParms(${1:ReaProject project}, ${2:MediaTrack track})$0",
        "description": "Count the number of FX parameter knobs displayed on the track control panel.\n\n"
    },
    "RPR_COUNTTCPFXPARMS python": {
        "prefix": "RPR_CountTCPFXParms",
        "scope": "python",
        "body": "RPR_CountTCPFXParms(${1:ReaProject project}, ${2:MediaTrack track})$0",
        "description": "Count the number of FX parameter knobs displayed on the track control panel.\n\n"
    },
    "REAPER.COUNTTEMPOTIMESIGMARKERS lua": {
        "prefix": "reaper.CountTempoTimeSigMarkers",
        "scope": "lua",
        "body": "reaper.CountTempoTimeSigMarkers(${1:ReaProject proj})$0",
        "description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "COUNTTEMPOTIMESIGMARKERS eel2": {
        "prefix": "CountTempoTimeSigMarkers",
        "scope": "eel2",
        "body": "CountTempoTimeSigMarkers(${1:ReaProject proj})$0",
        "description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "RPR_COUNTTEMPOTIMESIGMARKERS python": {
        "prefix": "RPR_CountTempoTimeSigMarkers",
        "scope": "python",
        "body": "RPR_CountTempoTimeSigMarkers(${1:ReaProject proj})$0",
        "description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "REAPER.COUNTTRACKENVELOPES lua": {
        "prefix": "reaper.CountTrackEnvelopes",
        "scope": "lua",
        "body": "reaper.CountTrackEnvelopes(${1:MediaTrack track})$0",
        "description": "see GetTrackEnvelope\n\n"
    },
    "COUNTTRACKENVELOPES eel2": {
        "prefix": "CountTrackEnvelopes",
        "scope": "eel2",
        "body": "CountTrackEnvelopes(${1:MediaTrack track})$0",
        "description": "see GetTrackEnvelope\n\n"
    },
    "RPR_COUNTTRACKENVELOPES python": {
        "prefix": "RPR_CountTrackEnvelopes",
        "scope": "python",
        "body": "RPR_CountTrackEnvelopes(${1:MediaTrack track})$0",
        "description": "see GetTrackEnvelope\n\n"
    },
    "REAPER.COUNTTRACKMEDIAITEMS lua": {
        "prefix": "reaper.CountTrackMediaItems",
        "scope": "lua",
        "body": "reaper.CountTrackMediaItems(${1:MediaTrack track})$0",
        "description": "count the number of items in the track\n\n"
    },
    "COUNTTRACKMEDIAITEMS eel2": {
        "prefix": "CountTrackMediaItems",
        "scope": "eel2",
        "body": "CountTrackMediaItems(${1:MediaTrack track})$0",
        "description": "count the number of items in the track\n\n"
    },
    "RPR_COUNTTRACKMEDIAITEMS python": {
        "prefix": "RPR_CountTrackMediaItems",
        "scope": "python",
        "body": "RPR_CountTrackMediaItems(${1:MediaTrack track})$0",
        "description": "count the number of items in the track\n\n"
    },
    "REAPER.COUNTTRACKS lua": {
        "prefix": "reaper.CountTracks",
        "scope": "lua",
        "body": "reaper.CountTracks(${1:ReaProject proj})$0",
        "description": "count the number of tracks in the project (proj=0 for active project)\n\n"
    },
    "COUNTTRACKS eel2": {
        "prefix": "CountTracks",
        "scope": "eel2",
        "body": "CountTracks(${1:ReaProject proj})$0",
        "description": "count the number of tracks in the project (proj=0 for active project)\n\n"
    },
    "RPR_COUNTTRACKS python": {
        "prefix": "RPR_CountTracks",
        "scope": "python",
        "body": "RPR_CountTracks(${1:ReaProject proj})$0",
        "description": "count the number of tracks in the project (proj=0 for active project)\n\n"
    },
    "REAPER.CREATENEWMIDIITEMINPROJ lua": {
        "prefix": "reaper.CreateNewMIDIItemInProj",
        "scope": "lua",
        "body": "reaper.CreateNewMIDIItemInProj(${1:MediaTrack track}, ${2:number starttime}, ${3:number endtime}, ${4:optional boolean qnIn})$0",
        "description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.\n\n"
    },
    "CREATENEWMIDIITEMINPROJ eel2": {
        "prefix": "CreateNewMIDIItemInProj",
        "scope": "eel2",
        "body": "CreateNewMIDIItemInProj(${1:MediaTrack track}, ${2:starttime}, ${3:endtime}, ${4:optional bool qnIn})$0",
        "description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.\n\n"
    },
    "RPR_CREATENEWMIDIITEMINPROJ python": {
        "prefix": "RPR_CreateNewMIDIItemInProj",
        "scope": "python",
        "body": "RPR_CreateNewMIDIItemInProj(${1:MediaTrack track}, ${2:Float starttime}, ${3:Float endtime}, ${4:const bool qnInOptional})$0",
        "description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.\n\n"
    },
    "REAPER.CREATETAKEAUDIOACCESSOR lua": {
        "prefix": "reaper.CreateTakeAudioAccessor",
        "scope": "lua",
        "body": "reaper.CreateTakeAudioAccessor(${1:MediaItem_Take take})$0",
        "description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "CREATETAKEAUDIOACCESSOR eel2": {
        "prefix": "CreateTakeAudioAccessor",
        "scope": "eel2",
        "body": "CreateTakeAudioAccessor(${1:MediaItem_Take take})$0",
        "description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "RPR_CREATETAKEAUDIOACCESSOR python": {
        "prefix": "RPR_CreateTakeAudioAccessor",
        "scope": "python",
        "body": "RPR_CreateTakeAudioAccessor(${1:MediaItem_Take take})$0",
        "description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "REAPER.CREATETRACKAUDIOACCESSOR lua": {
        "prefix": "reaper.CreateTrackAudioAccessor",
        "scope": "lua",
        "body": "reaper.CreateTrackAudioAccessor(${1:MediaTrack track})$0",
        "description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "CREATETRACKAUDIOACCESSOR eel2": {
        "prefix": "CreateTrackAudioAccessor",
        "scope": "eel2",
        "body": "CreateTrackAudioAccessor(${1:MediaTrack track})$0",
        "description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "RPR_CREATETRACKAUDIOACCESSOR python": {
        "prefix": "RPR_CreateTrackAudioAccessor",
        "scope": "python",
        "body": "RPR_CreateTrackAudioAccessor(${1:MediaTrack track})$0",
        "description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "REAPER.CREATETRACKSEND lua": {
        "prefix": "reaper.CreateTrackSend",
        "scope": "lua",
        "body": "reaper.CreateTrackSend(${1:MediaTrack tr}, ${2:MediaTrack desttrIn})$0",
        "description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.\n\n"
    },
    "CREATETRACKSEND eel2": {
        "prefix": "CreateTrackSend",
        "scope": "eel2",
        "body": "CreateTrackSend(${1:MediaTrack tr}, ${2:MediaTrack desttrIn})$0",
        "description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.\n\n"
    },
    "RPR_CREATETRACKSEND python": {
        "prefix": "RPR_CreateTrackSend",
        "scope": "python",
        "body": "RPR_CreateTrackSend(${1:MediaTrack tr}, ${2:MediaTrack desttrInOptional})$0",
        "description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.\n\n"
    },
    "REAPER.CSURF_FLUSHUNDO lua": {
        "prefix": "reaper.CSurf_FlushUndo",
        "scope": "lua",
        "body": "reaper.CSurf_FlushUndo(${1:boolean force})$0",
        "description": "call this to force flushing of the undo states after using CSurf_On*Change()\n\n"
    },
    "CSURF_FLUSHUNDO eel2": {
        "prefix": "CSurf_FlushUndo",
        "scope": "eel2",
        "body": "CSurf_FlushUndo(${1:bool force})$0",
        "description": "call this to force flushing of the undo states after using CSurf_On*Change()\n\n"
    },
    "RPR_CSURF_FLUSHUNDO python": {
        "prefix": "RPR_CSurf_FlushUndo",
        "scope": "python",
        "body": "RPR_CSurf_FlushUndo(${1:Boolean force})$0",
        "description": "call this to force flushing of the undo states after using CSurf_On*Change()\n\n"
    },
    "REAPER.CSURF_GETTOUCHSTATE lua": {
        "prefix": "reaper.CSurf_GetTouchState",
        "scope": "lua",
        "body": "reaper.CSurf_GetTouchState(${1:MediaTrack trackid}, ${2:integer isPan})$0",
        "description": ""
    },
    "CSURF_GETTOUCHSTATE eel2": {
        "prefix": "CSurf_GetTouchState",
        "scope": "eel2",
        "body": "CSurf_GetTouchState(${1:MediaTrack trackid}, ${2:int isPan})$0",
        "description": ""
    },
    "RPR_CSURF_GETTOUCHSTATE python": {
        "prefix": "RPR_CSurf_GetTouchState",
        "scope": "python",
        "body": "RPR_CSurf_GetTouchState(${1:MediaTrack trackid}, ${2:Int isPan})$0",
        "description": ""
    },
    "REAPER.CSURF_GOEND lua": {
        "prefix": "reaper.CSurf_GoEnd",
        "scope": "lua",
        "body": "reaper.CSurf_GoEnd()$0",
        "description": ""
    },
    "CSURF_GOEND eel2": {
        "prefix": "CSurf_GoEnd",
        "scope": "eel2",
        "body": "CSurf_GoEnd()$0",
        "description": ""
    },
    "RPR_CSURF_GOEND python": {
        "prefix": "RPR_CSurf_GoEnd",
        "scope": "python",
        "body": "RPR_CSurf_GoEnd()$0",
        "description": ""
    },
    "REAPER.CSURF_GOSTART lua": {
        "prefix": "reaper.CSurf_GoStart",
        "scope": "lua",
        "body": "reaper.CSurf_GoStart()$0",
        "description": ""
    },
    "CSURF_GOSTART eel2": {
        "prefix": "CSurf_GoStart",
        "scope": "eel2",
        "body": "CSurf_GoStart()$0",
        "description": ""
    },
    "RPR_CSURF_GOSTART python": {
        "prefix": "RPR_CSurf_GoStart",
        "scope": "python",
        "body": "RPR_CSurf_GoStart()$0",
        "description": ""
    },
    "REAPER.CSURF_NUMTRACKS lua": {
        "prefix": "reaper.CSurf_NumTracks",
        "scope": "lua",
        "body": "reaper.CSurf_NumTracks(${1:boolean mcpView})$0",
        "description": ""
    },
    "CSURF_NUMTRACKS eel2": {
        "prefix": "CSurf_NumTracks",
        "scope": "eel2",
        "body": "CSurf_NumTracks(${1:bool mcpView})$0",
        "description": ""
    },
    "RPR_CSURF_NUMTRACKS python": {
        "prefix": "RPR_CSurf_NumTracks",
        "scope": "python",
        "body": "RPR_CSurf_NumTracks(${1:Boolean mcpView})$0",
        "description": ""
    },
    "REAPER.CSURF_ONARROW lua": {
        "prefix": "reaper.CSurf_OnArrow",
        "scope": "lua",
        "body": "reaper.CSurf_OnArrow(${1:integer whichdir}, ${2:boolean wantzoom})$0",
        "description": ""
    },
    "CSURF_ONARROW eel2": {
        "prefix": "CSurf_OnArrow",
        "scope": "eel2",
        "body": "CSurf_OnArrow(${1:int whichdir}, ${2:bool wantzoom})$0",
        "description": ""
    },
    "RPR_CSURF_ONARROW python": {
        "prefix": "RPR_CSurf_OnArrow",
        "scope": "python",
        "body": "RPR_CSurf_OnArrow(${1:Int whichdir}, ${2:Boolean wantzoom})$0",
        "description": ""
    },
    "REAPER.CSURF_ONFWD lua": {
        "prefix": "reaper.CSurf_OnFwd",
        "scope": "lua",
        "body": "reaper.CSurf_OnFwd(${1:integer seekplay})$0",
        "description": ""
    },
    "CSURF_ONFWD eel2": {
        "prefix": "CSurf_OnFwd",
        "scope": "eel2",
        "body": "CSurf_OnFwd(${1:int seekplay})$0",
        "description": ""
    },
    "RPR_CSURF_ONFWD python": {
        "prefix": "RPR_CSurf_OnFwd",
        "scope": "python",
        "body": "RPR_CSurf_OnFwd(${1:Int seekplay})$0",
        "description": ""
    },
    "REAPER.CSURF_ONFXCHANGE lua": {
        "prefix": "reaper.CSurf_OnFXChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnFXChange(${1:MediaTrack trackid}, ${2:integer en})$0",
        "description": ""
    },
    "CSURF_ONFXCHANGE eel2": {
        "prefix": "CSurf_OnFXChange",
        "scope": "eel2",
        "body": "CSurf_OnFXChange(${1:MediaTrack trackid}, ${2:int en})$0",
        "description": ""
    },
    "RPR_CSURF_ONFXCHANGE python": {
        "prefix": "RPR_CSurf_OnFXChange",
        "scope": "python",
        "body": "RPR_CSurf_OnFXChange(${1:MediaTrack trackid}, ${2:Int en})$0",
        "description": ""
    },
    "REAPER.CSURF_ONINPUTMONITORCHANGE lua": {
        "prefix": "reaper.CSurf_OnInputMonitorChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnInputMonitorChange(${1:MediaTrack trackid}, ${2:integer monitor})$0",
        "description": ""
    },
    "CSURF_ONINPUTMONITORCHANGE eel2": {
        "prefix": "CSurf_OnInputMonitorChange",
        "scope": "eel2",
        "body": "CSurf_OnInputMonitorChange(${1:MediaTrack trackid}, ${2:int monitor})$0",
        "description": ""
    },
    "RPR_CSURF_ONINPUTMONITORCHANGE python": {
        "prefix": "RPR_CSurf_OnInputMonitorChange",
        "scope": "python",
        "body": "RPR_CSurf_OnInputMonitorChange(${1:MediaTrack trackid}, ${2:Int monitor})$0",
        "description": ""
    },
    "REAPER.CSURF_ONINPUTMONITORCHANGEEX lua": {
        "prefix": "reaper.CSurf_OnInputMonitorChangeEx",
        "scope": "lua",
        "body": "reaper.CSurf_OnInputMonitorChangeEx(${1:MediaTrack trackid}, ${2:integer monitor}, ${3:boolean allowgang})$0",
        "description": ""
    },
    "CSURF_ONINPUTMONITORCHANGEEX eel2": {
        "prefix": "CSurf_OnInputMonitorChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnInputMonitorChangeEx(${1:MediaTrack trackid}, ${2:int monitor}, ${3:bool allowgang})$0",
        "description": ""
    },
    "RPR_CSURF_ONINPUTMONITORCHANGEEX python": {
        "prefix": "RPR_CSurf_OnInputMonitorChangeEx",
        "scope": "python",
        "body": "RPR_CSurf_OnInputMonitorChangeEx(${1:MediaTrack trackid}, ${2:Int monitor}, ${3:Boolean allowgang})$0",
        "description": ""
    },
    "REAPER.CSURF_ONMUTECHANGE lua": {
        "prefix": "reaper.CSurf_OnMuteChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnMuteChange(${1:MediaTrack trackid}, ${2:integer mute})$0",
        "description": ""
    },
    "CSURF_ONMUTECHANGE eel2": {
        "prefix": "CSurf_OnMuteChange",
        "scope": "eel2",
        "body": "CSurf_OnMuteChange(${1:MediaTrack trackid}, ${2:int mute})$0",
        "description": ""
    },
    "RPR_CSURF_ONMUTECHANGE python": {
        "prefix": "RPR_CSurf_OnMuteChange",
        "scope": "python",
        "body": "RPR_CSurf_OnMuteChange(${1:MediaTrack trackid}, ${2:Int mute})$0",
        "description": ""
    },
    "REAPER.CSURF_ONMUTECHANGEEX lua": {
        "prefix": "reaper.CSurf_OnMuteChangeEx",
        "scope": "lua",
        "body": "reaper.CSurf_OnMuteChangeEx(${1:MediaTrack trackid}, ${2:integer mute}, ${3:boolean allowgang})$0",
        "description": ""
    },
    "CSURF_ONMUTECHANGEEX eel2": {
        "prefix": "CSurf_OnMuteChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnMuteChangeEx(${1:MediaTrack trackid}, ${2:int mute}, ${3:bool allowgang})$0",
        "description": ""
    },
    "RPR_CSURF_ONMUTECHANGEEX python": {
        "prefix": "RPR_CSurf_OnMuteChangeEx",
        "scope": "python",
        "body": "RPR_CSurf_OnMuteChangeEx(${1:MediaTrack trackid}, ${2:Int mute}, ${3:Boolean allowgang})$0",
        "description": ""
    },
    "REAPER.CSURF_ONPANCHANGE lua": {
        "prefix": "reaper.CSurf_OnPanChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnPanChange(${1:MediaTrack trackid}, ${2:number pan}, ${3:boolean relative})$0",
        "description": ""
    },
    "CSURF_ONPANCHANGE eel2": {
        "prefix": "CSurf_OnPanChange",
        "scope": "eel2",
        "body": "CSurf_OnPanChange(${1:MediaTrack trackid}, ${2:pan}, ${3:bool relative})$0",
        "description": ""
    },
    "RPR_CSURF_ONPANCHANGE python": {
        "prefix": "RPR_CSurf_OnPanChange",
        "scope": "python",
        "body": "RPR_CSurf_OnPanChange(${1:MediaTrack trackid}, ${2:Float pan}, ${3:Boolean relative})$0",
        "description": ""
    },
    "REAPER.CSURF_ONPANCHANGEEX lua": {
        "prefix": "reaper.CSurf_OnPanChangeEx",
        "scope": "lua",
        "body": "reaper.CSurf_OnPanChangeEx(${1:MediaTrack trackid}, ${2:number pan}, ${3:boolean relative}, ${4:boolean allowGang})$0",
        "description": ""
    },
    "CSURF_ONPANCHANGEEX eel2": {
        "prefix": "CSurf_OnPanChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnPanChangeEx(${1:MediaTrack trackid}, ${2:pan}, ${3:bool relative}, ${4:bool allowGang})$0",
        "description": ""
    },
    "RPR_CSURF_ONPANCHANGEEX python": {
        "prefix": "RPR_CSurf_OnPanChangeEx",
        "scope": "python",
        "body": "RPR_CSurf_OnPanChangeEx(${1:MediaTrack trackid}, ${2:Float pan}, ${3:Boolean relative}, ${4:Boolean allowGang})$0",
        "description": ""
    },
    "REAPER.CSURF_ONPAUSE lua": {
        "prefix": "reaper.CSurf_OnPause",
        "scope": "lua",
        "body": "reaper.CSurf_OnPause()$0",
        "description": ""
    },
    "CSURF_ONPAUSE eel2": {
        "prefix": "CSurf_OnPause",
        "scope": "eel2",
        "body": "CSurf_OnPause()$0",
        "description": ""
    },
    "RPR_CSURF_ONPAUSE python": {
        "prefix": "RPR_CSurf_OnPause",
        "scope": "python",
        "body": "RPR_CSurf_OnPause()$0",
        "description": ""
    },
    "REAPER.CSURF_ONPLAY lua": {
        "prefix": "reaper.CSurf_OnPlay",
        "scope": "lua",
        "body": "reaper.CSurf_OnPlay()$0",
        "description": ""
    },
    "CSURF_ONPLAY eel2": {
        "prefix": "CSurf_OnPlay",
        "scope": "eel2",
        "body": "CSurf_OnPlay()$0",
        "description": ""
    },
    "RPR_CSURF_ONPLAY python": {
        "prefix": "RPR_CSurf_OnPlay",
        "scope": "python",
        "body": "RPR_CSurf_OnPlay()$0",
        "description": ""
    },
    "REAPER.CSURF_ONPLAYRATECHANGE lua": {
        "prefix": "reaper.CSurf_OnPlayRateChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnPlayRateChange(${1:number playrate})$0",
        "description": ""
    },
    "CSURF_ONPLAYRATECHANGE eel2": {
        "prefix": "CSurf_OnPlayRateChange",
        "scope": "eel2",
        "body": "CSurf_OnPlayRateChange(${1:playrate})$0",
        "description": ""
    },
    "RPR_CSURF_ONPLAYRATECHANGE python": {
        "prefix": "RPR_CSurf_OnPlayRateChange",
        "scope": "python",
        "body": "RPR_CSurf_OnPlayRateChange(${1:Float playrate})$0",
        "description": ""
    },
    "REAPER.CSURF_ONRECARMCHANGE lua": {
        "prefix": "reaper.CSurf_OnRecArmChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnRecArmChange(${1:MediaTrack trackid}, ${2:integer recarm})$0",
        "description": ""
    },
    "CSURF_ONRECARMCHANGE eel2": {
        "prefix": "CSurf_OnRecArmChange",
        "scope": "eel2",
        "body": "CSurf_OnRecArmChange(${1:MediaTrack trackid}, ${2:int recarm})$0",
        "description": ""
    },
    "RPR_CSURF_ONRECARMCHANGE python": {
        "prefix": "RPR_CSurf_OnRecArmChange",
        "scope": "python",
        "body": "RPR_CSurf_OnRecArmChange(${1:MediaTrack trackid}, ${2:Int recarm})$0",
        "description": ""
    },
    "REAPER.CSURF_ONRECARMCHANGEEX lua": {
        "prefix": "reaper.CSurf_OnRecArmChangeEx",
        "scope": "lua",
        "body": "reaper.CSurf_OnRecArmChangeEx(${1:MediaTrack trackid}, ${2:integer recarm}, ${3:boolean allowgang})$0",
        "description": ""
    },
    "CSURF_ONRECARMCHANGEEX eel2": {
        "prefix": "CSurf_OnRecArmChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnRecArmChangeEx(${1:MediaTrack trackid}, ${2:int recarm}, ${3:bool allowgang})$0",
        "description": ""
    },
    "RPR_CSURF_ONRECARMCHANGEEX python": {
        "prefix": "RPR_CSurf_OnRecArmChangeEx",
        "scope": "python",
        "body": "RPR_CSurf_OnRecArmChangeEx(${1:MediaTrack trackid}, ${2:Int recarm}, ${3:Boolean allowgang})$0",
        "description": ""
    },
    "REAPER.CSURF_ONRECORD lua": {
        "prefix": "reaper.CSurf_OnRecord",
        "scope": "lua",
        "body": "reaper.CSurf_OnRecord()$0",
        "description": ""
    },
    "CSURF_ONRECORD eel2": {
        "prefix": "CSurf_OnRecord",
        "scope": "eel2",
        "body": "CSurf_OnRecord()$0",
        "description": ""
    },
    "RPR_CSURF_ONRECORD python": {
        "prefix": "RPR_CSurf_OnRecord",
        "scope": "python",
        "body": "RPR_CSurf_OnRecord()$0",
        "description": ""
    },
    "REAPER.CSURF_ONRECVPANCHANGE lua": {
        "prefix": "reaper.CSurf_OnRecvPanChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnRecvPanChange(${1:MediaTrack trackid}, ${2:integer recv_index}, ${3:number pan}, ${4:boolean relative})$0",
        "description": ""
    },
    "CSURF_ONRECVPANCHANGE eel2": {
        "prefix": "CSurf_OnRecvPanChange",
        "scope": "eel2",
        "body": "CSurf_OnRecvPanChange(${1:MediaTrack trackid}, ${2:int recv_index}, ${3:pan}, ${4:bool relative})$0",
        "description": ""
    },
    "RPR_CSURF_ONRECVPANCHANGE python": {
        "prefix": "RPR_CSurf_OnRecvPanChange",
        "scope": "python",
        "body": "RPR_CSurf_OnRecvPanChange(${1:MediaTrack trackid}, ${2:Int recv_index}, ${3:Float pan}, ${4:Boolean relative})$0",
        "description": ""
    },
    "REAPER.CSURF_ONRECVVOLUMECHANGE lua": {
        "prefix": "reaper.CSurf_OnRecvVolumeChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnRecvVolumeChange(${1:MediaTrack trackid}, ${2:integer recv_index}, ${3:number volume}, ${4:boolean relative})$0",
        "description": ""
    },
    "CSURF_ONRECVVOLUMECHANGE eel2": {
        "prefix": "CSurf_OnRecvVolumeChange",
        "scope": "eel2",
        "body": "CSurf_OnRecvVolumeChange(${1:MediaTrack trackid}, ${2:int recv_index}, ${3:volume}, ${4:bool relative})$0",
        "description": ""
    },
    "RPR_CSURF_ONRECVVOLUMECHANGE python": {
        "prefix": "RPR_CSurf_OnRecvVolumeChange",
        "scope": "python",
        "body": "RPR_CSurf_OnRecvVolumeChange(${1:MediaTrack trackid}, ${2:Int recv_index}, ${3:Float volume}, ${4:Boolean relative})$0",
        "description": ""
    },
    "REAPER.CSURF_ONREW lua": {
        "prefix": "reaper.CSurf_OnRew",
        "scope": "lua",
        "body": "reaper.CSurf_OnRew(${1:integer seekplay})$0",
        "description": ""
    },
    "CSURF_ONREW eel2": {
        "prefix": "CSurf_OnRew",
        "scope": "eel2",
        "body": "CSurf_OnRew(${1:int seekplay})$0",
        "description": ""
    },
    "RPR_CSURF_ONREW python": {
        "prefix": "RPR_CSurf_OnRew",
        "scope": "python",
        "body": "RPR_CSurf_OnRew(${1:Int seekplay})$0",
        "description": ""
    },
    "REAPER.CSURF_ONREWFWD lua": {
        "prefix": "reaper.CSurf_OnRewFwd",
        "scope": "lua",
        "body": "reaper.CSurf_OnRewFwd(${1:integer seekplay}, ${2:integer dir})$0",
        "description": ""
    },
    "CSURF_ONREWFWD eel2": {
        "prefix": "CSurf_OnRewFwd",
        "scope": "eel2",
        "body": "CSurf_OnRewFwd(${1:int seekplay}, ${2:int dir})$0",
        "description": ""
    },
    "RPR_CSURF_ONREWFWD python": {
        "prefix": "RPR_CSurf_OnRewFwd",
        "scope": "python",
        "body": "RPR_CSurf_OnRewFwd(${1:Int seekplay}, ${2:Int dir})$0",
        "description": ""
    },
    "REAPER.CSURF_ONSCROLL lua": {
        "prefix": "reaper.CSurf_OnScroll",
        "scope": "lua",
        "body": "reaper.CSurf_OnScroll(${1:integer xdir}, ${2:integer ydir})$0",
        "description": ""
    },
    "CSURF_ONSCROLL eel2": {
        "prefix": "CSurf_OnScroll",
        "scope": "eel2",
        "body": "CSurf_OnScroll(${1:int xdir}, ${2:int ydir})$0",
        "description": ""
    },
    "RPR_CSURF_ONSCROLL python": {
        "prefix": "RPR_CSurf_OnScroll",
        "scope": "python",
        "body": "RPR_CSurf_OnScroll(${1:Int xdir}, ${2:Int ydir})$0",
        "description": ""
    },
    "REAPER.CSURF_ONSELECTEDCHANGE lua": {
        "prefix": "reaper.CSurf_OnSelectedChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnSelectedChange(${1:MediaTrack trackid}, ${2:integer selected})$0",
        "description": ""
    },
    "CSURF_ONSELECTEDCHANGE eel2": {
        "prefix": "CSurf_OnSelectedChange",
        "scope": "eel2",
        "body": "CSurf_OnSelectedChange(${1:MediaTrack trackid}, ${2:int selected})$0",
        "description": ""
    },
    "RPR_CSURF_ONSELECTEDCHANGE python": {
        "prefix": "RPR_CSurf_OnSelectedChange",
        "scope": "python",
        "body": "RPR_CSurf_OnSelectedChange(${1:MediaTrack trackid}, ${2:Int selected})$0",
        "description": ""
    },
    "REAPER.CSURF_ONSENDPANCHANGE lua": {
        "prefix": "reaper.CSurf_OnSendPanChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnSendPanChange(${1:MediaTrack trackid}, ${2:integer send_index}, ${3:number pan}, ${4:boolean relative})$0",
        "description": ""
    },
    "CSURF_ONSENDPANCHANGE eel2": {
        "prefix": "CSurf_OnSendPanChange",
        "scope": "eel2",
        "body": "CSurf_OnSendPanChange(${1:MediaTrack trackid}, ${2:int send_index}, ${3:pan}, ${4:bool relative})$0",
        "description": ""
    },
    "RPR_CSURF_ONSENDPANCHANGE python": {
        "prefix": "RPR_CSurf_OnSendPanChange",
        "scope": "python",
        "body": "RPR_CSurf_OnSendPanChange(${1:MediaTrack trackid}, ${2:Int send_index}, ${3:Float pan}, ${4:Boolean relative})$0",
        "description": ""
    },
    "REAPER.CSURF_ONSENDVOLUMECHANGE lua": {
        "prefix": "reaper.CSurf_OnSendVolumeChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnSendVolumeChange(${1:MediaTrack trackid}, ${2:integer send_index}, ${3:number volume}, ${4:boolean relative})$0",
        "description": ""
    },
    "CSURF_ONSENDVOLUMECHANGE eel2": {
        "prefix": "CSurf_OnSendVolumeChange",
        "scope": "eel2",
        "body": "CSurf_OnSendVolumeChange(${1:MediaTrack trackid}, ${2:int send_index}, ${3:volume}, ${4:bool relative})$0",
        "description": ""
    },
    "RPR_CSURF_ONSENDVOLUMECHANGE python": {
        "prefix": "RPR_CSurf_OnSendVolumeChange",
        "scope": "python",
        "body": "RPR_CSurf_OnSendVolumeChange(${1:MediaTrack trackid}, ${2:Int send_index}, ${3:Float volume}, ${4:Boolean relative})$0",
        "description": ""
    },
    "REAPER.CSURF_ONSOLOCHANGE lua": {
        "prefix": "reaper.CSurf_OnSoloChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnSoloChange(${1:MediaTrack trackid}, ${2:integer solo})$0",
        "description": ""
    },
    "CSURF_ONSOLOCHANGE eel2": {
        "prefix": "CSurf_OnSoloChange",
        "scope": "eel2",
        "body": "CSurf_OnSoloChange(${1:MediaTrack trackid}, ${2:int solo})$0",
        "description": ""
    },
    "RPR_CSURF_ONSOLOCHANGE python": {
        "prefix": "RPR_CSurf_OnSoloChange",
        "scope": "python",
        "body": "RPR_CSurf_OnSoloChange(${1:MediaTrack trackid}, ${2:Int solo})$0",
        "description": ""
    },
    "REAPER.CSURF_ONSOLOCHANGEEX lua": {
        "prefix": "reaper.CSurf_OnSoloChangeEx",
        "scope": "lua",
        "body": "reaper.CSurf_OnSoloChangeEx(${1:MediaTrack trackid}, ${2:integer solo}, ${3:boolean allowgang})$0",
        "description": ""
    },
    "CSURF_ONSOLOCHANGEEX eel2": {
        "prefix": "CSurf_OnSoloChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnSoloChangeEx(${1:MediaTrack trackid}, ${2:int solo}, ${3:bool allowgang})$0",
        "description": ""
    },
    "RPR_CSURF_ONSOLOCHANGEEX python": {
        "prefix": "RPR_CSurf_OnSoloChangeEx",
        "scope": "python",
        "body": "RPR_CSurf_OnSoloChangeEx(${1:MediaTrack trackid}, ${2:Int solo}, ${3:Boolean allowgang})$0",
        "description": ""
    },
    "REAPER.CSURF_ONSTOP lua": {
        "prefix": "reaper.CSurf_OnStop",
        "scope": "lua",
        "body": "reaper.CSurf_OnStop()$0",
        "description": ""
    },
    "CSURF_ONSTOP eel2": {
        "prefix": "CSurf_OnStop",
        "scope": "eel2",
        "body": "CSurf_OnStop()$0",
        "description": ""
    },
    "RPR_CSURF_ONSTOP python": {
        "prefix": "RPR_CSurf_OnStop",
        "scope": "python",
        "body": "RPR_CSurf_OnStop()$0",
        "description": ""
    },
    "REAPER.CSURF_ONTEMPOCHANGE lua": {
        "prefix": "reaper.CSurf_OnTempoChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnTempoChange(${1:number bpm})$0",
        "description": ""
    },
    "CSURF_ONTEMPOCHANGE eel2": {
        "prefix": "CSurf_OnTempoChange",
        "scope": "eel2",
        "body": "CSurf_OnTempoChange(${1:bpm})$0",
        "description": ""
    },
    "RPR_CSURF_ONTEMPOCHANGE python": {
        "prefix": "RPR_CSurf_OnTempoChange",
        "scope": "python",
        "body": "RPR_CSurf_OnTempoChange(${1:Float bpm})$0",
        "description": ""
    },
    "REAPER.CSURF_ONTRACKSELECTION lua": {
        "prefix": "reaper.CSurf_OnTrackSelection",
        "scope": "lua",
        "body": "reaper.CSurf_OnTrackSelection(${1:MediaTrack trackid})$0",
        "description": ""
    },
    "CSURF_ONTRACKSELECTION eel2": {
        "prefix": "CSurf_OnTrackSelection",
        "scope": "eel2",
        "body": "CSurf_OnTrackSelection(${1:MediaTrack trackid})$0",
        "description": ""
    },
    "RPR_CSURF_ONTRACKSELECTION python": {
        "prefix": "RPR_CSurf_OnTrackSelection",
        "scope": "python",
        "body": "RPR_CSurf_OnTrackSelection(${1:MediaTrack trackid})$0",
        "description": ""
    },
    "REAPER.CSURF_ONVOLUMECHANGE lua": {
        "prefix": "reaper.CSurf_OnVolumeChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnVolumeChange(${1:MediaTrack trackid}, ${2:number volume}, ${3:boolean relative})$0",
        "description": ""
    },
    "CSURF_ONVOLUMECHANGE eel2": {
        "prefix": "CSurf_OnVolumeChange",
        "scope": "eel2",
        "body": "CSurf_OnVolumeChange(${1:MediaTrack trackid}, ${2:volume}, ${3:bool relative})$0",
        "description": ""
    },
    "RPR_CSURF_ONVOLUMECHANGE python": {
        "prefix": "RPR_CSurf_OnVolumeChange",
        "scope": "python",
        "body": "RPR_CSurf_OnVolumeChange(${1:MediaTrack trackid}, ${2:Float volume}, ${3:Boolean relative})$0",
        "description": ""
    },
    "REAPER.CSURF_ONVOLUMECHANGEEX lua": {
        "prefix": "reaper.CSurf_OnVolumeChangeEx",
        "scope": "lua",
        "body": "reaper.CSurf_OnVolumeChangeEx(${1:MediaTrack trackid}, ${2:number volume}, ${3:boolean relative}, ${4:boolean allowGang})$0",
        "description": ""
    },
    "CSURF_ONVOLUMECHANGEEX eel2": {
        "prefix": "CSurf_OnVolumeChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnVolumeChangeEx(${1:MediaTrack trackid}, ${2:volume}, ${3:bool relative}, ${4:bool allowGang})$0",
        "description": ""
    },
    "RPR_CSURF_ONVOLUMECHANGEEX python": {
        "prefix": "RPR_CSurf_OnVolumeChangeEx",
        "scope": "python",
        "body": "RPR_CSurf_OnVolumeChangeEx(${1:MediaTrack trackid}, ${2:Float volume}, ${3:Boolean relative}, ${4:Boolean allowGang})$0",
        "description": ""
    },
    "REAPER.CSURF_ONWIDTHCHANGE lua": {
        "prefix": "reaper.CSurf_OnWidthChange",
        "scope": "lua",
        "body": "reaper.CSurf_OnWidthChange(${1:MediaTrack trackid}, ${2:number width}, ${3:boolean relative})$0",
        "description": ""
    },
    "CSURF_ONWIDTHCHANGE eel2": {
        "prefix": "CSurf_OnWidthChange",
        "scope": "eel2",
        "body": "CSurf_OnWidthChange(${1:MediaTrack trackid}, ${2:width}, ${3:bool relative})$0",
        "description": ""
    },
    "RPR_CSURF_ONWIDTHCHANGE python": {
        "prefix": "RPR_CSurf_OnWidthChange",
        "scope": "python",
        "body": "RPR_CSurf_OnWidthChange(${1:MediaTrack trackid}, ${2:Float width}, ${3:Boolean relative})$0",
        "description": ""
    },
    "REAPER.CSURF_ONWIDTHCHANGEEX lua": {
        "prefix": "reaper.CSurf_OnWidthChangeEx",
        "scope": "lua",
        "body": "reaper.CSurf_OnWidthChangeEx(${1:MediaTrack trackid}, ${2:number width}, ${3:boolean relative}, ${4:boolean allowGang})$0",
        "description": ""
    },
    "CSURF_ONWIDTHCHANGEEX eel2": {
        "prefix": "CSurf_OnWidthChangeEx",
        "scope": "eel2",
        "body": "CSurf_OnWidthChangeEx(${1:MediaTrack trackid}, ${2:width}, ${3:bool relative}, ${4:bool allowGang})$0",
        "description": ""
    },
    "RPR_CSURF_ONWIDTHCHANGEEX python": {
        "prefix": "RPR_CSurf_OnWidthChangeEx",
        "scope": "python",
        "body": "RPR_CSurf_OnWidthChangeEx(${1:MediaTrack trackid}, ${2:Float width}, ${3:Boolean relative}, ${4:Boolean allowGang})$0",
        "description": ""
    },
    "REAPER.CSURF_ONZOOM lua": {
        "prefix": "reaper.CSurf_OnZoom",
        "scope": "lua",
        "body": "reaper.CSurf_OnZoom(${1:integer xdir}, ${2:integer ydir})$0",
        "description": ""
    },
    "CSURF_ONZOOM eel2": {
        "prefix": "CSurf_OnZoom",
        "scope": "eel2",
        "body": "CSurf_OnZoom(${1:int xdir}, ${2:int ydir})$0",
        "description": ""
    },
    "RPR_CSURF_ONZOOM python": {
        "prefix": "RPR_CSurf_OnZoom",
        "scope": "python",
        "body": "RPR_CSurf_OnZoom(${1:Int xdir}, ${2:Int ydir})$0",
        "description": ""
    },
    "REAPER.CSURF_RESETALLCACHEDVOLPANSTATES lua": {
        "prefix": "reaper.CSurf_ResetAllCachedVolPanStates",
        "scope": "lua",
        "body": "reaper.CSurf_ResetAllCachedVolPanStates()$0",
        "description": ""
    },
    "CSURF_RESETALLCACHEDVOLPANSTATES eel2": {
        "prefix": "CSurf_ResetAllCachedVolPanStates",
        "scope": "eel2",
        "body": "CSurf_ResetAllCachedVolPanStates()$0",
        "description": ""
    },
    "RPR_CSURF_RESETALLCACHEDVOLPANSTATES python": {
        "prefix": "RPR_CSurf_ResetAllCachedVolPanStates",
        "scope": "python",
        "body": "RPR_CSurf_ResetAllCachedVolPanStates()$0",
        "description": ""
    },
    "REAPER.CSURF_SCRUBAMT lua": {
        "prefix": "reaper.CSurf_ScrubAmt",
        "scope": "lua",
        "body": "reaper.CSurf_ScrubAmt(${1:number amt})$0",
        "description": ""
    },
    "CSURF_SCRUBAMT eel2": {
        "prefix": "CSurf_ScrubAmt",
        "scope": "eel2",
        "body": "CSurf_ScrubAmt(${1:amt})$0",
        "description": ""
    },
    "RPR_CSURF_SCRUBAMT python": {
        "prefix": "RPR_CSurf_ScrubAmt",
        "scope": "python",
        "body": "RPR_CSurf_ScrubAmt(${1:Float amt})$0",
        "description": ""
    },
    "REAPER.CSURF_SETAUTOMODE lua": {
        "prefix": "reaper.CSurf_SetAutoMode",
        "scope": "lua",
        "body": "reaper.CSurf_SetAutoMode(${1:integer mode}, ${2:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETAUTOMODE eel2": {
        "prefix": "CSurf_SetAutoMode",
        "scope": "eel2",
        "body": "CSurf_SetAutoMode(${1:int mode}, ${2:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "RPR_CSURF_SETAUTOMODE python": {
        "prefix": "RPR_CSurf_SetAutoMode",
        "scope": "python",
        "body": "RPR_CSurf_SetAutoMode(${1:Int mode}, ${2:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "REAPER.CSURF_SETPLAYSTATE lua": {
        "prefix": "reaper.CSurf_SetPlayState",
        "scope": "lua",
        "body": "reaper.CSurf_SetPlayState(${1:boolean play}, ${2:boolean pause}, ${3:boolean rec}, ${4:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETPLAYSTATE eel2": {
        "prefix": "CSurf_SetPlayState",
        "scope": "eel2",
        "body": "CSurf_SetPlayState(${1:bool play}, ${2:bool pause}, ${3:bool rec}, ${4:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "RPR_CSURF_SETPLAYSTATE python": {
        "prefix": "RPR_CSurf_SetPlayState",
        "scope": "python",
        "body": "RPR_CSurf_SetPlayState(${1:Boolean play}, ${2:Boolean pause}, ${3:Boolean rec}, ${4:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "REAPER.CSURF_SETREPEATSTATE lua": {
        "prefix": "reaper.CSurf_SetRepeatState",
        "scope": "lua",
        "body": "reaper.CSurf_SetRepeatState(${1:boolean rep}, ${2:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETREPEATSTATE eel2": {
        "prefix": "CSurf_SetRepeatState",
        "scope": "eel2",
        "body": "CSurf_SetRepeatState(${1:bool rep}, ${2:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "RPR_CSURF_SETREPEATSTATE python": {
        "prefix": "RPR_CSurf_SetRepeatState",
        "scope": "python",
        "body": "RPR_CSurf_SetRepeatState(${1:Boolean rep}, ${2:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "REAPER.CSURF_SETSURFACEMUTE lua": {
        "prefix": "reaper.CSurf_SetSurfaceMute",
        "scope": "lua",
        "body": "reaper.CSurf_SetSurfaceMute(${1:MediaTrack trackid}, ${2:boolean mute}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACEMUTE eel2": {
        "prefix": "CSurf_SetSurfaceMute",
        "scope": "eel2",
        "body": "CSurf_SetSurfaceMute(${1:MediaTrack trackid}, ${2:bool mute}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "RPR_CSURF_SETSURFACEMUTE python": {
        "prefix": "RPR_CSurf_SetSurfaceMute",
        "scope": "python",
        "body": "RPR_CSurf_SetSurfaceMute(${1:MediaTrack trackid}, ${2:Boolean mute}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "REAPER.CSURF_SETSURFACEPAN lua": {
        "prefix": "reaper.CSurf_SetSurfacePan",
        "scope": "lua",
        "body": "reaper.CSurf_SetSurfacePan(${1:MediaTrack trackid}, ${2:number pan}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACEPAN eel2": {
        "prefix": "CSurf_SetSurfacePan",
        "scope": "eel2",
        "body": "CSurf_SetSurfacePan(${1:MediaTrack trackid}, ${2:pan}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "RPR_CSURF_SETSURFACEPAN python": {
        "prefix": "RPR_CSurf_SetSurfacePan",
        "scope": "python",
        "body": "RPR_CSurf_SetSurfacePan(${1:MediaTrack trackid}, ${2:Float pan}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "REAPER.CSURF_SETSURFACERECARM lua": {
        "prefix": "reaper.CSurf_SetSurfaceRecArm",
        "scope": "lua",
        "body": "reaper.CSurf_SetSurfaceRecArm(${1:MediaTrack trackid}, ${2:boolean recarm}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACERECARM eel2": {
        "prefix": "CSurf_SetSurfaceRecArm",
        "scope": "eel2",
        "body": "CSurf_SetSurfaceRecArm(${1:MediaTrack trackid}, ${2:bool recarm}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "RPR_CSURF_SETSURFACERECARM python": {
        "prefix": "RPR_CSurf_SetSurfaceRecArm",
        "scope": "python",
        "body": "RPR_CSurf_SetSurfaceRecArm(${1:MediaTrack trackid}, ${2:Boolean recarm}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "REAPER.CSURF_SETSURFACESELECTED lua": {
        "prefix": "reaper.CSurf_SetSurfaceSelected",
        "scope": "lua",
        "body": "reaper.CSurf_SetSurfaceSelected(${1:MediaTrack trackid}, ${2:boolean selected}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACESELECTED eel2": {
        "prefix": "CSurf_SetSurfaceSelected",
        "scope": "eel2",
        "body": "CSurf_SetSurfaceSelected(${1:MediaTrack trackid}, ${2:bool selected}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "RPR_CSURF_SETSURFACESELECTED python": {
        "prefix": "RPR_CSurf_SetSurfaceSelected",
        "scope": "python",
        "body": "RPR_CSurf_SetSurfaceSelected(${1:MediaTrack trackid}, ${2:Boolean selected}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "REAPER.CSURF_SETSURFACESOLO lua": {
        "prefix": "reaper.CSurf_SetSurfaceSolo",
        "scope": "lua",
        "body": "reaper.CSurf_SetSurfaceSolo(${1:MediaTrack trackid}, ${2:boolean solo}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACESOLO eel2": {
        "prefix": "CSurf_SetSurfaceSolo",
        "scope": "eel2",
        "body": "CSurf_SetSurfaceSolo(${1:MediaTrack trackid}, ${2:bool solo}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "RPR_CSURF_SETSURFACESOLO python": {
        "prefix": "RPR_CSurf_SetSurfaceSolo",
        "scope": "python",
        "body": "RPR_CSurf_SetSurfaceSolo(${1:MediaTrack trackid}, ${2:Boolean solo}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "REAPER.CSURF_SETSURFACEVOLUME lua": {
        "prefix": "reaper.CSurf_SetSurfaceVolume",
        "scope": "lua",
        "body": "reaper.CSurf_SetSurfaceVolume(${1:MediaTrack trackid}, ${2:number volume}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "CSURF_SETSURFACEVOLUME eel2": {
        "prefix": "CSurf_SetSurfaceVolume",
        "scope": "eel2",
        "body": "CSurf_SetSurfaceVolume(${1:MediaTrack trackid}, ${2:volume}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "RPR_CSURF_SETSURFACEVOLUME python": {
        "prefix": "RPR_CSurf_SetSurfaceVolume",
        "scope": "python",
        "body": "RPR_CSurf_SetSurfaceVolume(${1:MediaTrack trackid}, ${2:Float volume}, ${3:IReaperControlSurface ignoresurf})$0",
        "description": ""
    },
    "REAPER.CSURF_SETTRACKLISTCHANGE lua": {
        "prefix": "reaper.CSurf_SetTrackListChange",
        "scope": "lua",
        "body": "reaper.CSurf_SetTrackListChange()$0",
        "description": ""
    },
    "CSURF_SETTRACKLISTCHANGE eel2": {
        "prefix": "CSurf_SetTrackListChange",
        "scope": "eel2",
        "body": "CSurf_SetTrackListChange()$0",
        "description": ""
    },
    "RPR_CSURF_SETTRACKLISTCHANGE python": {
        "prefix": "RPR_CSurf_SetTrackListChange",
        "scope": "python",
        "body": "RPR_CSurf_SetTrackListChange()$0",
        "description": ""
    },
    "REAPER.CSURF_TRACKFROMID lua": {
        "prefix": "reaper.CSurf_TrackFromID",
        "scope": "lua",
        "body": "reaper.CSurf_TrackFromID(${1:integer idx}, ${2:boolean mcpView})$0",
        "description": ""
    },
    "CSURF_TRACKFROMID eel2": {
        "prefix": "CSurf_TrackFromID",
        "scope": "eel2",
        "body": "CSurf_TrackFromID(${1:int idx}, ${2:bool mcpView})$0",
        "description": ""
    },
    "RPR_CSURF_TRACKFROMID python": {
        "prefix": "RPR_CSurf_TrackFromID",
        "scope": "python",
        "body": "RPR_CSurf_TrackFromID(${1:Int idx}, ${2:Boolean mcpView})$0",
        "description": ""
    },
    "REAPER.CSURF_TRACKTOID lua": {
        "prefix": "reaper.CSurf_TrackToID",
        "scope": "lua",
        "body": "reaper.CSurf_TrackToID(${1:MediaTrack track}, ${2:boolean mcpView})$0",
        "description": ""
    },
    "CSURF_TRACKTOID eel2": {
        "prefix": "CSurf_TrackToID",
        "scope": "eel2",
        "body": "CSurf_TrackToID(${1:MediaTrack track}, ${2:bool mcpView})$0",
        "description": ""
    },
    "RPR_CSURF_TRACKTOID python": {
        "prefix": "RPR_CSurf_TrackToID",
        "scope": "python",
        "body": "RPR_CSurf_TrackToID(${1:MediaTrack track}, ${2:Boolean mcpView})$0",
        "description": ""
    },
    "REAPER.DB2SLIDER lua": {
        "prefix": "reaper.DB2SLIDER",
        "scope": "lua",
        "body": "reaper.DB2SLIDER(${1:number x})$0",
        "description": ""
    },
    "DB2SLIDER eel2": {
        "prefix": "DB2SLIDER",
        "scope": "eel2",
        "body": "DB2SLIDER(${1:x})$0",
        "description": ""
    },
    "RPR_DB2SLIDER python": {
        "prefix": "RPR_DB2SLIDER",
        "scope": "python",
        "body": "RPR_DB2SLIDER(${1:Float x})$0",
        "description": ""
    },
    "REAPER.DELETEENVELOPEPOINTRANGE lua": {
        "prefix": "reaper.DeleteEnvelopePointRange",
        "scope": "lua",
        "body": "reaper.DeleteEnvelopePointRange(${1:TrackEnvelope envelope}, ${2:number time_start}, ${3:number time_end})$0",
        "description": "Delete a range of envelope points.\n\n"
    },
    "DELETEENVELOPEPOINTRANGE eel2": {
        "prefix": "DeleteEnvelopePointRange",
        "scope": "eel2",
        "body": "DeleteEnvelopePointRange(${1:TrackEnvelope envelope}, ${2:time_start}, ${3:time_end})$0",
        "description": "Delete a range of envelope points.\n\n"
    },
    "RPR_DELETEENVELOPEPOINTRANGE python": {
        "prefix": "RPR_DeleteEnvelopePointRange",
        "scope": "python",
        "body": "RPR_DeleteEnvelopePointRange(${1:TrackEnvelope envelope}, ${2:Float time_start}, ${3:Float time_end})$0",
        "description": "Delete a range of envelope points.\n\n"
    },
    "REAPER.DELETEENVELOPEPOINTRANGEEX lua": {
        "prefix": "reaper.DeleteEnvelopePointRangeEx",
        "scope": "lua",
        "body": "reaper.DeleteEnvelopePointRangeEx(${1:TrackEnvelope envelope}, ${2:integer autoitem_idx}, ${3:number time_start}, ${4:number time_end})$0",
        "description": "Delete a range of envelope points. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\n\n"
    },
    "DELETEENVELOPEPOINTRANGEEX eel2": {
        "prefix": "DeleteEnvelopePointRangeEx",
        "scope": "eel2",
        "body": "DeleteEnvelopePointRangeEx(${1:TrackEnvelope envelope}, ${2:int autoitem_idx}, ${3:time_start}, ${4:time_end})$0",
        "description": "Delete a range of envelope points. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\n\n"
    },
    "RPR_DELETEENVELOPEPOINTRANGEEX python": {
        "prefix": "RPR_DeleteEnvelopePointRangeEx",
        "scope": "python",
        "body": "RPR_DeleteEnvelopePointRangeEx(${1:TrackEnvelope envelope}, ${2:Int autoitem_idx}, ${3:Float time_start}, ${4:Float time_end})$0",
        "description": "Delete a range of envelope points. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\n\n"
    },
    "REAPER.DELETEEXTSTATE lua": {
        "prefix": "reaper.DeleteExtState",
        "scope": "lua",
        "body": "reaper.DeleteExtState(${1:string section}, ${2:string key}, ${3:boolean persist})$0",
        "description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState.\n\n"
    },
    "DELETEEXTSTATE eel2": {
        "prefix": "DeleteExtState",
        "scope": "eel2",
        "body": "DeleteExtState(\"${1:section}\", \"${2:key}\", ${3:bool persist})$0",
        "description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState.\n\n"
    },
    "RPR_DELETEEXTSTATE python": {
        "prefix": "RPR_DeleteExtState",
        "scope": "python",
        "body": "RPR_DeleteExtState(${1:String section}, ${2:String key}, ${3:Boolean persist})$0",
        "description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState.\n\n"
    },
    "REAPER.DELETEPROJECTMARKER lua": {
        "prefix": "reaper.DeleteProjectMarker",
        "scope": "lua",
        "body": "reaper.DeleteProjectMarker(${1:ReaProject proj}, ${2:integer markrgnindexnumber}, ${3:boolean isrgn})$0",
        "description": "Delete a marker. proj==NULL for the active project.\n\n"
    },
    "DELETEPROJECTMARKER eel2": {
        "prefix": "DeleteProjectMarker",
        "scope": "eel2",
        "body": "DeleteProjectMarker(${1:ReaProject proj}, ${2:int markrgnindexnumber}, ${3:bool isrgn})$0",
        "description": "Delete a marker. proj==NULL for the active project.\n\n"
    },
    "RPR_DELETEPROJECTMARKER python": {
        "prefix": "RPR_DeleteProjectMarker",
        "scope": "python",
        "body": "RPR_DeleteProjectMarker(${1:ReaProject proj}, ${2:Int markrgnindexnumber}, ${3:Boolean isrgn})$0",
        "description": "Delete a marker. proj==NULL for the active project.\n\n"
    },
    "REAPER.DELETEPROJECTMARKERBYINDEX lua": {
        "prefix": "reaper.DeleteProjectMarkerByIndex",
        "scope": "lua",
        "body": "reaper.DeleteProjectMarkerByIndex(${1:ReaProject proj}, ${2:integer markrgnidx})$0",
        "description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).\n\n"
    },
    "DELETEPROJECTMARKERBYINDEX eel2": {
        "prefix": "DeleteProjectMarkerByIndex",
        "scope": "eel2",
        "body": "DeleteProjectMarkerByIndex(${1:ReaProject proj}, ${2:int markrgnidx})$0",
        "description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).\n\n"
    },
    "RPR_DELETEPROJECTMARKERBYINDEX python": {
        "prefix": "RPR_DeleteProjectMarkerByIndex",
        "scope": "python",
        "body": "RPR_DeleteProjectMarkerByIndex(${1:ReaProject proj}, ${2:Int markrgnidx})$0",
        "description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).\n\n"
    },
    "REAPER.DELETETAKESTRETCHMARKERS lua": {
        "prefix": "reaper.DeleteTakeStretchMarkers",
        "scope": "lua",
        "body": "reaper.DeleteTakeStretchMarkers(${1:MediaItem_Take take}, ${2:integer idx}, ${3:optional number countIn})$0",
        "description": "Deletes one or more stretch markers. Returns number of stretch markers deleted.\n\n"
    },
    "DELETETAKESTRETCHMARKERS eel2": {
        "prefix": "DeleteTakeStretchMarkers",
        "scope": "eel2",
        "body": "DeleteTakeStretchMarkers(${1:MediaItem_Take take}, ${2:int idx}, ${3:optional int countIn})$0",
        "description": "Deletes one or more stretch markers. Returns number of stretch markers deleted.\n\n"
    },
    "RPR_DELETETAKESTRETCHMARKERS python": {
        "prefix": "RPR_DeleteTakeStretchMarkers",
        "scope": "python",
        "body": "RPR_DeleteTakeStretchMarkers(${1:MediaItem_Take take}, ${2:Int idx}, ${3:const int countInOptional})$0",
        "description": "Deletes one or more stretch markers. Returns number of stretch markers deleted.\n\n"
    },
    "REAPER.DELETETEMPOTIMESIGMARKER lua": {
        "prefix": "reaper.DeleteTempoTimeSigMarker",
        "scope": "lua",
        "body": "reaper.DeleteTempoTimeSigMarker(${1:ReaProject project}, ${2:integer markerindex})$0",
        "description": "Delete a tempo/time signature marker.\n\n"
    },
    "DELETETEMPOTIMESIGMARKER eel2": {
        "prefix": "DeleteTempoTimeSigMarker",
        "scope": "eel2",
        "body": "DeleteTempoTimeSigMarker(${1:ReaProject project}, ${2:int markerindex})$0",
        "description": "Delete a tempo/time signature marker.\n\n"
    },
    "RPR_DELETETEMPOTIMESIGMARKER python": {
        "prefix": "RPR_DeleteTempoTimeSigMarker",
        "scope": "python",
        "body": "RPR_DeleteTempoTimeSigMarker(${1:ReaProject project}, ${2:Int markerindex})$0",
        "description": "Delete a tempo/time signature marker.\n\n"
    },
    "REAPER.DELETETRACK lua": {
        "prefix": "reaper.DeleteTrack",
        "scope": "lua",
        "body": "reaper.DeleteTrack(${1:MediaTrack tr})$0",
        "description": "deletes a track\n\n"
    },
    "DELETETRACK eel2": {
        "prefix": "DeleteTrack",
        "scope": "eel2",
        "body": "DeleteTrack(${1:MediaTrack tr})$0",
        "description": "deletes a track\n\n"
    },
    "RPR_DELETETRACK python": {
        "prefix": "RPR_DeleteTrack",
        "scope": "python",
        "body": "RPR_DeleteTrack(${1:MediaTrack tr})$0",
        "description": "deletes a track\n\n"
    },
    "REAPER.DELETETRACKMEDIAITEM lua": {
        "prefix": "reaper.DeleteTrackMediaItem",
        "scope": "lua",
        "body": "reaper.DeleteTrackMediaItem(${1:MediaTrack tr}, ${2:MediaItem it})$0",
        "description": ""
    },
    "DELETETRACKMEDIAITEM eel2": {
        "prefix": "DeleteTrackMediaItem",
        "scope": "eel2",
        "body": "DeleteTrackMediaItem(${1:MediaTrack tr}, ${2:MediaItem it})$0",
        "description": ""
    },
    "RPR_DELETETRACKMEDIAITEM python": {
        "prefix": "RPR_DeleteTrackMediaItem",
        "scope": "python",
        "body": "RPR_DeleteTrackMediaItem(${1:MediaTrack tr}, ${2:MediaItem it})$0",
        "description": ""
    },
    "REAPER.DESTROYAUDIOACCESSOR lua": {
        "prefix": "reaper.DestroyAudioAccessor",
        "scope": "lua",
        "body": "reaper.DestroyAudioAccessor(${1:AudioAccessor accessor})$0",
        "description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples. \n\n"
    },
    "DESTROYAUDIOACCESSOR eel2": {
        "prefix": "DestroyAudioAccessor",
        "scope": "eel2",
        "body": "DestroyAudioAccessor(${1:AudioAccessor accessor})$0",
        "description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples. \n\n"
    },
    "RPR_DESTROYAUDIOACCESSOR python": {
        "prefix": "RPR_DestroyAudioAccessor",
        "scope": "python",
        "body": "RPR_DestroyAudioAccessor(${1:AudioAccessor accessor})$0",
        "description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples. \n\n"
    },
    "REAPER.DOCK_UPDATEDOCKID lua": {
        "prefix": "reaper.Dock_UpdateDockID",
        "scope": "lua",
        "body": "reaper.Dock_UpdateDockID(${1:string ident_str}, ${2:integer whichDock})$0",
        "description": "updates preference for docker window ident_str to be in dock whichDock on next open\n\n"
    },
    "DOCK_UPDATEDOCKID eel2": {
        "prefix": "Dock_UpdateDockID",
        "scope": "eel2",
        "body": "Dock_UpdateDockID(\"${1:ident_str}\", ${2:int whichDock})$0",
        "description": "updates preference for docker window ident_str to be in dock whichDock on next open\n\n"
    },
    "RPR_DOCK_UPDATEDOCKID python": {
        "prefix": "RPR_Dock_UpdateDockID",
        "scope": "python",
        "body": "RPR_Dock_UpdateDockID(${1:String ident_str}, ${2:Int whichDock})$0",
        "description": "updates preference for docker window ident_str to be in dock whichDock on next open\n\n"
    },
    "REAPER.DOCKISCHILDOFDOCK lua": {
        "prefix": "reaper.DockIsChildOfDock",
        "scope": "lua",
        "body": "reaper.DockIsChildOfDock(${1:HWND hwnd})$0",
        "description": "returns dock index that contains hwnd, or -1\n\n"
    },
    "DOCKISCHILDOFDOCK eel2": {
        "prefix": "DockIsChildOfDock",
        "scope": "eel2",
        "body": "DockIsChildOfDock(${1:HWND hwnd}, ${2:bool &isFloatingDocker})$0",
        "description": "returns dock index that contains hwnd, or -1\n\n"
    },
    "RPR_DOCKISCHILDOFDOCK python": {
        "prefix": "RPR_DockIsChildOfDock",
        "scope": "python",
        "body": "RPR_DockIsChildOfDock(${1:hwnd}, ${2:isFloatingDockerOut})$0",
        "description": "returns dock index that contains hwnd, or -1\n\n"
    },
    "REAPER.DOCKWINDOWACTIVATE lua": {
        "prefix": "reaper.DockWindowActivate",
        "scope": "lua",
        "body": "reaper.DockWindowActivate(${1:HWND hwnd})$0",
        "description": ""
    },
    "DOCKWINDOWACTIVATE eel2": {
        "prefix": "DockWindowActivate",
        "scope": "eel2",
        "body": "DockWindowActivate(${1:HWND hwnd})$0",
        "description": ""
    },
    "RPR_DOCKWINDOWACTIVATE python": {
        "prefix": "RPR_DockWindowActivate",
        "scope": "python",
        "body": "RPR_DockWindowActivate(${1:HWND hwnd})$0",
        "description": ""
    },
    "REAPER.DOCKWINDOWADD lua": {
        "prefix": "reaper.DockWindowAdd",
        "scope": "lua",
        "body": "reaper.DockWindowAdd(${1:HWND hwnd}, ${2:string name}, ${3:integer pos}, ${4:boolean allowShow})$0",
        "description": ""
    },
    "DOCKWINDOWADD eel2": {
        "prefix": "DockWindowAdd",
        "scope": "eel2",
        "body": "DockWindowAdd(${1:HWND hwnd}, \"${2:name}\", ${3:int pos}, ${4:bool allowShow})$0",
        "description": ""
    },
    "RPR_DOCKWINDOWADD python": {
        "prefix": "RPR_DockWindowAdd",
        "scope": "python",
        "body": "RPR_DockWindowAdd(${1:HWND hwnd}, ${2:String name}, ${3:Int pos}, ${4:Boolean allowShow})$0",
        "description": ""
    },
    "REAPER.DOCKWINDOWADDEX lua": {
        "prefix": "reaper.DockWindowAddEx",
        "scope": "lua",
        "body": "reaper.DockWindowAddEx(${1:HWND hwnd}, ${2:string name}, ${3:string identstr}, ${4:boolean allowShow})$0",
        "description": ""
    },
    "DOCKWINDOWADDEX eel2": {
        "prefix": "DockWindowAddEx",
        "scope": "eel2",
        "body": "DockWindowAddEx(${1:HWND hwnd}, \"${2:name}\", \"${3:identstr}\", ${4:bool allowShow})$0",
        "description": ""
    },
    "RPR_DOCKWINDOWADDEX python": {
        "prefix": "RPR_DockWindowAddEx",
        "scope": "python",
        "body": "RPR_DockWindowAddEx(${1:HWND hwnd}, ${2:String name}, ${3:String identstr}, ${4:Boolean allowShow})$0",
        "description": ""
    },
    "REAPER.DOCKWINDOWREFRESH lua": {
        "prefix": "reaper.DockWindowRefresh",
        "scope": "lua",
        "body": "reaper.DockWindowRefresh()$0",
        "description": ""
    },
    "DOCKWINDOWREFRESH eel2": {
        "prefix": "DockWindowRefresh",
        "scope": "eel2",
        "body": "DockWindowRefresh()$0",
        "description": ""
    },
    "RPR_DOCKWINDOWREFRESH python": {
        "prefix": "RPR_DockWindowRefresh",
        "scope": "python",
        "body": "RPR_DockWindowRefresh()$0",
        "description": ""
    },
    "REAPER.DOCKWINDOWREFRESHFORHWND lua": {
        "prefix": "reaper.DockWindowRefreshForHWND",
        "scope": "lua",
        "body": "reaper.DockWindowRefreshForHWND(${1:HWND hwnd})$0",
        "description": ""
    },
    "DOCKWINDOWREFRESHFORHWND eel2": {
        "prefix": "DockWindowRefreshForHWND",
        "scope": "eel2",
        "body": "DockWindowRefreshForHWND(${1:HWND hwnd})$0",
        "description": ""
    },
    "RPR_DOCKWINDOWREFRESHFORHWND python": {
        "prefix": "RPR_DockWindowRefreshForHWND",
        "scope": "python",
        "body": "RPR_DockWindowRefreshForHWND(${1:HWND hwnd})$0",
        "description": ""
    },
    "REAPER.DOCKWINDOWREMOVE lua": {
        "prefix": "reaper.DockWindowRemove",
        "scope": "lua",
        "body": "reaper.DockWindowRemove(${1:HWND hwnd})$0",
        "description": ""
    },
    "DOCKWINDOWREMOVE eel2": {
        "prefix": "DockWindowRemove",
        "scope": "eel2",
        "body": "DockWindowRemove(${1:HWND hwnd})$0",
        "description": ""
    },
    "RPR_DOCKWINDOWREMOVE python": {
        "prefix": "RPR_DockWindowRemove",
        "scope": "python",
        "body": "RPR_DockWindowRemove(${1:HWND hwnd})$0",
        "description": ""
    },
    "REAPER.EDITTEMPOTIMESIGMARKER lua": {
        "prefix": "reaper.EditTempoTimeSigMarker",
        "scope": "lua",
        "body": "reaper.EditTempoTimeSigMarker(${1:ReaProject project}, ${2:integer markerindex})$0",
        "description": "Open the tempo/time signature marker editor dialog.\n\n"
    },
    "EDITTEMPOTIMESIGMARKER eel2": {
        "prefix": "EditTempoTimeSigMarker",
        "scope": "eel2",
        "body": "EditTempoTimeSigMarker(${1:ReaProject project}, ${2:int markerindex})$0",
        "description": "Open the tempo/time signature marker editor dialog.\n\n"
    },
    "RPR_EDITTEMPOTIMESIGMARKER python": {
        "prefix": "RPR_EditTempoTimeSigMarker",
        "scope": "python",
        "body": "RPR_EditTempoTimeSigMarker(${1:ReaProject project}, ${2:Int markerindex})$0",
        "description": "Open the tempo/time signature marker editor dialog.\n\n"
    },
    "REAPER.ENSURENOTCOMPLETELYOFFSCREEN lua": {
        "prefix": "reaper.EnsureNotCompletelyOffscreen",
        "scope": "lua",
        "body": "reaper.EnsureNotCompletelyOffscreen()$0",
        "description": "call with a saved window rect for your window and it'll correct any positioning info.\n\n"
    },
    "ENSURENOTCOMPLETELYOFFSCREEN eel2": {
        "prefix": "EnsureNotCompletelyOffscreen",
        "scope": "eel2",
        "body": "EnsureNotCompletelyOffscreen(${1:int &rIn.left}, ${2:int &rIn.top}, ${3:int &rIn.right}, ${4:int &rIn.bot})$0",
        "description": "call with a saved window rect for your window and it'll correct any positioning info.\n\n"
    },
    "RPR_ENSURENOTCOMPLETELYOFFSCREEN python": {
        "prefix": "RPR_EnsureNotCompletelyOffscreen",
        "scope": "python",
        "body": "RPR_EnsureNotCompletelyOffscreen(${1:RECT rInOut})$0",
        "description": "call with a saved window rect for your window and it'll correct any positioning info.\n\n"
    },
    "REAPER.ENUMERATEFILES lua": {
        "prefix": "reaper.EnumerateFiles",
        "scope": "lua",
        "body": "reaper.EnumerateFiles(${1:string path}, ${2:integer fileindex})$0",
        "description": "List the files in the \"path\" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See EnumerateSubdirectories\n\n"
    },
    "ENUMERATEFILES eel2": {
        "prefix": "EnumerateFiles",
        "scope": "eel2",
        "body": "EnumerateFiles(${1:#retval}, \"${2:path}\", ${3:int fileindex})$0",
        "description": "List the files in the \"path\" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See EnumerateSubdirectories\n\n"
    },
    "RPR_ENUMERATEFILES python": {
        "prefix": "RPR_EnumerateFiles",
        "scope": "python",
        "body": "RPR_EnumerateFiles(${1:String path}, ${2:Int fileindex})$0",
        "description": "List the files in the \"path\" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See EnumerateSubdirectories\n\n"
    },
    "REAPER.ENUMERATESUBDIRECTORIES lua": {
        "prefix": "reaper.EnumerateSubdirectories",
        "scope": "lua",
        "body": "reaper.EnumerateSubdirectories(${1:string path}, ${2:integer subdirindex})$0",
        "description": "List the subdirectories in the \"path\" directory. Returns NULL (or empty string, in Lua) when all subdirectories have been listed. See EnumerateFiles\n\n"
    },
    "ENUMERATESUBDIRECTORIES eel2": {
        "prefix": "EnumerateSubdirectories",
        "scope": "eel2",
        "body": "EnumerateSubdirectories(${1:#retval}, \"${2:path}\", ${3:int subdirindex})$0",
        "description": "List the subdirectories in the \"path\" directory. Returns NULL (or empty string, in Lua) when all subdirectories have been listed. See EnumerateFiles\n\n"
    },
    "RPR_ENUMERATESUBDIRECTORIES python": {
        "prefix": "RPR_EnumerateSubdirectories",
        "scope": "python",
        "body": "RPR_EnumerateSubdirectories(${1:String path}, ${2:Int subdirindex})$0",
        "description": "List the subdirectories in the \"path\" directory. Returns NULL (or empty string, in Lua) when all subdirectories have been listed. See EnumerateFiles\n\n"
    },
    "REAPER.ENUMPITCHSHIFTMODES lua": {
        "prefix": "reaper.EnumPitchShiftModes",
        "scope": "lua",
        "body": "reaper.EnumPitchShiftModes(${1:integer mode})$0",
        "description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported\n\n"
    },
    "ENUMPITCHSHIFTMODES eel2": {
        "prefix": "EnumPitchShiftModes",
        "scope": "eel2",
        "body": "EnumPitchShiftModes(${1:int mode}, ${2:#str})$0",
        "description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported\n\n"
    },
    "RPR_ENUMPITCHSHIFTMODES python": {
        "prefix": "RPR_EnumPitchShiftModes",
        "scope": "python",
        "body": "RPR_EnumPitchShiftModes(${1:Int mode}, ${2:String strOut})$0",
        "description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported\n\n"
    },
    "REAPER.ENUMPITCHSHIFTSUBMODES lua": {
        "prefix": "reaper.EnumPitchShiftSubModes",
        "scope": "lua",
        "body": "reaper.EnumPitchShiftSubModes(${1:integer mode}, ${2:integer submode})$0",
        "description": "Returns submode name, or NULL\n\n"
    },
    "ENUMPITCHSHIFTSUBMODES eel2": {
        "prefix": "EnumPitchShiftSubModes",
        "scope": "eel2",
        "body": "EnumPitchShiftSubModes(${1:#retval}, ${2:int mode}, ${3:int submode})$0",
        "description": "Returns submode name, or NULL\n\n"
    },
    "RPR_ENUMPITCHSHIFTSUBMODES python": {
        "prefix": "RPR_EnumPitchShiftSubModes",
        "scope": "python",
        "body": "RPR_EnumPitchShiftSubModes(${1:Int mode}, ${2:Int submode})$0",
        "description": "Returns submode name, or NULL\n\n"
    },
    "REAPER.ENUMPROJECTMARKERS lua": {
        "prefix": "reaper.EnumProjectMarkers",
        "scope": "lua",
        "body": "reaper.EnumProjectMarkers(${1:integer idx})$0",
        "description": ""
    },
    "ENUMPROJECTMARKERS eel2": {
        "prefix": "EnumProjectMarkers",
        "scope": "eel2",
        "body": "EnumProjectMarkers(${1:int idx}, ${2:bool &isrgn}, ${3:&pos}, ${4:&rgnend}, ${5:#name}, ${6:int &markrgnindexnumber})$0",
        "description": ""
    },
    "RPR_ENUMPROJECTMARKERS python": {
        "prefix": "RPR_EnumProjectMarkers",
        "scope": "python",
        "body": "RPR_EnumProjectMarkers(${1:idx}, ${2:isrgnOut}, ${3:posOut}, ${4:rgnendOut}, ${5:nameOut}, ${6:markrgnindexnumberOut})$0",
        "description": ""
    },
    "REAPER.ENUMPROJECTMARKERS2 lua": {
        "prefix": "reaper.EnumProjectMarkers2",
        "scope": "lua",
        "body": "reaper.EnumProjectMarkers2(${1:ReaProject proj}, ${2:integer idx})$0",
        "description": ""
    },
    "ENUMPROJECTMARKERS2 eel2": {
        "prefix": "EnumProjectMarkers2",
        "scope": "eel2",
        "body": "EnumProjectMarkers2(${1:ReaProject proj}, ${2:int idx}, ${3:bool &isrgn}, ${4:&pos}, ${5:&rgnend}, ${6:#name}, ${7:int &markrgnindexnumber})$0",
        "description": ""
    },
    "RPR_ENUMPROJECTMARKERS2 python": {
        "prefix": "RPR_EnumProjectMarkers2",
        "scope": "python",
        "body": "RPR_EnumProjectMarkers2(${1:proj}, ${2:idx}, ${3:isrgnOut}, ${4:posOut}, ${5:rgnendOut}, ${6:nameOut}, ${7:markrgnindexnumberOut})$0",
        "description": ""
    },
    "REAPER.ENUMPROJECTMARKERS3 lua": {
        "prefix": "reaper.EnumProjectMarkers3",
        "scope": "lua",
        "body": "reaper.EnumProjectMarkers3(${1:ReaProject proj}, ${2:integer idx})$0",
        "description": ""
    },
    "ENUMPROJECTMARKERS3 eel2": {
        "prefix": "EnumProjectMarkers3",
        "scope": "eel2",
        "body": "EnumProjectMarkers3(${1:ReaProject proj}, ${2:int idx}, ${3:bool &isrgn}, ${4:&pos}, ${5:&rgnend}, ${6:#name}, ${7:int &markrgnindexnumber}, ${8:int &color})$0",
        "description": ""
    },
    "RPR_ENUMPROJECTMARKERS3 python": {
        "prefix": "RPR_EnumProjectMarkers3",
        "scope": "python",
        "body": "RPR_EnumProjectMarkers3(${1:proj}, ${2:idx}, ${3:isrgnOut}, ${4:posOut}, ${5:rgnendOut}, ${6:nameOut}, ${7:markrgnindexnumberOut}, ${8:colorOut})$0",
        "description": ""
    },
    "REAPER.ENUMPROJECTS lua": {
        "prefix": "reaper.EnumProjects",
        "scope": "lua",
        "body": "reaper.EnumProjects(${1:integer idx}, ${2:string projfn})$0",
        "description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.\n\n"
    },
    "ENUMPROJECTS eel2": {
        "prefix": "EnumProjects",
        "scope": "eel2",
        "body": "EnumProjects(${1:int idx}, ${2:#projfn})$0",
        "description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.\n\n"
    },
    "RPR_ENUMPROJECTS python": {
        "prefix": "RPR_EnumProjects",
        "scope": "python",
        "body": "RPR_EnumProjects(${1:idx}, ${2:projfn}, ${3:projfn_sz})$0",
        "description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.\n\n"
    },
    "REAPER.ENUMPROJEXTSTATE lua": {
        "prefix": "reaper.EnumProjExtState",
        "scope": "lua",
        "body": "reaper.EnumProjExtState(${1:ReaProject proj}, ${2:string extname}, ${3:integer idx})$0",
        "description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.\n\n"
    },
    "ENUMPROJEXTSTATE eel2": {
        "prefix": "EnumProjExtState",
        "scope": "eel2",
        "body": "EnumProjExtState(${1:ReaProject proj}, \"${2:extname}\", ${3:int idx}, ${4:optional #key}, ${5:optional #val})$0",
        "description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.\n\n"
    },
    "RPR_ENUMPROJEXTSTATE python": {
        "prefix": "RPR_EnumProjExtState",
        "scope": "python",
        "body": "RPR_EnumProjExtState(${1:proj}, ${2:extname}, ${3:idx}, ${4:keyOutOptional}, ${5:keyOutOptional_sz}, ${6:valOutOptional}, ${7:valOutOptional_sz})$0",
        "description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.\n\n"
    },
    "REAPER.ENUMREGIONRENDERMATRIX lua": {
        "prefix": "reaper.EnumRegionRenderMatrix",
        "scope": "lua",
        "body": "reaper.EnumRegionRenderMatrix(${1:ReaProject proj}, ${2:integer regionindex}, ${3:integer rendertrack})$0",
        "description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.\n\n"
    },
    "ENUMREGIONRENDERMATRIX eel2": {
        "prefix": "EnumRegionRenderMatrix",
        "scope": "eel2",
        "body": "EnumRegionRenderMatrix(${1:ReaProject proj}, ${2:int regionindex}, ${3:int rendertrack})$0",
        "description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.\n\n"
    },
    "RPR_ENUMREGIONRENDERMATRIX python": {
        "prefix": "RPR_EnumRegionRenderMatrix",
        "scope": "python",
        "body": "RPR_EnumRegionRenderMatrix(${1:ReaProject proj}, ${2:Int regionindex}, ${3:Int rendertrack})$0",
        "description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.\n\n"
    },
    "REAPER.ENUMTRACKMIDIPROGRAMNAMES lua": {
        "prefix": "reaper.EnumTrackMIDIProgramNames",
        "scope": "lua",
        "body": "reaper.EnumTrackMIDIProgramNames(${1:integer track}, ${2:integer programNumber}, ${3:string programName})$0",
        "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
    },
    "ENUMTRACKMIDIPROGRAMNAMES eel2": {
        "prefix": "EnumTrackMIDIProgramNames",
        "scope": "eel2",
        "body": "EnumTrackMIDIProgramNames(${1:int track}, ${2:int programNumber}, ${3:#programName})$0",
        "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
    },
    "RPR_ENUMTRACKMIDIPROGRAMNAMES python": {
        "prefix": "RPR_EnumTrackMIDIProgramNames",
        "scope": "python",
        "body": "RPR_EnumTrackMIDIProgramNames(${1:track}, ${2:programNumber}, ${3:programName}, ${4:programName_sz})$0",
        "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
    },
    "REAPER.ENUMTRACKMIDIPROGRAMNAMESEX lua": {
        "prefix": "reaper.EnumTrackMIDIProgramNamesEx",
        "scope": "lua",
        "body": "reaper.EnumTrackMIDIProgramNamesEx(${1:ReaProject proj}, ${2:MediaTrack track}, ${3:integer programNumber}, ${4:string programName})$0",
        "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
    },
    "ENUMTRACKMIDIPROGRAMNAMESEX eel2": {
        "prefix": "EnumTrackMIDIProgramNamesEx",
        "scope": "eel2",
        "body": "EnumTrackMIDIProgramNamesEx(${1:ReaProject proj}, ${2:MediaTrack track}, ${3:int programNumber}, ${4:#programName})$0",
        "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
    },
    "RPR_ENUMTRACKMIDIPROGRAMNAMESEX python": {
        "prefix": "RPR_EnumTrackMIDIProgramNamesEx",
        "scope": "python",
        "body": "RPR_EnumTrackMIDIProgramNamesEx(${1:proj}, ${2:track}, ${3:programNumber}, ${4:programName}, ${5:programName_sz})$0",
        "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
    },
    "REAPER.ENVELOPE_EVALUATE lua": {
        "prefix": "reaper.Envelope_Evaluate",
        "scope": "lua",
        "body": "reaper.Envelope_Evaluate(${1:TrackEnvelope envelope}, ${2:number time}, ${3:number samplerate}, ${4:integer samplesRequested})$0",
        "description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the seond derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.\n\n"
    },
    "ENVELOPE_EVALUATE eel2": {
        "prefix": "Envelope_Evaluate",
        "scope": "eel2",
        "body": "Envelope_Evaluate(${1:TrackEnvelope envelope}, ${2:time}, ${3:samplerate}, ${4:int samplesRequested}, ${5:optional &value}, ${6:optional &dVdS}, ${7:optional &ddVdS}, ${8:optional &dddVdS})$0",
        "description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the seond derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.\n\n"
    },
    "RPR_ENVELOPE_EVALUATE python": {
        "prefix": "RPR_Envelope_Evaluate",
        "scope": "python",
        "body": "RPR_Envelope_Evaluate(${1:envelope}, ${2:time}, ${3:samplerate}, ${4:samplesRequested}, ${5:valueOutOptional}, ${6:dVdSOutOptional}, ${7:ddVdSOutOptional}, ${8:dddVdSOutOptional})$0",
        "description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the seond derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.\n\n"
    },
    "REAPER.ENVELOPE_FORMATVALUE lua": {
        "prefix": "reaper.Envelope_FormatValue",
        "scope": "lua",
        "body": "reaper.Envelope_FormatValue(${1:TrackEnvelope env}, ${2:number value})$0",
        "description": "Formats the value of an envelope to a user-readable form\n\n"
    },
    "ENVELOPE_FORMATVALUE eel2": {
        "prefix": "Envelope_FormatValue",
        "scope": "eel2",
        "body": "Envelope_FormatValue(${1:TrackEnvelope env}, ${2:value}, ${3:#buf})$0",
        "description": "Formats the value of an envelope to a user-readable form\n\n"
    },
    "RPR_ENVELOPE_FORMATVALUE python": {
        "prefix": "RPR_Envelope_FormatValue",
        "scope": "python",
        "body": "RPR_Envelope_FormatValue(${1:env}, ${2:value}, ${3:bufOut}, ${4:bufOut_sz})$0",
        "description": "Formats the value of an envelope to a user-readable form\n\n"
    },
    "REAPER.ENVELOPE_GETPARENTTAKE lua": {
        "prefix": "reaper.Envelope_GetParentTake",
        "scope": "lua",
        "body": "reaper.Envelope_GetParentTake(${1:TrackEnvelope env})$0",
        "description": "If take envelope, gets the take from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.\n\n"
    },
    "ENVELOPE_GETPARENTTAKE eel2": {
        "prefix": "Envelope_GetParentTake",
        "scope": "eel2",
        "body": "Envelope_GetParentTake(${1:TrackEnvelope env}, ${2:optional int &index}, ${3:optional int &index2})$0",
        "description": "If take envelope, gets the take from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.\n\n"
    },
    "RPR_ENVELOPE_GETPARENTTAKE python": {
        "prefix": "RPR_Envelope_GetParentTake",
        "scope": "python",
        "body": "RPR_Envelope_GetParentTake(${1:env}, ${2:indexOutOptional}, ${3:index2OutOptional})$0",
        "description": "If take envelope, gets the take from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.\n\n"
    },
    "REAPER.ENVELOPE_GETPARENTTRACK lua": {
        "prefix": "reaper.Envelope_GetParentTrack",
        "scope": "lua",
        "body": "reaper.Envelope_GetParentTrack(${1:TrackEnvelope env})$0",
        "description": "If track envelope, gets the track from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.\n\n"
    },
    "ENVELOPE_GETPARENTTRACK eel2": {
        "prefix": "Envelope_GetParentTrack",
        "scope": "eel2",
        "body": "Envelope_GetParentTrack(${1:TrackEnvelope env}, ${2:optional int &index}, ${3:optional int &index2})$0",
        "description": "If track envelope, gets the track from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.\n\n"
    },
    "RPR_ENVELOPE_GETPARENTTRACK python": {
        "prefix": "RPR_Envelope_GetParentTrack",
        "scope": "python",
        "body": "RPR_Envelope_GetParentTrack(${1:env}, ${2:indexOutOptional}, ${3:index2OutOptional})$0",
        "description": "If track envelope, gets the track from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.\n\n"
    },
    "REAPER.ENVELOPE_SORTPOINTS lua": {
        "prefix": "reaper.Envelope_SortPoints",
        "scope": "lua",
        "body": "reaper.Envelope_SortPoints(${1:TrackEnvelope envelope})$0",
        "description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
    },
    "ENVELOPE_SORTPOINTS eel2": {
        "prefix": "Envelope_SortPoints",
        "scope": "eel2",
        "body": "Envelope_SortPoints(${1:TrackEnvelope envelope})$0",
        "description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
    },
    "RPR_ENVELOPE_SORTPOINTS python": {
        "prefix": "RPR_Envelope_SortPoints",
        "scope": "python",
        "body": "RPR_Envelope_SortPoints(${1:TrackEnvelope envelope})$0",
        "description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
    },
    "REAPER.ENVELOPE_SORTPOINTSEX lua": {
        "prefix": "reaper.Envelope_SortPointsEx",
        "scope": "lua",
        "body": "reaper.Envelope_SortPointsEx(${1:TrackEnvelope envelope}, ${2:integer autoitem_idx})$0",
        "description": "Sort envelope points by time. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
    },
    "ENVELOPE_SORTPOINTSEX eel2": {
        "prefix": "Envelope_SortPointsEx",
        "scope": "eel2",
        "body": "Envelope_SortPointsEx(${1:TrackEnvelope envelope}, ${2:int autoitem_idx})$0",
        "description": "Sort envelope points by time. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
    },
    "RPR_ENVELOPE_SORTPOINTSEX python": {
        "prefix": "RPR_Envelope_SortPointsEx",
        "scope": "python",
        "body": "RPR_Envelope_SortPointsEx(${1:TrackEnvelope envelope}, ${2:Int autoitem_idx})$0",
        "description": "Sort envelope points by time. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
    },
    "REAPER.EXECPROCESS lua": {
        "prefix": "reaper.ExecProcess",
        "scope": "lua",
        "body": "reaper.ExecProcess(${1:string cmdline}, ${2:integer timeoutmsec})$0",
        "description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize\n\n"
    },
    "EXECPROCESS eel2": {
        "prefix": "ExecProcess",
        "scope": "eel2",
        "body": "ExecProcess(${1:#retval}, \"${2:cmdline}\", ${3:int timeoutmsec})$0",
        "description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize\n\n"
    },
    "RPR_EXECPROCESS python": {
        "prefix": "RPR_ExecProcess",
        "scope": "python",
        "body": "RPR_ExecProcess(${1:String cmdline}, ${2:Int timeoutmsec})$0",
        "description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize\n\n"
    },
    "REAPER.FILE_EXISTS lua": {
        "prefix": "reaper.file_exists",
        "scope": "lua",
        "body": "reaper.file_exists(${1:string path})$0",
        "description": "returns true if path points to a valid, readable file\n\n"
    },
    "FILE_EXISTS eel2": {
        "prefix": "file_exists",
        "scope": "eel2",
        "body": "file_exists(\"${1:path}\")$0",
        "description": "returns true if path points to a valid, readable file\n\n"
    },
    "RPR_FILE_EXISTS python": {
        "prefix": "RPR_file_exists",
        "scope": "python",
        "body": "RPR_file_exists(${1:String path})$0",
        "description": "returns true if path points to a valid, readable file\n\n"
    },
    "REAPER.FINDTEMPOTIMESIGMARKER lua": {
        "prefix": "reaper.FindTempoTimeSigMarker",
        "scope": "lua",
        "body": "reaper.FindTempoTimeSigMarker(${1:ReaProject project}, ${2:number time})$0",
        "description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).\n\n"
    },
    "FINDTEMPOTIMESIGMARKER eel2": {
        "prefix": "FindTempoTimeSigMarker",
        "scope": "eel2",
        "body": "FindTempoTimeSigMarker(${1:ReaProject project}, ${2:time})$0",
        "description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).\n\n"
    },
    "RPR_FINDTEMPOTIMESIGMARKER python": {
        "prefix": "RPR_FindTempoTimeSigMarker",
        "scope": "python",
        "body": "RPR_FindTempoTimeSigMarker(${1:ReaProject project}, ${2:Float time})$0",
        "description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).\n\n"
    },
    "REAPER.FORMAT_TIMESTR lua": {
        "prefix": "reaper.format_timestr",
        "scope": "lua",
        "body": "reaper.format_timestr(${1:number tpos}, ${2:string buf})$0",
        "description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.\n\n"
    },
    "FORMAT_TIMESTR eel2": {
        "prefix": "format_timestr",
        "scope": "eel2",
        "body": "format_timestr(${1:tpos}, ${2:#buf})$0",
        "description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.\n\n"
    },
    "RPR_FORMAT_TIMESTR python": {
        "prefix": "RPR_format_timestr",
        "scope": "python",
        "body": "RPR_format_timestr(${1:tpos}, ${2:buf}, ${3:buf_sz})$0",
        "description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.\n\n"
    },
    "REAPER.FORMAT_TIMESTR_LEN lua": {
        "prefix": "reaper.format_timestr_len",
        "scope": "lua",
        "body": "reaper.format_timestr_len(${1:number tpos}, ${2:string buf}, ${3:number offset}, ${4:integer modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\noffset is start of where the length will be calculated from\n\n"
    },
    "FORMAT_TIMESTR_LEN eel2": {
        "prefix": "format_timestr_len",
        "scope": "eel2",
        "body": "format_timestr_len(${1:tpos}, ${2:#buf}, ${3:offset}, ${4:int modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\noffset is start of where the length will be calculated from\n\n"
    },
    "RPR_FORMAT_TIMESTR_LEN python": {
        "prefix": "RPR_format_timestr_len",
        "scope": "python",
        "body": "RPR_format_timestr_len(${1:tpos}, ${2:buf}, ${3:buf_sz}, ${4:offset}, ${5:modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\noffset is start of where the length will be calculated from\n\n"
    },
    "REAPER.FORMAT_TIMESTR_POS lua": {
        "prefix": "reaper.format_timestr_pos",
        "scope": "lua",
        "body": "reaper.format_timestr_pos(${1:number tpos}, ${2:string buf}, ${3:integer modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "FORMAT_TIMESTR_POS eel2": {
        "prefix": "format_timestr_pos",
        "scope": "eel2",
        "body": "format_timestr_pos(${1:tpos}, ${2:#buf}, ${3:int modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "RPR_FORMAT_TIMESTR_POS python": {
        "prefix": "RPR_format_timestr_pos",
        "scope": "python",
        "body": "RPR_format_timestr_pos(${1:tpos}, ${2:buf}, ${3:buf_sz}, ${4:modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "REAPER.GENGUID lua": {
        "prefix": "reaper.genGuid",
        "scope": "lua",
        "body": "reaper.genGuid(${1:string gGUID})$0",
        "description": ""
    },
    "GENGUID eel2": {
        "prefix": "genGuid",
        "scope": "eel2",
        "body": "genGuid(${1:#gGUID})$0",
        "description": ""
    },
    "RPR_GENGUID python": {
        "prefix": "RPR_genGuid",
        "scope": "python",
        "body": "RPR_genGuid(${1:GUID g})$0",
        "description": ""
    },
    "REAPER.GET_INI_FILE lua": {
        "prefix": "reaper.get_ini_file",
        "scope": "lua",
        "body": "reaper.get_ini_file()$0",
        "description": "Get reaper.ini full filename.\n\n"
    },
    "GET_INI_FILE eel2": {
        "prefix": "get_ini_file",
        "scope": "eel2",
        "body": "get_ini_file(${1:#retval})$0",
        "description": "Get reaper.ini full filename.\n\n"
    },
    "RPR_GET_INI_FILE python": {
        "prefix": "RPR_get_ini_file",
        "scope": "python",
        "body": "RPR_get_ini_file()$0",
        "description": "Get reaper.ini full filename.\n\n"
    },
    "REAPER.GETACTIVETAKE lua": {
        "prefix": "reaper.GetActiveTake",
        "scope": "lua",
        "body": "reaper.GetActiveTake(${1:MediaItem item})$0",
        "description": "get the active take in this item\n\n"
    },
    "GETACTIVETAKE eel2": {
        "prefix": "GetActiveTake",
        "scope": "eel2",
        "body": "GetActiveTake(${1:MediaItem item})$0",
        "description": "get the active take in this item\n\n"
    },
    "RPR_GETACTIVETAKE python": {
        "prefix": "RPR_GetActiveTake",
        "scope": "python",
        "body": "RPR_GetActiveTake(${1:MediaItem item})$0",
        "description": "get the active take in this item\n\n"
    },
    "REAPER.GETALLPROJECTPLAYSTATES lua": {
        "prefix": "reaper.GetAllProjectPlayStates",
        "scope": "lua",
        "body": "reaper.GetAllProjectPlayStates(${1:ReaProject ignoreProject})$0",
        "description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)\n\n"
    },
    "GETALLPROJECTPLAYSTATES eel2": {
        "prefix": "GetAllProjectPlayStates",
        "scope": "eel2",
        "body": "GetAllProjectPlayStates(${1:ReaProject ignoreProject})$0",
        "description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)\n\n"
    },
    "RPR_GETALLPROJECTPLAYSTATES python": {
        "prefix": "RPR_GetAllProjectPlayStates",
        "scope": "python",
        "body": "RPR_GetAllProjectPlayStates(${1:ReaProject ignoreProject})$0",
        "description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)\n\n"
    },
    "REAPER.GETAPPVERSION lua": {
        "prefix": "reaper.GetAppVersion",
        "scope": "lua",
        "body": "reaper.GetAppVersion()$0",
        "description": ""
    },
    "GETAPPVERSION eel2": {
        "prefix": "GetAppVersion",
        "scope": "eel2",
        "body": "GetAppVersion(${1:#retval})$0",
        "description": ""
    },
    "RPR_GETAPPVERSION python": {
        "prefix": "RPR_GetAppVersion",
        "scope": "python",
        "body": "RPR_GetAppVersion()$0",
        "description": ""
    },
    "REAPER.GETAUDIOACCESSORENDTIME lua": {
        "prefix": "reaper.GetAudioAccessorEndTime",
        "scope": "lua",
        "body": "reaper.GetAudioAccessorEndTime(${1:AudioAccessor accessor})$0",
        "description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorSamples.\n\n"
    },
    "GETAUDIOACCESSORENDTIME eel2": {
        "prefix": "GetAudioAccessorEndTime",
        "scope": "eel2",
        "body": "GetAudioAccessorEndTime(${1:AudioAccessor accessor})$0",
        "description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorSamples.\n\n"
    },
    "RPR_GETAUDIOACCESSORENDTIME python": {
        "prefix": "RPR_GetAudioAccessorEndTime",
        "scope": "python",
        "body": "RPR_GetAudioAccessorEndTime(${1:AudioAccessor accessor})$0",
        "description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorSamples.\n\n"
    },
    "REAPER.GETAUDIOACCESSORHASH lua": {
        "prefix": "reaper.GetAudioAccessorHash",
        "scope": "lua",
        "body": "reaper.GetAudioAccessorHash(${1:AudioAccessor accessor}, ${2:string hashNeed128})$0",
        "description": "Get a short hash string (128 chars or less) that will change only if the underlying samples change. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "GETAUDIOACCESSORHASH eel2": {
        "prefix": "GetAudioAccessorHash",
        "scope": "eel2",
        "body": "GetAudioAccessorHash(${1:AudioAccessor accessor}, ${2:#hashNeed128})$0",
        "description": "Get a short hash string (128 chars or less) that will change only if the underlying samples change. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "RPR_GETAUDIOACCESSORHASH python": {
        "prefix": "RPR_GetAudioAccessorHash",
        "scope": "python",
        "body": "RPR_GetAudioAccessorHash(${1:accessor}, ${2:hashNeed128})$0",
        "description": "Get a short hash string (128 chars or less) that will change only if the underlying samples change. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "REAPER.GETAUDIOACCESSORSAMPLES lua": {
        "prefix": "reaper.GetAudioAccessorSamples",
        "scope": "lua",
        "body": "reaper.GetAudioAccessorSamples(${1:AudioAccessor accessor}, ${2:integer samplerate}, ${3:integer numchannels}, ${4:number starttime_sec}, ${5:integer numsamplesperchannel}, ${6:reaper.array samplebuffer})$0",
        "description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\n\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\n\ntr = RPR_GetTrack(0, 0)\n\naa = RPR_CreateTrackAudioAccessor(tr)\n\nbuf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\n\npos = 0.0\n\n(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n\n# buf now holds the first 2*1024 audio samples from the track.\n\n# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.\n\n"
    },
    "GETAUDIOACCESSORSAMPLES eel2": {
        "prefix": "GetAudioAccessorSamples",
        "scope": "eel2",
        "body": "GetAudioAccessorSamples(${1:AudioAccessor accessor}, ${2:int samplerate}, ${3:int numchannels}, ${4:starttime_sec}, ${5:int numsamplesperchannel}, ${6:buffer_ptr samplebuffer})$0",
        "description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\n\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\n\ntr = RPR_GetTrack(0, 0)\n\naa = RPR_CreateTrackAudioAccessor(tr)\n\nbuf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\n\npos = 0.0\n\n(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n\n# buf now holds the first 2*1024 audio samples from the track.\n\n# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.\n\n"
    },
    "RPR_GETAUDIOACCESSORSAMPLES python": {
        "prefix": "RPR_GetAudioAccessorSamples",
        "scope": "python",
        "body": "RPR_GetAudioAccessorSamples(${1:accessor}, ${2:samplerate}, ${3:numchannels}, ${4:starttime_sec}, ${5:numsamplesperchannel}, ${6:samplebuffer})$0",
        "description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\n\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\n\ntr = RPR_GetTrack(0, 0)\n\naa = RPR_CreateTrackAudioAccessor(tr)\n\nbuf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\n\npos = 0.0\n\n(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n\n# buf now holds the first 2*1024 audio samples from the track.\n\n# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.\n\n"
    },
    "REAPER.GETAUDIOACCESSORSTARTTIME lua": {
        "prefix": "reaper.GetAudioAccessorStartTime",
        "scope": "lua",
        "body": "reaper.GetAudioAccessorStartTime(${1:AudioAccessor accessor})$0",
        "description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "GETAUDIOACCESSORSTARTTIME eel2": {
        "prefix": "GetAudioAccessorStartTime",
        "scope": "eel2",
        "body": "GetAudioAccessorStartTime(${1:AudioAccessor accessor})$0",
        "description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "RPR_GETAUDIOACCESSORSTARTTIME python": {
        "prefix": "RPR_GetAudioAccessorStartTime",
        "scope": "python",
        "body": "RPR_GetAudioAccessorStartTime(${1:AudioAccessor accessor})$0",
        "description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorHash, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
    },
    "REAPER.GETCONFIGWANTSDOCK lua": {
        "prefix": "reaper.GetConfigWantsDock",
        "scope": "lua",
        "body": "reaper.GetConfigWantsDock(${1:string ident_str})$0",
        "description": "gets the dock ID desired by ident_str, if any\n\n"
    },
    "GETCONFIGWANTSDOCK eel2": {
        "prefix": "GetConfigWantsDock",
        "scope": "eel2",
        "body": "GetConfigWantsDock(\"${1:ident_str}\")$0",
        "description": "gets the dock ID desired by ident_str, if any\n\n"
    },
    "RPR_GETCONFIGWANTSDOCK python": {
        "prefix": "RPR_GetConfigWantsDock",
        "scope": "python",
        "body": "RPR_GetConfigWantsDock(${1:String ident_str})$0",
        "description": "gets the dock ID desired by ident_str, if any\n\n"
    },
    "REAPER.GETCURRENTPROJECTINLOADSAVE lua": {
        "prefix": "reaper.GetCurrentProjectInLoadSave",
        "scope": "lua",
        "body": "reaper.GetCurrentProjectInLoadSave()$0",
        "description": "returns current project if in load/save (usually only used from project_config_extension_t)\n\n"
    },
    "GETCURRENTPROJECTINLOADSAVE eel2": {
        "prefix": "GetCurrentProjectInLoadSave",
        "scope": "eel2",
        "body": "GetCurrentProjectInLoadSave()$0",
        "description": "returns current project if in load/save (usually only used from project_config_extension_t)\n\n"
    },
    "RPR_GETCURRENTPROJECTINLOADSAVE python": {
        "prefix": "RPR_GetCurrentProjectInLoadSave",
        "scope": "python",
        "body": "RPR_GetCurrentProjectInLoadSave()$0",
        "description": "returns current project if in load/save (usually only used from project_config_extension_t)\n\n"
    },
    "REAPER.GETCURSORCONTEXT lua": {
        "prefix": "reaper.GetCursorContext",
        "scope": "lua",
        "body": "reaper.GetCursorContext()$0",
        "description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown\n\n"
    },
    "GETCURSORCONTEXT eel2": {
        "prefix": "GetCursorContext",
        "scope": "eel2",
        "body": "GetCursorContext()$0",
        "description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown\n\n"
    },
    "RPR_GETCURSORCONTEXT python": {
        "prefix": "RPR_GetCursorContext",
        "scope": "python",
        "body": "RPR_GetCursorContext()$0",
        "description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown\n\n"
    },
    "REAPER.GETCURSORCONTEXT2 lua": {
        "prefix": "reaper.GetCursorContext2",
        "scope": "lua",
        "body": "reaper.GetCursorContext2(${1:boolean want_last_valid})$0",
        "description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)\n\n"
    },
    "GETCURSORCONTEXT2 eel2": {
        "prefix": "GetCursorContext2",
        "scope": "eel2",
        "body": "GetCursorContext2(${1:bool want_last_valid})$0",
        "description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)\n\n"
    },
    "RPR_GETCURSORCONTEXT2 python": {
        "prefix": "RPR_GetCursorContext2",
        "scope": "python",
        "body": "RPR_GetCursorContext2(${1:Boolean want_last_valid})$0",
        "description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)\n\n"
    },
    "REAPER.GETCURSORPOSITION lua": {
        "prefix": "reaper.GetCursorPosition",
        "scope": "lua",
        "body": "reaper.GetCursorPosition()$0",
        "description": "edit cursor position\n\n"
    },
    "GETCURSORPOSITION eel2": {
        "prefix": "GetCursorPosition",
        "scope": "eel2",
        "body": "GetCursorPosition()$0",
        "description": "edit cursor position\n\n"
    },
    "RPR_GETCURSORPOSITION python": {
        "prefix": "RPR_GetCursorPosition",
        "scope": "python",
        "body": "RPR_GetCursorPosition()$0",
        "description": "edit cursor position\n\n"
    },
    "REAPER.GETCURSORPOSITIONEX lua": {
        "prefix": "reaper.GetCursorPositionEx",
        "scope": "lua",
        "body": "reaper.GetCursorPositionEx(${1:ReaProject proj})$0",
        "description": "edit cursor position\n\n"
    },
    "GETCURSORPOSITIONEX eel2": {
        "prefix": "GetCursorPositionEx",
        "scope": "eel2",
        "body": "GetCursorPositionEx(${1:ReaProject proj})$0",
        "description": "edit cursor position\n\n"
    },
    "RPR_GETCURSORPOSITIONEX python": {
        "prefix": "RPR_GetCursorPositionEx",
        "scope": "python",
        "body": "RPR_GetCursorPositionEx(${1:ReaProject proj})$0",
        "description": "edit cursor position\n\n"
    },
    "REAPER.GETDISPLAYEDMEDIAITEMCOLOR lua": {
        "prefix": "reaper.GetDisplayedMediaItemColor",
        "scope": "lua",
        "body": "reaper.GetDisplayedMediaItemColor(${1:MediaItem item})$0",
        "description": "see GetDisplayedMediaItemColor2.\n\n"
    },
    "GETDISPLAYEDMEDIAITEMCOLOR eel2": {
        "prefix": "GetDisplayedMediaItemColor",
        "scope": "eel2",
        "body": "GetDisplayedMediaItemColor(${1:MediaItem item})$0",
        "description": "see GetDisplayedMediaItemColor2.\n\n"
    },
    "RPR_GETDISPLAYEDMEDIAITEMCOLOR python": {
        "prefix": "RPR_GetDisplayedMediaItemColor",
        "scope": "python",
        "body": "RPR_GetDisplayedMediaItemColor(${1:MediaItem item})$0",
        "description": "see GetDisplayedMediaItemColor2.\n\n"
    },
    "REAPER.GETDISPLAYEDMEDIAITEMCOLOR2 lua": {
        "prefix": "reaper.GetDisplayedMediaItemColor2",
        "scope": "lua",
        "body": "reaper.GetDisplayedMediaItemColor2(${1:MediaItem item}, ${2:MediaItem_Take take})$0",
        "description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not black.\n\n"
    },
    "GETDISPLAYEDMEDIAITEMCOLOR2 eel2": {
        "prefix": "GetDisplayedMediaItemColor2",
        "scope": "eel2",
        "body": "GetDisplayedMediaItemColor2(${1:MediaItem item}, ${2:MediaItem_Take take})$0",
        "description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not black.\n\n"
    },
    "RPR_GETDISPLAYEDMEDIAITEMCOLOR2 python": {
        "prefix": "RPR_GetDisplayedMediaItemColor2",
        "scope": "python",
        "body": "RPR_GetDisplayedMediaItemColor2(${1:MediaItem item}, ${2:MediaItem_Take take})$0",
        "description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not black.\n\n"
    },
    "REAPER.GETENVELOPENAME lua": {
        "prefix": "reaper.GetEnvelopeName",
        "scope": "lua",
        "body": "reaper.GetEnvelopeName(${1:TrackEnvelope env}, ${2:string buf})$0",
        "description": ""
    },
    "GETENVELOPENAME eel2": {
        "prefix": "GetEnvelopeName",
        "scope": "eel2",
        "body": "GetEnvelopeName(${1:TrackEnvelope env}, ${2:#buf})$0",
        "description": ""
    },
    "RPR_GETENVELOPENAME python": {
        "prefix": "RPR_GetEnvelopeName",
        "scope": "python",
        "body": "RPR_GetEnvelopeName(${1:env}, ${2:buf}, ${3:buf_sz})$0",
        "description": ""
    },
    "REAPER.GETENVELOPEPOINT lua": {
        "prefix": "reaper.GetEnvelopePoint",
        "scope": "lua",
        "body": "reaper.GetEnvelopePoint(${1:TrackEnvelope envelope}, ${2:integer ptidx})$0",
        "description": "Get the attributes of an envelope point. See GetEnvelopePointByTime, SetEnvelopePoint.\n\n"
    },
    "GETENVELOPEPOINT eel2": {
        "prefix": "GetEnvelopePoint",
        "scope": "eel2",
        "body": "GetEnvelopePoint(${1:TrackEnvelope envelope}, ${2:int ptidx}, ${3:optional &time}, ${4:optional &value}, ${5:optional int &shape}, ${6:optional &tension}, ${7:optional bool &selected})$0",
        "description": "Get the attributes of an envelope point. See GetEnvelopePointByTime, SetEnvelopePoint.\n\n"
    },
    "RPR_GETENVELOPEPOINT python": {
        "prefix": "RPR_GetEnvelopePoint",
        "scope": "python",
        "body": "RPR_GetEnvelopePoint(${1:envelope}, ${2:ptidx}, ${3:timeOutOptional}, ${4:valueOutOptional}, ${5:shapeOutOptional}, ${6:tensionOutOptional}, ${7:selectedOutOptional})$0",
        "description": "Get the attributes of an envelope point. See GetEnvelopePointByTime, SetEnvelopePoint.\n\n"
    },
    "REAPER.GETENVELOPEPOINTBYTIME lua": {
        "prefix": "reaper.GetEnvelopePointByTime",
        "scope": "lua",
        "body": "reaper.GetEnvelopePointByTime(${1:TrackEnvelope envelope}, ${2:number time})$0",
        "description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate.\n\n"
    },
    "GETENVELOPEPOINTBYTIME eel2": {
        "prefix": "GetEnvelopePointByTime",
        "scope": "eel2",
        "body": "GetEnvelopePointByTime(${1:TrackEnvelope envelope}, ${2:time})$0",
        "description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate.\n\n"
    },
    "RPR_GETENVELOPEPOINTBYTIME python": {
        "prefix": "RPR_GetEnvelopePointByTime",
        "scope": "python",
        "body": "RPR_GetEnvelopePointByTime(${1:TrackEnvelope envelope}, ${2:Float time})$0",
        "description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate.\n\n"
    },
    "REAPER.GETENVELOPEPOINTBYTIMEEX lua": {
        "prefix": "reaper.GetEnvelopePointByTimeEx",
        "scope": "lua",
        "body": "reaper.GetEnvelopePointByTimeEx(${1:TrackEnvelope envelope}, ${2:integer autoitem_idx}, ${3:number time})$0",
        "description": "Returns the envelope point at or immediately prior to the given time position. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate.\n\n"
    },
    "GETENVELOPEPOINTBYTIMEEX eel2": {
        "prefix": "GetEnvelopePointByTimeEx",
        "scope": "eel2",
        "body": "GetEnvelopePointByTimeEx(${1:TrackEnvelope envelope}, ${2:int autoitem_idx}, ${3:time})$0",
        "description": "Returns the envelope point at or immediately prior to the given time position. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate.\n\n"
    },
    "RPR_GETENVELOPEPOINTBYTIMEEX python": {
        "prefix": "RPR_GetEnvelopePointByTimeEx",
        "scope": "python",
        "body": "RPR_GetEnvelopePointByTimeEx(${1:TrackEnvelope envelope}, ${2:Int autoitem_idx}, ${3:Float time})$0",
        "description": "Returns the envelope point at or immediately prior to the given time position. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, Envelope_Evaluate.\n\n"
    },
    "REAPER.GETENVELOPEPOINTEX lua": {
        "prefix": "reaper.GetEnvelopePointEx",
        "scope": "lua",
        "body": "reaper.GetEnvelopePointEx(${1:TrackEnvelope envelope}, ${2:integer autoitem_idx}, ${3:integer ptidx})$0",
        "description": "Get the attributes of an envelope point. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePointByTime, SetEnvelopePoint.\n\n"
    },
    "GETENVELOPEPOINTEX eel2": {
        "prefix": "GetEnvelopePointEx",
        "scope": "eel2",
        "body": "GetEnvelopePointEx(${1:TrackEnvelope envelope}, ${2:int autoitem_idx}, ${3:int ptidx}, ${4:optional &time}, ${5:optional &value}, ${6:optional int &shape}, ${7:optional &tension}, ${8:optional bool &selected})$0",
        "description": "Get the attributes of an envelope point. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePointByTime, SetEnvelopePoint.\n\n"
    },
    "RPR_GETENVELOPEPOINTEX python": {
        "prefix": "RPR_GetEnvelopePointEx",
        "scope": "python",
        "body": "RPR_GetEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:ptidx}, ${4:timeOutOptional}, ${5:valueOutOptional}, ${6:shapeOutOptional}, ${7:tensionOutOptional}, ${8:selectedOutOptional})$0",
        "description": "Get the attributes of an envelope point. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePointByTime, SetEnvelopePoint.\n\n"
    },
    "REAPER.GETENVELOPESCALINGMODE lua": {
        "prefix": "reaper.GetEnvelopeScalingMode",
        "scope": "lua",
        "body": "reaper.GetEnvelopeScalingMode(${1:TrackEnvelope env})$0",
        "description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.\n\n"
    },
    "GETENVELOPESCALINGMODE eel2": {
        "prefix": "GetEnvelopeScalingMode",
        "scope": "eel2",
        "body": "GetEnvelopeScalingMode(${1:TrackEnvelope env})$0",
        "description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.\n\n"
    },
    "RPR_GETENVELOPESCALINGMODE python": {
        "prefix": "RPR_GetEnvelopeScalingMode",
        "scope": "python",
        "body": "RPR_GetEnvelopeScalingMode(${1:TrackEnvelope env})$0",
        "description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.\n\n"
    },
    "REAPER.GETENVELOPESTATECHUNK lua": {
        "prefix": "reaper.GetEnvelopeStateChunk",
        "scope": "lua",
        "body": "reaper.GetEnvelopeStateChunk(${1:TrackEnvelope env}, ${2:string str}, ${3:boolean isundo})$0",
        "description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "GETENVELOPESTATECHUNK eel2": {
        "prefix": "GetEnvelopeStateChunk",
        "scope": "eel2",
        "body": "GetEnvelopeStateChunk(${1:TrackEnvelope env}, ${2:#str}, ${3:bool isundo})$0",
        "description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "RPR_GETENVELOPESTATECHUNK python": {
        "prefix": "RPR_GetEnvelopeStateChunk",
        "scope": "python",
        "body": "RPR_GetEnvelopeStateChunk(${1:env}, ${2:strNeedBig}, ${3:strNeedBig_sz}, ${4:isundoOptional})$0",
        "description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "REAPER.GETEXEPATH lua": {
        "prefix": "reaper.GetExePath",
        "scope": "lua",
        "body": "reaper.GetExePath()$0",
        "description": "returns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER\n\n"
    },
    "GETEXEPATH eel2": {
        "prefix": "GetExePath",
        "scope": "eel2",
        "body": "GetExePath(${1:#retval})$0",
        "description": "returns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER\n\n"
    },
    "RPR_GETEXEPATH python": {
        "prefix": "RPR_GetExePath",
        "scope": "python",
        "body": "RPR_GetExePath()$0",
        "description": "returns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER\n\n"
    },
    "REAPER.GETEXTSTATE lua": {
        "prefix": "reaper.GetExtState",
        "scope": "lua",
        "body": "reaper.GetExtState(${1:string section}, ${2:string key})$0",
        "description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.\n\n"
    },
    "GETEXTSTATE eel2": {
        "prefix": "GetExtState",
        "scope": "eel2",
        "body": "GetExtState(${1:#retval}, \"${2:section}\", \"${3:key}\")$0",
        "description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.\n\n"
    },
    "RPR_GETEXTSTATE python": {
        "prefix": "RPR_GetExtState",
        "scope": "python",
        "body": "RPR_GetExtState(${1:String section}, ${2:String key})$0",
        "description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.\n\n"
    },
    "REAPER.GETFOCUSEDFX lua": {
        "prefix": "reaper.GetFocusedFX",
        "scope": "lua",
        "body": "reaper.GetFocusedFX()$0",
        "description": "Returns 1 if a track FX window has focus, 2 if an item FX window has focus, 0 if no FX window has focus. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber and fxnumber are zero-based. If item FX, fxnumber will have the high word be the take index, the low word the FX index. See GetLastTouchedFX.\n\n"
    },
    "GETFOCUSEDFX eel2": {
        "prefix": "GetFocusedFX",
        "scope": "eel2",
        "body": "GetFocusedFX(${1:int &tracknumber}, ${2:int &itemnumber}, ${3:int &fxnumber})$0",
        "description": "Returns 1 if a track FX window has focus, 2 if an item FX window has focus, 0 if no FX window has focus. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber and fxnumber are zero-based. If item FX, fxnumber will have the high word be the take index, the low word the FX index. See GetLastTouchedFX.\n\n"
    },
    "RPR_GETFOCUSEDFX python": {
        "prefix": "RPR_GetFocusedFX",
        "scope": "python",
        "body": "RPR_GetFocusedFX(${1:tracknumberOut}, ${2:itemnumberOut}, ${3:fxnumberOut})$0",
        "description": "Returns 1 if a track FX window has focus, 2 if an item FX window has focus, 0 if no FX window has focus. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber and fxnumber are zero-based. If item FX, fxnumber will have the high word be the take index, the low word the FX index. See GetLastTouchedFX.\n\n"
    },
    "REAPER.GETFREEDISKSPACEFORRECORDPATH lua": {
        "prefix": "reaper.GetFreeDiskSpaceForRecordPath",
        "scope": "lua",
        "body": "reaper.GetFreeDiskSpaceForRecordPath(${1:ReaProject proj}, ${2:integer pathidx})$0",
        "description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.\n\n"
    },
    "GETFREEDISKSPACEFORRECORDPATH eel2": {
        "prefix": "GetFreeDiskSpaceForRecordPath",
        "scope": "eel2",
        "body": "GetFreeDiskSpaceForRecordPath(${1:ReaProject proj}, ${2:int pathidx})$0",
        "description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.\n\n"
    },
    "RPR_GETFREEDISKSPACEFORRECORDPATH python": {
        "prefix": "RPR_GetFreeDiskSpaceForRecordPath",
        "scope": "python",
        "body": "RPR_GetFreeDiskSpaceForRecordPath(${1:ReaProject proj}, ${2:Int pathidx})$0",
        "description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.\n\n"
    },
    "REAPER.GETFXENVELOPE lua": {
        "prefix": "reaper.GetFXEnvelope",
        "scope": "lua",
        "body": "reaper.GetFXEnvelope(${1:MediaTrack track}, ${2:integer fxindex}, ${3:integer parameterindex}, ${4:boolean create})$0",
        "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
    },
    "GETFXENVELOPE eel2": {
        "prefix": "GetFXEnvelope",
        "scope": "eel2",
        "body": "GetFXEnvelope(${1:MediaTrack track}, ${2:int fxindex}, ${3:int parameterindex}, ${4:bool create})$0",
        "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
    },
    "RPR_GETFXENVELOPE python": {
        "prefix": "RPR_GetFXEnvelope",
        "scope": "python",
        "body": "RPR_GetFXEnvelope(${1:MediaTrack track}, ${2:Int fxindex}, ${3:Int parameterindex}, ${4:Boolean create})$0",
        "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
    },
    "REAPER.GETGLOBALAUTOMATIONOVERRIDE lua": {
        "prefix": "reaper.GetGlobalAutomationOverride",
        "scope": "lua",
        "body": "reaper.GetGlobalAutomationOverride()$0",
        "description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass\n\n"
    },
    "GETGLOBALAUTOMATIONOVERRIDE eel2": {
        "prefix": "GetGlobalAutomationOverride",
        "scope": "eel2",
        "body": "GetGlobalAutomationOverride()$0",
        "description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass\n\n"
    },
    "RPR_GETGLOBALAUTOMATIONOVERRIDE python": {
        "prefix": "RPR_GetGlobalAutomationOverride",
        "scope": "python",
        "body": "RPR_GetGlobalAutomationOverride()$0",
        "description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass\n\n"
    },
    "REAPER.GETHZOOMLEVEL lua": {
        "prefix": "reaper.GetHZoomLevel",
        "scope": "lua",
        "body": "reaper.GetHZoomLevel()$0",
        "description": "returns pixels/second\n\n"
    },
    "GETHZOOMLEVEL eel2": {
        "prefix": "GetHZoomLevel",
        "scope": "eel2",
        "body": "GetHZoomLevel()$0",
        "description": "returns pixels/second\n\n"
    },
    "RPR_GETHZOOMLEVEL python": {
        "prefix": "RPR_GetHZoomLevel",
        "scope": "python",
        "body": "RPR_GetHZoomLevel()$0",
        "description": "returns pixels/second\n\n"
    },
    "REAPER.GETINPUTCHANNELNAME lua": {
        "prefix": "reaper.GetInputChannelName",
        "scope": "lua",
        "body": "reaper.GetInputChannelName(${1:integer channelIndex})$0",
        "description": ""
    },
    "GETINPUTCHANNELNAME eel2": {
        "prefix": "GetInputChannelName",
        "scope": "eel2",
        "body": "GetInputChannelName(${1:#retval}, ${2:int channelIndex})$0",
        "description": ""
    },
    "RPR_GETINPUTCHANNELNAME python": {
        "prefix": "RPR_GetInputChannelName",
        "scope": "python",
        "body": "RPR_GetInputChannelName(${1:Int channelIndex})$0",
        "description": ""
    },
    "REAPER.GETINPUTOUTPUTLATENCY lua": {
        "prefix": "reaper.GetInputOutputLatency",
        "scope": "lua",
        "body": "reaper.GetInputOutputLatency()$0",
        "description": "Gets the audio device input/output latency in samples\n\n"
    },
    "GETINPUTOUTPUTLATENCY eel2": {
        "prefix": "GetInputOutputLatency",
        "scope": "eel2",
        "body": "GetInputOutputLatency(${1:int &inputlatency}, ${2:int &outputLatency})$0",
        "description": "Gets the audio device input/output latency in samples\n\n"
    },
    "RPR_GETINPUTOUTPUTLATENCY python": {
        "prefix": "RPR_GetInputOutputLatency",
        "scope": "python",
        "body": "RPR_GetInputOutputLatency(${1:inputlatencyOut}, ${2:outputLatencyOut})$0",
        "description": "Gets the audio device input/output latency in samples\n\n"
    },
    "REAPER.GETITEMEDITINGTIME2 lua": {
        "prefix": "reaper.GetItemEditingTime2",
        "scope": "lua",
        "body": "reaper.GetItemEditingTime2()$0",
        "description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move\n\n"
    },
    "GETITEMEDITINGTIME2 eel2": {
        "prefix": "GetItemEditingTime2",
        "scope": "eel2",
        "body": "GetItemEditingTime2(${1:PCM_source &which_item}, ${2:int &flags})$0",
        "description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move\n\n"
    },
    "RPR_GETITEMEDITINGTIME2 python": {
        "prefix": "RPR_GetItemEditingTime2",
        "scope": "python",
        "body": "RPR_GetItemEditingTime2(${1:which_itemOut}, ${2:flagsOut})$0",
        "description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move\n\n"
    },
    "REAPER.GETITEMPROJECTCONTEXT lua": {
        "prefix": "reaper.GetItemProjectContext",
        "scope": "lua",
        "body": "reaper.GetItemProjectContext(${1:MediaItem item})$0",
        "description": ""
    },
    "GETITEMPROJECTCONTEXT eel2": {
        "prefix": "GetItemProjectContext",
        "scope": "eel2",
        "body": "GetItemProjectContext(${1:MediaItem item})$0",
        "description": ""
    },
    "RPR_GETITEMPROJECTCONTEXT python": {
        "prefix": "RPR_GetItemProjectContext",
        "scope": "python",
        "body": "RPR_GetItemProjectContext(${1:MediaItem item})$0",
        "description": ""
    },
    "REAPER.GETITEMSTATECHUNK lua": {
        "prefix": "reaper.GetItemStateChunk",
        "scope": "lua",
        "body": "reaper.GetItemStateChunk(${1:MediaItem item}, ${2:string str}, ${3:boolean isundo})$0",
        "description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "GETITEMSTATECHUNK eel2": {
        "prefix": "GetItemStateChunk",
        "scope": "eel2",
        "body": "GetItemStateChunk(${1:MediaItem item}, ${2:#str}, ${3:bool isundo})$0",
        "description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "RPR_GETITEMSTATECHUNK python": {
        "prefix": "RPR_GetItemStateChunk",
        "scope": "python",
        "body": "RPR_GetItemStateChunk(${1:item}, ${2:strNeedBig}, ${3:strNeedBig_sz}, ${4:isundoOptional})$0",
        "description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "REAPER.GETLASTCOLORTHEMEFILE lua": {
        "prefix": "reaper.GetLastColorThemeFile",
        "scope": "lua",
        "body": "reaper.GetLastColorThemeFile()$0",
        "description": ""
    },
    "GETLASTCOLORTHEMEFILE eel2": {
        "prefix": "GetLastColorThemeFile",
        "scope": "eel2",
        "body": "GetLastColorThemeFile(${1:#retval})$0",
        "description": ""
    },
    "RPR_GETLASTCOLORTHEMEFILE python": {
        "prefix": "RPR_GetLastColorThemeFile",
        "scope": "python",
        "body": "RPR_GetLastColorThemeFile()$0",
        "description": ""
    },
    "REAPER.GETLASTMARKERANDCURREGION lua": {
        "prefix": "reaper.GetLastMarkerAndCurRegion",
        "scope": "lua",
        "body": "reaper.GetLastMarkerAndCurRegion(${1:ReaProject proj}, ${2:number time})$0",
        "description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers.\n\n"
    },
    "GETLASTMARKERANDCURREGION eel2": {
        "prefix": "GetLastMarkerAndCurRegion",
        "scope": "eel2",
        "body": "GetLastMarkerAndCurRegion(${1:ReaProject proj}, ${2:time}, ${3:int &markeridx}, ${4:int &regionidx})$0",
        "description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers.\n\n"
    },
    "RPR_GETLASTMARKERANDCURREGION python": {
        "prefix": "RPR_GetLastMarkerAndCurRegion",
        "scope": "python",
        "body": "RPR_GetLastMarkerAndCurRegion(${1:proj}, ${2:time}, ${3:markeridxOut}, ${4:regionidxOut})$0",
        "description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers.\n\n"
    },
    "REAPER.GETLASTTOUCHEDFX lua": {
        "prefix": "reaper.GetLastTouchedFX",
        "scope": "lua",
        "body": "reaper.GetLastTouchedFX()$0",
        "description": "Returns true if the last touched FX parameter is valid, false otherwise. tracknumber==0 means the master track, 1 means track 1, etc. fxnumber and paramnumber are zero-based. See GetFocusedFX.\n\n"
    },
    "GETLASTTOUCHEDFX eel2": {
        "prefix": "GetLastTouchedFX",
        "scope": "eel2",
        "body": "GetLastTouchedFX(${1:int &tracknumber}, ${2:int &fxnumber}, ${3:int &paramnumber})$0",
        "description": "Returns true if the last touched FX parameter is valid, false otherwise. tracknumber==0 means the master track, 1 means track 1, etc. fxnumber and paramnumber are zero-based. See GetFocusedFX.\n\n"
    },
    "RPR_GETLASTTOUCHEDFX python": {
        "prefix": "RPR_GetLastTouchedFX",
        "scope": "python",
        "body": "RPR_GetLastTouchedFX(${1:tracknumberOut}, ${2:fxnumberOut}, ${3:paramnumberOut})$0",
        "description": "Returns true if the last touched FX parameter is valid, false otherwise. tracknumber==0 means the master track, 1 means track 1, etc. fxnumber and paramnumber are zero-based. See GetFocusedFX.\n\n"
    },
    "REAPER.GETLASTTOUCHEDTRACK lua": {
        "prefix": "reaper.GetLastTouchedTrack",
        "scope": "lua",
        "body": "reaper.GetLastTouchedTrack()$0",
        "description": ""
    },
    "GETLASTTOUCHEDTRACK eel2": {
        "prefix": "GetLastTouchedTrack",
        "scope": "eel2",
        "body": "GetLastTouchedTrack()$0",
        "description": ""
    },
    "RPR_GETLASTTOUCHEDTRACK python": {
        "prefix": "RPR_GetLastTouchedTrack",
        "scope": "python",
        "body": "RPR_GetLastTouchedTrack()$0",
        "description": ""
    },
    "REAPER.GETMAINHWND lua": {
        "prefix": "reaper.GetMainHwnd",
        "scope": "lua",
        "body": "reaper.GetMainHwnd()$0",
        "description": ""
    },
    "GETMAINHWND eel2": {
        "prefix": "GetMainHwnd",
        "scope": "eel2",
        "body": "GetMainHwnd()$0",
        "description": ""
    },
    "RPR_GETMAINHWND python": {
        "prefix": "RPR_GetMainHwnd",
        "scope": "python",
        "body": "RPR_GetMainHwnd()$0",
        "description": ""
    },
    "REAPER.GETMASTERMUTESOLOFLAGS lua": {
        "prefix": "reaper.GetMasterMuteSoloFlags",
        "scope": "lua",
        "body": "reaper.GetMasterMuteSoloFlags()$0",
        "description": "&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.\n\n"
    },
    "GETMASTERMUTESOLOFLAGS eel2": {
        "prefix": "GetMasterMuteSoloFlags",
        "scope": "eel2",
        "body": "GetMasterMuteSoloFlags()$0",
        "description": "&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.\n\n"
    },
    "RPR_GETMASTERMUTESOLOFLAGS python": {
        "prefix": "RPR_GetMasterMuteSoloFlags",
        "scope": "python",
        "body": "RPR_GetMasterMuteSoloFlags()$0",
        "description": "&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.\n\n"
    },
    "REAPER.GETMASTERTRACK lua": {
        "prefix": "reaper.GetMasterTrack",
        "scope": "lua",
        "body": "reaper.GetMasterTrack(${1:ReaProject proj})$0",
        "description": ""
    },
    "GETMASTERTRACK eel2": {
        "prefix": "GetMasterTrack",
        "scope": "eel2",
        "body": "GetMasterTrack(${1:ReaProject proj})$0",
        "description": ""
    },
    "RPR_GETMASTERTRACK python": {
        "prefix": "RPR_GetMasterTrack",
        "scope": "python",
        "body": "RPR_GetMasterTrack(${1:ReaProject proj})$0",
        "description": ""
    },
    "REAPER.GETMASTERTRACKVISIBILITY lua": {
        "prefix": "reaper.GetMasterTrackVisibility",
        "scope": "lua",
        "body": "reaper.GetMasterTrackVisibility()$0",
        "description": "returns &1 if the master track is visible in the TCP, &2 if visible in the mixer. See SetMasterTrackVisibility.\n\n"
    },
    "GETMASTERTRACKVISIBILITY eel2": {
        "prefix": "GetMasterTrackVisibility",
        "scope": "eel2",
        "body": "GetMasterTrackVisibility()$0",
        "description": "returns &1 if the master track is visible in the TCP, &2 if visible in the mixer. See SetMasterTrackVisibility.\n\n"
    },
    "RPR_GETMASTERTRACKVISIBILITY python": {
        "prefix": "RPR_GetMasterTrackVisibility",
        "scope": "python",
        "body": "RPR_GetMasterTrackVisibility()$0",
        "description": "returns &1 if the master track is visible in the TCP, &2 if visible in the mixer. See SetMasterTrackVisibility.\n\n"
    },
    "REAPER.GETMAXMIDIINPUTS lua": {
        "prefix": "reaper.GetMaxMidiInputs",
        "scope": "lua",
        "body": "reaper.GetMaxMidiInputs()$0",
        "description": "returns max dev for midi inputs/outputs\n\n"
    },
    "GETMAXMIDIINPUTS eel2": {
        "prefix": "GetMaxMidiInputs",
        "scope": "eel2",
        "body": "GetMaxMidiInputs()$0",
        "description": "returns max dev for midi inputs/outputs\n\n"
    },
    "RPR_GETMAXMIDIINPUTS python": {
        "prefix": "RPR_GetMaxMidiInputs",
        "scope": "python",
        "body": "RPR_GetMaxMidiInputs()$0",
        "description": "returns max dev for midi inputs/outputs\n\n"
    },
    "REAPER.GETMAXMIDIOUTPUTS lua": {
        "prefix": "reaper.GetMaxMidiOutputs",
        "scope": "lua",
        "body": "reaper.GetMaxMidiOutputs()$0",
        "description": ""
    },
    "GETMAXMIDIOUTPUTS eel2": {
        "prefix": "GetMaxMidiOutputs",
        "scope": "eel2",
        "body": "GetMaxMidiOutputs()$0",
        "description": ""
    },
    "RPR_GETMAXMIDIOUTPUTS python": {
        "prefix": "RPR_GetMaxMidiOutputs",
        "scope": "python",
        "body": "RPR_GetMaxMidiOutputs()$0",
        "description": ""
    },
    "REAPER.GETMEDIAITEM lua": {
        "prefix": "reaper.GetMediaItem",
        "scope": "lua",
        "body": "reaper.GetMediaItem(${1:ReaProject proj}, ${2:integer itemidx})$0",
        "description": "get an item from a project by item count (zero-based) (proj=0 for active project)\n\n"
    },
    "GETMEDIAITEM eel2": {
        "prefix": "GetMediaItem",
        "scope": "eel2",
        "body": "GetMediaItem(${1:ReaProject proj}, ${2:int itemidx})$0",
        "description": "get an item from a project by item count (zero-based) (proj=0 for active project)\n\n"
    },
    "RPR_GETMEDIAITEM python": {
        "prefix": "RPR_GetMediaItem",
        "scope": "python",
        "body": "RPR_GetMediaItem(${1:ReaProject proj}, ${2:Int itemidx})$0",
        "description": "get an item from a project by item count (zero-based) (proj=0 for active project)\n\n"
    },
    "REAPER.GETMEDIAITEM_TRACK lua": {
        "prefix": "reaper.GetMediaItem_Track",
        "scope": "lua",
        "body": "reaper.GetMediaItem_Track(${1:MediaItem item})$0",
        "description": "Get parent track of media item\n\n"
    },
    "GETMEDIAITEM_TRACK eel2": {
        "prefix": "GetMediaItem_Track",
        "scope": "eel2",
        "body": "GetMediaItem_Track(${1:MediaItem item})$0",
        "description": "Get parent track of media item\n\n"
    },
    "RPR_GETMEDIAITEM_TRACK python": {
        "prefix": "RPR_GetMediaItem_Track",
        "scope": "python",
        "body": "RPR_GetMediaItem_Track(${1:MediaItem item})$0",
        "description": "Get parent track of media item\n\n"
    },
    "REAPER.GETMEDIAITEMINFO_VALUE lua": {
        "prefix": "reaper.GetMediaItemInfo_Value",
        "scope": "lua",
        "body": "reaper.GetMediaItemInfo_Value(${1:MediaItem item}, ${2:string parmname})$0",
        "description": "Get media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (&1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)\n\n"
    },
    "GETMEDIAITEMINFO_VALUE eel2": {
        "prefix": "GetMediaItemInfo_Value",
        "scope": "eel2",
        "body": "GetMediaItemInfo_Value(${1:MediaItem item}, \"${2:parmname}\")$0",
        "description": "Get media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (&1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)\n\n"
    },
    "RPR_GETMEDIAITEMINFO_VALUE python": {
        "prefix": "RPR_GetMediaItemInfo_Value",
        "scope": "python",
        "body": "RPR_GetMediaItemInfo_Value(${1:MediaItem item}, ${2:String parmname})$0",
        "description": "Get media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (&1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)\n\n"
    },
    "REAPER.GETMEDIAITEMNUMTAKES lua": {
        "prefix": "reaper.GetMediaItemNumTakes",
        "scope": "lua",
        "body": "reaper.GetMediaItemNumTakes(${1:MediaItem item})$0",
        "description": ""
    },
    "GETMEDIAITEMNUMTAKES eel2": {
        "prefix": "GetMediaItemNumTakes",
        "scope": "eel2",
        "body": "GetMediaItemNumTakes(${1:MediaItem item})$0",
        "description": ""
    },
    "RPR_GETMEDIAITEMNUMTAKES python": {
        "prefix": "RPR_GetMediaItemNumTakes",
        "scope": "python",
        "body": "RPR_GetMediaItemNumTakes(${1:MediaItem item})$0",
        "description": ""
    },
    "REAPER.GETMEDIAITEMTAKE lua": {
        "prefix": "reaper.GetMediaItemTake",
        "scope": "lua",
        "body": "reaper.GetMediaItemTake(${1:MediaItem item}, ${2:integer tk})$0",
        "description": ""
    },
    "GETMEDIAITEMTAKE eel2": {
        "prefix": "GetMediaItemTake",
        "scope": "eel2",
        "body": "GetMediaItemTake(${1:MediaItem item}, ${2:int tk})$0",
        "description": ""
    },
    "RPR_GETMEDIAITEMTAKE python": {
        "prefix": "RPR_GetMediaItemTake",
        "scope": "python",
        "body": "RPR_GetMediaItemTake(${1:MediaItem item}, ${2:Int tk})$0",
        "description": ""
    },
    "REAPER.GETMEDIAITEMTAKE_ITEM lua": {
        "prefix": "reaper.GetMediaItemTake_Item",
        "scope": "lua",
        "body": "reaper.GetMediaItemTake_Item(${1:MediaItem_Take take})$0",
        "description": "Get parent item of media item take\n\n"
    },
    "GETMEDIAITEMTAKE_ITEM eel2": {
        "prefix": "GetMediaItemTake_Item",
        "scope": "eel2",
        "body": "GetMediaItemTake_Item(${1:MediaItem_Take take})$0",
        "description": "Get parent item of media item take\n\n"
    },
    "RPR_GETMEDIAITEMTAKE_ITEM python": {
        "prefix": "RPR_GetMediaItemTake_Item",
        "scope": "python",
        "body": "RPR_GetMediaItemTake_Item(${1:MediaItem_Take take})$0",
        "description": "Get parent item of media item take\n\n"
    },
    "REAPER.GETMEDIAITEMTAKE_PEAKS lua": {
        "prefix": "reaper.GetMediaItemTake_Peaks",
        "scope": "lua",
        "body": "reaper.GetMediaItemTake_Peaks(${1:MediaItem_Take take}, ${2:number peakrate}, ${3:number starttime}, ${4:integer numchannels}, ${5:integer numsamplesperchannel}, ${6:integer want_extra_type}, ${7:reaper.array buf})$0",
        "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
    },
    "GETMEDIAITEMTAKE_PEAKS eel2": {
        "prefix": "GetMediaItemTake_Peaks",
        "scope": "eel2",
        "body": "GetMediaItemTake_Peaks(${1:MediaItem_Take take}, ${2:peakrate}, ${3:starttime}, ${4:int numchannels}, ${5:int numsamplesperchannel}, ${6:int want_extra_type}, ${7:buffer_ptr buf})$0",
        "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
    },
    "RPR_GETMEDIAITEMTAKE_PEAKS python": {
        "prefix": "RPR_GetMediaItemTake_Peaks",
        "scope": "python",
        "body": "RPR_GetMediaItemTake_Peaks(${1:take}, ${2:peakrate}, ${3:starttime}, ${4:numchannels}, ${5:numsamplesperchannel}, ${6:want_extra_type}, ${7:buf})$0",
        "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
    },
    "REAPER.GETMEDIAITEMTAKE_SOURCE lua": {
        "prefix": "reaper.GetMediaItemTake_Source",
        "scope": "lua",
        "body": "reaper.GetMediaItemTake_Source(${1:MediaItem_Take take})$0",
        "description": "Get media source of media item take\n\n"
    },
    "GETMEDIAITEMTAKE_SOURCE eel2": {
        "prefix": "GetMediaItemTake_Source",
        "scope": "eel2",
        "body": "GetMediaItemTake_Source(${1:MediaItem_Take take})$0",
        "description": "Get media source of media item take\n\n"
    },
    "RPR_GETMEDIAITEMTAKE_SOURCE python": {
        "prefix": "RPR_GetMediaItemTake_Source",
        "scope": "python",
        "body": "RPR_GetMediaItemTake_Source(${1:MediaItem_Take take})$0",
        "description": "Get media source of media item take\n\n"
    },
    "REAPER.GETMEDIAITEMTAKE_TRACK lua": {
        "prefix": "reaper.GetMediaItemTake_Track",
        "scope": "lua",
        "body": "reaper.GetMediaItemTake_Track(${1:MediaItem_Take take})$0",
        "description": "Get parent track of media item take\n\n"
    },
    "GETMEDIAITEMTAKE_TRACK eel2": {
        "prefix": "GetMediaItemTake_Track",
        "scope": "eel2",
        "body": "GetMediaItemTake_Track(${1:MediaItem_Take take})$0",
        "description": "Get parent track of media item take\n\n"
    },
    "RPR_GETMEDIAITEMTAKE_TRACK python": {
        "prefix": "RPR_GetMediaItemTake_Track",
        "scope": "python",
        "body": "RPR_GetMediaItemTake_Track(${1:MediaItem_Take take})$0",
        "description": "Get parent track of media item take\n\n"
    },
    "REAPER.GETMEDIAITEMTAKEBYGUID lua": {
        "prefix": "reaper.GetMediaItemTakeByGUID",
        "scope": "lua",
        "body": "reaper.GetMediaItemTakeByGUID(${1:ReaProject project}, ${2:string guidGUID})$0",
        "description": ""
    },
    "GETMEDIAITEMTAKEBYGUID eel2": {
        "prefix": "GetMediaItemTakeByGUID",
        "scope": "eel2",
        "body": "GetMediaItemTakeByGUID(${1:ReaProject project}, \"${2:guidGUID}\")$0",
        "description": ""
    },
    "RPR_GETMEDIAITEMTAKEBYGUID python": {
        "prefix": "RPR_GetMediaItemTakeByGUID",
        "scope": "python",
        "body": "RPR_GetMediaItemTakeByGUID(${1:ReaProject project}, ${2:const GUID guid})$0",
        "description": ""
    },
    "REAPER.GETMEDIAITEMTAKEINFO_VALUE lua": {
        "prefix": "reaper.GetMediaItemTakeInfo_Value",
        "scope": "lua",
        "body": "reaper.GetMediaItemTakeInfo_Value(${1:MediaItem_Take take}, ${2:string parmname})$0",
        "description": "Get media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)\n\n"
    },
    "GETMEDIAITEMTAKEINFO_VALUE eel2": {
        "prefix": "GetMediaItemTakeInfo_Value",
        "scope": "eel2",
        "body": "GetMediaItemTakeInfo_Value(${1:MediaItem_Take take}, \"${2:parmname}\")$0",
        "description": "Get media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)\n\n"
    },
    "RPR_GETMEDIAITEMTAKEINFO_VALUE python": {
        "prefix": "RPR_GetMediaItemTakeInfo_Value",
        "scope": "python",
        "body": "RPR_GetMediaItemTakeInfo_Value(${1:MediaItem_Take take}, ${2:String parmname})$0",
        "description": "Get media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)\n\n"
    },
    "REAPER.GETMEDIAITEMTRACK lua": {
        "prefix": "reaper.GetMediaItemTrack",
        "scope": "lua",
        "body": "reaper.GetMediaItemTrack(${1:MediaItem item})$0",
        "description": ""
    },
    "GETMEDIAITEMTRACK eel2": {
        "prefix": "GetMediaItemTrack",
        "scope": "eel2",
        "body": "GetMediaItemTrack(${1:MediaItem item})$0",
        "description": ""
    },
    "RPR_GETMEDIAITEMTRACK python": {
        "prefix": "RPR_GetMediaItemTrack",
        "scope": "python",
        "body": "RPR_GetMediaItemTrack(${1:MediaItem item})$0",
        "description": ""
    },
    "REAPER.GETMEDIASOURCEFILENAME lua": {
        "prefix": "reaper.GetMediaSourceFileName",
        "scope": "lua",
        "body": "reaper.GetMediaSourceFileName(${1:PCM_source source}, ${2:string filenamebuf})$0",
        "description": "Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.\n\n"
    },
    "GETMEDIASOURCEFILENAME eel2": {
        "prefix": "GetMediaSourceFileName",
        "scope": "eel2",
        "body": "GetMediaSourceFileName(${1:PCM_source source}, ${2:#filenamebuf})$0",
        "description": "Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.\n\n"
    },
    "RPR_GETMEDIASOURCEFILENAME python": {
        "prefix": "RPR_GetMediaSourceFileName",
        "scope": "python",
        "body": "RPR_GetMediaSourceFileName(${1:source}, ${2:filenamebuf}, ${3:filenamebuf_sz})$0",
        "description": "Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.\n\n"
    },
    "REAPER.GETMEDIASOURCELENGTH lua": {
        "prefix": "reaper.GetMediaSourceLength",
        "scope": "lua",
        "body": "reaper.GetMediaSourceLength(${1:PCM_source source})$0",
        "description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.\n\n"
    },
    "GETMEDIASOURCELENGTH eel2": {
        "prefix": "GetMediaSourceLength",
        "scope": "eel2",
        "body": "GetMediaSourceLength(${1:PCM_source source}, ${2:bool &lengthIsQN})$0",
        "description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.\n\n"
    },
    "RPR_GETMEDIASOURCELENGTH python": {
        "prefix": "RPR_GetMediaSourceLength",
        "scope": "python",
        "body": "RPR_GetMediaSourceLength(${1:source}, ${2:lengthIsQNOut})$0",
        "description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.\n\n"
    },
    "REAPER.GETMEDIASOURCENUMCHANNELS lua": {
        "prefix": "reaper.GetMediaSourceNumChannels",
        "scope": "lua",
        "body": "reaper.GetMediaSourceNumChannels(${1:PCM_source source})$0",
        "description": "Returns the number of channels in the source media.\n\n"
    },
    "GETMEDIASOURCENUMCHANNELS eel2": {
        "prefix": "GetMediaSourceNumChannels",
        "scope": "eel2",
        "body": "GetMediaSourceNumChannels(${1:PCM_source source})$0",
        "description": "Returns the number of channels in the source media.\n\n"
    },
    "RPR_GETMEDIASOURCENUMCHANNELS python": {
        "prefix": "RPR_GetMediaSourceNumChannels",
        "scope": "python",
        "body": "RPR_GetMediaSourceNumChannels(${1:PCM_source source})$0",
        "description": "Returns the number of channels in the source media.\n\n"
    },
    "REAPER.GETMEDIASOURCEPARENT lua": {
        "prefix": "reaper.GetMediaSourceParent",
        "scope": "lua",
        "body": "reaper.GetMediaSourceParent(${1:PCM_source src})$0",
        "description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.\n\n"
    },
    "GETMEDIASOURCEPARENT eel2": {
        "prefix": "GetMediaSourceParent",
        "scope": "eel2",
        "body": "GetMediaSourceParent(${1:PCM_source src})$0",
        "description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.\n\n"
    },
    "RPR_GETMEDIASOURCEPARENT python": {
        "prefix": "RPR_GetMediaSourceParent",
        "scope": "python",
        "body": "RPR_GetMediaSourceParent(${1:PCM_source src})$0",
        "description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.\n\n"
    },
    "REAPER.GETMEDIASOURCESAMPLERATE lua": {
        "prefix": "reaper.GetMediaSourceSampleRate",
        "scope": "lua",
        "body": "reaper.GetMediaSourceSampleRate(${1:PCM_source source})$0",
        "description": "Returns the sample rate. MIDI source media will return zero.\n\n"
    },
    "GETMEDIASOURCESAMPLERATE eel2": {
        "prefix": "GetMediaSourceSampleRate",
        "scope": "eel2",
        "body": "GetMediaSourceSampleRate(${1:PCM_source source})$0",
        "description": "Returns the sample rate. MIDI source media will return zero.\n\n"
    },
    "RPR_GETMEDIASOURCESAMPLERATE python": {
        "prefix": "RPR_GetMediaSourceSampleRate",
        "scope": "python",
        "body": "RPR_GetMediaSourceSampleRate(${1:PCM_source source})$0",
        "description": "Returns the sample rate. MIDI source media will return zero.\n\n"
    },
    "REAPER.GETMEDIASOURCETYPE lua": {
        "prefix": "reaper.GetMediaSourceType",
        "scope": "lua",
        "body": "reaper.GetMediaSourceType(${1:PCM_source source}, ${2:string typebuf})$0",
        "description": "copies the media source type (\"WAV\", \"MIDI\", etc) to typebuf\n\n"
    },
    "GETMEDIASOURCETYPE eel2": {
        "prefix": "GetMediaSourceType",
        "scope": "eel2",
        "body": "GetMediaSourceType(${1:PCM_source source}, ${2:#typebuf})$0",
        "description": "copies the media source type (\"WAV\", \"MIDI\", etc) to typebuf\n\n"
    },
    "RPR_GETMEDIASOURCETYPE python": {
        "prefix": "RPR_GetMediaSourceType",
        "scope": "python",
        "body": "RPR_GetMediaSourceType(${1:source}, ${2:typebuf}, ${3:typebuf_sz})$0",
        "description": "copies the media source type (\"WAV\", \"MIDI\", etc) to typebuf\n\n"
    },
    "REAPER.GETMEDIATRACKINFO_VALUE lua": {
        "prefix": "reaper.GetMediaTrackInfo_Value",
        "scope": "lua",
        "body": "reaper.GetMediaTrackInfo_Value(${1:MediaTrack tr}, ${2:string parmname})$0",
        "description": "Get track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (&1=no media buffering, &2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)\n\n"
    },
    "GETMEDIATRACKINFO_VALUE eel2": {
        "prefix": "GetMediaTrackInfo_Value",
        "scope": "eel2",
        "body": "GetMediaTrackInfo_Value(${1:MediaTrack tr}, \"${2:parmname}\")$0",
        "description": "Get track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (&1=no media buffering, &2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)\n\n"
    },
    "RPR_GETMEDIATRACKINFO_VALUE python": {
        "prefix": "RPR_GetMediaTrackInfo_Value",
        "scope": "python",
        "body": "RPR_GetMediaTrackInfo_Value(${1:MediaTrack tr}, ${2:String parmname})$0",
        "description": "Get track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (&1=no media buffering, &2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)\n\n"
    },
    "REAPER.GETMIDIINPUTNAME lua": {
        "prefix": "reaper.GetMIDIInputName",
        "scope": "lua",
        "body": "reaper.GetMIDIInputName(${1:integer dev}, ${2:string nameout})$0",
        "description": "returns true if device present\n\n"
    },
    "GETMIDIINPUTNAME eel2": {
        "prefix": "GetMIDIInputName",
        "scope": "eel2",
        "body": "GetMIDIInputName(${1:int dev}, ${2:#nameout})$0",
        "description": "returns true if device present\n\n"
    },
    "RPR_GETMIDIINPUTNAME python": {
        "prefix": "RPR_GetMIDIInputName",
        "scope": "python",
        "body": "RPR_GetMIDIInputName(${1:dev}, ${2:nameout}, ${3:nameout_sz})$0",
        "description": "returns true if device present\n\n"
    },
    "REAPER.GETMIDIOUTPUTNAME lua": {
        "prefix": "reaper.GetMIDIOutputName",
        "scope": "lua",
        "body": "reaper.GetMIDIOutputName(${1:integer dev}, ${2:string nameout})$0",
        "description": "returns true if device present\n\n"
    },
    "GETMIDIOUTPUTNAME eel2": {
        "prefix": "GetMIDIOutputName",
        "scope": "eel2",
        "body": "GetMIDIOutputName(${1:int dev}, ${2:#nameout})$0",
        "description": "returns true if device present\n\n"
    },
    "RPR_GETMIDIOUTPUTNAME python": {
        "prefix": "RPR_GetMIDIOutputName",
        "scope": "python",
        "body": "RPR_GetMIDIOutputName(${1:dev}, ${2:nameout}, ${3:nameout_sz})$0",
        "description": "returns true if device present\n\n"
    },
    "REAPER.GETMIXERSCROLL lua": {
        "prefix": "reaper.GetMixerScroll",
        "scope": "lua",
        "body": "reaper.GetMixerScroll()$0",
        "description": "Get the leftmost track visible in the mixer\n\n"
    },
    "GETMIXERSCROLL eel2": {
        "prefix": "GetMixerScroll",
        "scope": "eel2",
        "body": "GetMixerScroll()$0",
        "description": "Get the leftmost track visible in the mixer\n\n"
    },
    "RPR_GETMIXERSCROLL python": {
        "prefix": "RPR_GetMixerScroll",
        "scope": "python",
        "body": "RPR_GetMixerScroll()$0",
        "description": "Get the leftmost track visible in the mixer\n\n"
    },
    "REAPER.GETMOUSEMODIFIER lua": {
        "prefix": "reaper.GetMouseModifier",
        "scope": "lua",
        "body": "reaper.GetMouseModifier(${1:string context}, ${2:integer modifier_flag}, ${3:string action})$0",
        "description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\naction will be filled in with the command ID number for a built-in mouse modifier\n\nor built-in REAPER command ID, or the custom action ID string.\n\nSee SetMouseModifier for more information.\n\n"
    },
    "GETMOUSEMODIFIER eel2": {
        "prefix": "GetMouseModifier",
        "scope": "eel2",
        "body": "GetMouseModifier(\"${1:context}\", ${2:int modifier_flag}, ${3:#action})$0",
        "description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\naction will be filled in with the command ID number for a built-in mouse modifier\n\nor built-in REAPER command ID, or the custom action ID string.\n\nSee SetMouseModifier for more information.\n\n"
    },
    "RPR_GETMOUSEMODIFIER python": {
        "prefix": "RPR_GetMouseModifier",
        "scope": "python",
        "body": "RPR_GetMouseModifier(${1:context}, ${2:modifier_flag}, ${3:action}, ${4:action_sz})$0",
        "description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\naction will be filled in with the command ID number for a built-in mouse modifier\n\nor built-in REAPER command ID, or the custom action ID string.\n\nSee SetMouseModifier for more information.\n\n"
    },
    "REAPER.GETMOUSEPOSITION lua": {
        "prefix": "reaper.GetMousePosition",
        "scope": "lua",
        "body": "reaper.GetMousePosition()$0",
        "description": "get mouse position in screen coordinates\n\n"
    },
    "GETMOUSEPOSITION eel2": {
        "prefix": "GetMousePosition",
        "scope": "eel2",
        "body": "GetMousePosition(${1:int &x}, ${2:int &y})$0",
        "description": "get mouse position in screen coordinates\n\n"
    },
    "RPR_GETMOUSEPOSITION python": {
        "prefix": "RPR_GetMousePosition",
        "scope": "python",
        "body": "RPR_GetMousePosition(${1:xOut}, ${2:yOut})$0",
        "description": "get mouse position in screen coordinates\n\n"
    },
    "REAPER.GETNUMAUDIOINPUTS lua": {
        "prefix": "reaper.GetNumAudioInputs",
        "scope": "lua",
        "body": "reaper.GetNumAudioInputs()$0",
        "description": "Return number of normal audio hardware inputs available\n\n"
    },
    "GETNUMAUDIOINPUTS eel2": {
        "prefix": "GetNumAudioInputs",
        "scope": "eel2",
        "body": "GetNumAudioInputs()$0",
        "description": "Return number of normal audio hardware inputs available\n\n"
    },
    "RPR_GETNUMAUDIOINPUTS python": {
        "prefix": "RPR_GetNumAudioInputs",
        "scope": "python",
        "body": "RPR_GetNumAudioInputs()$0",
        "description": "Return number of normal audio hardware inputs available\n\n"
    },
    "REAPER.GETNUMAUDIOOUTPUTS lua": {
        "prefix": "reaper.GetNumAudioOutputs",
        "scope": "lua",
        "body": "reaper.GetNumAudioOutputs()$0",
        "description": "Return number of normal audio hardware outputs available\n\n"
    },
    "GETNUMAUDIOOUTPUTS eel2": {
        "prefix": "GetNumAudioOutputs",
        "scope": "eel2",
        "body": "GetNumAudioOutputs()$0",
        "description": "Return number of normal audio hardware outputs available\n\n"
    },
    "RPR_GETNUMAUDIOOUTPUTS python": {
        "prefix": "RPR_GetNumAudioOutputs",
        "scope": "python",
        "body": "RPR_GetNumAudioOutputs()$0",
        "description": "Return number of normal audio hardware outputs available\n\n"
    },
    "REAPER.GETNUMMIDIINPUTS lua": {
        "prefix": "reaper.GetNumMIDIInputs",
        "scope": "lua",
        "body": "reaper.GetNumMIDIInputs()$0",
        "description": "returns max number of real midi hardware inputs\n\n"
    },
    "GETNUMMIDIINPUTS eel2": {
        "prefix": "GetNumMIDIInputs",
        "scope": "eel2",
        "body": "GetNumMIDIInputs()$0",
        "description": "returns max number of real midi hardware inputs\n\n"
    },
    "RPR_GETNUMMIDIINPUTS python": {
        "prefix": "RPR_GetNumMIDIInputs",
        "scope": "python",
        "body": "RPR_GetNumMIDIInputs()$0",
        "description": "returns max number of real midi hardware inputs\n\n"
    },
    "REAPER.GETNUMMIDIOUTPUTS lua": {
        "prefix": "reaper.GetNumMIDIOutputs",
        "scope": "lua",
        "body": "reaper.GetNumMIDIOutputs()$0",
        "description": "returns max number of real midi hardware outputs\n\n"
    },
    "GETNUMMIDIOUTPUTS eel2": {
        "prefix": "GetNumMIDIOutputs",
        "scope": "eel2",
        "body": "GetNumMIDIOutputs()$0",
        "description": "returns max number of real midi hardware outputs\n\n"
    },
    "RPR_GETNUMMIDIOUTPUTS python": {
        "prefix": "RPR_GetNumMIDIOutputs",
        "scope": "python",
        "body": "RPR_GetNumMIDIOutputs()$0",
        "description": "returns max number of real midi hardware outputs\n\n"
    },
    "REAPER.GETNUMTRACKS lua": {
        "prefix": "reaper.GetNumTracks",
        "scope": "lua",
        "body": "reaper.GetNumTracks()$0",
        "description": ""
    },
    "GETNUMTRACKS eel2": {
        "prefix": "GetNumTracks",
        "scope": "eel2",
        "body": "GetNumTracks()$0",
        "description": ""
    },
    "RPR_GETNUMTRACKS python": {
        "prefix": "RPR_GetNumTracks",
        "scope": "python",
        "body": "RPR_GetNumTracks()$0",
        "description": ""
    },
    "REAPER.GETOS lua": {
        "prefix": "reaper.GetOS",
        "scope": "lua",
        "body": "reaper.GetOS()$0",
        "description": "Returns \"Win32\", \"Win64\", \"OSX32\", \"OSX64\", or \"Other\".\n\n"
    },
    "GETOS eel2": {
        "prefix": "GetOS",
        "scope": "eel2",
        "body": "GetOS(${1:#retval})$0",
        "description": "Returns \"Win32\", \"Win64\", \"OSX32\", \"OSX64\", or \"Other\".\n\n"
    },
    "RPR_GETOS python": {
        "prefix": "RPR_GetOS",
        "scope": "python",
        "body": "RPR_GetOS()$0",
        "description": "Returns \"Win32\", \"Win64\", \"OSX32\", \"OSX64\", or \"Other\".\n\n"
    },
    "REAPER.GETOUTPUTCHANNELNAME lua": {
        "prefix": "reaper.GetOutputChannelName",
        "scope": "lua",
        "body": "reaper.GetOutputChannelName(${1:integer channelIndex})$0",
        "description": ""
    },
    "GETOUTPUTCHANNELNAME eel2": {
        "prefix": "GetOutputChannelName",
        "scope": "eel2",
        "body": "GetOutputChannelName(${1:#retval}, ${2:int channelIndex})$0",
        "description": ""
    },
    "RPR_GETOUTPUTCHANNELNAME python": {
        "prefix": "RPR_GetOutputChannelName",
        "scope": "python",
        "body": "RPR_GetOutputChannelName(${1:Int channelIndex})$0",
        "description": ""
    },
    "REAPER.GETOUTPUTLATENCY lua": {
        "prefix": "reaper.GetOutputLatency",
        "scope": "lua",
        "body": "reaper.GetOutputLatency()$0",
        "description": "returns output latency in seconds\n\n"
    },
    "GETOUTPUTLATENCY eel2": {
        "prefix": "GetOutputLatency",
        "scope": "eel2",
        "body": "GetOutputLatency()$0",
        "description": "returns output latency in seconds\n\n"
    },
    "RPR_GETOUTPUTLATENCY python": {
        "prefix": "RPR_GetOutputLatency",
        "scope": "python",
        "body": "RPR_GetOutputLatency()$0",
        "description": "returns output latency in seconds\n\n"
    },
    "REAPER.GETPARENTTRACK lua": {
        "prefix": "reaper.GetParentTrack",
        "scope": "lua",
        "body": "reaper.GetParentTrack(${1:MediaTrack track})$0",
        "description": ""
    },
    "GETPARENTTRACK eel2": {
        "prefix": "GetParentTrack",
        "scope": "eel2",
        "body": "GetParentTrack(${1:MediaTrack track})$0",
        "description": ""
    },
    "RPR_GETPARENTTRACK python": {
        "prefix": "RPR_GetParentTrack",
        "scope": "python",
        "body": "RPR_GetParentTrack(${1:MediaTrack track})$0",
        "description": ""
    },
    "REAPER.GETPEAKFILENAME lua": {
        "prefix": "reaper.GetPeakFileName",
        "scope": "lua",
        "body": "reaper.GetPeakFileName(${1:string fn}, ${2:string buf})$0",
        "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
    },
    "GETPEAKFILENAME eel2": {
        "prefix": "GetPeakFileName",
        "scope": "eel2",
        "body": "GetPeakFileName(\"${1:fn}\", ${2:#buf})$0",
        "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
    },
    "RPR_GETPEAKFILENAME python": {
        "prefix": "RPR_GetPeakFileName",
        "scope": "python",
        "body": "RPR_GetPeakFileName(${1:fn}, ${2:buf}, ${3:buf_sz})$0",
        "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
    },
    "REAPER.GETPEAKFILENAMEEX lua": {
        "prefix": "reaper.GetPeakFileNameEx",
        "scope": "lua",
        "body": "reaper.GetPeakFileNameEx(${1:string fn}, ${2:string buf}, ${3:boolean forWrite})$0",
        "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
    },
    "GETPEAKFILENAMEEX eel2": {
        "prefix": "GetPeakFileNameEx",
        "scope": "eel2",
        "body": "GetPeakFileNameEx(\"${1:fn}\", ${2:#buf}, ${3:bool forWrite})$0",
        "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
    },
    "RPR_GETPEAKFILENAMEEX python": {
        "prefix": "RPR_GetPeakFileNameEx",
        "scope": "python",
        "body": "RPR_GetPeakFileNameEx(${1:fn}, ${2:buf}, ${3:buf_sz}, ${4:forWrite})$0",
        "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
    },
    "REAPER.GETPEAKFILENAMEEX2 lua": {
        "prefix": "reaper.GetPeakFileNameEx2",
        "scope": "lua",
        "body": "reaper.GetPeakFileNameEx2(${1:string fn}, ${2:string buf}, ${3:boolean forWrite}, ${4:string peaksfileextension})$0",
        "description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as \".reapeaks\"\n\n"
    },
    "GETPEAKFILENAMEEX2 eel2": {
        "prefix": "GetPeakFileNameEx2",
        "scope": "eel2",
        "body": "GetPeakFileNameEx2(\"${1:fn}\", ${2:#buf}, ${3:bool forWrite}, \"${4:peaksfileextension}\")$0",
        "description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as \".reapeaks\"\n\n"
    },
    "RPR_GETPEAKFILENAMEEX2 python": {
        "prefix": "RPR_GetPeakFileNameEx2",
        "scope": "python",
        "body": "RPR_GetPeakFileNameEx2(${1:fn}, ${2:buf}, ${3:buf_sz}, ${4:forWrite}, ${5:peaksfileextension})$0",
        "description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as \".reapeaks\"\n\n"
    },
    "REAPER.GETPLAYPOSITION lua": {
        "prefix": "reaper.GetPlayPosition",
        "scope": "lua",
        "body": "reaper.GetPlayPosition()$0",
        "description": "returns latency-compensated actual-what-you-hear position\n\n"
    },
    "GETPLAYPOSITION eel2": {
        "prefix": "GetPlayPosition",
        "scope": "eel2",
        "body": "GetPlayPosition()$0",
        "description": "returns latency-compensated actual-what-you-hear position\n\n"
    },
    "RPR_GETPLAYPOSITION python": {
        "prefix": "RPR_GetPlayPosition",
        "scope": "python",
        "body": "RPR_GetPlayPosition()$0",
        "description": "returns latency-compensated actual-what-you-hear position\n\n"
    },
    "REAPER.GETPLAYPOSITION2 lua": {
        "prefix": "reaper.GetPlayPosition2",
        "scope": "lua",
        "body": "reaper.GetPlayPosition2()$0",
        "description": "returns position of next audio block being processed\n\n"
    },
    "GETPLAYPOSITION2 eel2": {
        "prefix": "GetPlayPosition2",
        "scope": "eel2",
        "body": "GetPlayPosition2()$0",
        "description": "returns position of next audio block being processed\n\n"
    },
    "RPR_GETPLAYPOSITION2 python": {
        "prefix": "RPR_GetPlayPosition2",
        "scope": "python",
        "body": "RPR_GetPlayPosition2()$0",
        "description": "returns position of next audio block being processed\n\n"
    },
    "REAPER.GETPLAYPOSITION2EX lua": {
        "prefix": "reaper.GetPlayPosition2Ex",
        "scope": "lua",
        "body": "reaper.GetPlayPosition2Ex(${1:ReaProject proj})$0",
        "description": "returns position of next audio block being processed\n\n"
    },
    "GETPLAYPOSITION2EX eel2": {
        "prefix": "GetPlayPosition2Ex",
        "scope": "eel2",
        "body": "GetPlayPosition2Ex(${1:ReaProject proj})$0",
        "description": "returns position of next audio block being processed\n\n"
    },
    "RPR_GETPLAYPOSITION2EX python": {
        "prefix": "RPR_GetPlayPosition2Ex",
        "scope": "python",
        "body": "RPR_GetPlayPosition2Ex(${1:ReaProject proj})$0",
        "description": "returns position of next audio block being processed\n\n"
    },
    "REAPER.GETPLAYPOSITIONEX lua": {
        "prefix": "reaper.GetPlayPositionEx",
        "scope": "lua",
        "body": "reaper.GetPlayPositionEx(${1:ReaProject proj})$0",
        "description": "returns latency-compensated actual-what-you-hear position\n\n"
    },
    "GETPLAYPOSITIONEX eel2": {
        "prefix": "GetPlayPositionEx",
        "scope": "eel2",
        "body": "GetPlayPositionEx(${1:ReaProject proj})$0",
        "description": "returns latency-compensated actual-what-you-hear position\n\n"
    },
    "RPR_GETPLAYPOSITIONEX python": {
        "prefix": "RPR_GetPlayPositionEx",
        "scope": "python",
        "body": "RPR_GetPlayPositionEx(${1:ReaProject proj})$0",
        "description": "returns latency-compensated actual-what-you-hear position\n\n"
    },
    "REAPER.GETPLAYSTATE lua": {
        "prefix": "reaper.GetPlayState",
        "scope": "lua",
        "body": "reaper.GetPlayState()$0",
        "description": "&1=playing,&2=pause,&=4 is recording\n\n"
    },
    "GETPLAYSTATE eel2": {
        "prefix": "GetPlayState",
        "scope": "eel2",
        "body": "GetPlayState()$0",
        "description": "&1=playing,&2=pause,&=4 is recording\n\n"
    },
    "RPR_GETPLAYSTATE python": {
        "prefix": "RPR_GetPlayState",
        "scope": "python",
        "body": "RPR_GetPlayState()$0",
        "description": "&1=playing,&2=pause,&=4 is recording\n\n"
    },
    "REAPER.GETPLAYSTATEEX lua": {
        "prefix": "reaper.GetPlayStateEx",
        "scope": "lua",
        "body": "reaper.GetPlayStateEx(${1:ReaProject proj})$0",
        "description": "&1=playing,&2=pause,&=4 is recording\n\n"
    },
    "GETPLAYSTATEEX eel2": {
        "prefix": "GetPlayStateEx",
        "scope": "eel2",
        "body": "GetPlayStateEx(${1:ReaProject proj})$0",
        "description": "&1=playing,&2=pause,&=4 is recording\n\n"
    },
    "RPR_GETPLAYSTATEEX python": {
        "prefix": "RPR_GetPlayStateEx",
        "scope": "python",
        "body": "RPR_GetPlayStateEx(${1:ReaProject proj})$0",
        "description": "&1=playing,&2=pause,&=4 is recording\n\n"
    },
    "REAPER.GETPROJECTLENGTH lua": {
        "prefix": "reaper.GetProjectLength",
        "scope": "lua",
        "body": "reaper.GetProjectLength(${1:ReaProject proj})$0",
        "description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map\n\n"
    },
    "GETPROJECTLENGTH eel2": {
        "prefix": "GetProjectLength",
        "scope": "eel2",
        "body": "GetProjectLength(${1:ReaProject proj})$0",
        "description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map\n\n"
    },
    "RPR_GETPROJECTLENGTH python": {
        "prefix": "RPR_GetProjectLength",
        "scope": "python",
        "body": "RPR_GetProjectLength(${1:ReaProject proj})$0",
        "description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map\n\n"
    },
    "REAPER.GETPROJECTNAME lua": {
        "prefix": "reaper.GetProjectName",
        "scope": "lua",
        "body": "reaper.GetProjectName(${1:ReaProject proj}, ${2:string buf})$0",
        "description": ""
    },
    "GETPROJECTNAME eel2": {
        "prefix": "GetProjectName",
        "scope": "eel2",
        "body": "GetProjectName(${1:ReaProject proj}, ${2:#buf})$0",
        "description": ""
    },
    "RPR_GETPROJECTNAME python": {
        "prefix": "RPR_GetProjectName",
        "scope": "python",
        "body": "RPR_GetProjectName(${1:proj}, ${2:buf}, ${3:buf_sz})$0",
        "description": ""
    },
    "REAPER.GETPROJECTPATH lua": {
        "prefix": "reaper.GetProjectPath",
        "scope": "lua",
        "body": "reaper.GetProjectPath(${1:string buf})$0",
        "description": ""
    },
    "GETPROJECTPATH eel2": {
        "prefix": "GetProjectPath",
        "scope": "eel2",
        "body": "GetProjectPath(${1:#buf})$0",
        "description": ""
    },
    "RPR_GETPROJECTPATH python": {
        "prefix": "RPR_GetProjectPath",
        "scope": "python",
        "body": "RPR_GetProjectPath(${1:buf}, ${2:buf_sz})$0",
        "description": ""
    },
    "REAPER.GETPROJECTPATHEX lua": {
        "prefix": "reaper.GetProjectPathEx",
        "scope": "lua",
        "body": "reaper.GetProjectPathEx(${1:ReaProject proj}, ${2:string buf})$0",
        "description": ""
    },
    "GETPROJECTPATHEX eel2": {
        "prefix": "GetProjectPathEx",
        "scope": "eel2",
        "body": "GetProjectPathEx(${1:ReaProject proj}, ${2:#buf})$0",
        "description": ""
    },
    "RPR_GETPROJECTPATHEX python": {
        "prefix": "RPR_GetProjectPathEx",
        "scope": "python",
        "body": "RPR_GetProjectPathEx(${1:proj}, ${2:buf}, ${3:buf_sz})$0",
        "description": ""
    },
    "REAPER.GETPROJECTSTATECHANGECOUNT lua": {
        "prefix": "reaper.GetProjectStateChangeCount",
        "scope": "lua",
        "body": "reaper.GetProjectStateChangeCount(${1:ReaProject proj})$0",
        "description": "returns an integer that changes when the project state changes\n\n"
    },
    "GETPROJECTSTATECHANGECOUNT eel2": {
        "prefix": "GetProjectStateChangeCount",
        "scope": "eel2",
        "body": "GetProjectStateChangeCount(${1:ReaProject proj})$0",
        "description": "returns an integer that changes when the project state changes\n\n"
    },
    "RPR_GETPROJECTSTATECHANGECOUNT python": {
        "prefix": "RPR_GetProjectStateChangeCount",
        "scope": "python",
        "body": "RPR_GetProjectStateChangeCount(${1:ReaProject proj})$0",
        "description": "returns an integer that changes when the project state changes\n\n"
    },
    "REAPER.GETPROJECTTIMEOFFSET lua": {
        "prefix": "reaper.GetProjectTimeOffset",
        "scope": "lua",
        "body": "reaper.GetProjectTimeOffset(${1:ReaProject proj}, ${2:boolean rndframe})$0",
        "description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size.\n\n"
    },
    "GETPROJECTTIMEOFFSET eel2": {
        "prefix": "GetProjectTimeOffset",
        "scope": "eel2",
        "body": "GetProjectTimeOffset(${1:ReaProject proj}, ${2:bool rndframe})$0",
        "description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size.\n\n"
    },
    "RPR_GETPROJECTTIMEOFFSET python": {
        "prefix": "RPR_GetProjectTimeOffset",
        "scope": "python",
        "body": "RPR_GetProjectTimeOffset(${1:ReaProject proj}, ${2:Boolean rndframe})$0",
        "description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size.\n\n"
    },
    "REAPER.GETPROJECTTIMESIGNATURE lua": {
        "prefix": "reaper.GetProjectTimeSignature",
        "scope": "lua",
        "body": "reaper.GetProjectTimeSignature()$0",
        "description": "deprecated\n\n"
    },
    "GETPROJECTTIMESIGNATURE eel2": {
        "prefix": "GetProjectTimeSignature",
        "scope": "eel2",
        "body": "GetProjectTimeSignature(${1:&bpm}, ${2:&bpi})$0",
        "description": "deprecated\n\n"
    },
    "RPR_GETPROJECTTIMESIGNATURE python": {
        "prefix": "RPR_GetProjectTimeSignature",
        "scope": "python",
        "body": "RPR_GetProjectTimeSignature(${1:bpmOut}, ${2:bpiOut})$0",
        "description": "deprecated\n\n"
    },
    "REAPER.GETPROJECTTIMESIGNATURE2 lua": {
        "prefix": "reaper.GetProjectTimeSignature2",
        "scope": "lua",
        "body": "reaper.GetProjectTimeSignature2(${1:ReaProject proj})$0",
        "description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\n\nthis does not reflect tempo envelopes but is purely what is set in the project settings.\n\n"
    },
    "GETPROJECTTIMESIGNATURE2 eel2": {
        "prefix": "GetProjectTimeSignature2",
        "scope": "eel2",
        "body": "GetProjectTimeSignature2(${1:ReaProject proj}, ${2:&bpm}, ${3:&bpi})$0",
        "description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\n\nthis does not reflect tempo envelopes but is purely what is set in the project settings.\n\n"
    },
    "RPR_GETPROJECTTIMESIGNATURE2 python": {
        "prefix": "RPR_GetProjectTimeSignature2",
        "scope": "python",
        "body": "RPR_GetProjectTimeSignature2(${1:proj}, ${2:bpmOut}, ${3:bpiOut})$0",
        "description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\n\nthis does not reflect tempo envelopes but is purely what is set in the project settings.\n\n"
    },
    "REAPER.GETPROJEXTSTATE lua": {
        "prefix": "reaper.GetProjExtState",
        "scope": "lua",
        "body": "reaper.GetProjExtState(${1:ReaProject proj}, ${2:string extname}, ${3:string key})$0",
        "description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.\n\n"
    },
    "GETPROJEXTSTATE eel2": {
        "prefix": "GetProjExtState",
        "scope": "eel2",
        "body": "GetProjExtState(${1:ReaProject proj}, \"${2:extname}\", \"${3:key}\", ${4:#val})$0",
        "description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.\n\n"
    },
    "RPR_GETPROJEXTSTATE python": {
        "prefix": "RPR_GetProjExtState",
        "scope": "python",
        "body": "RPR_GetProjExtState(${1:proj}, ${2:extname}, ${3:key}, ${4:valOutNeedBig}, ${5:valOutNeedBig_sz})$0",
        "description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.\n\n"
    },
    "REAPER.GETRESOURCEPATH lua": {
        "prefix": "reaper.GetResourcePath",
        "scope": "lua",
        "body": "reaper.GetResourcePath()$0",
        "description": "returns path where ini files are stored, other things are in subdirectories.\n\n"
    },
    "GETRESOURCEPATH eel2": {
        "prefix": "GetResourcePath",
        "scope": "eel2",
        "body": "GetResourcePath(${1:#retval})$0",
        "description": "returns path where ini files are stored, other things are in subdirectories.\n\n"
    },
    "RPR_GETRESOURCEPATH python": {
        "prefix": "RPR_GetResourcePath",
        "scope": "python",
        "body": "RPR_GetResourcePath()$0",
        "description": "returns path where ini files are stored, other things are in subdirectories.\n\n"
    },
    "REAPER.GETSELECTEDENVELOPE lua": {
        "prefix": "reaper.GetSelectedEnvelope",
        "scope": "lua",
        "body": "reaper.GetSelectedEnvelope(${1:ReaProject proj})$0",
        "description": "get the currently selected envelope, returns 0 if no envelope is selected\n\n"
    },
    "GETSELECTEDENVELOPE eel2": {
        "prefix": "GetSelectedEnvelope",
        "scope": "eel2",
        "body": "GetSelectedEnvelope(${1:ReaProject proj})$0",
        "description": "get the currently selected envelope, returns 0 if no envelope is selected\n\n"
    },
    "RPR_GETSELECTEDENVELOPE python": {
        "prefix": "RPR_GetSelectedEnvelope",
        "scope": "python",
        "body": "RPR_GetSelectedEnvelope(${1:ReaProject proj})$0",
        "description": "get the currently selected envelope, returns 0 if no envelope is selected\n\n"
    },
    "REAPER.GETSELECTEDMEDIAITEM lua": {
        "prefix": "reaper.GetSelectedMediaItem",
        "scope": "lua",
        "body": "reaper.GetSelectedMediaItem(${1:ReaProject proj}, ${2:integer selitem})$0",
        "description": "get a selected item by selected item count (zero-based) (proj=0 for active project)\n\n"
    },
    "GETSELECTEDMEDIAITEM eel2": {
        "prefix": "GetSelectedMediaItem",
        "scope": "eel2",
        "body": "GetSelectedMediaItem(${1:ReaProject proj}, ${2:int selitem})$0",
        "description": "get a selected item by selected item count (zero-based) (proj=0 for active project)\n\n"
    },
    "RPR_GETSELECTEDMEDIAITEM python": {
        "prefix": "RPR_GetSelectedMediaItem",
        "scope": "python",
        "body": "RPR_GetSelectedMediaItem(${1:ReaProject proj}, ${2:Int selitem})$0",
        "description": "get a selected item by selected item count (zero-based) (proj=0 for active project)\n\n"
    },
    "REAPER.GETSELECTEDTRACK lua": {
        "prefix": "reaper.GetSelectedTrack",
        "scope": "lua",
        "body": "reaper.GetSelectedTrack(${1:ReaProject proj}, ${2:integer seltrackidx})$0",
        "description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2.\n\n"
    },
    "GETSELECTEDTRACK eel2": {
        "prefix": "GetSelectedTrack",
        "scope": "eel2",
        "body": "GetSelectedTrack(${1:ReaProject proj}, ${2:int seltrackidx})$0",
        "description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2.\n\n"
    },
    "RPR_GETSELECTEDTRACK python": {
        "prefix": "RPR_GetSelectedTrack",
        "scope": "python",
        "body": "RPR_GetSelectedTrack(${1:ReaProject proj}, ${2:Int seltrackidx})$0",
        "description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2.\n\n"
    },
    "REAPER.GETSELECTEDTRACK2 lua": {
        "prefix": "reaper.GetSelectedTrack2",
        "scope": "lua",
        "body": "reaper.GetSelectedTrack2(${1:ReaProject proj}, ${2:integer seltrackidx}, ${3:boolean wantmaster})$0",
        "description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).\n\n"
    },
    "GETSELECTEDTRACK2 eel2": {
        "prefix": "GetSelectedTrack2",
        "scope": "eel2",
        "body": "GetSelectedTrack2(${1:ReaProject proj}, ${2:int seltrackidx}, ${3:bool wantmaster})$0",
        "description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).\n\n"
    },
    "RPR_GETSELECTEDTRACK2 python": {
        "prefix": "RPR_GetSelectedTrack2",
        "scope": "python",
        "body": "RPR_GetSelectedTrack2(${1:ReaProject proj}, ${2:Int seltrackidx}, ${3:Boolean wantmaster})$0",
        "description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).\n\n"
    },
    "REAPER.GETSELECTEDTRACKENVELOPE lua": {
        "prefix": "reaper.GetSelectedTrackEnvelope",
        "scope": "lua",
        "body": "reaper.GetSelectedTrackEnvelope(${1:ReaProject proj})$0",
        "description": "get the currently selected track envelope, returns 0 if no envelope is selected\n\n"
    },
    "GETSELECTEDTRACKENVELOPE eel2": {
        "prefix": "GetSelectedTrackEnvelope",
        "scope": "eel2",
        "body": "GetSelectedTrackEnvelope(${1:ReaProject proj})$0",
        "description": "get the currently selected track envelope, returns 0 if no envelope is selected\n\n"
    },
    "RPR_GETSELECTEDTRACKENVELOPE python": {
        "prefix": "RPR_GetSelectedTrackEnvelope",
        "scope": "python",
        "body": "RPR_GetSelectedTrackEnvelope(${1:ReaProject proj})$0",
        "description": "get the currently selected track envelope, returns 0 if no envelope is selected\n\n"
    },
    "REAPER.GETSET_ARRANGEVIEW2 lua": {
        "prefix": "reaper.GetSet_ArrangeView2",
        "scope": "lua",
        "body": "reaper.GetSet_ArrangeView2(${1:ReaProject proj}, ${2:boolean isSet}, ${3:integer screen_x_start}, ${4:integer screen_x_end})$0",
        "description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time\n\n"
    },
    "GETSET_ARRANGEVIEW2 eel2": {
        "prefix": "GetSet_ArrangeView2",
        "scope": "eel2",
        "body": "GetSet_ArrangeView2(${1:ReaProject proj}, ${2:bool isSet}, ${3:int screen_x_start}, ${4:int screen_x_end}, ${5:&start_time}, ${6:&end_time})$0",
        "description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time\n\n"
    },
    "RPR_GETSET_ARRANGEVIEW2 python": {
        "prefix": "RPR_GetSet_ArrangeView2",
        "scope": "python",
        "body": "RPR_GetSet_ArrangeView2(${1:proj}, ${2:isSet}, ${3:screen_x_start}, ${4:screen_x_end}, ${5:start_timeOut}, ${6:end_timeOut})$0",
        "description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time\n\n"
    },
    "REAPER.GETSET_LOOPTIMERANGE lua": {
        "prefix": "reaper.GetSet_LoopTimeRange",
        "scope": "lua",
        "body": "reaper.GetSet_LoopTimeRange(${1:boolean isSet}, ${2:boolean isLoop}, ${3:number start}, ${4:number end}, ${5:boolean allowautoseek})$0",
        "description": ""
    },
    "GETSET_LOOPTIMERANGE eel2": {
        "prefix": "GetSet_LoopTimeRange",
        "scope": "eel2",
        "body": "GetSet_LoopTimeRange(${1:bool isSet}, ${2:bool isLoop}, ${3:&start}, ${4:&end}, ${5:bool allowautoseek})$0",
        "description": ""
    },
    "RPR_GETSET_LOOPTIMERANGE python": {
        "prefix": "RPR_GetSet_LoopTimeRange",
        "scope": "python",
        "body": "RPR_GetSet_LoopTimeRange(${1:isSet}, ${2:isLoop}, ${3:startOut}, ${4:endOut}, ${5:allowautoseek})$0",
        "description": ""
    },
    "REAPER.GETSET_LOOPTIMERANGE2 lua": {
        "prefix": "reaper.GetSet_LoopTimeRange2",
        "scope": "lua",
        "body": "reaper.GetSet_LoopTimeRange2(${1:ReaProject proj}, ${2:boolean isSet}, ${3:boolean isLoop}, ${4:number start}, ${5:number end}, ${6:boolean allowautoseek})$0",
        "description": ""
    },
    "GETSET_LOOPTIMERANGE2 eel2": {
        "prefix": "GetSet_LoopTimeRange2",
        "scope": "eel2",
        "body": "GetSet_LoopTimeRange2(${1:ReaProject proj}, ${2:bool isSet}, ${3:bool isLoop}, ${4:&start}, ${5:&end}, ${6:bool allowautoseek})$0",
        "description": ""
    },
    "RPR_GETSET_LOOPTIMERANGE2 python": {
        "prefix": "RPR_GetSet_LoopTimeRange2",
        "scope": "python",
        "body": "RPR_GetSet_LoopTimeRange2(${1:proj}, ${2:isSet}, ${3:isLoop}, ${4:startOut}, ${5:endOut}, ${6:allowautoseek})$0",
        "description": ""
    },
    "REAPER.GETSETAUTOMATIONITEMINFO lua": {
        "prefix": "reaper.GetSetAutomationItemInfo",
        "scope": "lua",
        "body": "reaper.GetSetAutomationItemInfo(${1:TrackEnvelope env}, ${2:integer autoitem_idx}, ${3:string desc}, ${4:number value}, ${5:boolean is_set})$0",
        "description": "Get or set automation item information. autoitem_idx==0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\n\nD_POOL_ID: double *, automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\n\nD_POSITION: double *, automation item timeline position in seconds\n\nD_LENGTH: double *, automation item length in seconds\n\nD_STARTOFFS: double *, automation item start offset in seconds\n\nD_PLAYRATE: double *, automation item playback rate\n\nD_BASELINE: double *, automation item baseline value in the range [0,1]\n\nD_AMPLITUDE: double *, automation item amplitude in the range [-1,1]\n\nD_LOOPSRC: double *, nonzero if the automation item contents are looped\n\nD_UISEL: double *, nonzero if the automation item is selected in the arrange view\n\n"
    },
    "GETSETAUTOMATIONITEMINFO eel2": {
        "prefix": "GetSetAutomationItemInfo",
        "scope": "eel2",
        "body": "GetSetAutomationItemInfo(${1:TrackEnvelope env}, ${2:int autoitem_idx}, \"${3:desc}\", ${4:value}, ${5:bool is_set})$0",
        "description": "Get or set automation item information. autoitem_idx==0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\n\nD_POOL_ID: double *, automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\n\nD_POSITION: double *, automation item timeline position in seconds\n\nD_LENGTH: double *, automation item length in seconds\n\nD_STARTOFFS: double *, automation item start offset in seconds\n\nD_PLAYRATE: double *, automation item playback rate\n\nD_BASELINE: double *, automation item baseline value in the range [0,1]\n\nD_AMPLITUDE: double *, automation item amplitude in the range [-1,1]\n\nD_LOOPSRC: double *, nonzero if the automation item contents are looped\n\nD_UISEL: double *, nonzero if the automation item is selected in the arrange view\n\n"
    },
    "RPR_GETSETAUTOMATIONITEMINFO python": {
        "prefix": "RPR_GetSetAutomationItemInfo",
        "scope": "python",
        "body": "RPR_GetSetAutomationItemInfo(${1:TrackEnvelope env}, ${2:Int autoitem_idx}, ${3:String desc}, ${4:Float value}, ${5:Boolean is_set})$0",
        "description": "Get or set automation item information. autoitem_idx==0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\n\nD_POOL_ID: double *, automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\n\nD_POSITION: double *, automation item timeline position in seconds\n\nD_LENGTH: double *, automation item length in seconds\n\nD_STARTOFFS: double *, automation item start offset in seconds\n\nD_PLAYRATE: double *, automation item playback rate\n\nD_BASELINE: double *, automation item baseline value in the range [0,1]\n\nD_AMPLITUDE: double *, automation item amplitude in the range [-1,1]\n\nD_LOOPSRC: double *, nonzero if the automation item contents are looped\n\nD_UISEL: double *, nonzero if the automation item is selected in the arrange view\n\n"
    },
    "REAPER.GETSETENVELOPESTATE lua": {
        "prefix": "reaper.GetSetEnvelopeState",
        "scope": "lua",
        "body": "reaper.GetSetEnvelopeState(${1:TrackEnvelope env}, ${2:string str})$0",
        "description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
    },
    "GETSETENVELOPESTATE eel2": {
        "prefix": "GetSetEnvelopeState",
        "scope": "eel2",
        "body": "GetSetEnvelopeState(${1:TrackEnvelope env}, ${2:#str})$0",
        "description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
    },
    "RPR_GETSETENVELOPESTATE python": {
        "prefix": "RPR_GetSetEnvelopeState",
        "scope": "python",
        "body": "RPR_GetSetEnvelopeState(${1:env}, ${2:str}, ${3:str_sz})$0",
        "description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
    },
    "REAPER.GETSETENVELOPESTATE2 lua": {
        "prefix": "reaper.GetSetEnvelopeState2",
        "scope": "lua",
        "body": "reaper.GetSetEnvelopeState2(${1:TrackEnvelope env}, ${2:string str}, ${3:boolean isundo})$0",
        "description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
    },
    "GETSETENVELOPESTATE2 eel2": {
        "prefix": "GetSetEnvelopeState2",
        "scope": "eel2",
        "body": "GetSetEnvelopeState2(${1:TrackEnvelope env}, ${2:#str}, ${3:bool isundo})$0",
        "description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
    },
    "RPR_GETSETENVELOPESTATE2 python": {
        "prefix": "RPR_GetSetEnvelopeState2",
        "scope": "python",
        "body": "RPR_GetSetEnvelopeState2(${1:env}, ${2:str}, ${3:str_sz}, ${4:isundo})$0",
        "description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
    },
    "REAPER.GETSETITEMSTATE lua": {
        "prefix": "reaper.GetSetItemState",
        "scope": "lua",
        "body": "reaper.GetSetItemState(${1:MediaItem item}, ${2:string str})$0",
        "description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
    },
    "GETSETITEMSTATE eel2": {
        "prefix": "GetSetItemState",
        "scope": "eel2",
        "body": "GetSetItemState(${1:MediaItem item}, ${2:#str})$0",
        "description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
    },
    "RPR_GETSETITEMSTATE python": {
        "prefix": "RPR_GetSetItemState",
        "scope": "python",
        "body": "RPR_GetSetItemState(${1:item}, ${2:str}, ${3:str_sz})$0",
        "description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
    },
    "REAPER.GETSETITEMSTATE2 lua": {
        "prefix": "reaper.GetSetItemState2",
        "scope": "lua",
        "body": "reaper.GetSetItemState2(${1:MediaItem item}, ${2:string str}, ${3:boolean isundo})$0",
        "description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
    },
    "GETSETITEMSTATE2 eel2": {
        "prefix": "GetSetItemState2",
        "scope": "eel2",
        "body": "GetSetItemState2(${1:MediaItem item}, ${2:#str}, ${3:bool isundo})$0",
        "description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
    },
    "RPR_GETSETITEMSTATE2 python": {
        "prefix": "RPR_GetSetItemState2",
        "scope": "python",
        "body": "RPR_GetSetItemState2(${1:item}, ${2:str}, ${3:str_sz}, ${4:isundo})$0",
        "description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
    },
    "REAPER.GETSETMEDIAITEMTAKEINFO_STRING lua": {
        "prefix": "reaper.GetSetMediaItemTakeInfo_String",
        "scope": "lua",
        "body": "reaper.GetSetMediaItemTakeInfo_String(${1:MediaItem_Take tk}, ${2:string parmname}, ${3:string stringNeedBig}, ${4:boolean setNewValue})$0",
        "description": "P_NAME : char * to take name\n\n"
    },
    "GETSETMEDIAITEMTAKEINFO_STRING eel2": {
        "prefix": "GetSetMediaItemTakeInfo_String",
        "scope": "eel2",
        "body": "GetSetMediaItemTakeInfo_String(${1:MediaItem_Take tk}, \"${2:parmname}\", ${3:#stringNeedBig}, ${4:bool setNewValue})$0",
        "description": "P_NAME : char * to take name\n\n"
    },
    "RPR_GETSETMEDIAITEMTAKEINFO_STRING python": {
        "prefix": "RPR_GetSetMediaItemTakeInfo_String",
        "scope": "python",
        "body": "RPR_GetSetMediaItemTakeInfo_String(${1:tk}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
        "description": "P_NAME : char * to take name\n\n"
    },
    "REAPER.GETSETMEDIATRACKINFO_STRING lua": {
        "prefix": "reaper.GetSetMediaTrackInfo_String",
        "scope": "lua",
        "body": "reaper.GetSetMediaTrackInfo_String(${1:MediaTrack tr}, ${2:string parmname}, ${3:string stringNeedBig}, ${4:boolean setNewValue})$0",
        "description": "Get or set track string attributes.\n\nP_NAME : char * : track name (on master returns NULL)\n\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\n\nP_MCP_LAYOUT : const char * : layout name\n\nP_TCP_LAYOUT : const char * : layout name\n\n"
    },
    "GETSETMEDIATRACKINFO_STRING eel2": {
        "prefix": "GetSetMediaTrackInfo_String",
        "scope": "eel2",
        "body": "GetSetMediaTrackInfo_String(${1:MediaTrack tr}, \"${2:parmname}\", ${3:#stringNeedBig}, ${4:bool setNewValue})$0",
        "description": "Get or set track string attributes.\n\nP_NAME : char * : track name (on master returns NULL)\n\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\n\nP_MCP_LAYOUT : const char * : layout name\n\nP_TCP_LAYOUT : const char * : layout name\n\n"
    },
    "RPR_GETSETMEDIATRACKINFO_STRING python": {
        "prefix": "RPR_GetSetMediaTrackInfo_String",
        "scope": "python",
        "body": "RPR_GetSetMediaTrackInfo_String(${1:tr}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
        "description": "Get or set track string attributes.\n\nP_NAME : char * : track name (on master returns NULL)\n\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\n\nP_MCP_LAYOUT : const char * : layout name\n\nP_TCP_LAYOUT : const char * : layout name\n\n"
    },
    "REAPER.GETSETPROJECTAUTHOR lua": {
        "prefix": "reaper.GetSetProjectAuthor",
        "scope": "lua",
        "body": "reaper.GetSetProjectAuthor(${1:ReaProject proj}, ${2:boolean set}, ${3:string author})$0",
        "description": "gets or sets project author, author_sz is ignored when setting\n\n"
    },
    "GETSETPROJECTAUTHOR eel2": {
        "prefix": "GetSetProjectAuthor",
        "scope": "eel2",
        "body": "GetSetProjectAuthor(${1:ReaProject proj}, ${2:bool set}, ${3:#author})$0",
        "description": "gets or sets project author, author_sz is ignored when setting\n\n"
    },
    "RPR_GETSETPROJECTAUTHOR python": {
        "prefix": "RPR_GetSetProjectAuthor",
        "scope": "python",
        "body": "RPR_GetSetProjectAuthor(${1:proj}, ${2:set}, ${3:author}, ${4:author_sz})$0",
        "description": "gets or sets project author, author_sz is ignored when setting\n\n"
    },
    "REAPER.GETSETPROJECTGRID lua": {
        "prefix": "reaper.GetSetProjectGrid",
        "scope": "lua",
        "body": "reaper.GetSetProjectGrid(${1:ReaProject project}, ${2:boolean set})$0",
        "description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. Returns grid configuration flags\n\n"
    },
    "GETSETPROJECTGRID eel2": {
        "prefix": "GetSetProjectGrid",
        "scope": "eel2",
        "body": "GetSetProjectGrid(${1:ReaProject project}, ${2:bool set}, ${3:optional &divisionIn}, ${4:optional int &swingmodeIn}, ${5:optional &swingamtIn})$0",
        "description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. Returns grid configuration flags\n\n"
    },
    "RPR_GETSETPROJECTGRID python": {
        "prefix": "RPR_GetSetProjectGrid",
        "scope": "python",
        "body": "RPR_GetSetProjectGrid(${1:project}, ${2:set}, ${3:divisionInOutOptional}, ${4:swingmodeInOutOptional}, ${5:swingamtInOutOptional})$0",
        "description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. Returns grid configuration flags\n\n"
    },
    "REAPER.GETSETPROJECTNOTES lua": {
        "prefix": "reaper.GetSetProjectNotes",
        "scope": "lua",
        "body": "reaper.GetSetProjectNotes(${1:ReaProject proj}, ${2:boolean set}, ${3:string notes})$0",
        "description": "gets or sets project notes, notesNeedBig_sz is ignored when setting\n\n"
    },
    "GETSETPROJECTNOTES eel2": {
        "prefix": "GetSetProjectNotes",
        "scope": "eel2",
        "body": "GetSetProjectNotes(${1:ReaProject proj}, ${2:bool set}, ${3:#notes})$0",
        "description": "gets or sets project notes, notesNeedBig_sz is ignored when setting\n\n"
    },
    "RPR_GETSETPROJECTNOTES python": {
        "prefix": "RPR_GetSetProjectNotes",
        "scope": "python",
        "body": "RPR_GetSetProjectNotes(${1:proj}, ${2:set}, ${3:notesNeedBig}, ${4:notesNeedBig_sz})$0",
        "description": "gets or sets project notes, notesNeedBig_sz is ignored when setting\n\n"
    },
    "REAPER.GETSETREPEAT lua": {
        "prefix": "reaper.GetSetRepeat",
        "scope": "lua",
        "body": "reaper.GetSetRepeat(${1:integer val})$0",
        "description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
    },
    "GETSETREPEAT eel2": {
        "prefix": "GetSetRepeat",
        "scope": "eel2",
        "body": "GetSetRepeat(${1:int val})$0",
        "description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
    },
    "RPR_GETSETREPEAT python": {
        "prefix": "RPR_GetSetRepeat",
        "scope": "python",
        "body": "RPR_GetSetRepeat(${1:Int val})$0",
        "description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
    },
    "REAPER.GETSETREPEATEX lua": {
        "prefix": "reaper.GetSetRepeatEx",
        "scope": "lua",
        "body": "reaper.GetSetRepeatEx(${1:ReaProject proj}, ${2:integer val})$0",
        "description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
    },
    "GETSETREPEATEX eel2": {
        "prefix": "GetSetRepeatEx",
        "scope": "eel2",
        "body": "GetSetRepeatEx(${1:ReaProject proj}, ${2:int val})$0",
        "description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
    },
    "RPR_GETSETREPEATEX python": {
        "prefix": "RPR_GetSetRepeatEx",
        "scope": "python",
        "body": "RPR_GetSetRepeatEx(${1:ReaProject proj}, ${2:Int val})$0",
        "description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
    },
    "REAPER.GETSETTRACKGROUPMEMBERSHIP lua": {
        "prefix": "reaper.GetSetTrackGroupMembership",
        "scope": "lua",
        "body": "reaper.GetSetTrackGroupMembership(${1:MediaTrack tr}, ${2:string groupname}, ${3:integer setmask}, ${4:integer setvalue})$0",
        "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX\n\n"
    },
    "GETSETTRACKGROUPMEMBERSHIP eel2": {
        "prefix": "GetSetTrackGroupMembership",
        "scope": "eel2",
        "body": "GetSetTrackGroupMembership(${1:MediaTrack tr}, \"${2:groupname}\", ${3:uint setmask}, ${4:uint setvalue})$0",
        "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX\n\n"
    },
    "RPR_GETSETTRACKGROUPMEMBERSHIP python": {
        "prefix": "RPR_GetSetTrackGroupMembership",
        "scope": "python",
        "body": "RPR_GetSetTrackGroupMembership(${1:MediaTrack tr}, ${2:String groupname}, ${3:Unknown setmask}, ${4:Unknown setvalue})$0",
        "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX\n\n"
    },
    "REAPER.GETSETTRACKGROUPMEMBERSHIPHIGH lua": {
        "prefix": "reaper.GetSetTrackGroupMembershipHigh",
        "scope": "lua",
        "body": "reaper.GetSetTrackGroupMembershipHigh(${1:MediaTrack tr}, ${2:string groupname}, ${3:integer setmask}, ${4:integer setvalue})$0",
        "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX\n\n"
    },
    "GETSETTRACKGROUPMEMBERSHIPHIGH eel2": {
        "prefix": "GetSetTrackGroupMembershipHigh",
        "scope": "eel2",
        "body": "GetSetTrackGroupMembershipHigh(${1:MediaTrack tr}, \"${2:groupname}\", ${3:uint setmask}, ${4:uint setvalue})$0",
        "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX\n\n"
    },
    "RPR_GETSETTRACKGROUPMEMBERSHIPHIGH python": {
        "prefix": "RPR_GetSetTrackGroupMembershipHigh",
        "scope": "python",
        "body": "RPR_GetSetTrackGroupMembershipHigh(${1:MediaTrack tr}, ${2:String groupname}, ${3:Unknown setmask}, ${4:Unknown setvalue})$0",
        "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\n\nVOLUME_MASTER\n\nVOLUME_SLAVE\n\nVOLUME_VCA_MASTER\n\nVOLUME_VCA_SLAVE\n\nPAN_MASTER\n\nPAN_SLAVE\n\nWIDTH_MASTER\n\nWIDTH_SLAVE\n\nMUTE_MASTER\n\nMUTE_SLAVE\n\nSOLO_MASTER\n\nSOLO_SLAVE\n\nRECARM_MASTER\n\nRECARM_SLAVE\n\nPOLARITY_MASTER\n\nPOLARITY_SLAVE\n\nAUTOMODE_MASTER\n\nAUTOMODE_SLAVE\n\nVOLUME_REVERSE\n\nPAN_REVERSE\n\nWIDTH_REVERSE\n\nNO_MASTER_WHEN_SLAVE\n\nVOLUME_VCA_SLAVE_ISPREFX\n\n"
    },
    "REAPER.GETSETTRACKSTATE lua": {
        "prefix": "reaper.GetSetTrackState",
        "scope": "lua",
        "body": "reaper.GetSetTrackState(${1:MediaTrack track}, ${2:string str})$0",
        "description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
    },
    "GETSETTRACKSTATE eel2": {
        "prefix": "GetSetTrackState",
        "scope": "eel2",
        "body": "GetSetTrackState(${1:MediaTrack track}, ${2:#str})$0",
        "description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
    },
    "RPR_GETSETTRACKSTATE python": {
        "prefix": "RPR_GetSetTrackState",
        "scope": "python",
        "body": "RPR_GetSetTrackState(${1:track}, ${2:str}, ${3:str_sz})$0",
        "description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
    },
    "REAPER.GETSETTRACKSTATE2 lua": {
        "prefix": "reaper.GetSetTrackState2",
        "scope": "lua",
        "body": "reaper.GetSetTrackState2(${1:MediaTrack track}, ${2:string str}, ${3:boolean isundo})$0",
        "description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
    },
    "GETSETTRACKSTATE2 eel2": {
        "prefix": "GetSetTrackState2",
        "scope": "eel2",
        "body": "GetSetTrackState2(${1:MediaTrack track}, ${2:#str}, ${3:bool isundo})$0",
        "description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
    },
    "RPR_GETSETTRACKSTATE2 python": {
        "prefix": "RPR_GetSetTrackState2",
        "scope": "python",
        "body": "RPR_GetSetTrackState2(${1:track}, ${2:str}, ${3:str_sz}, ${4:isundo})$0",
        "description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
    },
    "REAPER.GETSUBPROJECTFROMSOURCE lua": {
        "prefix": "reaper.GetSubProjectFromSource",
        "scope": "lua",
        "body": "reaper.GetSubProjectFromSource(${1:PCM_source src})$0",
        "description": ""
    },
    "GETSUBPROJECTFROMSOURCE eel2": {
        "prefix": "GetSubProjectFromSource",
        "scope": "eel2",
        "body": "GetSubProjectFromSource(${1:PCM_source src})$0",
        "description": ""
    },
    "RPR_GETSUBPROJECTFROMSOURCE python": {
        "prefix": "RPR_GetSubProjectFromSource",
        "scope": "python",
        "body": "RPR_GetSubProjectFromSource(${1:PCM_source src})$0",
        "description": ""
    },
    "REAPER.GETTAKE lua": {
        "prefix": "reaper.GetTake",
        "scope": "lua",
        "body": "reaper.GetTake(${1:MediaItem item}, ${2:integer takeidx})$0",
        "description": "get a take from an item by take count (zero-based)\n\n"
    },
    "GETTAKE eel2": {
        "prefix": "GetTake",
        "scope": "eel2",
        "body": "GetTake(${1:MediaItem item}, ${2:int takeidx})$0",
        "description": "get a take from an item by take count (zero-based)\n\n"
    },
    "RPR_GETTAKE python": {
        "prefix": "RPR_GetTake",
        "scope": "python",
        "body": "RPR_GetTake(${1:MediaItem item}, ${2:Int takeidx})$0",
        "description": "get a take from an item by take count (zero-based)\n\n"
    },
    "REAPER.GETTAKEENVELOPE lua": {
        "prefix": "reaper.GetTakeEnvelope",
        "scope": "lua",
        "body": "reaper.GetTakeEnvelope(${1:MediaItem_Take take}, ${2:integer envidx})$0",
        "description": ""
    },
    "GETTAKEENVELOPE eel2": {
        "prefix": "GetTakeEnvelope",
        "scope": "eel2",
        "body": "GetTakeEnvelope(${1:MediaItem_Take take}, ${2:int envidx})$0",
        "description": ""
    },
    "RPR_GETTAKEENVELOPE python": {
        "prefix": "RPR_GetTakeEnvelope",
        "scope": "python",
        "body": "RPR_GetTakeEnvelope(${1:MediaItem_Take take}, ${2:Int envidx})$0",
        "description": ""
    },
    "REAPER.GETTAKEENVELOPEBYNAME lua": {
        "prefix": "reaper.GetTakeEnvelopeByName",
        "scope": "lua",
        "body": "reaper.GetTakeEnvelopeByName(${1:MediaItem_Take take}, ${2:string envname})$0",
        "description": ""
    },
    "GETTAKEENVELOPEBYNAME eel2": {
        "prefix": "GetTakeEnvelopeByName",
        "scope": "eel2",
        "body": "GetTakeEnvelopeByName(${1:MediaItem_Take take}, \"${2:envname}\")$0",
        "description": ""
    },
    "RPR_GETTAKEENVELOPEBYNAME python": {
        "prefix": "RPR_GetTakeEnvelopeByName",
        "scope": "python",
        "body": "RPR_GetTakeEnvelopeByName(${1:MediaItem_Take take}, ${2:String envname})$0",
        "description": ""
    },
    "REAPER.GETTAKENAME lua": {
        "prefix": "reaper.GetTakeName",
        "scope": "lua",
        "body": "reaper.GetTakeName(${1:MediaItem_Take take})$0",
        "description": "returns NULL if the take is not valid\n\n"
    },
    "GETTAKENAME eel2": {
        "prefix": "GetTakeName",
        "scope": "eel2",
        "body": "GetTakeName(${1:#retval}, ${2:MediaItem_Take take})$0",
        "description": "returns NULL if the take is not valid\n\n"
    },
    "RPR_GETTAKENAME python": {
        "prefix": "RPR_GetTakeName",
        "scope": "python",
        "body": "RPR_GetTakeName(${1:MediaItem_Take take})$0",
        "description": "returns NULL if the take is not valid\n\n"
    },
    "REAPER.GETTAKENUMSTRETCHMARKERS lua": {
        "prefix": "reaper.GetTakeNumStretchMarkers",
        "scope": "lua",
        "body": "reaper.GetTakeNumStretchMarkers(${1:MediaItem_Take take})$0",
        "description": "Returns number of stretch markers in take\n\n"
    },
    "GETTAKENUMSTRETCHMARKERS eel2": {
        "prefix": "GetTakeNumStretchMarkers",
        "scope": "eel2",
        "body": "GetTakeNumStretchMarkers(${1:MediaItem_Take take})$0",
        "description": "Returns number of stretch markers in take\n\n"
    },
    "RPR_GETTAKENUMSTRETCHMARKERS python": {
        "prefix": "RPR_GetTakeNumStretchMarkers",
        "scope": "python",
        "body": "RPR_GetTakeNumStretchMarkers(${1:MediaItem_Take take})$0",
        "description": "Returns number of stretch markers in take\n\n"
    },
    "REAPER.GETTAKESTRETCHMARKER lua": {
        "prefix": "reaper.GetTakeStretchMarker",
        "scope": "lua",
        "body": "reaper.GetTakeStretchMarker(${1:MediaItem_Take take}, ${2:integer idx})$0",
        "description": "Gets information on a stretch marker, idx is 0..n. Returns false if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, next marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated.\n\n"
    },
    "GETTAKESTRETCHMARKER eel2": {
        "prefix": "GetTakeStretchMarker",
        "scope": "eel2",
        "body": "GetTakeStretchMarker(${1:MediaItem_Take take}, ${2:int idx}, ${3:&pos}, ${4:optional &srcpos})$0",
        "description": "Gets information on a stretch marker, idx is 0..n. Returns false if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, next marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated.\n\n"
    },
    "RPR_GETTAKESTRETCHMARKER python": {
        "prefix": "RPR_GetTakeStretchMarker",
        "scope": "python",
        "body": "RPR_GetTakeStretchMarker(${1:take}, ${2:idx}, ${3:posOut}, ${4:srcposOutOptional})$0",
        "description": "Gets information on a stretch marker, idx is 0..n. Returns false if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, next marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated.\n\n"
    },
    "REAPER.GETTAKESTRETCHMARKERSLOPE lua": {
        "prefix": "reaper.GetTakeStretchMarkerSlope",
        "scope": "lua",
        "body": "reaper.GetTakeStretchMarkerSlope(${1:MediaItem_Take take}, ${2:integer idx})$0",
        "description": "See SetTakeStretchMarkerSlope\n\n"
    },
    "GETTAKESTRETCHMARKERSLOPE eel2": {
        "prefix": "GetTakeStretchMarkerSlope",
        "scope": "eel2",
        "body": "GetTakeStretchMarkerSlope(${1:MediaItem_Take take}, ${2:int idx})$0",
        "description": "See SetTakeStretchMarkerSlope\n\n"
    },
    "RPR_GETTAKESTRETCHMARKERSLOPE python": {
        "prefix": "RPR_GetTakeStretchMarkerSlope",
        "scope": "python",
        "body": "RPR_GetTakeStretchMarkerSlope(${1:MediaItem_Take take}, ${2:Int idx})$0",
        "description": "See SetTakeStretchMarkerSlope\n\n"
    },
    "REAPER.GETTCPFXPARM lua": {
        "prefix": "reaper.GetTCPFXParm",
        "scope": "lua",
        "body": "reaper.GetTCPFXParm(${1:ReaProject project}, ${2:MediaTrack track}, ${3:integer index})$0",
        "description": "Get information about a specific FX parameter knob (see CountTCPFXParms).\n\n"
    },
    "GETTCPFXPARM eel2": {
        "prefix": "GetTCPFXParm",
        "scope": "eel2",
        "body": "GetTCPFXParm(${1:ReaProject project}, ${2:MediaTrack track}, ${3:int index}, ${4:int &fxindex}, ${5:int &parmidx})$0",
        "description": "Get information about a specific FX parameter knob (see CountTCPFXParms).\n\n"
    },
    "RPR_GETTCPFXPARM python": {
        "prefix": "RPR_GetTCPFXParm",
        "scope": "python",
        "body": "RPR_GetTCPFXParm(${1:project}, ${2:track}, ${3:index}, ${4:fxindexOut}, ${5:parmidxOut})$0",
        "description": "Get information about a specific FX parameter knob (see CountTCPFXParms).\n\n"
    },
    "REAPER.GETTEMPOMATCHPLAYRATE lua": {
        "prefix": "reaper.GetTempoMatchPlayRate",
        "scope": "lua",
        "body": "reaper.GetTempoMatchPlayRate(${1:PCM_source source}, ${2:number srcscale}, ${3:number position}, ${4:number mult})$0",
        "description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256\n\n"
    },
    "GETTEMPOMATCHPLAYRATE eel2": {
        "prefix": "GetTempoMatchPlayRate",
        "scope": "eel2",
        "body": "GetTempoMatchPlayRate(${1:PCM_source source}, ${2:srcscale}, ${3:position}, ${4:mult}, ${5:&rate}, ${6:&targetlen})$0",
        "description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256\n\n"
    },
    "RPR_GETTEMPOMATCHPLAYRATE python": {
        "prefix": "RPR_GetTempoMatchPlayRate",
        "scope": "python",
        "body": "RPR_GetTempoMatchPlayRate(${1:source}, ${2:srcscale}, ${3:position}, ${4:mult}, ${5:rateOut}, ${6:targetlenOut})$0",
        "description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256\n\n"
    },
    "REAPER.GETTEMPOTIMESIGMARKER lua": {
        "prefix": "reaper.GetTempoTimeSigMarker",
        "scope": "lua",
        "body": "reaper.GetTempoTimeSigMarker(${1:ReaProject proj}, ${2:integer ptidx})$0",
        "description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "GETTEMPOTIMESIGMARKER eel2": {
        "prefix": "GetTempoTimeSigMarker",
        "scope": "eel2",
        "body": "GetTempoTimeSigMarker(${1:ReaProject proj}, ${2:int ptidx}, ${3:&timepos}, ${4:int &measurepos}, ${5:&beatpos}, ${6:&bpm}, ${7:int &timesig_num}, ${8:int &timesig_denom}, ${9:bool &lineartempo})$0",
        "description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "RPR_GETTEMPOTIMESIGMARKER python": {
        "prefix": "RPR_GetTempoTimeSigMarker",
        "scope": "python",
        "body": "RPR_GetTempoTimeSigMarker(${1:proj}, ${2:ptidx}, ${3:timeposOut}, ${4:measureposOut}, ${5:beatposOut}, ${6:bpmOut}, ${7:timesig_numOut}, ${8:timesig_denomOut}, ${9:lineartempoOut})$0",
        "description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "REAPER.GETTOGGLECOMMANDSTATE lua": {
        "prefix": "reaper.GetToggleCommandState",
        "scope": "lua",
        "body": "reaper.GetToggleCommandState(${1:integer command_id})$0",
        "description": "See GetToggleCommandStateEx.\n\n"
    },
    "GETTOGGLECOMMANDSTATE eel2": {
        "prefix": "GetToggleCommandState",
        "scope": "eel2",
        "body": "GetToggleCommandState(${1:int command_id})$0",
        "description": "See GetToggleCommandStateEx.\n\n"
    },
    "RPR_GETTOGGLECOMMANDSTATE python": {
        "prefix": "RPR_GetToggleCommandState",
        "scope": "python",
        "body": "RPR_GetToggleCommandState(${1:Int command_id})$0",
        "description": "See GetToggleCommandStateEx.\n\n"
    },
    "REAPER.GETTOGGLECOMMANDSTATEEX lua": {
        "prefix": "reaper.GetToggleCommandStateEx",
        "scope": "lua",
        "body": "reaper.GetToggleCommandStateEx(${1:integer section_id}, ${2:integer command_id})$0",
        "description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned.\n\n"
    },
    "GETTOGGLECOMMANDSTATEEX eel2": {
        "prefix": "GetToggleCommandStateEx",
        "scope": "eel2",
        "body": "GetToggleCommandStateEx(${1:int section_id}, ${2:int command_id})$0",
        "description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned.\n\n"
    },
    "RPR_GETTOGGLECOMMANDSTATEEX python": {
        "prefix": "RPR_GetToggleCommandStateEx",
        "scope": "python",
        "body": "RPR_GetToggleCommandStateEx(${1:Int section_id}, ${2:Int command_id})$0",
        "description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned.\n\n"
    },
    "REAPER.GETTOOLTIPWINDOW lua": {
        "prefix": "reaper.GetTooltipWindow",
        "scope": "lua",
        "body": "reaper.GetTooltipWindow()$0",
        "description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL.\n\n"
    },
    "GETTOOLTIPWINDOW eel2": {
        "prefix": "GetTooltipWindow",
        "scope": "eel2",
        "body": "GetTooltipWindow()$0",
        "description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL.\n\n"
    },
    "RPR_GETTOOLTIPWINDOW python": {
        "prefix": "RPR_GetTooltipWindow",
        "scope": "python",
        "body": "RPR_GetTooltipWindow()$0",
        "description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL.\n\n"
    },
    "REAPER.GETTRACK lua": {
        "prefix": "reaper.GetTrack",
        "scope": "lua",
        "body": "reaper.GetTrack(${1:ReaProject proj}, ${2:integer trackidx})$0",
        "description": "get a track from a project by track count (zero-based) (proj=0 for active project)\n\n"
    },
    "GETTRACK eel2": {
        "prefix": "GetTrack",
        "scope": "eel2",
        "body": "GetTrack(${1:ReaProject proj}, ${2:int trackidx})$0",
        "description": "get a track from a project by track count (zero-based) (proj=0 for active project)\n\n"
    },
    "RPR_GETTRACK python": {
        "prefix": "RPR_GetTrack",
        "scope": "python",
        "body": "RPR_GetTrack(${1:ReaProject proj}, ${2:Int trackidx})$0",
        "description": "get a track from a project by track count (zero-based) (proj=0 for active project)\n\n"
    },
    "REAPER.GETTRACKAUTOMATIONMODE lua": {
        "prefix": "reaper.GetTrackAutomationMode",
        "scope": "lua",
        "body": "reaper.GetTrackAutomationMode(${1:MediaTrack tr})$0",
        "description": "return the track mode, regardless of global override\n\n"
    },
    "GETTRACKAUTOMATIONMODE eel2": {
        "prefix": "GetTrackAutomationMode",
        "scope": "eel2",
        "body": "GetTrackAutomationMode(${1:MediaTrack tr})$0",
        "description": "return the track mode, regardless of global override\n\n"
    },
    "RPR_GETTRACKAUTOMATIONMODE python": {
        "prefix": "RPR_GetTrackAutomationMode",
        "scope": "python",
        "body": "RPR_GetTrackAutomationMode(${1:MediaTrack tr})$0",
        "description": "return the track mode, regardless of global override\n\n"
    },
    "REAPER.GETTRACKCOLOR lua": {
        "prefix": "reaper.GetTrackColor",
        "scope": "lua",
        "body": "reaper.GetTrackColor(${1:MediaTrack track})$0",
        "description": "Returns the track custom color as OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no color setting is returned as 0.\n\n"
    },
    "GETTRACKCOLOR eel2": {
        "prefix": "GetTrackColor",
        "scope": "eel2",
        "body": "GetTrackColor(${1:MediaTrack track})$0",
        "description": "Returns the track custom color as OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no color setting is returned as 0.\n\n"
    },
    "RPR_GETTRACKCOLOR python": {
        "prefix": "RPR_GetTrackColor",
        "scope": "python",
        "body": "RPR_GetTrackColor(${1:MediaTrack track})$0",
        "description": "Returns the track custom color as OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no color setting is returned as 0.\n\n"
    },
    "REAPER.GETTRACKDEPTH lua": {
        "prefix": "reaper.GetTrackDepth",
        "scope": "lua",
        "body": "reaper.GetTrackDepth(${1:MediaTrack track})$0",
        "description": ""
    },
    "GETTRACKDEPTH eel2": {
        "prefix": "GetTrackDepth",
        "scope": "eel2",
        "body": "GetTrackDepth(${1:MediaTrack track})$0",
        "description": ""
    },
    "RPR_GETTRACKDEPTH python": {
        "prefix": "RPR_GetTrackDepth",
        "scope": "python",
        "body": "RPR_GetTrackDepth(${1:MediaTrack track})$0",
        "description": ""
    },
    "REAPER.GETTRACKENVELOPE lua": {
        "prefix": "reaper.GetTrackEnvelope",
        "scope": "lua",
        "body": "reaper.GetTrackEnvelope(${1:MediaTrack track}, ${2:integer envidx})$0",
        "description": ""
    },
    "GETTRACKENVELOPE eel2": {
        "prefix": "GetTrackEnvelope",
        "scope": "eel2",
        "body": "GetTrackEnvelope(${1:MediaTrack track}, ${2:int envidx})$0",
        "description": ""
    },
    "RPR_GETTRACKENVELOPE python": {
        "prefix": "RPR_GetTrackEnvelope",
        "scope": "python",
        "body": "RPR_GetTrackEnvelope(${1:MediaTrack track}, ${2:Int envidx})$0",
        "description": ""
    },
    "REAPER.GETTRACKENVELOPEBYCHUNKNAME lua": {
        "prefix": "reaper.GetTrackEnvelopeByChunkName",
        "scope": "lua",
        "body": "reaper.GetTrackEnvelopeByChunkName(${1:MediaTrack tr}, ${2:string cfgchunkname})$0",
        "description": "Gets a built-in track envelope by configuration chunk name, e.g. \"<VOLENV\".\n\n"
    },
    "GETTRACKENVELOPEBYCHUNKNAME eel2": {
        "prefix": "GetTrackEnvelopeByChunkName",
        "scope": "eel2",
        "body": "GetTrackEnvelopeByChunkName(${1:MediaTrack tr}, \"${2:cfgchunkname}\")$0",
        "description": "Gets a built-in track envelope by configuration chunk name, e.g. \"<VOLENV\".\n\n"
    },
    "RPR_GETTRACKENVELOPEBYCHUNKNAME python": {
        "prefix": "RPR_GetTrackEnvelopeByChunkName",
        "scope": "python",
        "body": "RPR_GetTrackEnvelopeByChunkName(${1:MediaTrack tr}, ${2:String cfgchunkname})$0",
        "description": "Gets a built-in track envelope by configuration chunk name, e.g. \"<VOLENV\".\n\n"
    },
    "REAPER.GETTRACKENVELOPEBYNAME lua": {
        "prefix": "reaper.GetTrackEnvelopeByName",
        "scope": "lua",
        "body": "reaper.GetTrackEnvelopeByName(${1:MediaTrack track}, ${2:string envname})$0",
        "description": ""
    },
    "GETTRACKENVELOPEBYNAME eel2": {
        "prefix": "GetTrackEnvelopeByName",
        "scope": "eel2",
        "body": "GetTrackEnvelopeByName(${1:MediaTrack track}, \"${2:envname}\")$0",
        "description": ""
    },
    "RPR_GETTRACKENVELOPEBYNAME python": {
        "prefix": "RPR_GetTrackEnvelopeByName",
        "scope": "python",
        "body": "RPR_GetTrackEnvelopeByName(${1:MediaTrack track}, ${2:String envname})$0",
        "description": ""
    },
    "REAPER.GETTRACKGUID lua": {
        "prefix": "reaper.GetTrackGUID",
        "scope": "lua",
        "body": "reaper.GetTrackGUID(${1:MediaTrack tr})$0",
        "description": ""
    },
    "GETTRACKGUID eel2": {
        "prefix": "GetTrackGUID",
        "scope": "eel2",
        "body": "GetTrackGUID(${1:#retguid}, ${2:MediaTrack tr})$0",
        "description": ""
    },
    "RPR_GETTRACKGUID python": {
        "prefix": "RPR_GetTrackGUID",
        "scope": "python",
        "body": "RPR_GetTrackGUID(${1:MediaTrack tr})$0",
        "description": ""
    },
    "REAPER.GETTRACKMEDIAITEM lua": {
        "prefix": "reaper.GetTrackMediaItem",
        "scope": "lua",
        "body": "reaper.GetTrackMediaItem(${1:MediaTrack tr}, ${2:integer itemidx})$0",
        "description": ""
    },
    "GETTRACKMEDIAITEM eel2": {
        "prefix": "GetTrackMediaItem",
        "scope": "eel2",
        "body": "GetTrackMediaItem(${1:MediaTrack tr}, ${2:int itemidx})$0",
        "description": ""
    },
    "RPR_GETTRACKMEDIAITEM python": {
        "prefix": "RPR_GetTrackMediaItem",
        "scope": "python",
        "body": "RPR_GetTrackMediaItem(${1:MediaTrack tr}, ${2:Int itemidx})$0",
        "description": ""
    },
    "REAPER.GETTRACKMIDILYRICS lua": {
        "prefix": "reaper.GetTrackMIDILyrics",
        "scope": "lua",
        "body": "reaper.GetTrackMIDILyrics(${1:MediaTrack track}, ${2:integer flag}, ${3:string bufWant16384})$0",
        "description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t\u0002.1.1\\tLyric for measure 2 beat 1\t\"). See SetTrackMIDILyrics\n\n"
    },
    "GETTRACKMIDILYRICS eel2": {
        "prefix": "GetTrackMIDILyrics",
        "scope": "eel2",
        "body": "GetTrackMIDILyrics(${1:MediaTrack track}, ${2:int flag}, ${3:#bufWant16384})$0",
        "description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t\u0002.1.1\\tLyric for measure 2 beat 1\t\"). See SetTrackMIDILyrics\n\n"
    },
    "RPR_GETTRACKMIDILYRICS python": {
        "prefix": "RPR_GetTrackMIDILyrics",
        "scope": "python",
        "body": "RPR_GetTrackMIDILyrics(${1:track}, ${2:flag}, ${3:bufWant16384}, ${4:bufWant16384_sz})$0",
        "description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t\u0002.1.1\\tLyric for measure 2 beat 1\t\"). See SetTrackMIDILyrics\n\n"
    },
    "REAPER.GETTRACKMIDINOTENAME lua": {
        "prefix": "reaper.GetTrackMIDINoteName",
        "scope": "lua",
        "body": "reaper.GetTrackMIDINoteName(${1:integer track}, ${2:integer pitch}, ${3:integer chan})$0",
        "description": "see GetTrackMIDINoteNameEx\n\n"
    },
    "GETTRACKMIDINOTENAME eel2": {
        "prefix": "GetTrackMIDINoteName",
        "scope": "eel2",
        "body": "GetTrackMIDINoteName(${1:#retval}, ${2:int track}, ${3:int pitch}, ${4:int chan})$0",
        "description": "see GetTrackMIDINoteNameEx\n\n"
    },
    "RPR_GETTRACKMIDINOTENAME python": {
        "prefix": "RPR_GetTrackMIDINoteName",
        "scope": "python",
        "body": "RPR_GetTrackMIDINoteName(${1:Int track}, ${2:Int pitch}, ${3:Int chan})$0",
        "description": "see GetTrackMIDINoteNameEx\n\n"
    },
    "REAPER.GETTRACKMIDINOTENAMEEX lua": {
        "prefix": "reaper.GetTrackMIDINoteNameEx",
        "scope": "lua",
        "body": "reaper.GetTrackMIDINoteNameEx(${1:ReaProject proj}, ${2:MediaTrack track}, ${3:integer pitch}, ${4:integer chan})$0",
        "description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx\n\n"
    },
    "GETTRACKMIDINOTENAMEEX eel2": {
        "prefix": "GetTrackMIDINoteNameEx",
        "scope": "eel2",
        "body": "GetTrackMIDINoteNameEx(${1:#retval}, ${2:ReaProject proj}, ${3:MediaTrack track}, ${4:int pitch}, ${5:int chan})$0",
        "description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx\n\n"
    },
    "RPR_GETTRACKMIDINOTENAMEEX python": {
        "prefix": "RPR_GetTrackMIDINoteNameEx",
        "scope": "python",
        "body": "RPR_GetTrackMIDINoteNameEx(${1:ReaProject proj}, ${2:MediaTrack track}, ${3:Int pitch}, ${4:Int chan})$0",
        "description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx\n\n"
    },
    "REAPER.GETTRACKMIDINOTERANGE lua": {
        "prefix": "reaper.GetTrackMIDINoteRange",
        "scope": "lua",
        "body": "reaper.GetTrackMIDINoteRange(${1:ReaProject proj}, ${2:MediaTrack track})$0",
        "description": ""
    },
    "GETTRACKMIDINOTERANGE eel2": {
        "prefix": "GetTrackMIDINoteRange",
        "scope": "eel2",
        "body": "GetTrackMIDINoteRange(${1:ReaProject proj}, ${2:MediaTrack track}, ${3:int &note_lo}, ${4:int &note_hi})$0",
        "description": ""
    },
    "RPR_GETTRACKMIDINOTERANGE python": {
        "prefix": "RPR_GetTrackMIDINoteRange",
        "scope": "python",
        "body": "RPR_GetTrackMIDINoteRange(${1:proj}, ${2:track}, ${3:note_loOut}, ${4:note_hiOut})$0",
        "description": ""
    },
    "REAPER.GETTRACKNAME lua": {
        "prefix": "reaper.GetTrackName",
        "scope": "lua",
        "body": "reaper.GetTrackName(${1:MediaTrack track}, ${2:string buf})$0",
        "description": "Returns \"MASTER\" for master track, \"Track N\" if track has no name.\n\n"
    },
    "GETTRACKNAME eel2": {
        "prefix": "GetTrackName",
        "scope": "eel2",
        "body": "GetTrackName(${1:MediaTrack track}, ${2:#buf})$0",
        "description": "Returns \"MASTER\" for master track, \"Track N\" if track has no name.\n\n"
    },
    "RPR_GETTRACKNAME python": {
        "prefix": "RPR_GetTrackName",
        "scope": "python",
        "body": "RPR_GetTrackName(${1:track}, ${2:buf}, ${3:buf_sz})$0",
        "description": "Returns \"MASTER\" for master track, \"Track N\" if track has no name.\n\n"
    },
    "REAPER.GETTRACKNUMMEDIAITEMS lua": {
        "prefix": "reaper.GetTrackNumMediaItems",
        "scope": "lua",
        "body": "reaper.GetTrackNumMediaItems(${1:MediaTrack tr})$0",
        "description": ""
    },
    "GETTRACKNUMMEDIAITEMS eel2": {
        "prefix": "GetTrackNumMediaItems",
        "scope": "eel2",
        "body": "GetTrackNumMediaItems(${1:MediaTrack tr})$0",
        "description": ""
    },
    "RPR_GETTRACKNUMMEDIAITEMS python": {
        "prefix": "RPR_GetTrackNumMediaItems",
        "scope": "python",
        "body": "RPR_GetTrackNumMediaItems(${1:MediaTrack tr})$0",
        "description": ""
    },
    "REAPER.GETTRACKNUMSENDS lua": {
        "prefix": "reaper.GetTrackNumSends",
        "scope": "lua",
        "body": "reaper.GetTrackNumSends(${1:MediaTrack tr}, ${2:integer category})$0",
        "description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs\n\n"
    },
    "GETTRACKNUMSENDS eel2": {
        "prefix": "GetTrackNumSends",
        "scope": "eel2",
        "body": "GetTrackNumSends(${1:MediaTrack tr}, ${2:int category})$0",
        "description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs\n\n"
    },
    "RPR_GETTRACKNUMSENDS python": {
        "prefix": "RPR_GetTrackNumSends",
        "scope": "python",
        "body": "RPR_GetTrackNumSends(${1:MediaTrack tr}, ${2:Int category})$0",
        "description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs\n\n"
    },
    "REAPER.GETTRACKRECEIVENAME lua": {
        "prefix": "reaper.GetTrackReceiveName",
        "scope": "lua",
        "body": "reaper.GetTrackReceiveName(${1:MediaTrack track}, ${2:integer recv_index}, ${3:string buf})$0",
        "description": "See GetTrackSendName.\n\n"
    },
    "GETTRACKRECEIVENAME eel2": {
        "prefix": "GetTrackReceiveName",
        "scope": "eel2",
        "body": "GetTrackReceiveName(${1:MediaTrack track}, ${2:int recv_index}, ${3:#buf})$0",
        "description": "See GetTrackSendName.\n\n"
    },
    "RPR_GETTRACKRECEIVENAME python": {
        "prefix": "RPR_GetTrackReceiveName",
        "scope": "python",
        "body": "RPR_GetTrackReceiveName(${1:track}, ${2:recv_index}, ${3:buf}, ${4:buf_sz})$0",
        "description": "See GetTrackSendName.\n\n"
    },
    "REAPER.GETTRACKRECEIVEUIMUTE lua": {
        "prefix": "reaper.GetTrackReceiveUIMute",
        "scope": "lua",
        "body": "reaper.GetTrackReceiveUIMute(${1:MediaTrack track}, ${2:integer recv_index})$0",
        "description": "See GetTrackSendUIMute.\n\n"
    },
    "GETTRACKRECEIVEUIMUTE eel2": {
        "prefix": "GetTrackReceiveUIMute",
        "scope": "eel2",
        "body": "GetTrackReceiveUIMute(${1:MediaTrack track}, ${2:int recv_index}, ${3:bool &mute})$0",
        "description": "See GetTrackSendUIMute.\n\n"
    },
    "RPR_GETTRACKRECEIVEUIMUTE python": {
        "prefix": "RPR_GetTrackReceiveUIMute",
        "scope": "python",
        "body": "RPR_GetTrackReceiveUIMute(${1:track}, ${2:recv_index}, ${3:muteOut})$0",
        "description": "See GetTrackSendUIMute.\n\n"
    },
    "REAPER.GETTRACKRECEIVEUIVOLPAN lua": {
        "prefix": "reaper.GetTrackReceiveUIVolPan",
        "scope": "lua",
        "body": "reaper.GetTrackReceiveUIVolPan(${1:MediaTrack track}, ${2:integer recv_index})$0",
        "description": "See GetTrackSendUIVolPan.\n\n"
    },
    "GETTRACKRECEIVEUIVOLPAN eel2": {
        "prefix": "GetTrackReceiveUIVolPan",
        "scope": "eel2",
        "body": "GetTrackReceiveUIVolPan(${1:MediaTrack track}, ${2:int recv_index}, ${3:&volume}, ${4:&pan})$0",
        "description": "See GetTrackSendUIVolPan.\n\n"
    },
    "RPR_GETTRACKRECEIVEUIVOLPAN python": {
        "prefix": "RPR_GetTrackReceiveUIVolPan",
        "scope": "python",
        "body": "RPR_GetTrackReceiveUIVolPan(${1:track}, ${2:recv_index}, ${3:volumeOut}, ${4:panOut})$0",
        "description": "See GetTrackSendUIVolPan.\n\n"
    },
    "REAPER.GETTRACKSENDINFO_VALUE lua": {
        "prefix": "reaper.GetTrackSendInfo_Value",
        "scope": "lua",
        "body": "reaper.GetTrackSendInfo_Value(${1:MediaTrack tr}, ${2:integer category}, ${3:integer sendidx}, ${4:string parmname})$0",
        "description": "Get send/receive/hardware output numerical-value attributes.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,&1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\n\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
    },
    "GETTRACKSENDINFO_VALUE eel2": {
        "prefix": "GetTrackSendInfo_Value",
        "scope": "eel2",
        "body": "GetTrackSendInfo_Value(${1:MediaTrack tr}, ${2:int category}, ${3:int sendidx}, \"${4:parmname}\")$0",
        "description": "Get send/receive/hardware output numerical-value attributes.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,&1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\n\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
    },
    "RPR_GETTRACKSENDINFO_VALUE python": {
        "prefix": "RPR_GetTrackSendInfo_Value",
        "scope": "python",
        "body": "RPR_GetTrackSendInfo_Value(${1:MediaTrack tr}, ${2:Int category}, ${3:Int sendidx}, ${4:String parmname})$0",
        "description": "Get send/receive/hardware output numerical-value attributes.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,&1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\n\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
    },
    "REAPER.GETTRACKSENDNAME lua": {
        "prefix": "reaper.GetTrackSendName",
        "scope": "lua",
        "body": "reaper.GetTrackSendName(${1:MediaTrack track}, ${2:integer send_index}, ${3:string buf})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.\n\n"
    },
    "GETTRACKSENDNAME eel2": {
        "prefix": "GetTrackSendName",
        "scope": "eel2",
        "body": "GetTrackSendName(${1:MediaTrack track}, ${2:int send_index}, ${3:#buf})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.\n\n"
    },
    "RPR_GETTRACKSENDNAME python": {
        "prefix": "RPR_GetTrackSendName",
        "scope": "python",
        "body": "RPR_GetTrackSendName(${1:track}, ${2:send_index}, ${3:buf}, ${4:buf_sz})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.\n\n"
    },
    "REAPER.GETTRACKSENDUIMUTE lua": {
        "prefix": "reaper.GetTrackSendUIMute",
        "scope": "lua",
        "body": "reaper.GetTrackSendUIMute(${1:MediaTrack track}, ${2:integer send_index})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.\n\n"
    },
    "GETTRACKSENDUIMUTE eel2": {
        "prefix": "GetTrackSendUIMute",
        "scope": "eel2",
        "body": "GetTrackSendUIMute(${1:MediaTrack track}, ${2:int send_index}, ${3:bool &mute})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.\n\n"
    },
    "RPR_GETTRACKSENDUIMUTE python": {
        "prefix": "RPR_GetTrackSendUIMute",
        "scope": "python",
        "body": "RPR_GetTrackSendUIMute(${1:track}, ${2:send_index}, ${3:muteOut})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.\n\n"
    },
    "REAPER.GETTRACKSENDUIVOLPAN lua": {
        "prefix": "reaper.GetTrackSendUIVolPan",
        "scope": "lua",
        "body": "reaper.GetTrackSendUIVolPan(${1:MediaTrack track}, ${2:integer send_index})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.\n\n"
    },
    "GETTRACKSENDUIVOLPAN eel2": {
        "prefix": "GetTrackSendUIVolPan",
        "scope": "eel2",
        "body": "GetTrackSendUIVolPan(${1:MediaTrack track}, ${2:int send_index}, ${3:&volume}, ${4:&pan})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.\n\n"
    },
    "RPR_GETTRACKSENDUIVOLPAN python": {
        "prefix": "RPR_GetTrackSendUIVolPan",
        "scope": "python",
        "body": "RPR_GetTrackSendUIVolPan(${1:track}, ${2:send_index}, ${3:volumeOut}, ${4:panOut})$0",
        "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.\n\n"
    },
    "REAPER.GETTRACKSTATE lua": {
        "prefix": "reaper.GetTrackState",
        "scope": "lua",
        "body": "reaper.GetTrackState(${1:MediaTrack track})$0",
        "description": "Gets track state, returns track name.\n\nflags will be set to:\n\n&1=folder\n\n&2=selected\n\n&4=has fx enabled\n\n&8=muted\n\n&16=soloed\n\n&32=SIP'd (with &16)\n\n&64=rec armed\n\n&128=rec monitoring on\n\n&256=rec monitoring auto\n\n&512=hide from TCP\n\n&1024=hide from MCP\n\n"
    },
    "GETTRACKSTATE eel2": {
        "prefix": "GetTrackState",
        "scope": "eel2",
        "body": "GetTrackState(${1:#retval}, ${2:MediaTrack track}, ${3:int &flags})$0",
        "description": "Gets track state, returns track name.\n\nflags will be set to:\n\n&1=folder\n\n&2=selected\n\n&4=has fx enabled\n\n&8=muted\n\n&16=soloed\n\n&32=SIP'd (with &16)\n\n&64=rec armed\n\n&128=rec monitoring on\n\n&256=rec monitoring auto\n\n&512=hide from TCP\n\n&1024=hide from MCP\n\n"
    },
    "RPR_GETTRACKSTATE python": {
        "prefix": "RPR_GetTrackState",
        "scope": "python",
        "body": "RPR_GetTrackState(${1:track}, ${2:flagsOut})$0",
        "description": "Gets track state, returns track name.\n\nflags will be set to:\n\n&1=folder\n\n&2=selected\n\n&4=has fx enabled\n\n&8=muted\n\n&16=soloed\n\n&32=SIP'd (with &16)\n\n&64=rec armed\n\n&128=rec monitoring on\n\n&256=rec monitoring auto\n\n&512=hide from TCP\n\n&1024=hide from MCP\n\n"
    },
    "REAPER.GETTRACKSTATECHUNK lua": {
        "prefix": "reaper.GetTrackStateChunk",
        "scope": "lua",
        "body": "reaper.GetTrackStateChunk(${1:MediaTrack track}, ${2:string str}, ${3:boolean isundo})$0",
        "description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "GETTRACKSTATECHUNK eel2": {
        "prefix": "GetTrackStateChunk",
        "scope": "eel2",
        "body": "GetTrackStateChunk(${1:MediaTrack track}, ${2:#str}, ${3:bool isundo})$0",
        "description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "RPR_GETTRACKSTATECHUNK python": {
        "prefix": "RPR_GetTrackStateChunk",
        "scope": "python",
        "body": "RPR_GetTrackStateChunk(${1:track}, ${2:strNeedBig}, ${3:strNeedBig_sz}, ${4:isundoOptional})$0",
        "description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "REAPER.GETTRACKUIMUTE lua": {
        "prefix": "reaper.GetTrackUIMute",
        "scope": "lua",
        "body": "reaper.GetTrackUIMute(${1:MediaTrack track})$0",
        "description": ""
    },
    "GETTRACKUIMUTE eel2": {
        "prefix": "GetTrackUIMute",
        "scope": "eel2",
        "body": "GetTrackUIMute(${1:MediaTrack track}, ${2:bool &mute})$0",
        "description": ""
    },
    "RPR_GETTRACKUIMUTE python": {
        "prefix": "RPR_GetTrackUIMute",
        "scope": "python",
        "body": "RPR_GetTrackUIMute(${1:track}, ${2:muteOut})$0",
        "description": ""
    },
    "REAPER.GETTRACKUIPAN lua": {
        "prefix": "reaper.GetTrackUIPan",
        "scope": "lua",
        "body": "reaper.GetTrackUIPan(${1:MediaTrack track})$0",
        "description": ""
    },
    "GETTRACKUIPAN eel2": {
        "prefix": "GetTrackUIPan",
        "scope": "eel2",
        "body": "GetTrackUIPan(${1:MediaTrack track}, ${2:&pan1}, ${3:&pan2}, ${4:int &panmode})$0",
        "description": ""
    },
    "RPR_GETTRACKUIPAN python": {
        "prefix": "RPR_GetTrackUIPan",
        "scope": "python",
        "body": "RPR_GetTrackUIPan(${1:track}, ${2:pan1Out}, ${3:pan2Out}, ${4:panmodeOut})$0",
        "description": ""
    },
    "REAPER.GETTRACKUIVOLPAN lua": {
        "prefix": "reaper.GetTrackUIVolPan",
        "scope": "lua",
        "body": "reaper.GetTrackUIVolPan(${1:MediaTrack track})$0",
        "description": ""
    },
    "GETTRACKUIVOLPAN eel2": {
        "prefix": "GetTrackUIVolPan",
        "scope": "eel2",
        "body": "GetTrackUIVolPan(${1:MediaTrack track}, ${2:&volume}, ${3:&pan})$0",
        "description": ""
    },
    "RPR_GETTRACKUIVOLPAN python": {
        "prefix": "RPR_GetTrackUIVolPan",
        "scope": "python",
        "body": "RPR_GetTrackUIVolPan(${1:track}, ${2:volumeOut}, ${3:panOut})$0",
        "description": ""
    },
    "REAPER.GETUNDERRUNTIME lua": {
        "prefix": "reaper.GetUnderrunTime",
        "scope": "lua",
        "body": "reaper.GetUnderrunTime()$0",
        "description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)\n\n"
    },
    "GETUNDERRUNTIME eel2": {
        "prefix": "GetUnderrunTime",
        "scope": "eel2",
        "body": "GetUnderrunTime(${1:optional unsigned int &audio_xrun}, ${2:optional unsigned int &media_xrun}, ${3:optional unsigned int &curtime})$0",
        "description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)\n\n"
    },
    "RPR_GETUNDERRUNTIME python": {
        "prefix": "RPR_GetUnderrunTime",
        "scope": "python",
        "body": "RPR_GetUnderrunTime(${1:unsigned int audio_xrunOutOptional}, ${2:unsigned int media_xrunOutOptional}, ${3:unsigned int curtimeOutOptional})$0",
        "description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)\n\n"
    },
    "REAPER.GETUSERFILENAMEFORREAD lua": {
        "prefix": "reaper.GetUserFileNameForRead",
        "scope": "lua",
        "body": "reaper.GetUserFileNameForRead(${1:string filenameNeed4096}, ${2:string title}, ${3:string defext})$0",
        "description": "returns true if the user selected a valid file, false if the user canceled the dialog\n\n"
    },
    "GETUSERFILENAMEFORREAD eel2": {
        "prefix": "GetUserFileNameForRead",
        "scope": "eel2",
        "body": "GetUserFileNameForRead(${1:#filenameNeed4096}, \"${2:title}\", \"${3:defext}\")$0",
        "description": "returns true if the user selected a valid file, false if the user canceled the dialog\n\n"
    },
    "RPR_GETUSERFILENAMEFORREAD python": {
        "prefix": "RPR_GetUserFileNameForRead",
        "scope": "python",
        "body": "RPR_GetUserFileNameForRead(${1:filenameNeed4096}, ${2:title}, ${3:defext})$0",
        "description": "returns true if the user selected a valid file, false if the user canceled the dialog\n\n"
    },
    "REAPER.GETUSERINPUTS lua": {
        "prefix": "reaper.GetUserInputs",
        "scope": "lua",
        "body": "reaper.GetUserInputs(${1:string title}, ${2:integer num_inputs}, ${3:string captions_csv}, ${4:string retvals_csv})$0",
        "description": "Get values from the user.\n\nIf a caption begins with *, for example \"*password\", the edit field will not display the input text.\n\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. To increase text field width, add an extra caption field, and specify extrawidth=xyz\n\n"
    },
    "GETUSERINPUTS eel2": {
        "prefix": "GetUserInputs",
        "scope": "eel2",
        "body": "GetUserInputs(\"${1:title}\", ${2:int num_inputs}, \"${3:captions_csv}\", ${4:#retvals_csv})$0",
        "description": "Get values from the user.\n\nIf a caption begins with *, for example \"*password\", the edit field will not display the input text.\n\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. To increase text field width, add an extra caption field, and specify extrawidth=xyz\n\n"
    },
    "RPR_GETUSERINPUTS python": {
        "prefix": "RPR_GetUserInputs",
        "scope": "python",
        "body": "RPR_GetUserInputs(${1:title}, ${2:num_inputs}, ${3:captions_csv}, ${4:retvals_csv}, ${5:retvals_csv_sz})$0",
        "description": "Get values from the user.\n\nIf a caption begins with *, for example \"*password\", the edit field will not display the input text.\n\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. To increase text field width, add an extra caption field, and specify extrawidth=xyz\n\n"
    },
    "REAPER.GOTOMARKER lua": {
        "prefix": "reaper.GoToMarker",
        "scope": "lua",
        "body": "reaper.GoToMarker(${1:ReaProject proj}, ${2:integer marker_index}, ${3:boolean use_timeline_order})$0",
        "description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline. If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1.\n\n"
    },
    "GOTOMARKER eel2": {
        "prefix": "GoToMarker",
        "scope": "eel2",
        "body": "GoToMarker(${1:ReaProject proj}, ${2:int marker_index}, ${3:bool use_timeline_order})$0",
        "description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline. If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1.\n\n"
    },
    "RPR_GOTOMARKER python": {
        "prefix": "RPR_GoToMarker",
        "scope": "python",
        "body": "RPR_GoToMarker(${1:ReaProject proj}, ${2:Int marker_index}, ${3:Boolean use_timeline_order})$0",
        "description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline. If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1.\n\n"
    },
    "REAPER.GOTOREGION lua": {
        "prefix": "reaper.GoToRegion",
        "scope": "lua",
        "body": "reaper.GoToRegion(${1:ReaProject proj}, ${2:integer region_index}, ${3:boolean use_timeline_order})$0",
        "description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline. If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1.\n\n"
    },
    "GOTOREGION eel2": {
        "prefix": "GoToRegion",
        "scope": "eel2",
        "body": "GoToRegion(${1:ReaProject proj}, ${2:int region_index}, ${3:bool use_timeline_order})$0",
        "description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline. If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1.\n\n"
    },
    "RPR_GOTOREGION python": {
        "prefix": "RPR_GoToRegion",
        "scope": "python",
        "body": "RPR_GoToRegion(${1:ReaProject proj}, ${2:Int region_index}, ${3:Boolean use_timeline_order})$0",
        "description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline. If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1.\n\n"
    },
    "REAPER.GR_SELECTCOLOR lua": {
        "prefix": "reaper.GR_SelectColor",
        "scope": "lua",
        "body": "reaper.GR_SelectColor(${1:HWND hwnd})$0",
        "description": "Runs the system color chooser dialog. Returns 0 if the user cancels the dialog.\n\n"
    },
    "GR_SELECTCOLOR eel2": {
        "prefix": "GR_SelectColor",
        "scope": "eel2",
        "body": "GR_SelectColor(${1:HWND hwnd}, ${2:int &color})$0",
        "description": "Runs the system color chooser dialog. Returns 0 if the user cancels the dialog.\n\n"
    },
    "RPR_GR_SELECTCOLOR python": {
        "prefix": "RPR_GR_SelectColor",
        "scope": "python",
        "body": "RPR_GR_SelectColor(${1:hwnd}, ${2:colorOut})$0",
        "description": "Runs the system color chooser dialog. Returns 0 if the user cancels the dialog.\n\n"
    },
    "REAPER.GSC_MAINWND lua": {
        "prefix": "reaper.GSC_mainwnd",
        "scope": "lua",
        "body": "reaper.GSC_mainwnd(${1:integer t})$0",
        "description": "this is just like win32 GetSysColor() but can have overrides.\n\n"
    },
    "GSC_MAINWND eel2": {
        "prefix": "GSC_mainwnd",
        "scope": "eel2",
        "body": "GSC_mainwnd(${1:int t})$0",
        "description": "this is just like win32 GetSysColor() but can have overrides.\n\n"
    },
    "RPR_GSC_MAINWND python": {
        "prefix": "RPR_GSC_mainwnd",
        "scope": "python",
        "body": "RPR_GSC_mainwnd(${1:Int t})$0",
        "description": "this is just like win32 GetSysColor() but can have overrides.\n\n"
    },
    "REAPER.GUIDTOSTRING lua": {
        "prefix": "reaper.guidToString",
        "scope": "lua",
        "body": "reaper.guidToString(${1:string gGUID}, ${2:string destNeed64})$0",
        "description": "dest should be at least 64 chars long to be safe\n\n"
    },
    "GUIDTOSTRING eel2": {
        "prefix": "guidToString",
        "scope": "eel2",
        "body": "guidToString(\"${1:gGUID}\", ${2:#destNeed64})$0",
        "description": "dest should be at least 64 chars long to be safe\n\n"
    },
    "RPR_GUIDTOSTRING python": {
        "prefix": "RPR_guidToString",
        "scope": "python",
        "body": "RPR_guidToString(${1:g}, ${2:destNeed64})$0",
        "description": "dest should be at least 64 chars long to be safe\n\n"
    },
    "REAPER.HASEXTSTATE lua": {
        "prefix": "reaper.HasExtState",
        "scope": "lua",
        "body": "reaper.HasExtState(${1:string section}, ${2:string key})$0",
        "description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.\n\n"
    },
    "HASEXTSTATE eel2": {
        "prefix": "HasExtState",
        "scope": "eel2",
        "body": "HasExtState(\"${1:section}\", \"${2:key}\")$0",
        "description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.\n\n"
    },
    "RPR_HASEXTSTATE python": {
        "prefix": "RPR_HasExtState",
        "scope": "python",
        "body": "RPR_HasExtState(${1:String section}, ${2:String key})$0",
        "description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.\n\n"
    },
    "REAPER.HASTRACKMIDIPROGRAMS lua": {
        "prefix": "reaper.HasTrackMIDIPrograms",
        "scope": "lua",
        "body": "reaper.HasTrackMIDIPrograms(${1:integer track})$0",
        "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
    },
    "HASTRACKMIDIPROGRAMS eel2": {
        "prefix": "HasTrackMIDIPrograms",
        "scope": "eel2",
        "body": "HasTrackMIDIPrograms(${1:#retval}, ${2:int track})$0",
        "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
    },
    "RPR_HASTRACKMIDIPROGRAMS python": {
        "prefix": "RPR_HasTrackMIDIPrograms",
        "scope": "python",
        "body": "RPR_HasTrackMIDIPrograms(${1:Int track})$0",
        "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
    },
    "REAPER.HASTRACKMIDIPROGRAMSEX lua": {
        "prefix": "reaper.HasTrackMIDIProgramsEx",
        "scope": "lua",
        "body": "reaper.HasTrackMIDIProgramsEx(${1:ReaProject proj}, ${2:MediaTrack track})$0",
        "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
    },
    "HASTRACKMIDIPROGRAMSEX eel2": {
        "prefix": "HasTrackMIDIProgramsEx",
        "scope": "eel2",
        "body": "HasTrackMIDIProgramsEx(${1:#retval}, ${2:ReaProject proj}, ${3:MediaTrack track})$0",
        "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
    },
    "RPR_HASTRACKMIDIPROGRAMSEX python": {
        "prefix": "RPR_HasTrackMIDIProgramsEx",
        "scope": "python",
        "body": "RPR_HasTrackMIDIProgramsEx(${1:ReaProject proj}, ${2:MediaTrack track})$0",
        "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
    },
    "REAPER.HELP_SET lua": {
        "prefix": "reaper.Help_Set",
        "scope": "lua",
        "body": "reaper.Help_Set(${1:string helpstring}, ${2:boolean is_temporary_help})$0",
        "description": ""
    },
    "HELP_SET eel2": {
        "prefix": "Help_Set",
        "scope": "eel2",
        "body": "Help_Set(\"${1:helpstring}\", ${2:bool is_temporary_help})$0",
        "description": ""
    },
    "RPR_HELP_SET python": {
        "prefix": "RPR_Help_Set",
        "scope": "python",
        "body": "RPR_Help_Set(${1:String helpstring}, ${2:Boolean is_temporary_help})$0",
        "description": ""
    },
    "REAPER.IMAGE_RESOLVE_FN lua": {
        "prefix": "reaper.image_resolve_fn",
        "scope": "lua",
        "body": "reaper.image_resolve_fn(${1:string in}, ${2:string out})$0",
        "description": ""
    },
    "IMAGE_RESOLVE_FN eel2": {
        "prefix": "image_resolve_fn",
        "scope": "eel2",
        "body": "image_resolve_fn(\"${1:in}\", ${2:#out})$0",
        "description": ""
    },
    "RPR_IMAGE_RESOLVE_FN python": {
        "prefix": "RPR_image_resolve_fn",
        "scope": "python",
        "body": "RPR_image_resolve_fn(${1:in}, ${2:out}, ${3:out_sz})$0",
        "description": ""
    },
    "REAPER.INSERTAUTOMATIONITEM lua": {
        "prefix": "reaper.InsertAutomationItem",
        "scope": "lua",
        "body": "reaper.InsertAutomationItem(${1:TrackEnvelope env}, ${2:integer pool_id}, ${3:number position}, ${4:number length})$0",
        "description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; otherwise, the automation item will be a new instance of an existing pool. Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.\n\n"
    },
    "INSERTAUTOMATIONITEM eel2": {
        "prefix": "InsertAutomationItem",
        "scope": "eel2",
        "body": "InsertAutomationItem(${1:TrackEnvelope env}, ${2:int pool_id}, ${3:position}, ${4:length})$0",
        "description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; otherwise, the automation item will be a new instance of an existing pool. Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.\n\n"
    },
    "RPR_INSERTAUTOMATIONITEM python": {
        "prefix": "RPR_InsertAutomationItem",
        "scope": "python",
        "body": "RPR_InsertAutomationItem(${1:TrackEnvelope env}, ${2:Int pool_id}, ${3:Float position}, ${4:Float length})$0",
        "description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; otherwise, the automation item will be a new instance of an existing pool. Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.\n\n"
    },
    "REAPER.INSERTENVELOPEPOINT lua": {
        "prefix": "reaper.InsertEnvelopePoint",
        "scope": "lua",
        "body": "reaper.InsertEnvelopePoint(${1:TrackEnvelope envelope}, ${2:number time}, ${3:number value}, ${4:integer shape}, ${5:number tension}, ${6:boolean selected}, ${7:optional boolean noSortIn})$0",
        "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "INSERTENVELOPEPOINT eel2": {
        "prefix": "InsertEnvelopePoint",
        "scope": "eel2",
        "body": "InsertEnvelopePoint(${1:TrackEnvelope envelope}, ${2:time}, ${3:value}, ${4:int shape}, ${5:tension}, ${6:bool selected}, ${7:optional bool noSortIn})$0",
        "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "RPR_INSERTENVELOPEPOINT python": {
        "prefix": "RPR_InsertEnvelopePoint",
        "scope": "python",
        "body": "RPR_InsertEnvelopePoint(${1:envelope}, ${2:time}, ${3:value}, ${4:shape}, ${5:tension}, ${6:selected}, ${7:noSortInOptional})$0",
        "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "REAPER.INSERTENVELOPEPOINTEX lua": {
        "prefix": "reaper.InsertEnvelopePointEx",
        "scope": "lua",
        "body": "reaper.InsertEnvelopePointEx(${1:TrackEnvelope envelope}, ${2:integer autoitem_idx}, ${3:number time}, ${4:number value}, ${5:integer shape}, ${6:number tension}, ${7:boolean selected}, ${8:optional boolean noSortIn})$0",
        "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "INSERTENVELOPEPOINTEX eel2": {
        "prefix": "InsertEnvelopePointEx",
        "scope": "eel2",
        "body": "InsertEnvelopePointEx(${1:TrackEnvelope envelope}, ${2:int autoitem_idx}, ${3:time}, ${4:value}, ${5:int shape}, ${6:tension}, ${7:bool selected}, ${8:optional bool noSortIn})$0",
        "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "RPR_INSERTENVELOPEPOINTEX python": {
        "prefix": "RPR_InsertEnvelopePointEx",
        "scope": "python",
        "body": "RPR_InsertEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:time}, ${4:value}, ${5:shape}, ${6:tension}, ${7:selected}, ${8:noSortInOptional})$0",
        "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. autoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, SetEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "REAPER.INSERTMEDIA lua": {
        "prefix": "reaper.InsertMedia",
        "scope": "lua",
        "body": "reaper.InsertMedia(${1:string file}, ${2:integer mode})$0",
        "description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items. &512=use high word as absolute track index if mode&3==0.\n\n"
    },
    "INSERTMEDIA eel2": {
        "prefix": "InsertMedia",
        "scope": "eel2",
        "body": "InsertMedia(\"${1:file}\", ${2:int mode})$0",
        "description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items. &512=use high word as absolute track index if mode&3==0.\n\n"
    },
    "RPR_INSERTMEDIA python": {
        "prefix": "RPR_InsertMedia",
        "scope": "python",
        "body": "RPR_InsertMedia(${1:String file}, ${2:Int mode})$0",
        "description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items. &512=use high word as absolute track index if mode&3==0.\n\n"
    },
    "REAPER.INSERTMEDIASECTION lua": {
        "prefix": "reaper.InsertMediaSection",
        "scope": "lua",
        "body": "reaper.InsertMediaSection(${1:string file}, ${2:integer mode}, ${3:number startpct}, ${4:number endpct}, ${5:number pitchshift})$0",
        "description": ""
    },
    "INSERTMEDIASECTION eel2": {
        "prefix": "InsertMediaSection",
        "scope": "eel2",
        "body": "InsertMediaSection(\"${1:file}\", ${2:int mode}, ${3:startpct}, ${4:endpct}, ${5:pitchshift})$0",
        "description": ""
    },
    "RPR_INSERTMEDIASECTION python": {
        "prefix": "RPR_InsertMediaSection",
        "scope": "python",
        "body": "RPR_InsertMediaSection(${1:String file}, ${2:Int mode}, ${3:Float startpct}, ${4:Float endpct}, ${5:Float pitchshift})$0",
        "description": ""
    },
    "REAPER.INSERTTRACKATINDEX lua": {
        "prefix": "reaper.InsertTrackAtIndex",
        "scope": "lua",
        "body": "reaper.InsertTrackAtIndex(${1:integer idx}, ${2:boolean wantDefaults})$0",
        "description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env\n\n"
    },
    "INSERTTRACKATINDEX eel2": {
        "prefix": "InsertTrackAtIndex",
        "scope": "eel2",
        "body": "InsertTrackAtIndex(${1:int idx}, ${2:bool wantDefaults})$0",
        "description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env\n\n"
    },
    "RPR_INSERTTRACKATINDEX python": {
        "prefix": "RPR_InsertTrackAtIndex",
        "scope": "python",
        "body": "RPR_InsertTrackAtIndex(${1:Int idx}, ${2:Boolean wantDefaults})$0",
        "description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env\n\n"
    },
    "REAPER.ISMEDIAEXTENSION lua": {
        "prefix": "reaper.IsMediaExtension",
        "scope": "lua",
        "body": "reaper.IsMediaExtension(${1:string ext}, ${2:boolean wantOthers})$0",
        "description": "Tests a file extension (i.e. \"wav\" or \"mid\") to see if it's a media extension.\n\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also pass.\n\n"
    },
    "ISMEDIAEXTENSION eel2": {
        "prefix": "IsMediaExtension",
        "scope": "eel2",
        "body": "IsMediaExtension(\"${1:ext}\", ${2:bool wantOthers})$0",
        "description": "Tests a file extension (i.e. \"wav\" or \"mid\") to see if it's a media extension.\n\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also pass.\n\n"
    },
    "RPR_ISMEDIAEXTENSION python": {
        "prefix": "RPR_IsMediaExtension",
        "scope": "python",
        "body": "RPR_IsMediaExtension(${1:String ext}, ${2:Boolean wantOthers})$0",
        "description": "Tests a file extension (i.e. \"wav\" or \"mid\") to see if it's a media extension.\n\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also pass.\n\n"
    },
    "REAPER.ISMEDIAITEMSELECTED lua": {
        "prefix": "reaper.IsMediaItemSelected",
        "scope": "lua",
        "body": "reaper.IsMediaItemSelected(${1:MediaItem item})$0",
        "description": ""
    },
    "ISMEDIAITEMSELECTED eel2": {
        "prefix": "IsMediaItemSelected",
        "scope": "eel2",
        "body": "IsMediaItemSelected(${1:MediaItem item})$0",
        "description": ""
    },
    "RPR_ISMEDIAITEMSELECTED python": {
        "prefix": "RPR_IsMediaItemSelected",
        "scope": "python",
        "body": "RPR_IsMediaItemSelected(${1:MediaItem item})$0",
        "description": ""
    },
    "REAPER.ISPROJECTDIRTY lua": {
        "prefix": "reaper.IsProjectDirty",
        "scope": "lua",
        "body": "reaper.IsProjectDirty(${1:ReaProject proj})$0",
        "description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.\n\n"
    },
    "ISPROJECTDIRTY eel2": {
        "prefix": "IsProjectDirty",
        "scope": "eel2",
        "body": "IsProjectDirty(${1:ReaProject proj})$0",
        "description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.\n\n"
    },
    "RPR_ISPROJECTDIRTY python": {
        "prefix": "RPR_IsProjectDirty",
        "scope": "python",
        "body": "RPR_IsProjectDirty(${1:ReaProject proj})$0",
        "description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.\n\n"
    },
    "REAPER.ISTRACKSELECTED lua": {
        "prefix": "reaper.IsTrackSelected",
        "scope": "lua",
        "body": "reaper.IsTrackSelected(${1:MediaTrack track})$0",
        "description": ""
    },
    "ISTRACKSELECTED eel2": {
        "prefix": "IsTrackSelected",
        "scope": "eel2",
        "body": "IsTrackSelected(${1:MediaTrack track})$0",
        "description": ""
    },
    "RPR_ISTRACKSELECTED python": {
        "prefix": "RPR_IsTrackSelected",
        "scope": "python",
        "body": "RPR_IsTrackSelected(${1:MediaTrack track})$0",
        "description": ""
    },
    "REAPER.ISTRACKVISIBLE lua": {
        "prefix": "reaper.IsTrackVisible",
        "scope": "lua",
        "body": "reaper.IsTrackVisible(${1:MediaTrack track}, ${2:boolean mixer})$0",
        "description": "If mixer==true, returns true if the track is visible in the mixer. If mixer==false, returns true if the track is visible in the track control panel.\n\n"
    },
    "ISTRACKVISIBLE eel2": {
        "prefix": "IsTrackVisible",
        "scope": "eel2",
        "body": "IsTrackVisible(${1:MediaTrack track}, ${2:bool mixer})$0",
        "description": "If mixer==true, returns true if the track is visible in the mixer. If mixer==false, returns true if the track is visible in the track control panel.\n\n"
    },
    "RPR_ISTRACKVISIBLE python": {
        "prefix": "RPR_IsTrackVisible",
        "scope": "python",
        "body": "RPR_IsTrackVisible(${1:MediaTrack track}, ${2:Boolean mixer})$0",
        "description": "If mixer==true, returns true if the track is visible in the mixer. If mixer==false, returns true if the track is visible in the track control panel.\n\n"
    },
    "REAPER.JOYSTICK_CREATE lua": {
        "prefix": "reaper.joystick_create",
        "scope": "lua",
        "body": "reaper.joystick_create(${1:string guidGUID})$0",
        "description": "creates a joystick device\n\n"
    },
    "JOYSTICK_CREATE eel2": {
        "prefix": "joystick_create",
        "scope": "eel2",
        "body": "joystick_create(\"${1:guidGUID}\")$0",
        "description": "creates a joystick device\n\n"
    },
    "RPR_JOYSTICK_CREATE python": {
        "prefix": "RPR_joystick_create",
        "scope": "python",
        "body": "RPR_joystick_create(${1:const GUID guid})$0",
        "description": "creates a joystick device\n\n"
    },
    "REAPER.JOYSTICK_DESTROY lua": {
        "prefix": "reaper.joystick_destroy",
        "scope": "lua",
        "body": "reaper.joystick_destroy(${1:joystick_device device})$0",
        "description": "destroys a joystick device\n\n"
    },
    "JOYSTICK_DESTROY eel2": {
        "prefix": "joystick_destroy",
        "scope": "eel2",
        "body": "joystick_destroy(${1:joystick_device device})$0",
        "description": "destroys a joystick device\n\n"
    },
    "RPR_JOYSTICK_DESTROY python": {
        "prefix": "RPR_joystick_destroy",
        "scope": "python",
        "body": "RPR_joystick_destroy(${1:joystick_device device})$0",
        "description": "destroys a joystick device\n\n"
    },
    "REAPER.JOYSTICK_ENUM lua": {
        "prefix": "reaper.joystick_enum",
        "scope": "lua",
        "body": "reaper.joystick_enum(${1:integer index})$0",
        "description": "enumerates installed devices, returns GUID as a string\n\n"
    },
    "JOYSTICK_ENUM eel2": {
        "prefix": "joystick_enum",
        "scope": "eel2",
        "body": "joystick_enum(${1:#retval}, ${2:int index}, ${3:optional #namestr})$0",
        "description": "enumerates installed devices, returns GUID as a string\n\n"
    },
    "RPR_JOYSTICK_ENUM python": {
        "prefix": "RPR_joystick_enum",
        "scope": "python",
        "body": "RPR_joystick_enum(${1:Int index}, ${2:String namestrOutOptional})$0",
        "description": "enumerates installed devices, returns GUID as a string\n\n"
    },
    "REAPER.JOYSTICK_GETAXIS lua": {
        "prefix": "reaper.joystick_getaxis",
        "scope": "lua",
        "body": "reaper.joystick_getaxis(${1:joystick_device dev}, ${2:integer axis})$0",
        "description": "returns axis value (-1..1)\n\n"
    },
    "JOYSTICK_GETAXIS eel2": {
        "prefix": "joystick_getaxis",
        "scope": "eel2",
        "body": "joystick_getaxis(${1:joystick_device dev}, ${2:int axis})$0",
        "description": "returns axis value (-1..1)\n\n"
    },
    "RPR_JOYSTICK_GETAXIS python": {
        "prefix": "RPR_joystick_getaxis",
        "scope": "python",
        "body": "RPR_joystick_getaxis(${1:joystick_device dev}, ${2:Int axis})$0",
        "description": "returns axis value (-1..1)\n\n"
    },
    "REAPER.JOYSTICK_GETBUTTONMASK lua": {
        "prefix": "reaper.joystick_getbuttonmask",
        "scope": "lua",
        "body": "reaper.joystick_getbuttonmask(${1:joystick_device dev})$0",
        "description": "returns button pressed mask, 1=first button, 2=second...\n\n"
    },
    "JOYSTICK_GETBUTTONMASK eel2": {
        "prefix": "joystick_getbuttonmask",
        "scope": "eel2",
        "body": "joystick_getbuttonmask(${1:joystick_device dev})$0",
        "description": "returns button pressed mask, 1=first button, 2=second...\n\n"
    },
    "RPR_JOYSTICK_GETBUTTONMASK python": {
        "prefix": "RPR_joystick_getbuttonmask",
        "scope": "python",
        "body": "RPR_joystick_getbuttonmask(${1:joystick_device dev})$0",
        "description": "returns button pressed mask, 1=first button, 2=second...\n\n"
    },
    "REAPER.JOYSTICK_GETINFO lua": {
        "prefix": "reaper.joystick_getinfo",
        "scope": "lua",
        "body": "reaper.joystick_getinfo(${1:joystick_device dev})$0",
        "description": "returns button count\n\n"
    },
    "JOYSTICK_GETINFO eel2": {
        "prefix": "joystick_getinfo",
        "scope": "eel2",
        "body": "joystick_getinfo(${1:joystick_device dev}, ${2:optional int &axes}, ${3:optional int &povs})$0",
        "description": "returns button count\n\n"
    },
    "RPR_JOYSTICK_GETINFO python": {
        "prefix": "RPR_joystick_getinfo",
        "scope": "python",
        "body": "RPR_joystick_getinfo(${1:dev}, ${2:axesOutOptional}, ${3:povsOutOptional})$0",
        "description": "returns button count\n\n"
    },
    "REAPER.JOYSTICK_GETPOV lua": {
        "prefix": "reaper.joystick_getpov",
        "scope": "lua",
        "body": "reaper.joystick_getpov(${1:joystick_device dev}, ${2:integer pov})$0",
        "description": "returns POV value (usually 0..655.35, or 655.35 on error)\n\n"
    },
    "JOYSTICK_GETPOV eel2": {
        "prefix": "joystick_getpov",
        "scope": "eel2",
        "body": "joystick_getpov(${1:joystick_device dev}, ${2:int pov})$0",
        "description": "returns POV value (usually 0..655.35, or 655.35 on error)\n\n"
    },
    "RPR_JOYSTICK_GETPOV python": {
        "prefix": "RPR_joystick_getpov",
        "scope": "python",
        "body": "RPR_joystick_getpov(${1:joystick_device dev}, ${2:Int pov})$0",
        "description": "returns POV value (usually 0..655.35, or 655.35 on error)\n\n"
    },
    "REAPER.JOYSTICK_UPDATE lua": {
        "prefix": "reaper.joystick_update",
        "scope": "lua",
        "body": "reaper.joystick_update(${1:joystick_device dev})$0",
        "description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)\n\n"
    },
    "JOYSTICK_UPDATE eel2": {
        "prefix": "joystick_update",
        "scope": "eel2",
        "body": "joystick_update(${1:joystick_device dev})$0",
        "description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)\n\n"
    },
    "RPR_JOYSTICK_UPDATE python": {
        "prefix": "RPR_joystick_update",
        "scope": "python",
        "body": "RPR_joystick_update(${1:joystick_device dev})$0",
        "description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)\n\n"
    },
    "REAPER.LICE_CLIPLINE lua": {
        "prefix": "reaper.LICE_ClipLine",
        "scope": "lua",
        "body": "reaper.LICE_ClipLine(${1:number pX1}, ${2:number pY1}, ${3:number pX2}, ${4:number pY2}, ${5:integer xLo}, ${6:integer yLo}, ${7:integer xHi}, ${8:integer yHi})$0",
        "description": "Returns false if the line is entirely offscreen.\n\n"
    },
    "LICE_CLIPLINE eel2": {
        "prefix": "LICE_ClipLine",
        "scope": "eel2",
        "body": "LICE_ClipLine(${1:int &pX1}, ${2:int &pY1}, ${3:int &pX2}, ${4:int &pY2}, ${5:int xLo}, ${6:int yLo}, ${7:int xHi}, ${8:int yHi})$0",
        "description": "Returns false if the line is entirely offscreen.\n\n"
    },
    "RPR_LICE_CLIPLINE python": {
        "prefix": "RPR_LICE_ClipLine",
        "scope": "python",
        "body": "RPR_LICE_ClipLine(${1:pX1Out}, ${2:pY1Out}, ${3:pX2Out}, ${4:pY2Out}, ${5:xLo}, ${6:yLo}, ${7:xHi}, ${8:yHi})$0",
        "description": "Returns false if the line is entirely offscreen.\n\n"
    },
    "REAPER.LOOP_ONARROW lua": {
        "prefix": "reaper.Loop_OnArrow",
        "scope": "lua",
        "body": "reaper.Loop_OnArrow(${1:ReaProject project}, ${2:integer direction})$0",
        "description": "Move the loop selection left or right. Returns true if snap is enabled.\n\n"
    },
    "LOOP_ONARROW eel2": {
        "prefix": "Loop_OnArrow",
        "scope": "eel2",
        "body": "Loop_OnArrow(${1:ReaProject project}, ${2:int direction})$0",
        "description": "Move the loop selection left or right. Returns true if snap is enabled.\n\n"
    },
    "RPR_LOOP_ONARROW python": {
        "prefix": "RPR_Loop_OnArrow",
        "scope": "python",
        "body": "RPR_Loop_OnArrow(${1:ReaProject project}, ${2:Int direction})$0",
        "description": "Move the loop selection left or right. Returns true if snap is enabled.\n\n"
    },
    "REAPER.MAIN_ONCOMMAND lua": {
        "prefix": "reaper.Main_OnCommand",
        "scope": "lua",
        "body": "reaper.Main_OnCommand(${1:integer command}, ${2:integer flag})$0",
        "description": "See Main_OnCommandEx.\n\n"
    },
    "MAIN_ONCOMMAND eel2": {
        "prefix": "Main_OnCommand",
        "scope": "eel2",
        "body": "Main_OnCommand(${1:int command}, ${2:int flag})$0",
        "description": "See Main_OnCommandEx.\n\n"
    },
    "RPR_MAIN_ONCOMMAND python": {
        "prefix": "RPR_Main_OnCommand",
        "scope": "python",
        "body": "RPR_Main_OnCommand(${1:Int command}, ${2:Int flag})$0",
        "description": "See Main_OnCommandEx.\n\n"
    },
    "REAPER.MAIN_ONCOMMANDEX lua": {
        "prefix": "reaper.Main_OnCommandEx",
        "scope": "lua",
        "body": "reaper.Main_OnCommandEx(${1:integer command}, ${2:integer flag}, ${3:ReaProject proj})$0",
        "description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().\n\n"
    },
    "MAIN_ONCOMMANDEX eel2": {
        "prefix": "Main_OnCommandEx",
        "scope": "eel2",
        "body": "Main_OnCommandEx(${1:int command}, ${2:int flag}, ${3:ReaProject proj})$0",
        "description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().\n\n"
    },
    "RPR_MAIN_ONCOMMANDEX python": {
        "prefix": "RPR_Main_OnCommandEx",
        "scope": "python",
        "body": "RPR_Main_OnCommandEx(${1:Int command}, ${2:Int flag}, ${3:ReaProject proj})$0",
        "description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().\n\n"
    },
    "REAPER.MAIN_OPENPROJECT lua": {
        "prefix": "reaper.Main_openProject",
        "scope": "lua",
        "body": "reaper.Main_openProject(${1:string name})$0",
        "description": "opens a project. will prompt the user to save, etc.\n\nif you pass a .RTrackTemplate file then it adds that to the project instead.\n\n"
    },
    "MAIN_OPENPROJECT eel2": {
        "prefix": "Main_openProject",
        "scope": "eel2",
        "body": "Main_openProject(\"${1:name}\")$0",
        "description": "opens a project. will prompt the user to save, etc.\n\nif you pass a .RTrackTemplate file then it adds that to the project instead.\n\n"
    },
    "RPR_MAIN_OPENPROJECT python": {
        "prefix": "RPR_Main_openProject",
        "scope": "python",
        "body": "RPR_Main_openProject(${1:String name})$0",
        "description": "opens a project. will prompt the user to save, etc.\n\nif you pass a .RTrackTemplate file then it adds that to the project instead.\n\n"
    },
    "REAPER.MAIN_SAVEPROJECT lua": {
        "prefix": "reaper.Main_SaveProject",
        "scope": "lua",
        "body": "reaper.Main_SaveProject(${1:ReaProject proj}, ${2:boolean forceSaveAsIn})$0",
        "description": "Save the project.\n\n"
    },
    "MAIN_SAVEPROJECT eel2": {
        "prefix": "Main_SaveProject",
        "scope": "eel2",
        "body": "Main_SaveProject(${1:ReaProject proj}, ${2:bool forceSaveAsIn})$0",
        "description": "Save the project.\n\n"
    },
    "RPR_MAIN_SAVEPROJECT python": {
        "prefix": "RPR_Main_SaveProject",
        "scope": "python",
        "body": "RPR_Main_SaveProject(${1:ReaProject proj}, ${2:Boolean forceSaveAsInOptional})$0",
        "description": "Save the project.\n\n"
    },
    "REAPER.MAIN_UPDATELOOPINFO lua": {
        "prefix": "reaper.Main_UpdateLoopInfo",
        "scope": "lua",
        "body": "reaper.Main_UpdateLoopInfo(${1:integer ignoremask})$0",
        "description": ""
    },
    "MAIN_UPDATELOOPINFO eel2": {
        "prefix": "Main_UpdateLoopInfo",
        "scope": "eel2",
        "body": "Main_UpdateLoopInfo(${1:int ignoremask})$0",
        "description": ""
    },
    "RPR_MAIN_UPDATELOOPINFO python": {
        "prefix": "RPR_Main_UpdateLoopInfo",
        "scope": "python",
        "body": "RPR_Main_UpdateLoopInfo(${1:Int ignoremask})$0",
        "description": ""
    },
    "REAPER.MARKPROJECTDIRTY lua": {
        "prefix": "reaper.MarkProjectDirty",
        "scope": "lua",
        "body": "reaper.MarkProjectDirty(${1:ReaProject proj})$0",
        "description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.\n\n"
    },
    "MARKPROJECTDIRTY eel2": {
        "prefix": "MarkProjectDirty",
        "scope": "eel2",
        "body": "MarkProjectDirty(${1:ReaProject proj})$0",
        "description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.\n\n"
    },
    "RPR_MARKPROJECTDIRTY python": {
        "prefix": "RPR_MarkProjectDirty",
        "scope": "python",
        "body": "RPR_MarkProjectDirty(${1:ReaProject proj})$0",
        "description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.\n\n"
    },
    "REAPER.MARKTRACKITEMSDIRTY lua": {
        "prefix": "reaper.MarkTrackItemsDirty",
        "scope": "lua",
        "body": "reaper.MarkTrackItemsDirty(${1:MediaTrack track}, ${2:MediaItem item})$0",
        "description": "If track is supplied, item is ignored\n\n"
    },
    "MARKTRACKITEMSDIRTY eel2": {
        "prefix": "MarkTrackItemsDirty",
        "scope": "eel2",
        "body": "MarkTrackItemsDirty(${1:MediaTrack track}, ${2:MediaItem item})$0",
        "description": "If track is supplied, item is ignored\n\n"
    },
    "RPR_MARKTRACKITEMSDIRTY python": {
        "prefix": "RPR_MarkTrackItemsDirty",
        "scope": "python",
        "body": "RPR_MarkTrackItemsDirty(${1:MediaTrack track}, ${2:MediaItem item})$0",
        "description": "If track is supplied, item is ignored\n\n"
    },
    "REAPER.MASTER_GETPLAYRATE lua": {
        "prefix": "reaper.Master_GetPlayRate",
        "scope": "lua",
        "body": "reaper.Master_GetPlayRate(${1:ReaProject project})$0",
        "description": ""
    },
    "MASTER_GETPLAYRATE eel2": {
        "prefix": "Master_GetPlayRate",
        "scope": "eel2",
        "body": "Master_GetPlayRate(${1:ReaProject project})$0",
        "description": ""
    },
    "RPR_MASTER_GETPLAYRATE python": {
        "prefix": "RPR_Master_GetPlayRate",
        "scope": "python",
        "body": "RPR_Master_GetPlayRate(${1:ReaProject project})$0",
        "description": ""
    },
    "REAPER.MASTER_GETPLAYRATEATTIME lua": {
        "prefix": "reaper.Master_GetPlayRateAtTime",
        "scope": "lua",
        "body": "reaper.Master_GetPlayRateAtTime(${1:number time_s}, ${2:ReaProject proj})$0",
        "description": ""
    },
    "MASTER_GETPLAYRATEATTIME eel2": {
        "prefix": "Master_GetPlayRateAtTime",
        "scope": "eel2",
        "body": "Master_GetPlayRateAtTime(${1:time_s}, ${2:ReaProject proj})$0",
        "description": ""
    },
    "RPR_MASTER_GETPLAYRATEATTIME python": {
        "prefix": "RPR_Master_GetPlayRateAtTime",
        "scope": "python",
        "body": "RPR_Master_GetPlayRateAtTime(${1:Float time_s}, ${2:ReaProject proj})$0",
        "description": ""
    },
    "REAPER.MASTER_GETTEMPO lua": {
        "prefix": "reaper.Master_GetTempo",
        "scope": "lua",
        "body": "reaper.Master_GetTempo()$0",
        "description": ""
    },
    "MASTER_GETTEMPO eel2": {
        "prefix": "Master_GetTempo",
        "scope": "eel2",
        "body": "Master_GetTempo()$0",
        "description": ""
    },
    "RPR_MASTER_GETTEMPO python": {
        "prefix": "RPR_Master_GetTempo",
        "scope": "python",
        "body": "RPR_Master_GetTempo()$0",
        "description": ""
    },
    "REAPER.MASTER_NORMALIZEPLAYRATE lua": {
        "prefix": "reaper.Master_NormalizePlayRate",
        "scope": "lua",
        "body": "reaper.Master_NormalizePlayRate(${1:number playrate}, ${2:boolean isnormalized})$0",
        "description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.\n\n"
    },
    "MASTER_NORMALIZEPLAYRATE eel2": {
        "prefix": "Master_NormalizePlayRate",
        "scope": "eel2",
        "body": "Master_NormalizePlayRate(${1:playrate}, ${2:bool isnormalized})$0",
        "description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.\n\n"
    },
    "RPR_MASTER_NORMALIZEPLAYRATE python": {
        "prefix": "RPR_Master_NormalizePlayRate",
        "scope": "python",
        "body": "RPR_Master_NormalizePlayRate(${1:Float playrate}, ${2:Boolean isnormalized})$0",
        "description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.\n\n"
    },
    "REAPER.MASTER_NORMALIZETEMPO lua": {
        "prefix": "reaper.Master_NormalizeTempo",
        "scope": "lua",
        "body": "reaper.Master_NormalizeTempo(${1:number bpm}, ${2:boolean isnormalized})$0",
        "description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.\n\n"
    },
    "MASTER_NORMALIZETEMPO eel2": {
        "prefix": "Master_NormalizeTempo",
        "scope": "eel2",
        "body": "Master_NormalizeTempo(${1:bpm}, ${2:bool isnormalized})$0",
        "description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.\n\n"
    },
    "RPR_MASTER_NORMALIZETEMPO python": {
        "prefix": "RPR_Master_NormalizeTempo",
        "scope": "python",
        "body": "RPR_Master_NormalizeTempo(${1:Float bpm}, ${2:Boolean isnormalized})$0",
        "description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.\n\n"
    },
    "REAPER.MB lua": {
        "prefix": "reaper.MB",
        "scope": "lua",
        "body": "reaper.MB(${1:string msg}, ${2:string title}, ${3:integer type})$0",
        "description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\n"
    },
    "MB eel2": {
        "prefix": "MB",
        "scope": "eel2",
        "body": "MB(\"${1:msg}\", \"${2:title}\", ${3:int type})$0",
        "description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\n"
    },
    "RPR_MB python": {
        "prefix": "RPR_MB",
        "scope": "python",
        "body": "RPR_MB(${1:String msg}, ${2:String title}, ${3:Int type})$0",
        "description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\n"
    },
    "REAPER.MEDIAITEMDESCENDSFROMTRACK lua": {
        "prefix": "reaper.MediaItemDescendsFromTrack",
        "scope": "lua",
        "body": "reaper.MediaItemDescendsFromTrack(${1:MediaItem item}, ${2:MediaTrack track})$0",
        "description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.\n\n"
    },
    "MEDIAITEMDESCENDSFROMTRACK eel2": {
        "prefix": "MediaItemDescendsFromTrack",
        "scope": "eel2",
        "body": "MediaItemDescendsFromTrack(${1:MediaItem item}, ${2:MediaTrack track})$0",
        "description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.\n\n"
    },
    "RPR_MEDIAITEMDESCENDSFROMTRACK python": {
        "prefix": "RPR_MediaItemDescendsFromTrack",
        "scope": "python",
        "body": "RPR_MediaItemDescendsFromTrack(${1:MediaItem item}, ${2:MediaTrack track})$0",
        "description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.\n\n"
    },
    "REAPER.MIDI_COUNTEVTS lua": {
        "prefix": "reaper.MIDI_CountEvts",
        "scope": "lua",
        "body": "reaper.MIDI_CountEvts(${1:MediaItem_Take take})$0",
        "description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item.\n\n"
    },
    "MIDI_COUNTEVTS eel2": {
        "prefix": "MIDI_CountEvts",
        "scope": "eel2",
        "body": "MIDI_CountEvts(${1:MediaItem_Take take}, ${2:int &notecnt}, ${3:int &ccevtcnt}, ${4:int &textsyxevtcnt})$0",
        "description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item.\n\n"
    },
    "RPR_MIDI_COUNTEVTS python": {
        "prefix": "RPR_MIDI_CountEvts",
        "scope": "python",
        "body": "RPR_MIDI_CountEvts(${1:take}, ${2:notecntOut}, ${3:ccevtcntOut}, ${4:textsyxevtcntOut})$0",
        "description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item.\n\n"
    },
    "REAPER.MIDI_DELETECC lua": {
        "prefix": "reaper.MIDI_DeleteCC",
        "scope": "lua",
        "body": "reaper.MIDI_DeleteCC(${1:MediaItem_Take take}, ${2:integer ccidx})$0",
        "description": "Delete a MIDI CC event.\n\n"
    },
    "MIDI_DELETECC eel2": {
        "prefix": "MIDI_DeleteCC",
        "scope": "eel2",
        "body": "MIDI_DeleteCC(${1:MediaItem_Take take}, ${2:int ccidx})$0",
        "description": "Delete a MIDI CC event.\n\n"
    },
    "RPR_MIDI_DELETECC python": {
        "prefix": "RPR_MIDI_DeleteCC",
        "scope": "python",
        "body": "RPR_MIDI_DeleteCC(${1:MediaItem_Take take}, ${2:Int ccidx})$0",
        "description": "Delete a MIDI CC event.\n\n"
    },
    "REAPER.MIDI_DELETEEVT lua": {
        "prefix": "reaper.MIDI_DeleteEvt",
        "scope": "lua",
        "body": "reaper.MIDI_DeleteEvt(${1:MediaItem_Take take}, ${2:integer evtidx})$0",
        "description": "Delete a MIDI event.\n\n"
    },
    "MIDI_DELETEEVT eel2": {
        "prefix": "MIDI_DeleteEvt",
        "scope": "eel2",
        "body": "MIDI_DeleteEvt(${1:MediaItem_Take take}, ${2:int evtidx})$0",
        "description": "Delete a MIDI event.\n\n"
    },
    "RPR_MIDI_DELETEEVT python": {
        "prefix": "RPR_MIDI_DeleteEvt",
        "scope": "python",
        "body": "RPR_MIDI_DeleteEvt(${1:MediaItem_Take take}, ${2:Int evtidx})$0",
        "description": "Delete a MIDI event.\n\n"
    },
    "REAPER.MIDI_DELETENOTE lua": {
        "prefix": "reaper.MIDI_DeleteNote",
        "scope": "lua",
        "body": "reaper.MIDI_DeleteNote(${1:MediaItem_Take take}, ${2:integer noteidx})$0",
        "description": "Delete a MIDI note.\n\n"
    },
    "MIDI_DELETENOTE eel2": {
        "prefix": "MIDI_DeleteNote",
        "scope": "eel2",
        "body": "MIDI_DeleteNote(${1:MediaItem_Take take}, ${2:int noteidx})$0",
        "description": "Delete a MIDI note.\n\n"
    },
    "RPR_MIDI_DELETENOTE python": {
        "prefix": "RPR_MIDI_DeleteNote",
        "scope": "python",
        "body": "RPR_MIDI_DeleteNote(${1:MediaItem_Take take}, ${2:Int noteidx})$0",
        "description": "Delete a MIDI note.\n\n"
    },
    "REAPER.MIDI_DELETETEXTSYSEXEVT lua": {
        "prefix": "reaper.MIDI_DeleteTextSysexEvt",
        "scope": "lua",
        "body": "reaper.MIDI_DeleteTextSysexEvt(${1:MediaItem_Take take}, ${2:integer textsyxevtidx})$0",
        "description": "Delete a MIDI text or sysex event.\n\n"
    },
    "MIDI_DELETETEXTSYSEXEVT eel2": {
        "prefix": "MIDI_DeleteTextSysexEvt",
        "scope": "eel2",
        "body": "MIDI_DeleteTextSysexEvt(${1:MediaItem_Take take}, ${2:int textsyxevtidx})$0",
        "description": "Delete a MIDI text or sysex event.\n\n"
    },
    "RPR_MIDI_DELETETEXTSYSEXEVT python": {
        "prefix": "RPR_MIDI_DeleteTextSysexEvt",
        "scope": "python",
        "body": "RPR_MIDI_DeleteTextSysexEvt(${1:MediaItem_Take take}, ${2:Int textsyxevtidx})$0",
        "description": "Delete a MIDI text or sysex event.\n\n"
    },
    "REAPER.MIDI_ENUMSELCC lua": {
        "prefix": "reaper.MIDI_EnumSelCC",
        "scope": "lua",
        "body": "reaper.MIDI_EnumSelCC(${1:MediaItem_Take take}, ${2:integer ccidx})$0",
        "description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).\n\n"
    },
    "MIDI_ENUMSELCC eel2": {
        "prefix": "MIDI_EnumSelCC",
        "scope": "eel2",
        "body": "MIDI_EnumSelCC(${1:MediaItem_Take take}, ${2:int ccidx})$0",
        "description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).\n\n"
    },
    "RPR_MIDI_ENUMSELCC python": {
        "prefix": "RPR_MIDI_EnumSelCC",
        "scope": "python",
        "body": "RPR_MIDI_EnumSelCC(${1:MediaItem_Take take}, ${2:Int ccidx})$0",
        "description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).\n\n"
    },
    "REAPER.MIDI_ENUMSELEVTS lua": {
        "prefix": "reaper.MIDI_EnumSelEvts",
        "scope": "lua",
        "body": "reaper.MIDI_EnumSelEvts(${1:MediaItem_Take take}, ${2:integer evtidx})$0",
        "description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).\n\n"
    },
    "MIDI_ENUMSELEVTS eel2": {
        "prefix": "MIDI_EnumSelEvts",
        "scope": "eel2",
        "body": "MIDI_EnumSelEvts(${1:MediaItem_Take take}, ${2:int evtidx})$0",
        "description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).\n\n"
    },
    "RPR_MIDI_ENUMSELEVTS python": {
        "prefix": "RPR_MIDI_EnumSelEvts",
        "scope": "python",
        "body": "RPR_MIDI_EnumSelEvts(${1:MediaItem_Take take}, ${2:Int evtidx})$0",
        "description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).\n\n"
    },
    "REAPER.MIDI_ENUMSELNOTES lua": {
        "prefix": "reaper.MIDI_EnumSelNotes",
        "scope": "lua",
        "body": "reaper.MIDI_EnumSelNotes(${1:MediaItem_Take take}, ${2:integer noteidx})$0",
        "description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).\n\n"
    },
    "MIDI_ENUMSELNOTES eel2": {
        "prefix": "MIDI_EnumSelNotes",
        "scope": "eel2",
        "body": "MIDI_EnumSelNotes(${1:MediaItem_Take take}, ${2:int noteidx})$0",
        "description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).\n\n"
    },
    "RPR_MIDI_ENUMSELNOTES python": {
        "prefix": "RPR_MIDI_EnumSelNotes",
        "scope": "python",
        "body": "RPR_MIDI_EnumSelNotes(${1:MediaItem_Take take}, ${2:Int noteidx})$0",
        "description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).\n\n"
    },
    "REAPER.MIDI_ENUMSELTEXTSYSEXEVTS lua": {
        "prefix": "reaper.MIDI_EnumSelTextSysexEvts",
        "scope": "lua",
        "body": "reaper.MIDI_EnumSelTextSysexEvts(${1:MediaItem_Take take}, ${2:integer textsyxidx})$0",
        "description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).\n\n"
    },
    "MIDI_ENUMSELTEXTSYSEXEVTS eel2": {
        "prefix": "MIDI_EnumSelTextSysexEvts",
        "scope": "eel2",
        "body": "MIDI_EnumSelTextSysexEvts(${1:MediaItem_Take take}, ${2:int textsyxidx})$0",
        "description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).\n\n"
    },
    "RPR_MIDI_ENUMSELTEXTSYSEXEVTS python": {
        "prefix": "RPR_MIDI_EnumSelTextSysexEvts",
        "scope": "python",
        "body": "RPR_MIDI_EnumSelTextSysexEvts(${1:MediaItem_Take take}, ${2:Int textsyxidx})$0",
        "description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).\n\n"
    },
    "REAPER.MIDI_GETALLEVTS lua": {
        "prefix": "reaper.MIDI_GetAllEvts",
        "scope": "lua",
        "body": "reaper.MIDI_GetAllEvts(${1:MediaItem_Take take}, ${2:string buf})$0",
        "description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: &1=selected &2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_SetAllEvts.\n\n"
    },
    "MIDI_GETALLEVTS eel2": {
        "prefix": "MIDI_GetAllEvts",
        "scope": "eel2",
        "body": "MIDI_GetAllEvts(${1:MediaItem_Take take}, ${2:#buf})$0",
        "description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: &1=selected &2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_SetAllEvts.\n\n"
    },
    "RPR_MIDI_GETALLEVTS python": {
        "prefix": "RPR_MIDI_GetAllEvts",
        "scope": "python",
        "body": "RPR_MIDI_GetAllEvts(${1:take}, ${2:bufNeedBig}, ${3:bufNeedBig_sz})$0",
        "description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: &1=selected &2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_SetAllEvts.\n\n"
    },
    "REAPER.MIDI_GETCC lua": {
        "prefix": "reaper.MIDI_GetCC",
        "scope": "lua",
        "body": "reaper.MIDI_GetCC(${1:MediaItem_Take take}, ${2:integer ccidx})$0",
        "description": "Get MIDI CC event properties.\n\n"
    },
    "MIDI_GETCC eel2": {
        "prefix": "MIDI_GetCC",
        "scope": "eel2",
        "body": "MIDI_GetCC(${1:MediaItem_Take take}, ${2:int ccidx}, ${3:bool &selected}, ${4:bool &muted}, ${5:&ppqpos}, ${6:int &chanmsg}, ${7:int &chan}, ${8:int &msg2}, ${9:int &msg3})$0",
        "description": "Get MIDI CC event properties.\n\n"
    },
    "RPR_MIDI_GETCC python": {
        "prefix": "RPR_MIDI_GetCC",
        "scope": "python",
        "body": "RPR_MIDI_GetCC(${1:take}, ${2:ccidx}, ${3:selectedOut}, ${4:mutedOut}, ${5:ppqposOut}, ${6:chanmsgOut}, ${7:chanOut}, ${8:msg2Out}, ${9:msg3Out})$0",
        "description": "Get MIDI CC event properties.\n\n"
    },
    "REAPER.MIDI_GETEVT lua": {
        "prefix": "reaper.MIDI_GetEvt",
        "scope": "lua",
        "body": "reaper.MIDI_GetEvt(${1:MediaItem_Take take}, ${2:integer evtidx}, ${3:boolean selected}, ${4:boolean muted}, ${5:number ppqpos}, ${6:string msg})$0",
        "description": "Get MIDI event properties.\n\n"
    },
    "MIDI_GETEVT eel2": {
        "prefix": "MIDI_GetEvt",
        "scope": "eel2",
        "body": "MIDI_GetEvt(${1:MediaItem_Take take}, ${2:int evtidx}, ${3:bool &selected}, ${4:bool &muted}, ${5:&ppqpos}, ${6:#msg})$0",
        "description": "Get MIDI event properties.\n\n"
    },
    "RPR_MIDI_GETEVT python": {
        "prefix": "RPR_MIDI_GetEvt",
        "scope": "python",
        "body": "RPR_MIDI_GetEvt(${1:take}, ${2:evtidx}, ${3:selectedOut}, ${4:mutedOut}, ${5:ppqposOut}, ${6:msg}, ${7:msg_sz})$0",
        "description": "Get MIDI event properties.\n\n"
    },
    "REAPER.MIDI_GETGRID lua": {
        "prefix": "reaper.MIDI_GetGrid",
        "scope": "lua",
        "body": "reaper.MIDI_GetGrid(${1:MediaItem_Take take})$0",
        "description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.\n\n"
    },
    "MIDI_GETGRID eel2": {
        "prefix": "MIDI_GetGrid",
        "scope": "eel2",
        "body": "MIDI_GetGrid(${1:MediaItem_Take take}, ${2:optional &swing}, ${3:optional &noteLen})$0",
        "description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.\n\n"
    },
    "RPR_MIDI_GETGRID python": {
        "prefix": "RPR_MIDI_GetGrid",
        "scope": "python",
        "body": "RPR_MIDI_GetGrid(${1:take}, ${2:swingOutOptional}, ${3:noteLenOutOptional})$0",
        "description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.\n\n"
    },
    "REAPER.MIDI_GETHASH lua": {
        "prefix": "reaper.MIDI_GetHash",
        "scope": "lua",
        "body": "reaper.MIDI_GetHash(${1:MediaItem_Take take}, ${2:boolean notesonly}, ${3:string hash})$0",
        "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash\n\n"
    },
    "MIDI_GETHASH eel2": {
        "prefix": "MIDI_GetHash",
        "scope": "eel2",
        "body": "MIDI_GetHash(${1:MediaItem_Take take}, ${2:bool notesonly}, ${3:#hash})$0",
        "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash\n\n"
    },
    "RPR_MIDI_GETHASH python": {
        "prefix": "RPR_MIDI_GetHash",
        "scope": "python",
        "body": "RPR_MIDI_GetHash(${1:take}, ${2:notesonly}, ${3:hash}, ${4:hash_sz})$0",
        "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash\n\n"
    },
    "REAPER.MIDI_GETNOTE lua": {
        "prefix": "reaper.MIDI_GetNote",
        "scope": "lua",
        "body": "reaper.MIDI_GetNote(${1:MediaItem_Take take}, ${2:integer noteidx})$0",
        "description": "Get MIDI note properties.\n\n"
    },
    "MIDI_GETNOTE eel2": {
        "prefix": "MIDI_GetNote",
        "scope": "eel2",
        "body": "MIDI_GetNote(${1:MediaItem_Take take}, ${2:int noteidx}, ${3:bool &selected}, ${4:bool &muted}, ${5:&startppqpos}, ${6:&endppqpos}, ${7:int &chan}, ${8:int &pitch}, ${9:int &vel})$0",
        "description": "Get MIDI note properties.\n\n"
    },
    "RPR_MIDI_GETNOTE python": {
        "prefix": "RPR_MIDI_GetNote",
        "scope": "python",
        "body": "RPR_MIDI_GetNote(${1:take}, ${2:noteidx}, ${3:selectedOut}, ${4:mutedOut}, ${5:startppqposOut}, ${6:endppqposOut}, ${7:chanOut}, ${8:pitchOut}, ${9:velOut})$0",
        "description": "Get MIDI note properties.\n\n"
    },
    "REAPER.MIDI_GETPPQPOS_ENDOFMEASURE lua": {
        "prefix": "reaper.MIDI_GetPPQPos_EndOfMeasure",
        "scope": "lua",
        "body": "reaper.MIDI_GetPPQPos_EndOfMeasure(${1:MediaItem_Take take}, ${2:number ppqpos})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure.\n\n"
    },
    "MIDI_GETPPQPOS_ENDOFMEASURE eel2": {
        "prefix": "MIDI_GetPPQPos_EndOfMeasure",
        "scope": "eel2",
        "body": "MIDI_GetPPQPos_EndOfMeasure(${1:MediaItem_Take take}, ${2:ppqpos})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure.\n\n"
    },
    "RPR_MIDI_GETPPQPOS_ENDOFMEASURE python": {
        "prefix": "RPR_MIDI_GetPPQPos_EndOfMeasure",
        "scope": "python",
        "body": "RPR_MIDI_GetPPQPos_EndOfMeasure(${1:MediaItem_Take take}, ${2:Float ppqpos})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure.\n\n"
    },
    "REAPER.MIDI_GETPPQPOS_STARTOFMEASURE lua": {
        "prefix": "reaper.MIDI_GetPPQPos_StartOfMeasure",
        "scope": "lua",
        "body": "reaper.MIDI_GetPPQPos_StartOfMeasure(${1:MediaItem_Take take}, ${2:number ppqpos})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure.\n\n"
    },
    "MIDI_GETPPQPOS_STARTOFMEASURE eel2": {
        "prefix": "MIDI_GetPPQPos_StartOfMeasure",
        "scope": "eel2",
        "body": "MIDI_GetPPQPos_StartOfMeasure(${1:MediaItem_Take take}, ${2:ppqpos})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure.\n\n"
    },
    "RPR_MIDI_GETPPQPOS_STARTOFMEASURE python": {
        "prefix": "RPR_MIDI_GetPPQPos_StartOfMeasure",
        "scope": "python",
        "body": "RPR_MIDI_GetPPQPos_StartOfMeasure(${1:MediaItem_Take take}, ${2:Float ppqpos})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure.\n\n"
    },
    "REAPER.MIDI_GETPPQPOSFROMPROJQN lua": {
        "prefix": "reaper.MIDI_GetPPQPosFromProjQN",
        "scope": "lua",
        "body": "reaper.MIDI_GetPPQPosFromProjQN(${1:MediaItem_Take take}, ${2:number projqn})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.\n\n"
    },
    "MIDI_GETPPQPOSFROMPROJQN eel2": {
        "prefix": "MIDI_GetPPQPosFromProjQN",
        "scope": "eel2",
        "body": "MIDI_GetPPQPosFromProjQN(${1:MediaItem_Take take}, ${2:projqn})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.\n\n"
    },
    "RPR_MIDI_GETPPQPOSFROMPROJQN python": {
        "prefix": "RPR_MIDI_GetPPQPosFromProjQN",
        "scope": "python",
        "body": "RPR_MIDI_GetPPQPosFromProjQN(${1:MediaItem_Take take}, ${2:Float projqn})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.\n\n"
    },
    "REAPER.MIDI_GETPPQPOSFROMPROJTIME lua": {
        "prefix": "reaper.MIDI_GetPPQPosFromProjTime",
        "scope": "lua",
        "body": "reaper.MIDI_GetPPQPosFromProjTime(${1:MediaItem_Take take}, ${2:number projtime})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.\n\n"
    },
    "MIDI_GETPPQPOSFROMPROJTIME eel2": {
        "prefix": "MIDI_GetPPQPosFromProjTime",
        "scope": "eel2",
        "body": "MIDI_GetPPQPosFromProjTime(${1:MediaItem_Take take}, ${2:projtime})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.\n\n"
    },
    "RPR_MIDI_GETPPQPOSFROMPROJTIME python": {
        "prefix": "RPR_MIDI_GetPPQPosFromProjTime",
        "scope": "python",
        "body": "RPR_MIDI_GetPPQPosFromProjTime(${1:MediaItem_Take take}, ${2:Float projtime})$0",
        "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.\n\n"
    },
    "REAPER.MIDI_GETPROJQNFROMPPQPOS lua": {
        "prefix": "reaper.MIDI_GetProjQNFromPPQPos",
        "scope": "lua",
        "body": "reaper.MIDI_GetProjQNFromPPQPos(${1:MediaItem_Take take}, ${2:number ppqpos})$0",
        "description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.\n\n"
    },
    "MIDI_GETPROJQNFROMPPQPOS eel2": {
        "prefix": "MIDI_GetProjQNFromPPQPos",
        "scope": "eel2",
        "body": "MIDI_GetProjQNFromPPQPos(${1:MediaItem_Take take}, ${2:ppqpos})$0",
        "description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.\n\n"
    },
    "RPR_MIDI_GETPROJQNFROMPPQPOS python": {
        "prefix": "RPR_MIDI_GetProjQNFromPPQPos",
        "scope": "python",
        "body": "RPR_MIDI_GetProjQNFromPPQPos(${1:MediaItem_Take take}, ${2:Float ppqpos})$0",
        "description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.\n\n"
    },
    "REAPER.MIDI_GETPROJTIMEFROMPPQPOS lua": {
        "prefix": "reaper.MIDI_GetProjTimeFromPPQPos",
        "scope": "lua",
        "body": "reaper.MIDI_GetProjTimeFromPPQPos(${1:MediaItem_Take take}, ${2:number ppqpos})$0",
        "description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.\n\n"
    },
    "MIDI_GETPROJTIMEFROMPPQPOS eel2": {
        "prefix": "MIDI_GetProjTimeFromPPQPos",
        "scope": "eel2",
        "body": "MIDI_GetProjTimeFromPPQPos(${1:MediaItem_Take take}, ${2:ppqpos})$0",
        "description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.\n\n"
    },
    "RPR_MIDI_GETPROJTIMEFROMPPQPOS python": {
        "prefix": "RPR_MIDI_GetProjTimeFromPPQPos",
        "scope": "python",
        "body": "RPR_MIDI_GetProjTimeFromPPQPos(${1:MediaItem_Take take}, ${2:Float ppqpos})$0",
        "description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.\n\n"
    },
    "REAPER.MIDI_GETSCALE lua": {
        "prefix": "reaper.MIDI_GetScale",
        "scope": "lua",
        "body": "reaper.MIDI_GetScale(${1:MediaItem_Take take}, ${2:number root}, ${3:number scale}, ${4:string name})$0",
        "description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc.\n\n"
    },
    "MIDI_GETSCALE eel2": {
        "prefix": "MIDI_GetScale",
        "scope": "eel2",
        "body": "MIDI_GetScale(${1:MediaItem_Take take}, ${2:int &root}, ${3:int &scale}, ${4:#name})$0",
        "description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc.\n\n"
    },
    "RPR_MIDI_GETSCALE python": {
        "prefix": "RPR_MIDI_GetScale",
        "scope": "python",
        "body": "RPR_MIDI_GetScale(${1:take}, ${2:rootOut}, ${3:scaleOut}, ${4:name}, ${5:name_sz})$0",
        "description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc.\n\n"
    },
    "REAPER.MIDI_GETTEXTSYSEXEVT lua": {
        "prefix": "reaper.MIDI_GetTextSysexEvt",
        "scope": "lua",
        "body": "reaper.MIDI_GetTextSysexEvt(${1:MediaItem_Take take}, ${2:integer textsyxevtidx}, ${3:optional boolean selected}, ${4:optional boolean muted}, ${5:optional number ppqpos}, ${6:optional number type}, ${7:optional string msg})$0",
        "description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.\n\n"
    },
    "MIDI_GETTEXTSYSEXEVT eel2": {
        "prefix": "MIDI_GetTextSysexEvt",
        "scope": "eel2",
        "body": "MIDI_GetTextSysexEvt(${1:MediaItem_Take take}, ${2:int textsyxevtidx}, ${3:optional bool &selected}, ${4:optional bool &muted}, ${5:optional &ppqpos}, ${6:optional int &type}, ${7:optional #msg})$0",
        "description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.\n\n"
    },
    "RPR_MIDI_GETTEXTSYSEXEVT python": {
        "prefix": "RPR_MIDI_GetTextSysexEvt",
        "scope": "python",
        "body": "RPR_MIDI_GetTextSysexEvt(${1:take}, ${2:textsyxevtidx}, ${3:selectedOutOptional}, ${4:mutedOutOptional}, ${5:ppqposOutOptional}, ${6:typeOutOptional}, ${7:msgOptional}, ${8:msgOptional_sz})$0",
        "description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.\n\n"
    },
    "REAPER.MIDI_GETTRACKHASH lua": {
        "prefix": "reaper.MIDI_GetTrackHash",
        "scope": "lua",
        "body": "reaper.MIDI_GetTrackHash(${1:MediaTrack track}, ${2:boolean notesonly}, ${3:string hash})$0",
        "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash\n\n"
    },
    "MIDI_GETTRACKHASH eel2": {
        "prefix": "MIDI_GetTrackHash",
        "scope": "eel2",
        "body": "MIDI_GetTrackHash(${1:MediaTrack track}, ${2:bool notesonly}, ${3:#hash})$0",
        "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash\n\n"
    },
    "RPR_MIDI_GETTRACKHASH python": {
        "prefix": "RPR_MIDI_GetTrackHash",
        "scope": "python",
        "body": "RPR_MIDI_GetTrackHash(${1:track}, ${2:notesonly}, ${3:hash}, ${4:hash_sz})$0",
        "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash\n\n"
    },
    "REAPER.MIDI_INSERTCC lua": {
        "prefix": "reaper.MIDI_InsertCC",
        "scope": "lua",
        "body": "reaper.MIDI_InsertCC(${1:MediaItem_Take take}, ${2:boolean selected}, ${3:boolean muted}, ${4:number ppqpos}, ${5:integer chanmsg}, ${6:integer chan}, ${7:integer msg2}, ${8:integer msg3})$0",
        "description": "Insert a new MIDI CC event.\n\n"
    },
    "MIDI_INSERTCC eel2": {
        "prefix": "MIDI_InsertCC",
        "scope": "eel2",
        "body": "MIDI_InsertCC(${1:MediaItem_Take take}, ${2:bool selected}, ${3:bool muted}, ${4:ppqpos}, ${5:int chanmsg}, ${6:int chan}, ${7:int msg2}, ${8:int msg3})$0",
        "description": "Insert a new MIDI CC event.\n\n"
    },
    "RPR_MIDI_INSERTCC python": {
        "prefix": "RPR_MIDI_InsertCC",
        "scope": "python",
        "body": "RPR_MIDI_InsertCC(${1:MediaItem_Take take}, ${2:Boolean selected}, ${3:Boolean muted}, ${4:Float ppqpos}, ${5:Int chanmsg}, ${6:Int chan}, ${7:Int msg2}, ${8:Int msg3})$0",
        "description": "Insert a new MIDI CC event.\n\n"
    },
    "REAPER.MIDI_INSERTEVT lua": {
        "prefix": "reaper.MIDI_InsertEvt",
        "scope": "lua",
        "body": "reaper.MIDI_InsertEvt(${1:MediaItem_Take take}, ${2:boolean selected}, ${3:boolean muted}, ${4:number ppqpos}, ${5:string bytestr})$0",
        "description": "Insert a new MIDI event.\n\n"
    },
    "MIDI_INSERTEVT eel2": {
        "prefix": "MIDI_InsertEvt",
        "scope": "eel2",
        "body": "MIDI_InsertEvt(${1:MediaItem_Take take}, ${2:bool selected}, ${3:bool muted}, ${4:ppqpos}, \"${5:bytestr}\")$0",
        "description": "Insert a new MIDI event.\n\n"
    },
    "RPR_MIDI_INSERTEVT python": {
        "prefix": "RPR_MIDI_InsertEvt",
        "scope": "python",
        "body": "RPR_MIDI_InsertEvt(${1:MediaItem_Take take}, ${2:Boolean selected}, ${3:Boolean muted}, ${4:Float ppqpos}, ${5:String bytestr}, ${6:Int bytestr_sz})$0",
        "description": "Insert a new MIDI event.\n\n"
    },
    "REAPER.MIDI_INSERTNOTE lua": {
        "prefix": "reaper.MIDI_InsertNote",
        "scope": "lua",
        "body": "reaper.MIDI_InsertNote(${1:MediaItem_Take take}, ${2:boolean selected}, ${3:boolean muted}, ${4:number startppqpos}, ${5:number endppqpos}, ${6:integer chan}, ${7:integer pitch}, ${8:integer vel}, ${9:optional boolean noSortIn})$0",
        "description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "MIDI_INSERTNOTE eel2": {
        "prefix": "MIDI_InsertNote",
        "scope": "eel2",
        "body": "MIDI_InsertNote(${1:MediaItem_Take take}, ${2:bool selected}, ${3:bool muted}, ${4:startppqpos}, ${5:endppqpos}, ${6:int chan}, ${7:int pitch}, ${8:int vel}, ${9:optional bool noSortIn})$0",
        "description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "RPR_MIDI_INSERTNOTE python": {
        "prefix": "RPR_MIDI_InsertNote",
        "scope": "python",
        "body": "RPR_MIDI_InsertNote(${1:MediaItem_Take take}, ${2:Boolean selected}, ${3:Boolean muted}, ${4:Float startppqpos}, ${5:Float endppqpos}, ${6:Int chan}, ${7:Int pitch}, ${8:Int vel}, ${9:const bool noSortInOptional})$0",
        "description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "REAPER.MIDI_INSERTTEXTSYSEXEVT lua": {
        "prefix": "reaper.MIDI_InsertTextSysexEvt",
        "scope": "lua",
        "body": "reaper.MIDI_InsertTextSysexEvt(${1:MediaItem_Take take}, ${2:boolean selected}, ${3:boolean muted}, ${4:number ppqpos}, ${5:integer type}, ${6:string bytestr})$0",
        "description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.\n\n"
    },
    "MIDI_INSERTTEXTSYSEXEVT eel2": {
        "prefix": "MIDI_InsertTextSysexEvt",
        "scope": "eel2",
        "body": "MIDI_InsertTextSysexEvt(${1:MediaItem_Take take}, ${2:bool selected}, ${3:bool muted}, ${4:ppqpos}, ${5:int type}, \"${6:bytestr}\")$0",
        "description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.\n\n"
    },
    "RPR_MIDI_INSERTTEXTSYSEXEVT python": {
        "prefix": "RPR_MIDI_InsertTextSysexEvt",
        "scope": "python",
        "body": "RPR_MIDI_InsertTextSysexEvt(${1:MediaItem_Take take}, ${2:Boolean selected}, ${3:Boolean muted}, ${4:Float ppqpos}, ${5:Int type}, ${6:String bytestr}, ${7:Int bytestr_sz})$0",
        "description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.\n\n"
    },
    "REAPER.MIDI_REINIT lua": {
        "prefix": "reaper.midi_reinit",
        "scope": "lua",
        "body": "reaper.midi_reinit()$0",
        "description": "Reset all MIDI devices\n\n"
    },
    "MIDI_REINIT eel2": {
        "prefix": "midi_reinit",
        "scope": "eel2",
        "body": "midi_reinit()$0",
        "description": "Reset all MIDI devices\n\n"
    },
    "RPR_MIDI_REINIT python": {
        "prefix": "RPR_midi_reinit",
        "scope": "python",
        "body": "RPR_midi_reinit()$0",
        "description": "Reset all MIDI devices\n\n"
    },
    "REAPER.MIDI_SELECTALL lua": {
        "prefix": "reaper.MIDI_SelectAll",
        "scope": "lua",
        "body": "reaper.MIDI_SelectAll(${1:MediaItem_Take take}, ${2:boolean select})$0",
        "description": "Select or deselect all MIDI content.\n\n"
    },
    "MIDI_SELECTALL eel2": {
        "prefix": "MIDI_SelectAll",
        "scope": "eel2",
        "body": "MIDI_SelectAll(${1:MediaItem_Take take}, ${2:bool select})$0",
        "description": "Select or deselect all MIDI content.\n\n"
    },
    "RPR_MIDI_SELECTALL python": {
        "prefix": "RPR_MIDI_SelectAll",
        "scope": "python",
        "body": "RPR_MIDI_SelectAll(${1:MediaItem_Take take}, ${2:Boolean select})$0",
        "description": "Select or deselect all MIDI content.\n\n"
    },
    "REAPER.MIDI_SETALLEVTS lua": {
        "prefix": "reaper.MIDI_SetAllEvts",
        "scope": "lua",
        "body": "reaper.MIDI_SetAllEvts(${1:MediaItem_Take take}, ${2:string buf})$0",
        "description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: &1=selected &2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_GetAllEvts.\n\n"
    },
    "MIDI_SETALLEVTS eel2": {
        "prefix": "MIDI_SetAllEvts",
        "scope": "eel2",
        "body": "MIDI_SetAllEvts(${1:MediaItem_Take take}, \"${2:buf}\")$0",
        "description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: &1=selected &2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_GetAllEvts.\n\n"
    },
    "RPR_MIDI_SETALLEVTS python": {
        "prefix": "RPR_MIDI_SetAllEvts",
        "scope": "python",
        "body": "RPR_MIDI_SetAllEvts(${1:MediaItem_Take take}, ${2:String buf}, ${3:Int buf_sz})$0",
        "description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: &1=selected &2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See MIDI_GetAllEvts.\n\n"
    },
    "REAPER.MIDI_SETCC lua": {
        "prefix": "reaper.MIDI_SetCC",
        "scope": "lua",
        "body": "reaper.MIDI_SetCC(${1:MediaItem_Take take}, ${2:integer ccidx}, ${3:optional boolean selectedIn}, ${4:optional boolean mutedIn}, ${5:optional number ppqposIn}, ${6:optional number chanmsgIn}, ${7:optional number chanIn}, ${8:optional number msg2In}, ${9:optional number msg3In}, ${10:optional boolean noSortIn})$0",
        "description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "MIDI_SETCC eel2": {
        "prefix": "MIDI_SetCC",
        "scope": "eel2",
        "body": "MIDI_SetCC(${1:MediaItem_Take take}, ${2:int ccidx}, ${3:optional bool selectedIn}, ${4:optional bool mutedIn}, ${5:optional ppqposIn}, ${6:optional int chanmsgIn}, ${7:optional int chanIn}, ${8:optional int msg2In}, ${9:optional int msg3In}, ${10:optional bool noSortIn})$0",
        "description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "RPR_MIDI_SETCC python": {
        "prefix": "RPR_MIDI_SetCC",
        "scope": "python",
        "body": "RPR_MIDI_SetCC(${1:MediaItem_Take take}, ${2:Int ccidx}, ${3:const bool selectedInOptional}, ${4:const bool mutedInOptional}, ${5:const double ppqposInOptional}, ${6:const int chanmsgInOptional}, ${7:const int chanInOptional}, ${8:const int msg2InOptional}, ${9:const int msg3InOptional}, ${10:const bool noSortInOptional})$0",
        "description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "REAPER.MIDI_SETEVT lua": {
        "prefix": "reaper.MIDI_SetEvt",
        "scope": "lua",
        "body": "reaper.MIDI_SetEvt(${1:MediaItem_Take take}, ${2:integer evtidx}, ${3:optional boolean selectedIn}, ${4:optional boolean mutedIn}, ${5:optional number ppqposIn}, ${6:optional string msg}, ${7:optional boolean noSortIn})$0",
        "description": "Set MIDI event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "MIDI_SETEVT eel2": {
        "prefix": "MIDI_SetEvt",
        "scope": "eel2",
        "body": "MIDI_SetEvt(${1:MediaItem_Take take}, ${2:int evtidx}, ${3:optional bool selectedIn}, ${4:optional bool mutedIn}, ${5:optional ppqposIn}, \"${6:optional msg}\", ${7:optional bool noSortIn})$0",
        "description": "Set MIDI event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "RPR_MIDI_SETEVT python": {
        "prefix": "RPR_MIDI_SetEvt",
        "scope": "python",
        "body": "RPR_MIDI_SetEvt(${1:MediaItem_Take take}, ${2:Int evtidx}, ${3:const bool selectedInOptional}, ${4:const bool mutedInOptional}, ${5:const double ppqposInOptional}, ${6:String msgOptional}, ${7:Int msgOptional_sz}, ${8:const bool noSortInOptional})$0",
        "description": "Set MIDI event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "REAPER.MIDI_SETITEMEXTENTS lua": {
        "prefix": "reaper.MIDI_SetItemExtents",
        "scope": "lua",
        "body": "reaper.MIDI_SetItemExtents(${1:MediaItem item}, ${2:number startQN}, ${3:number endQN})$0",
        "description": "Set the start/end positions of a media item that contains a MIDI take.\n\n"
    },
    "MIDI_SETITEMEXTENTS eel2": {
        "prefix": "MIDI_SetItemExtents",
        "scope": "eel2",
        "body": "MIDI_SetItemExtents(${1:MediaItem item}, ${2:startQN}, ${3:endQN})$0",
        "description": "Set the start/end positions of a media item that contains a MIDI take.\n\n"
    },
    "RPR_MIDI_SETITEMEXTENTS python": {
        "prefix": "RPR_MIDI_SetItemExtents",
        "scope": "python",
        "body": "RPR_MIDI_SetItemExtents(${1:MediaItem item}, ${2:Float startQN}, ${3:Float endQN})$0",
        "description": "Set the start/end positions of a media item that contains a MIDI take.\n\n"
    },
    "REAPER.MIDI_SETNOTE lua": {
        "prefix": "reaper.MIDI_SetNote",
        "scope": "lua",
        "body": "reaper.MIDI_SetNote(${1:MediaItem_Take take}, ${2:integer noteidx}, ${3:optional boolean selectedIn}, ${4:optional boolean mutedIn}, ${5:optional number startppqposIn}, ${6:optional number endppqposIn}, ${7:optional number chanIn}, ${8:optional number pitchIn}, ${9:optional number velIn}, ${10:optional boolean noSortIn})$0",
        "description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.\n\n"
    },
    "MIDI_SETNOTE eel2": {
        "prefix": "MIDI_SetNote",
        "scope": "eel2",
        "body": "MIDI_SetNote(${1:MediaItem_Take take}, ${2:int noteidx}, ${3:optional bool selectedIn}, ${4:optional bool mutedIn}, ${5:optional startppqposIn}, ${6:optional endppqposIn}, ${7:optional int chanIn}, ${8:optional int pitchIn}, ${9:optional int velIn}, ${10:optional bool noSortIn})$0",
        "description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.\n\n"
    },
    "RPR_MIDI_SETNOTE python": {
        "prefix": "RPR_MIDI_SetNote",
        "scope": "python",
        "body": "RPR_MIDI_SetNote(${1:MediaItem_Take take}, ${2:Int noteidx}, ${3:const bool selectedInOptional}, ${4:const bool mutedInOptional}, ${5:const double startppqposInOptional}, ${6:const double endppqposInOptional}, ${7:const int chanInOptional}, ${8:const int pitchInOptional}, ${9:const int velInOptional}, ${10:const bool noSortInOptional})$0",
        "description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.\n\n"
    },
    "REAPER.MIDI_SETTEXTSYSEXEVT lua": {
        "prefix": "reaper.MIDI_SetTextSysexEvt",
        "scope": "lua",
        "body": "reaper.MIDI_SetTextSysexEvt(${1:MediaItem_Take take}, ${2:integer textsyxevtidx}, ${3:optional boolean selectedIn}, ${4:optional boolean mutedIn}, ${5:optional number ppqposIn}, ${6:optional number typeIn}, ${7:optional string msg}, ${8:optional boolean noSortIn})$0",
        "description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "MIDI_SETTEXTSYSEXEVT eel2": {
        "prefix": "MIDI_SetTextSysexEvt",
        "scope": "eel2",
        "body": "MIDI_SetTextSysexEvt(${1:MediaItem_Take take}, ${2:int textsyxevtidx}, ${3:optional bool selectedIn}, ${4:optional bool mutedIn}, ${5:optional ppqposIn}, ${6:optional int typeIn}, \"${7:optional msg}\", ${8:optional bool noSortIn})$0",
        "description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "RPR_MIDI_SETTEXTSYSEXEVT python": {
        "prefix": "RPR_MIDI_SetTextSysexEvt",
        "scope": "python",
        "body": "RPR_MIDI_SetTextSysexEvt(${1:MediaItem_Take take}, ${2:Int textsyxevtidx}, ${3:const bool selectedInOptional}, ${4:const bool mutedInOptional}, ${5:const double ppqposInOptional}, ${6:const int typeInOptional}, ${7:String msgOptional}, ${8:Int msgOptional_sz}, ${9:const bool noSortInOptional})$0",
        "description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
    },
    "REAPER.MIDI_SORT lua": {
        "prefix": "reaper.MIDI_Sort",
        "scope": "lua",
        "body": "reaper.MIDI_Sort(${1:MediaItem_Take take})$0",
        "description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.\n\n"
    },
    "MIDI_SORT eel2": {
        "prefix": "MIDI_Sort",
        "scope": "eel2",
        "body": "MIDI_Sort(${1:MediaItem_Take take})$0",
        "description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.\n\n"
    },
    "RPR_MIDI_SORT python": {
        "prefix": "RPR_MIDI_Sort",
        "scope": "python",
        "body": "RPR_MIDI_Sort(${1:MediaItem_Take take})$0",
        "description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.\n\n"
    },
    "REAPER.MIDIEDITOR_GETACTIVE lua": {
        "prefix": "reaper.MIDIEditor_GetActive",
        "scope": "lua",
        "body": "reaper.MIDIEditor_GetActive()$0",
        "description": "get a pointer to the focused MIDI editor window\n\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand\n\n"
    },
    "MIDIEDITOR_GETACTIVE eel2": {
        "prefix": "MIDIEditor_GetActive",
        "scope": "eel2",
        "body": "MIDIEditor_GetActive()$0",
        "description": "get a pointer to the focused MIDI editor window\n\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand\n\n"
    },
    "RPR_MIDIEDITOR_GETACTIVE python": {
        "prefix": "RPR_MIDIEditor_GetActive",
        "scope": "python",
        "body": "RPR_MIDIEditor_GetActive()$0",
        "description": "get a pointer to the focused MIDI editor window\n\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand\n\n"
    },
    "REAPER.MIDIEDITOR_GETMODE lua": {
        "prefix": "reaper.MIDIEditor_GetMode",
        "scope": "lua",
        "body": "reaper.MIDIEditor_GetMode(${1:HWND midieditor})$0",
        "description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\n\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand\n\n"
    },
    "MIDIEDITOR_GETMODE eel2": {
        "prefix": "MIDIEditor_GetMode",
        "scope": "eel2",
        "body": "MIDIEditor_GetMode(${1:HWND midieditor})$0",
        "description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\n\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand\n\n"
    },
    "RPR_MIDIEDITOR_GETMODE python": {
        "prefix": "RPR_MIDIEditor_GetMode",
        "scope": "python",
        "body": "RPR_MIDIEditor_GetMode(${1:HWND midieditor})$0",
        "description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\n\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand\n\n"
    },
    "REAPER.MIDIEDITOR_GETSETTING_INT lua": {
        "prefix": "reaper.MIDIEditor_GetSetting_int",
        "scope": "lua",
        "body": "reaper.MIDIEditor_GetSetting_int(${1:HWND midieditor}, ${2:string setting_desc})$0",
        "description": "Get settings from a MIDI editor. setting_desc can be:\n\nsnap_enabled: returns 0 or 1\n\nactive_note_row: returns 0-127\n\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity\n\ndefault_note_vel: returns 0-127\n\ndefault_note_chan: returns 0-15\n\ndefault_note_len: returns default length in MIDI ticks\n\nscale_enabled: returns 0-1\n\nscale_root: returns 0-12 (0=C)\n\nif setting_desc is unsupported, the function returns -1.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_str\n\n"
    },
    "MIDIEDITOR_GETSETTING_INT eel2": {
        "prefix": "MIDIEditor_GetSetting_int",
        "scope": "eel2",
        "body": "MIDIEditor_GetSetting_int(${1:HWND midieditor}, \"${2:setting_desc}\")$0",
        "description": "Get settings from a MIDI editor. setting_desc can be:\n\nsnap_enabled: returns 0 or 1\n\nactive_note_row: returns 0-127\n\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity\n\ndefault_note_vel: returns 0-127\n\ndefault_note_chan: returns 0-15\n\ndefault_note_len: returns default length in MIDI ticks\n\nscale_enabled: returns 0-1\n\nscale_root: returns 0-12 (0=C)\n\nif setting_desc is unsupported, the function returns -1.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_str\n\n"
    },
    "RPR_MIDIEDITOR_GETSETTING_INT python": {
        "prefix": "RPR_MIDIEditor_GetSetting_int",
        "scope": "python",
        "body": "RPR_MIDIEditor_GetSetting_int(${1:HWND midieditor}, ${2:String setting_desc})$0",
        "description": "Get settings from a MIDI editor. setting_desc can be:\n\nsnap_enabled: returns 0 or 1\n\nactive_note_row: returns 0-127\n\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity\n\ndefault_note_vel: returns 0-127\n\ndefault_note_chan: returns 0-15\n\ndefault_note_len: returns default length in MIDI ticks\n\nscale_enabled: returns 0-1\n\nscale_root: returns 0-12 (0=C)\n\nif setting_desc is unsupported, the function returns -1.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_str\n\n"
    },
    "REAPER.MIDIEDITOR_GETSETTING_STR lua": {
        "prefix": "reaper.MIDIEditor_GetSetting_str",
        "scope": "lua",
        "body": "reaper.MIDIEditor_GetSetting_str(${1:HWND midieditor}, ${2:string setting_desc}, ${3:string buf})$0",
        "description": "Get settings from a MIDI editor. setting_desc can be:\n\nlast_clicked_cc_lane: returns text description (\"velocity\", \"pitch\", etc)\n\nscale: returns the scale record, for example \"102034050607\" for a major scale\n\nif setting_desc is unsupported, the function returns false.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int\n\n"
    },
    "MIDIEDITOR_GETSETTING_STR eel2": {
        "prefix": "MIDIEditor_GetSetting_str",
        "scope": "eel2",
        "body": "MIDIEditor_GetSetting_str(${1:HWND midieditor}, \"${2:setting_desc}\", ${3:#buf})$0",
        "description": "Get settings from a MIDI editor. setting_desc can be:\n\nlast_clicked_cc_lane: returns text description (\"velocity\", \"pitch\", etc)\n\nscale: returns the scale record, for example \"102034050607\" for a major scale\n\nif setting_desc is unsupported, the function returns false.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int\n\n"
    },
    "RPR_MIDIEDITOR_GETSETTING_STR python": {
        "prefix": "RPR_MIDIEditor_GetSetting_str",
        "scope": "python",
        "body": "RPR_MIDIEditor_GetSetting_str(${1:midieditor}, ${2:setting_desc}, ${3:buf}, ${4:buf_sz})$0",
        "description": "Get settings from a MIDI editor. setting_desc can be:\n\nlast_clicked_cc_lane: returns text description (\"velocity\", \"pitch\", etc)\n\nscale: returns the scale record, for example \"102034050607\" for a major scale\n\nif setting_desc is unsupported, the function returns false.\n\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int\n\n"
    },
    "REAPER.MIDIEDITOR_GETTAKE lua": {
        "prefix": "reaper.MIDIEditor_GetTake",
        "scope": "lua",
        "body": "reaper.MIDIEditor_GetTake(${1:HWND midieditor})$0",
        "description": "get the take that is currently being edited in this MIDI editor\n\n"
    },
    "MIDIEDITOR_GETTAKE eel2": {
        "prefix": "MIDIEditor_GetTake",
        "scope": "eel2",
        "body": "MIDIEditor_GetTake(${1:HWND midieditor})$0",
        "description": "get the take that is currently being edited in this MIDI editor\n\n"
    },
    "RPR_MIDIEDITOR_GETTAKE python": {
        "prefix": "RPR_MIDIEditor_GetTake",
        "scope": "python",
        "body": "RPR_MIDIEditor_GetTake(${1:HWND midieditor})$0",
        "description": "get the take that is currently being edited in this MIDI editor\n\n"
    },
    "REAPER.MIDIEDITOR_LASTFOCUSED_ONCOMMAND lua": {
        "prefix": "reaper.MIDIEditor_LastFocused_OnCommand",
        "scope": "lua",
        "body": "reaper.MIDIEditor_LastFocused_OnCommand(${1:integer command_id}, ${2:boolean islistviewcommand})$0",
        "description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\n\nsee MIDIEditor_OnCommand\n\n"
    },
    "MIDIEDITOR_LASTFOCUSED_ONCOMMAND eel2": {
        "prefix": "MIDIEditor_LastFocused_OnCommand",
        "scope": "eel2",
        "body": "MIDIEditor_LastFocused_OnCommand(${1:int command_id}, ${2:bool islistviewcommand})$0",
        "description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\n\nsee MIDIEditor_OnCommand\n\n"
    },
    "RPR_MIDIEDITOR_LASTFOCUSED_ONCOMMAND python": {
        "prefix": "RPR_MIDIEditor_LastFocused_OnCommand",
        "scope": "python",
        "body": "RPR_MIDIEditor_LastFocused_OnCommand(${1:Int command_id}, ${2:Boolean islistviewcommand})$0",
        "description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\n\nsee MIDIEditor_OnCommand\n\n"
    },
    "REAPER.MIDIEDITOR_ONCOMMAND lua": {
        "prefix": "reaper.MIDIEditor_OnCommand",
        "scope": "lua",
        "body": "reaper.MIDIEditor_OnCommand(${1:HWND midieditor}, ${2:integer command_id})$0",
        "description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\n\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand\n\n"
    },
    "MIDIEDITOR_ONCOMMAND eel2": {
        "prefix": "MIDIEditor_OnCommand",
        "scope": "eel2",
        "body": "MIDIEditor_OnCommand(${1:HWND midieditor}, ${2:int command_id})$0",
        "description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\n\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand\n\n"
    },
    "RPR_MIDIEDITOR_ONCOMMAND python": {
        "prefix": "RPR_MIDIEditor_OnCommand",
        "scope": "python",
        "body": "RPR_MIDIEditor_OnCommand(${1:HWND midieditor}, ${2:Int command_id})$0",
        "description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\n\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand\n\n"
    },
    "REAPER.MKPANSTR lua": {
        "prefix": "reaper.mkpanstr",
        "scope": "lua",
        "body": "reaper.mkpanstr(${1:string strNeed64}, ${2:number pan})$0",
        "description": ""
    },
    "MKPANSTR eel2": {
        "prefix": "mkpanstr",
        "scope": "eel2",
        "body": "mkpanstr(${1:#strNeed64}, ${2:pan})$0",
        "description": ""
    },
    "RPR_MKPANSTR python": {
        "prefix": "RPR_mkpanstr",
        "scope": "python",
        "body": "RPR_mkpanstr(${1:strNeed64}, ${2:pan})$0",
        "description": ""
    },
    "REAPER.MKVOLPANSTR lua": {
        "prefix": "reaper.mkvolpanstr",
        "scope": "lua",
        "body": "reaper.mkvolpanstr(${1:string strNeed64}, ${2:number vol}, ${3:number pan})$0",
        "description": ""
    },
    "MKVOLPANSTR eel2": {
        "prefix": "mkvolpanstr",
        "scope": "eel2",
        "body": "mkvolpanstr(${1:#strNeed64}, ${2:vol}, ${3:pan})$0",
        "description": ""
    },
    "RPR_MKVOLPANSTR python": {
        "prefix": "RPR_mkvolpanstr",
        "scope": "python",
        "body": "RPR_mkvolpanstr(${1:strNeed64}, ${2:vol}, ${3:pan})$0",
        "description": ""
    },
    "REAPER.MKVOLSTR lua": {
        "prefix": "reaper.mkvolstr",
        "scope": "lua",
        "body": "reaper.mkvolstr(${1:string strNeed64}, ${2:number vol})$0",
        "description": ""
    },
    "MKVOLSTR eel2": {
        "prefix": "mkvolstr",
        "scope": "eel2",
        "body": "mkvolstr(${1:#strNeed64}, ${2:vol})$0",
        "description": ""
    },
    "RPR_MKVOLSTR python": {
        "prefix": "RPR_mkvolstr",
        "scope": "python",
        "body": "RPR_mkvolstr(${1:strNeed64}, ${2:vol})$0",
        "description": ""
    },
    "REAPER.MOVEEDITCURSOR lua": {
        "prefix": "reaper.MoveEditCursor",
        "scope": "lua",
        "body": "reaper.MoveEditCursor(${1:number adjamt}, ${2:boolean dosel})$0",
        "description": ""
    },
    "MOVEEDITCURSOR eel2": {
        "prefix": "MoveEditCursor",
        "scope": "eel2",
        "body": "MoveEditCursor(${1:adjamt}, ${2:bool dosel})$0",
        "description": ""
    },
    "RPR_MOVEEDITCURSOR python": {
        "prefix": "RPR_MoveEditCursor",
        "scope": "python",
        "body": "RPR_MoveEditCursor(${1:Float adjamt}, ${2:Boolean dosel})$0",
        "description": ""
    },
    "REAPER.MOVEMEDIAITEMTOTRACK lua": {
        "prefix": "reaper.MoveMediaItemToTrack",
        "scope": "lua",
        "body": "reaper.MoveMediaItemToTrack(${1:MediaItem item}, ${2:MediaTrack desttr})$0",
        "description": "returns TRUE if move succeeded\n\n"
    },
    "MOVEMEDIAITEMTOTRACK eel2": {
        "prefix": "MoveMediaItemToTrack",
        "scope": "eel2",
        "body": "MoveMediaItemToTrack(${1:MediaItem item}, ${2:MediaTrack desttr})$0",
        "description": "returns TRUE if move succeeded\n\n"
    },
    "RPR_MOVEMEDIAITEMTOTRACK python": {
        "prefix": "RPR_MoveMediaItemToTrack",
        "scope": "python",
        "body": "RPR_MoveMediaItemToTrack(${1:MediaItem item}, ${2:MediaTrack desttr})$0",
        "description": "returns TRUE if move succeeded\n\n"
    },
    "REAPER.MUTEALLTRACKS lua": {
        "prefix": "reaper.MuteAllTracks",
        "scope": "lua",
        "body": "reaper.MuteAllTracks(${1:boolean mute})$0",
        "description": ""
    },
    "MUTEALLTRACKS eel2": {
        "prefix": "MuteAllTracks",
        "scope": "eel2",
        "body": "MuteAllTracks(${1:bool mute})$0",
        "description": ""
    },
    "RPR_MUTEALLTRACKS python": {
        "prefix": "RPR_MuteAllTracks",
        "scope": "python",
        "body": "RPR_MuteAllTracks(${1:Boolean mute})$0",
        "description": ""
    },
    "REAPER.MY_GETVIEWPORT lua": {
        "prefix": "reaper.my_getViewport",
        "scope": "lua",
        "body": "reaper.my_getViewport(${1:numberr.left}, ${2:numberr.top}, ${3:numberr.right}, ${4:numberr.bot}, ${5:number sr.left}, ${6:number sr.top}, ${7:number sr.right}, ${8:number sr.bot}, ${9:boolean wantWorkArea})$0",
        "description": ""
    },
    "MY_GETVIEWPORT eel2": {
        "prefix": "my_getViewport",
        "scope": "eel2",
        "body": "my_getViewport(${1:int &r.left}, ${2:int &r.top}, ${3:int &r.right}, ${4:int &r.bot}, ${5:int sr.left}, ${6:int sr.top}, ${7:int sr.right}, ${8:int sr.bot}, ${9:bool wantWorkArea})$0",
        "description": ""
    },
    "RPR_MY_GETVIEWPORT python": {
        "prefix": "RPR_my_getViewport",
        "scope": "python",
        "body": "RPR_my_getViewport(${1:RECT r}, ${2:const RECT sr}, ${3:Boolean wantWorkArea})$0",
        "description": ""
    },
    "REAPER.NAMEDCOMMANDLOOKUP lua": {
        "prefix": "reaper.NamedCommandLookup",
        "scope": "lua",
        "body": "reaper.NamedCommandLookup(${1:string command_name})$0",
        "description": "Get the command ID number for named command that was registered by an extension such as \"_SWS_ABOUT\" or \"_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a custom action.\n\n"
    },
    "NAMEDCOMMANDLOOKUP eel2": {
        "prefix": "NamedCommandLookup",
        "scope": "eel2",
        "body": "NamedCommandLookup(\"${1:command_name}\")$0",
        "description": "Get the command ID number for named command that was registered by an extension such as \"_SWS_ABOUT\" or \"_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a custom action.\n\n"
    },
    "RPR_NAMEDCOMMANDLOOKUP python": {
        "prefix": "RPR_NamedCommandLookup",
        "scope": "python",
        "body": "RPR_NamedCommandLookup(${1:String command_name})$0",
        "description": "Get the command ID number for named command that was registered by an extension such as \"_SWS_ABOUT\" or \"_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a custom action.\n\n"
    },
    "REAPER.ONPAUSEBUTTON lua": {
        "prefix": "reaper.OnPauseButton",
        "scope": "lua",
        "body": "reaper.OnPauseButton()$0",
        "description": "direct way to simulate pause button hit\n\n"
    },
    "ONPAUSEBUTTON eel2": {
        "prefix": "OnPauseButton",
        "scope": "eel2",
        "body": "OnPauseButton()$0",
        "description": "direct way to simulate pause button hit\n\n"
    },
    "RPR_ONPAUSEBUTTON python": {
        "prefix": "RPR_OnPauseButton",
        "scope": "python",
        "body": "RPR_OnPauseButton()$0",
        "description": "direct way to simulate pause button hit\n\n"
    },
    "REAPER.ONPAUSEBUTTONEX lua": {
        "prefix": "reaper.OnPauseButtonEx",
        "scope": "lua",
        "body": "reaper.OnPauseButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate pause button hit\n\n"
    },
    "ONPAUSEBUTTONEX eel2": {
        "prefix": "OnPauseButtonEx",
        "scope": "eel2",
        "body": "OnPauseButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate pause button hit\n\n"
    },
    "RPR_ONPAUSEBUTTONEX python": {
        "prefix": "RPR_OnPauseButtonEx",
        "scope": "python",
        "body": "RPR_OnPauseButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate pause button hit\n\n"
    },
    "REAPER.ONPLAYBUTTON lua": {
        "prefix": "reaper.OnPlayButton",
        "scope": "lua",
        "body": "reaper.OnPlayButton()$0",
        "description": "direct way to simulate play button hit\n\n"
    },
    "ONPLAYBUTTON eel2": {
        "prefix": "OnPlayButton",
        "scope": "eel2",
        "body": "OnPlayButton()$0",
        "description": "direct way to simulate play button hit\n\n"
    },
    "RPR_ONPLAYBUTTON python": {
        "prefix": "RPR_OnPlayButton",
        "scope": "python",
        "body": "RPR_OnPlayButton()$0",
        "description": "direct way to simulate play button hit\n\n"
    },
    "REAPER.ONPLAYBUTTONEX lua": {
        "prefix": "reaper.OnPlayButtonEx",
        "scope": "lua",
        "body": "reaper.OnPlayButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate play button hit\n\n"
    },
    "ONPLAYBUTTONEX eel2": {
        "prefix": "OnPlayButtonEx",
        "scope": "eel2",
        "body": "OnPlayButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate play button hit\n\n"
    },
    "RPR_ONPLAYBUTTONEX python": {
        "prefix": "RPR_OnPlayButtonEx",
        "scope": "python",
        "body": "RPR_OnPlayButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate play button hit\n\n"
    },
    "REAPER.ONSTOPBUTTON lua": {
        "prefix": "reaper.OnStopButton",
        "scope": "lua",
        "body": "reaper.OnStopButton()$0",
        "description": "direct way to simulate stop button hit\n\n"
    },
    "ONSTOPBUTTON eel2": {
        "prefix": "OnStopButton",
        "scope": "eel2",
        "body": "OnStopButton()$0",
        "description": "direct way to simulate stop button hit\n\n"
    },
    "RPR_ONSTOPBUTTON python": {
        "prefix": "RPR_OnStopButton",
        "scope": "python",
        "body": "RPR_OnStopButton()$0",
        "description": "direct way to simulate stop button hit\n\n"
    },
    "REAPER.ONSTOPBUTTONEX lua": {
        "prefix": "reaper.OnStopButtonEx",
        "scope": "lua",
        "body": "reaper.OnStopButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate stop button hit\n\n"
    },
    "ONSTOPBUTTONEX eel2": {
        "prefix": "OnStopButtonEx",
        "scope": "eel2",
        "body": "OnStopButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate stop button hit\n\n"
    },
    "RPR_ONSTOPBUTTONEX python": {
        "prefix": "RPR_OnStopButtonEx",
        "scope": "python",
        "body": "RPR_OnStopButtonEx(${1:ReaProject proj})$0",
        "description": "direct way to simulate stop button hit\n\n"
    },
    "REAPER.OPENCOLORTHEMEFILE lua": {
        "prefix": "reaper.OpenColorThemeFile",
        "scope": "lua",
        "body": "reaper.OpenColorThemeFile(${1:string fn})$0",
        "description": ""
    },
    "OPENCOLORTHEMEFILE eel2": {
        "prefix": "OpenColorThemeFile",
        "scope": "eel2",
        "body": "OpenColorThemeFile(\"${1:fn}\")$0",
        "description": ""
    },
    "RPR_OPENCOLORTHEMEFILE python": {
        "prefix": "RPR_OpenColorThemeFile",
        "scope": "python",
        "body": "RPR_OpenColorThemeFile(${1:String fn})$0",
        "description": ""
    },
    "REAPER.OPENMEDIAEXPLORER lua": {
        "prefix": "reaper.OpenMediaExplorer",
        "scope": "lua",
        "body": "reaper.OpenMediaExplorer(${1:string mediafn}, ${2:boolean play})$0",
        "description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it.\n\n"
    },
    "OPENMEDIAEXPLORER eel2": {
        "prefix": "OpenMediaExplorer",
        "scope": "eel2",
        "body": "OpenMediaExplorer(\"${1:mediafn}\", ${2:bool play})$0",
        "description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it.\n\n"
    },
    "RPR_OPENMEDIAEXPLORER python": {
        "prefix": "RPR_OpenMediaExplorer",
        "scope": "python",
        "body": "RPR_OpenMediaExplorer(${1:String mediafn}, ${2:Boolean play})$0",
        "description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it.\n\n"
    },
    "REAPER.OSCLOCALMESSAGETOHOST lua": {
        "prefix": "reaper.OscLocalMessageToHost",
        "scope": "lua",
        "body": "reaper.OscLocalMessageToHost(${1:string message}, ${2:optional number valueIn})$0",
        "description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns. Only supported if control surface support was enabled when installing REAPER.\n\n"
    },
    "OSCLOCALMESSAGETOHOST eel2": {
        "prefix": "OscLocalMessageToHost",
        "scope": "eel2",
        "body": "OscLocalMessageToHost(\"${1:message}\", ${2:optional valueIn})$0",
        "description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns. Only supported if control surface support was enabled when installing REAPER.\n\n"
    },
    "RPR_OSCLOCALMESSAGETOHOST python": {
        "prefix": "RPR_OscLocalMessageToHost",
        "scope": "python",
        "body": "RPR_OscLocalMessageToHost(${1:String message}, ${2:const double valueInOptional})$0",
        "description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns. Only supported if control surface support was enabled when installing REAPER.\n\n"
    },
    "REAPER.PARSE_TIMESTR lua": {
        "prefix": "reaper.parse_timestr",
        "scope": "lua",
        "body": "reaper.parse_timestr(${1:string buf})$0",
        "description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.\n\n"
    },
    "PARSE_TIMESTR eel2": {
        "prefix": "parse_timestr",
        "scope": "eel2",
        "body": "parse_timestr(\"${1:buf}\")$0",
        "description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.\n\n"
    },
    "RPR_PARSE_TIMESTR python": {
        "prefix": "RPR_parse_timestr",
        "scope": "python",
        "body": "RPR_parse_timestr(${1:String buf})$0",
        "description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.\n\n"
    },
    "REAPER.PARSE_TIMESTR_LEN lua": {
        "prefix": "reaper.parse_timestr_len",
        "scope": "lua",
        "body": "reaper.parse_timestr_len(${1:string buf}, ${2:number offset}, ${3:integer modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "PARSE_TIMESTR_LEN eel2": {
        "prefix": "parse_timestr_len",
        "scope": "eel2",
        "body": "parse_timestr_len(\"${1:buf}\", ${2:offset}, ${3:int modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "RPR_PARSE_TIMESTR_LEN python": {
        "prefix": "RPR_parse_timestr_len",
        "scope": "python",
        "body": "RPR_parse_timestr_len(${1:String buf}, ${2:Float offset}, ${3:Int modeoverride})$0",
        "description": "time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "REAPER.PARSE_TIMESTR_POS lua": {
        "prefix": "reaper.parse_timestr_pos",
        "scope": "lua",
        "body": "reaper.parse_timestr_pos(${1:string buf}, ${2:integer modeoverride})$0",
        "description": "Parse time string, time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "PARSE_TIMESTR_POS eel2": {
        "prefix": "parse_timestr_pos",
        "scope": "eel2",
        "body": "parse_timestr_pos(\"${1:buf}\", ${2:int modeoverride})$0",
        "description": "Parse time string, time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "RPR_PARSE_TIMESTR_POS python": {
        "prefix": "RPR_parse_timestr_pos",
        "scope": "python",
        "body": "RPR_parse_timestr_pos(${1:String buf}, ${2:Int modeoverride})$0",
        "description": "Parse time string, time formatting mode overrides: -1=proj default.\n\n0=time\n\n1=measures.beats + time\n\n2=measures.beats\n\n3=seconds\n\n4=samples\n\n5=h:m:s:f\n\n"
    },
    "REAPER.PARSEPANSTR lua": {
        "prefix": "reaper.parsepanstr",
        "scope": "lua",
        "body": "reaper.parsepanstr(${1:string str})$0",
        "description": ""
    },
    "PARSEPANSTR eel2": {
        "prefix": "parsepanstr",
        "scope": "eel2",
        "body": "parsepanstr(\"${1:str}\")$0",
        "description": ""
    },
    "RPR_PARSEPANSTR python": {
        "prefix": "RPR_parsepanstr",
        "scope": "python",
        "body": "RPR_parsepanstr(${1:String str})$0",
        "description": ""
    },
    "REAPER.PCM_SINK_ENUM lua": {
        "prefix": "reaper.PCM_Sink_Enum",
        "scope": "lua",
        "body": "reaper.PCM_Sink_Enum(${1:integer idx})$0",
        "description": ""
    },
    "PCM_SINK_ENUM eel2": {
        "prefix": "PCM_Sink_Enum",
        "scope": "eel2",
        "body": "PCM_Sink_Enum(${1:int idx}, ${2:#descstr})$0",
        "description": ""
    },
    "RPR_PCM_SINK_ENUM python": {
        "prefix": "RPR_PCM_Sink_Enum",
        "scope": "python",
        "body": "RPR_PCM_Sink_Enum(${1:Int idx}, ${2:String descstrOut})$0",
        "description": ""
    },
    "REAPER.PCM_SINK_GETEXTENSION lua": {
        "prefix": "reaper.PCM_Sink_GetExtension",
        "scope": "lua",
        "body": "reaper.PCM_Sink_GetExtension(${1:string data})$0",
        "description": ""
    },
    "PCM_SINK_GETEXTENSION eel2": {
        "prefix": "PCM_Sink_GetExtension",
        "scope": "eel2",
        "body": "PCM_Sink_GetExtension(${1:#retval}, \"${2:data}\")$0",
        "description": ""
    },
    "RPR_PCM_SINK_GETEXTENSION python": {
        "prefix": "RPR_PCM_Sink_GetExtension",
        "scope": "python",
        "body": "RPR_PCM_Sink_GetExtension(${1:String data}, ${2:Int data_sz})$0",
        "description": ""
    },
    "REAPER.PCM_SINK_SHOWCONFIG lua": {
        "prefix": "reaper.PCM_Sink_ShowConfig",
        "scope": "lua",
        "body": "reaper.PCM_Sink_ShowConfig(${1:string cfg}, ${2:HWND hwndParent})$0",
        "description": ""
    },
    "PCM_SINK_SHOWCONFIG eel2": {
        "prefix": "PCM_Sink_ShowConfig",
        "scope": "eel2",
        "body": "PCM_Sink_ShowConfig(\"${1:cfg}\", ${2:HWND hwndParent})$0",
        "description": ""
    },
    "RPR_PCM_SINK_SHOWCONFIG python": {
        "prefix": "RPR_PCM_Sink_ShowConfig",
        "scope": "python",
        "body": "RPR_PCM_Sink_ShowConfig(${1:String cfg}, ${2:Int cfg_sz}, ${3:HWND hwndParent})$0",
        "description": ""
    },
    "REAPER.PCM_SOURCE_CREATEFROMFILE lua": {
        "prefix": "reaper.PCM_Source_CreateFromFile",
        "scope": "lua",
        "body": "reaper.PCM_Source_CreateFromFile(${1:string filename})$0",
        "description": "See PCM_Source_CreateFromFileEx.\n\n"
    },
    "PCM_SOURCE_CREATEFROMFILE eel2": {
        "prefix": "PCM_Source_CreateFromFile",
        "scope": "eel2",
        "body": "PCM_Source_CreateFromFile(\"${1:filename}\")$0",
        "description": "See PCM_Source_CreateFromFileEx.\n\n"
    },
    "RPR_PCM_SOURCE_CREATEFROMFILE python": {
        "prefix": "RPR_PCM_Source_CreateFromFile",
        "scope": "python",
        "body": "RPR_PCM_Source_CreateFromFile(${1:String filename})$0",
        "description": "See PCM_Source_CreateFromFileEx.\n\n"
    },
    "REAPER.PCM_SOURCE_CREATEFROMFILEEX lua": {
        "prefix": "reaper.PCM_Source_CreateFromFileEx",
        "scope": "lua",
        "body": "reaper.PCM_Source_CreateFromFileEx(${1:string filename}, ${2:boolean forcenoMidiImp})$0",
        "description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.\n\n"
    },
    "PCM_SOURCE_CREATEFROMFILEEX eel2": {
        "prefix": "PCM_Source_CreateFromFileEx",
        "scope": "eel2",
        "body": "PCM_Source_CreateFromFileEx(\"${1:filename}\", ${2:bool forcenoMidiImp})$0",
        "description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.\n\n"
    },
    "RPR_PCM_SOURCE_CREATEFROMFILEEX python": {
        "prefix": "RPR_PCM_Source_CreateFromFileEx",
        "scope": "python",
        "body": "RPR_PCM_Source_CreateFromFileEx(${1:String filename}, ${2:Boolean forcenoMidiImp})$0",
        "description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.\n\n"
    },
    "REAPER.PCM_SOURCE_CREATEFROMTYPE lua": {
        "prefix": "reaper.PCM_Source_CreateFromType",
        "scope": "lua",
        "body": "reaper.PCM_Source_CreateFromType(${1:string sourcetype})$0",
        "description": "Create a PCM_source from a \"type\" (use this if you're going to load its state via LoadState/ProjectStateContext).\n\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well.\n\n"
    },
    "PCM_SOURCE_CREATEFROMTYPE eel2": {
        "prefix": "PCM_Source_CreateFromType",
        "scope": "eel2",
        "body": "PCM_Source_CreateFromType(\"${1:sourcetype}\")$0",
        "description": "Create a PCM_source from a \"type\" (use this if you're going to load its state via LoadState/ProjectStateContext).\n\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well.\n\n"
    },
    "RPR_PCM_SOURCE_CREATEFROMTYPE python": {
        "prefix": "RPR_PCM_Source_CreateFromType",
        "scope": "python",
        "body": "RPR_PCM_Source_CreateFromType(${1:String sourcetype})$0",
        "description": "Create a PCM_source from a \"type\" (use this if you're going to load its state via LoadState/ProjectStateContext).\n\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well.\n\n"
    },
    "REAPER.PCM_SOURCE_DESTROY lua": {
        "prefix": "reaper.PCM_Source_Destroy",
        "scope": "lua",
        "body": "reaper.PCM_Source_Destroy(${1:PCM_source src})$0",
        "description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source\n\n"
    },
    "PCM_SOURCE_DESTROY eel2": {
        "prefix": "PCM_Source_Destroy",
        "scope": "eel2",
        "body": "PCM_Source_Destroy(${1:PCM_source src})$0",
        "description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source\n\n"
    },
    "RPR_PCM_SOURCE_DESTROY python": {
        "prefix": "RPR_PCM_Source_Destroy",
        "scope": "python",
        "body": "RPR_PCM_Source_Destroy(${1:PCM_source src})$0",
        "description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source\n\n"
    },
    "REAPER.PCM_SOURCE_GETPEAKS lua": {
        "prefix": "reaper.PCM_Source_GetPeaks",
        "scope": "lua",
        "body": "reaper.PCM_Source_GetPeaks(${1:PCM_source src}, ${2:number peakrate}, ${3:number starttime}, ${4:integer numchannels}, ${5:integer numsamplesperchannel}, ${6:integer want_extra_type}, ${7:reaper.array buf})$0",
        "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
    },
    "PCM_SOURCE_GETPEAKS eel2": {
        "prefix": "PCM_Source_GetPeaks",
        "scope": "eel2",
        "body": "PCM_Source_GetPeaks(${1:PCM_source src}, ${2:peakrate}, ${3:starttime}, ${4:int numchannels}, ${5:int numsamplesperchannel}, ${6:int want_extra_type}, ${7:buffer_ptr buf})$0",
        "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
    },
    "RPR_PCM_SOURCE_GETPEAKS python": {
        "prefix": "RPR_PCM_Source_GetPeaks",
        "scope": "python",
        "body": "RPR_PCM_Source_GetPeaks(${1:src}, ${2:peakrate}, ${3:starttime}, ${4:numchannels}, ${5:numsamplesperchannel}, ${6:want_extra_type}, ${7:buf})$0",
        "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
    },
    "REAPER.PCM_SOURCE_GETSECTIONINFO lua": {
        "prefix": "reaper.PCM_Source_GetSectionInfo",
        "scope": "lua",
        "body": "reaper.PCM_Source_GetSectionInfo(${1:PCM_source src})$0",
        "description": "If a section/reverse block, retrieves offset/len/reverse. return true if success\n\n"
    },
    "PCM_SOURCE_GETSECTIONINFO eel2": {
        "prefix": "PCM_Source_GetSectionInfo",
        "scope": "eel2",
        "body": "PCM_Source_GetSectionInfo(${1:PCM_source src}, ${2:&offs}, ${3:&len}, ${4:bool &rev})$0",
        "description": "If a section/reverse block, retrieves offset/len/reverse. return true if success\n\n"
    },
    "RPR_PCM_SOURCE_GETSECTIONINFO python": {
        "prefix": "RPR_PCM_Source_GetSectionInfo",
        "scope": "python",
        "body": "RPR_PCM_Source_GetSectionInfo(${1:src}, ${2:offsOut}, ${3:lenOut}, ${4:revOut})$0",
        "description": "If a section/reverse block, retrieves offset/len/reverse. return true if success\n\n"
    },
    "REAPER.PLUGINWANTSALWAYSRUNFX lua": {
        "prefix": "reaper.PluginWantsAlwaysRunFx",
        "scope": "lua",
        "body": "reaper.PluginWantsAlwaysRunFx(${1:integer amt})$0",
        "description": ""
    },
    "PLUGINWANTSALWAYSRUNFX eel2": {
        "prefix": "PluginWantsAlwaysRunFx",
        "scope": "eel2",
        "body": "PluginWantsAlwaysRunFx(${1:int amt})$0",
        "description": ""
    },
    "RPR_PLUGINWANTSALWAYSRUNFX python": {
        "prefix": "RPR_PluginWantsAlwaysRunFx",
        "scope": "python",
        "body": "RPR_PluginWantsAlwaysRunFx(${1:Int amt})$0",
        "description": ""
    },
    "REAPER.PREVENTUIREFRESH lua": {
        "prefix": "reaper.PreventUIRefresh",
        "scope": "lua",
        "body": "reaper.PreventUIRefresh(${1:integer prevent_count})$0",
        "description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur\n\n"
    },
    "PREVENTUIREFRESH eel2": {
        "prefix": "PreventUIRefresh",
        "scope": "eel2",
        "body": "PreventUIRefresh(${1:int prevent_count})$0",
        "description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur\n\n"
    },
    "RPR_PREVENTUIREFRESH python": {
        "prefix": "RPR_PreventUIRefresh",
        "scope": "python",
        "body": "RPR_PreventUIRefresh(${1:Int prevent_count})$0",
        "description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur\n\n"
    },
    "REAPER.REASCRIPTERROR lua": {
        "prefix": "reaper.ReaScriptError",
        "scope": "lua",
        "body": "reaper.ReaScriptError(${1:string errmsg})$0",
        "description": "Causes REAPER to display the error message after the current ReaScript finishes.\n\n"
    },
    "REASCRIPTERROR eel2": {
        "prefix": "ReaScriptError",
        "scope": "eel2",
        "body": "ReaScriptError(\"${1:errmsg}\")$0",
        "description": "Causes REAPER to display the error message after the current ReaScript finishes.\n\n"
    },
    "RPR_REASCRIPTERROR python": {
        "prefix": "RPR_ReaScriptError",
        "scope": "python",
        "body": "RPR_ReaScriptError(${1:String errmsg})$0",
        "description": "Causes REAPER to display the error message after the current ReaScript finishes.\n\n"
    },
    "REAPER.RECURSIVECREATEDIRECTORY lua": {
        "prefix": "reaper.RecursiveCreateDirectory",
        "scope": "lua",
        "body": "reaper.RecursiveCreateDirectory(${1:string path}, ${2:integer ignored})$0",
        "description": "returns positive value on success, 0 on failure.\n\n"
    },
    "RECURSIVECREATEDIRECTORY eel2": {
        "prefix": "RecursiveCreateDirectory",
        "scope": "eel2",
        "body": "RecursiveCreateDirectory(\"${1:path}\", ${2:size_t ignored})$0",
        "description": "returns positive value on success, 0 on failure.\n\n"
    },
    "RPR_RECURSIVECREATEDIRECTORY python": {
        "prefix": "RPR_RecursiveCreateDirectory",
        "scope": "python",
        "body": "RPR_RecursiveCreateDirectory(${1:String path}, ${2:Unknown ignored})$0",
        "description": "returns positive value on success, 0 on failure.\n\n"
    },
    "REAPER.REFRESHTOOLBAR lua": {
        "prefix": "reaper.RefreshToolbar",
        "scope": "lua",
        "body": "reaper.RefreshToolbar(${1:integer command_id})$0",
        "description": "See RefreshToolbar2.\n\n"
    },
    "REFRESHTOOLBAR eel2": {
        "prefix": "RefreshToolbar",
        "scope": "eel2",
        "body": "RefreshToolbar(${1:int command_id})$0",
        "description": "See RefreshToolbar2.\n\n"
    },
    "RPR_REFRESHTOOLBAR python": {
        "prefix": "RPR_RefreshToolbar",
        "scope": "python",
        "body": "RPR_RefreshToolbar(${1:Int command_id})$0",
        "description": "See RefreshToolbar2.\n\n"
    },
    "REAPER.REFRESHTOOLBAR2 lua": {
        "prefix": "reaper.RefreshToolbar2",
        "scope": "lua",
        "body": "reaper.RefreshToolbar2(${1:integer section_id}, ${2:integer command_id})$0",
        "description": "Refresh the toolbar button states of a toggle action.\n\n"
    },
    "REFRESHTOOLBAR2 eel2": {
        "prefix": "RefreshToolbar2",
        "scope": "eel2",
        "body": "RefreshToolbar2(${1:int section_id}, ${2:int command_id})$0",
        "description": "Refresh the toolbar button states of a toggle action.\n\n"
    },
    "RPR_REFRESHTOOLBAR2 python": {
        "prefix": "RPR_RefreshToolbar2",
        "scope": "python",
        "body": "RPR_RefreshToolbar2(${1:Int section_id}, ${2:Int command_id})$0",
        "description": "Refresh the toolbar button states of a toggle action.\n\n"
    },
    "REAPER.RELATIVE_FN lua": {
        "prefix": "reaper.relative_fn",
        "scope": "lua",
        "body": "reaper.relative_fn(${1:string in}, ${2:string out})$0",
        "description": "Makes a filename \"in\" relative to the current project, if any.\n\n"
    },
    "RELATIVE_FN eel2": {
        "prefix": "relative_fn",
        "scope": "eel2",
        "body": "relative_fn(\"${1:in}\", ${2:#out})$0",
        "description": "Makes a filename \"in\" relative to the current project, if any.\n\n"
    },
    "RPR_RELATIVE_FN python": {
        "prefix": "RPR_relative_fn",
        "scope": "python",
        "body": "RPR_relative_fn(${1:in}, ${2:out}, ${3:out_sz})$0",
        "description": "Makes a filename \"in\" relative to the current project, if any.\n\n"
    },
    "REAPER.REMOVETRACKSEND lua": {
        "prefix": "reaper.RemoveTrackSend",
        "scope": "lua",
        "body": "reaper.RemoveTrackSend(${1:MediaTrack tr}, ${2:integer category}, ${3:integer sendidx})$0",
        "description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.\n\n"
    },
    "REMOVETRACKSEND eel2": {
        "prefix": "RemoveTrackSend",
        "scope": "eel2",
        "body": "RemoveTrackSend(${1:MediaTrack tr}, ${2:int category}, ${3:int sendidx})$0",
        "description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.\n\n"
    },
    "RPR_REMOVETRACKSEND python": {
        "prefix": "RPR_RemoveTrackSend",
        "scope": "python",
        "body": "RPR_RemoveTrackSend(${1:MediaTrack tr}, ${2:Int category}, ${3:Int sendidx})$0",
        "description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.\n\n"
    },
    "REAPER.RENDERFILESECTION lua": {
        "prefix": "reaper.RenderFileSection",
        "scope": "lua",
        "body": "reaper.RenderFileSection(${1:string source_filename}, ${2:string target_filename}, ${3:number start_percent}, ${4:number end_percent}, ${5:number playrate})$0",
        "description": "Not available while playing back.\n\n"
    },
    "RENDERFILESECTION eel2": {
        "prefix": "RenderFileSection",
        "scope": "eel2",
        "body": "RenderFileSection(\"${1:source_filename}\", \"${2:target_filename}\", ${3:start_percent}, ${4:end_percent}, ${5:playrate})$0",
        "description": "Not available while playing back.\n\n"
    },
    "RPR_RENDERFILESECTION python": {
        "prefix": "RPR_RenderFileSection",
        "scope": "python",
        "body": "RPR_RenderFileSection(${1:String source_filename}, ${2:String target_filename}, ${3:Float start_percent}, ${4:Float end_percent}, ${5:Float playrate})$0",
        "description": "Not available while playing back.\n\n"
    },
    "REAPER.REORDERSELECTEDTRACKS lua": {
        "prefix": "reaper.ReorderSelectedTracks",
        "scope": "lua",
        "body": "reaper.ReorderSelectedTracks(${1:integer beforeTrackIdx}, ${2:integer makePrevFolder})$0",
        "description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder\n\n"
    },
    "REORDERSELECTEDTRACKS eel2": {
        "prefix": "ReorderSelectedTracks",
        "scope": "eel2",
        "body": "ReorderSelectedTracks(${1:int beforeTrackIdx}, ${2:int makePrevFolder})$0",
        "description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder\n\n"
    },
    "RPR_REORDERSELECTEDTRACKS python": {
        "prefix": "RPR_ReorderSelectedTracks",
        "scope": "python",
        "body": "RPR_ReorderSelectedTracks(${1:Int beforeTrackIdx}, ${2:Int makePrevFolder})$0",
        "description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder\n\n"
    },
    "REAPER.RESAMPLE_ENUMMODES lua": {
        "prefix": "reaper.Resample_EnumModes",
        "scope": "lua",
        "body": "reaper.Resample_EnumModes(${1:integer mode})$0",
        "description": ""
    },
    "RESAMPLE_ENUMMODES eel2": {
        "prefix": "Resample_EnumModes",
        "scope": "eel2",
        "body": "Resample_EnumModes(${1:#retval}, ${2:int mode})$0",
        "description": ""
    },
    "RPR_RESAMPLE_ENUMMODES python": {
        "prefix": "RPR_Resample_EnumModes",
        "scope": "python",
        "body": "RPR_Resample_EnumModes(${1:Int mode})$0",
        "description": ""
    },
    "REAPER.RESOLVE_FN lua": {
        "prefix": "reaper.resolve_fn",
        "scope": "lua",
        "body": "reaper.resolve_fn(${1:string in}, ${2:string out})$0",
        "description": "See resolve_fn2.\n\n"
    },
    "RESOLVE_FN eel2": {
        "prefix": "resolve_fn",
        "scope": "eel2",
        "body": "resolve_fn(\"${1:in}\", ${2:#out})$0",
        "description": "See resolve_fn2.\n\n"
    },
    "RPR_RESOLVE_FN python": {
        "prefix": "RPR_resolve_fn",
        "scope": "python",
        "body": "RPR_resolve_fn(${1:in}, ${2:out}, ${3:out_sz})$0",
        "description": "See resolve_fn2.\n\n"
    },
    "REAPER.RESOLVE_FN2 lua": {
        "prefix": "reaper.resolve_fn2",
        "scope": "lua",
        "body": "reaper.resolve_fn2(${1:string in}, ${2:string out}, ${3:optional string checkSubDir})$0",
        "description": "Resolves a filename \"in\" by using project settings etc. If no file found, out will be a copy of in.\n\n"
    },
    "RESOLVE_FN2 eel2": {
        "prefix": "resolve_fn2",
        "scope": "eel2",
        "body": "resolve_fn2(\"${1:in}\", ${2:#out}, \"${3:optional checkSubDir}\")$0",
        "description": "Resolves a filename \"in\" by using project settings etc. If no file found, out will be a copy of in.\n\n"
    },
    "RPR_RESOLVE_FN2 python": {
        "prefix": "RPR_resolve_fn2",
        "scope": "python",
        "body": "RPR_resolve_fn2(${1:in}, ${2:out}, ${3:out_sz}, ${4:checkSubDirOptional})$0",
        "description": "Resolves a filename \"in\" by using project settings etc. If no file found, out will be a copy of in.\n\n"
    },
    "REAPER.REVERSENAMEDCOMMANDLOOKUP lua": {
        "prefix": "reaper.ReverseNamedCommandLookup",
        "scope": "lua",
        "body": "reaper.ReverseNamedCommandLookup(${1:integer command_id})$0",
        "description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action.\n\n"
    },
    "REVERSENAMEDCOMMANDLOOKUP eel2": {
        "prefix": "ReverseNamedCommandLookup",
        "scope": "eel2",
        "body": "ReverseNamedCommandLookup(${1:#retval}, ${2:int command_id})$0",
        "description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action.\n\n"
    },
    "RPR_REVERSENAMEDCOMMANDLOOKUP python": {
        "prefix": "RPR_ReverseNamedCommandLookup",
        "scope": "python",
        "body": "RPR_ReverseNamedCommandLookup(${1:Int command_id})$0",
        "description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action.\n\n"
    },
    "REAPER.SCALEFROMENVELOPEMODE lua": {
        "prefix": "reaper.ScaleFromEnvelopeMode",
        "scope": "lua",
        "body": "reaper.ScaleFromEnvelopeMode(${1:integer scaling_mode}, ${2:number val})$0",
        "description": "See GetEnvelopeScalingMode.\n\n"
    },
    "SCALEFROMENVELOPEMODE eel2": {
        "prefix": "ScaleFromEnvelopeMode",
        "scope": "eel2",
        "body": "ScaleFromEnvelopeMode(${1:int scaling_mode}, ${2:val})$0",
        "description": "See GetEnvelopeScalingMode.\n\n"
    },
    "RPR_SCALEFROMENVELOPEMODE python": {
        "prefix": "RPR_ScaleFromEnvelopeMode",
        "scope": "python",
        "body": "RPR_ScaleFromEnvelopeMode(${1:Int scaling_mode}, ${2:Float val})$0",
        "description": "See GetEnvelopeScalingMode.\n\n"
    },
    "REAPER.SCALETOENVELOPEMODE lua": {
        "prefix": "reaper.ScaleToEnvelopeMode",
        "scope": "lua",
        "body": "reaper.ScaleToEnvelopeMode(${1:integer scaling_mode}, ${2:number val})$0",
        "description": "See GetEnvelopeScalingMode.\n\n"
    },
    "SCALETOENVELOPEMODE eel2": {
        "prefix": "ScaleToEnvelopeMode",
        "scope": "eel2",
        "body": "ScaleToEnvelopeMode(${1:int scaling_mode}, ${2:val})$0",
        "description": "See GetEnvelopeScalingMode.\n\n"
    },
    "RPR_SCALETOENVELOPEMODE python": {
        "prefix": "RPR_ScaleToEnvelopeMode",
        "scope": "python",
        "body": "RPR_ScaleToEnvelopeMode(${1:Int scaling_mode}, ${2:Float val})$0",
        "description": "See GetEnvelopeScalingMode.\n\n"
    },
    "REAPER.SELECTALLMEDIAITEMS lua": {
        "prefix": "reaper.SelectAllMediaItems",
        "scope": "lua",
        "body": "reaper.SelectAllMediaItems(${1:ReaProject proj}, ${2:boolean selected})$0",
        "description": ""
    },
    "SELECTALLMEDIAITEMS eel2": {
        "prefix": "SelectAllMediaItems",
        "scope": "eel2",
        "body": "SelectAllMediaItems(${1:ReaProject proj}, ${2:bool selected})$0",
        "description": ""
    },
    "RPR_SELECTALLMEDIAITEMS python": {
        "prefix": "RPR_SelectAllMediaItems",
        "scope": "python",
        "body": "RPR_SelectAllMediaItems(${1:ReaProject proj}, ${2:Boolean selected})$0",
        "description": ""
    },
    "REAPER.SELECTPROJECTINSTANCE lua": {
        "prefix": "reaper.SelectProjectInstance",
        "scope": "lua",
        "body": "reaper.SelectProjectInstance(${1:ReaProject proj})$0",
        "description": ""
    },
    "SELECTPROJECTINSTANCE eel2": {
        "prefix": "SelectProjectInstance",
        "scope": "eel2",
        "body": "SelectProjectInstance(${1:ReaProject proj})$0",
        "description": ""
    },
    "RPR_SELECTPROJECTINSTANCE python": {
        "prefix": "RPR_SelectProjectInstance",
        "scope": "python",
        "body": "RPR_SelectProjectInstance(${1:ReaProject proj})$0",
        "description": ""
    },
    "REAPER.SETACTIVETAKE lua": {
        "prefix": "reaper.SetActiveTake",
        "scope": "lua",
        "body": "reaper.SetActiveTake(${1:MediaItem_Take take})$0",
        "description": "set this take active in this media item\n\n"
    },
    "SETACTIVETAKE eel2": {
        "prefix": "SetActiveTake",
        "scope": "eel2",
        "body": "SetActiveTake(${1:MediaItem_Take take})$0",
        "description": "set this take active in this media item\n\n"
    },
    "RPR_SETACTIVETAKE python": {
        "prefix": "RPR_SetActiveTake",
        "scope": "python",
        "body": "RPR_SetActiveTake(${1:MediaItem_Take take})$0",
        "description": "set this take active in this media item\n\n"
    },
    "REAPER.SETAUTOMATIONMODE lua": {
        "prefix": "reaper.SetAutomationMode",
        "scope": "lua",
        "body": "reaper.SetAutomationMode(${1:integer mode}, ${2:boolean onlySel})$0",
        "description": "sets all or selected tracks to mode.\n\n"
    },
    "SETAUTOMATIONMODE eel2": {
        "prefix": "SetAutomationMode",
        "scope": "eel2",
        "body": "SetAutomationMode(${1:int mode}, ${2:bool onlySel})$0",
        "description": "sets all or selected tracks to mode.\n\n"
    },
    "RPR_SETAUTOMATIONMODE python": {
        "prefix": "RPR_SetAutomationMode",
        "scope": "python",
        "body": "RPR_SetAutomationMode(${1:Int mode}, ${2:Boolean onlySel})$0",
        "description": "sets all or selected tracks to mode.\n\n"
    },
    "REAPER.SETCURRENTBPM lua": {
        "prefix": "reaper.SetCurrentBPM",
        "scope": "lua",
        "body": "reaper.SetCurrentBPM(${1:ReaProject __proj}, ${2:number bpm}, ${3:boolean wantUndo})$0",
        "description": "set current BPM in project, set wantUndo=true to add undo point\n\n"
    },
    "SETCURRENTBPM eel2": {
        "prefix": "SetCurrentBPM",
        "scope": "eel2",
        "body": "SetCurrentBPM(${1:ReaProject __proj}, ${2:bpm}, ${3:bool wantUndo})$0",
        "description": "set current BPM in project, set wantUndo=true to add undo point\n\n"
    },
    "RPR_SETCURRENTBPM python": {
        "prefix": "RPR_SetCurrentBPM",
        "scope": "python",
        "body": "RPR_SetCurrentBPM(${1:ReaProject __proj}, ${2:Float bpm}, ${3:Boolean wantUndo})$0",
        "description": "set current BPM in project, set wantUndo=true to add undo point\n\n"
    },
    "REAPER.SETCURSORCONTEXT lua": {
        "prefix": "reaper.SetCursorContext",
        "scope": "lua",
        "body": "reaper.SetCursorContext(${1:integer mode}, ${2:TrackEnvelope envIn})$0",
        "description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)\n\n"
    },
    "SETCURSORCONTEXT eel2": {
        "prefix": "SetCursorContext",
        "scope": "eel2",
        "body": "SetCursorContext(${1:int mode}, ${2:TrackEnvelope envIn})$0",
        "description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)\n\n"
    },
    "RPR_SETCURSORCONTEXT python": {
        "prefix": "RPR_SetCursorContext",
        "scope": "python",
        "body": "RPR_SetCursorContext(${1:Int mode}, ${2:TrackEnvelope envInOptional})$0",
        "description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)\n\n"
    },
    "REAPER.SETEDITCURPOS lua": {
        "prefix": "reaper.SetEditCurPos",
        "scope": "lua",
        "body": "reaper.SetEditCurPos(${1:number time}, ${2:boolean moveview}, ${3:boolean seekplay})$0",
        "description": ""
    },
    "SETEDITCURPOS eel2": {
        "prefix": "SetEditCurPos",
        "scope": "eel2",
        "body": "SetEditCurPos(${1:time}, ${2:bool moveview}, ${3:bool seekplay})$0",
        "description": ""
    },
    "RPR_SETEDITCURPOS python": {
        "prefix": "RPR_SetEditCurPos",
        "scope": "python",
        "body": "RPR_SetEditCurPos(${1:Float time}, ${2:Boolean moveview}, ${3:Boolean seekplay})$0",
        "description": ""
    },
    "REAPER.SETEDITCURPOS2 lua": {
        "prefix": "reaper.SetEditCurPos2",
        "scope": "lua",
        "body": "reaper.SetEditCurPos2(${1:ReaProject proj}, ${2:number time}, ${3:boolean moveview}, ${4:boolean seekplay})$0",
        "description": ""
    },
    "SETEDITCURPOS2 eel2": {
        "prefix": "SetEditCurPos2",
        "scope": "eel2",
        "body": "SetEditCurPos2(${1:ReaProject proj}, ${2:time}, ${3:bool moveview}, ${4:bool seekplay})$0",
        "description": ""
    },
    "RPR_SETEDITCURPOS2 python": {
        "prefix": "RPR_SetEditCurPos2",
        "scope": "python",
        "body": "RPR_SetEditCurPos2(${1:ReaProject proj}, ${2:Float time}, ${3:Boolean moveview}, ${4:Boolean seekplay})$0",
        "description": ""
    },
    "REAPER.SETENVELOPEPOINT lua": {
        "prefix": "reaper.SetEnvelopePoint",
        "scope": "lua",
        "body": "reaper.SetEnvelopePoint(${1:TrackEnvelope envelope}, ${2:integer ptidx}, ${3:optional number timeIn}, ${4:optional number valueIn}, ${5:optional number shapeIn}, ${6:optional number tensionIn}, ${7:optional boolean selectedIn}, ${8:optional boolean noSortIn})$0",
        "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "SETENVELOPEPOINT eel2": {
        "prefix": "SetEnvelopePoint",
        "scope": "eel2",
        "body": "SetEnvelopePoint(${1:TrackEnvelope envelope}, ${2:int ptidx}, ${3:optional timeIn}, ${4:optional valueIn}, ${5:optional int shapeIn}, ${6:optional tensionIn}, ${7:optional bool selectedIn}, ${8:optional bool noSortIn})$0",
        "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "RPR_SETENVELOPEPOINT python": {
        "prefix": "RPR_SetEnvelopePoint",
        "scope": "python",
        "body": "RPR_SetEnvelopePoint(${1:envelope}, ${2:ptidx}, ${3:timeInOptional}, ${4:valueInOptional}, ${5:shapeInOptional}, ${6:tensionInOptional}, ${7:selectedInOptional}, ${8:noSortInOptional})$0",
        "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "REAPER.SETENVELOPEPOINTEX lua": {
        "prefix": "reaper.SetEnvelopePointEx",
        "scope": "lua",
        "body": "reaper.SetEnvelopePointEx(${1:TrackEnvelope envelope}, ${2:integer autoitem_idx}, ${3:integer ptidx}, ${4:optional number timeIn}, ${5:optional number valueIn}, ${6:optional number shapeIn}, ${7:optional number tensionIn}, ${8:optional boolean selectedIn}, ${9:optional boolean noSortIn})$0",
        "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. Tautoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "SETENVELOPEPOINTEX eel2": {
        "prefix": "SetEnvelopePointEx",
        "scope": "eel2",
        "body": "SetEnvelopePointEx(${1:TrackEnvelope envelope}, ${2:int autoitem_idx}, ${3:int ptidx}, ${4:optional timeIn}, ${5:optional valueIn}, ${6:optional int shapeIn}, ${7:optional tensionIn}, ${8:optional bool selectedIn}, ${9:optional bool noSortIn})$0",
        "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. Tautoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "RPR_SETENVELOPEPOINTEX python": {
        "prefix": "RPR_SetEnvelopePointEx",
        "scope": "python",
        "body": "RPR_SetEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:ptidx}, ${4:timeInOptional}, ${5:valueInOptional}, ${6:shapeInOptional}, ${7:tensionInOptional}, ${8:selectedInOptional}, ${9:noSortInOptional})$0",
        "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. Tautoitem_idx==-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See GetEnvelopePoint, InsertEnvelopePoint, GetEnvelopeScalingMode.\n\n"
    },
    "REAPER.SETENVELOPESTATECHUNK lua": {
        "prefix": "reaper.SetEnvelopeStateChunk",
        "scope": "lua",
        "body": "reaper.SetEnvelopeStateChunk(${1:TrackEnvelope env}, ${2:string str}, ${3:boolean isundo})$0",
        "description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "SETENVELOPESTATECHUNK eel2": {
        "prefix": "SetEnvelopeStateChunk",
        "scope": "eel2",
        "body": "SetEnvelopeStateChunk(${1:TrackEnvelope env}, \"${2:str}\", ${3:bool isundo})$0",
        "description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "RPR_SETENVELOPESTATECHUNK python": {
        "prefix": "RPR_SetEnvelopeStateChunk",
        "scope": "python",
        "body": "RPR_SetEnvelopeStateChunk(${1:TrackEnvelope env}, ${2:String str}, ${3:Boolean isundoOptional})$0",
        "description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "REAPER.SETEXTSTATE lua": {
        "prefix": "reaper.SetExtState",
        "scope": "lua",
        "body": "reaper.SetExtState(${1:string section}, ${2:string key}, ${3:string value}, ${4:boolean persist})$0",
        "description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState.\n\n"
    },
    "SETEXTSTATE eel2": {
        "prefix": "SetExtState",
        "scope": "eel2",
        "body": "SetExtState(\"${1:section}\", \"${2:key}\", \"${3:value}\", ${4:bool persist})$0",
        "description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState.\n\n"
    },
    "RPR_SETEXTSTATE python": {
        "prefix": "RPR_SetExtState",
        "scope": "python",
        "body": "RPR_SetExtState(${1:String section}, ${2:String key}, ${3:String value}, ${4:Boolean persist})$0",
        "description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState.\n\n"
    },
    "REAPER.SETGLOBALAUTOMATIONOVERRIDE lua": {
        "prefix": "reaper.SetGlobalAutomationOverride",
        "scope": "lua",
        "body": "reaper.SetGlobalAutomationOverride(${1:integer mode})$0",
        "description": "mode: see GetGlobalAutomationOverride\n\n"
    },
    "SETGLOBALAUTOMATIONOVERRIDE eel2": {
        "prefix": "SetGlobalAutomationOverride",
        "scope": "eel2",
        "body": "SetGlobalAutomationOverride(${1:int mode})$0",
        "description": "mode: see GetGlobalAutomationOverride\n\n"
    },
    "RPR_SETGLOBALAUTOMATIONOVERRIDE python": {
        "prefix": "RPR_SetGlobalAutomationOverride",
        "scope": "python",
        "body": "RPR_SetGlobalAutomationOverride(${1:Int mode})$0",
        "description": "mode: see GetGlobalAutomationOverride\n\n"
    },
    "REAPER.SETITEMSTATECHUNK lua": {
        "prefix": "reaper.SetItemStateChunk",
        "scope": "lua",
        "body": "reaper.SetItemStateChunk(${1:MediaItem item}, ${2:string str}, ${3:boolean isundo})$0",
        "description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "SETITEMSTATECHUNK eel2": {
        "prefix": "SetItemStateChunk",
        "scope": "eel2",
        "body": "SetItemStateChunk(${1:MediaItem item}, \"${2:str}\", ${3:bool isundo})$0",
        "description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "RPR_SETITEMSTATECHUNK python": {
        "prefix": "RPR_SetItemStateChunk",
        "scope": "python",
        "body": "RPR_SetItemStateChunk(${1:MediaItem item}, ${2:String str}, ${3:Boolean isundoOptional})$0",
        "description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "REAPER.SETMASTERTRACKVISIBILITY lua": {
        "prefix": "reaper.SetMasterTrackVisibility",
        "scope": "lua",
        "body": "reaper.SetMasterTrackVisibility(${1:integer flag})$0",
        "description": "set &1 to show the master track in the TCP, &2 to show in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.\n\n"
    },
    "SETMASTERTRACKVISIBILITY eel2": {
        "prefix": "SetMasterTrackVisibility",
        "scope": "eel2",
        "body": "SetMasterTrackVisibility(${1:int flag})$0",
        "description": "set &1 to show the master track in the TCP, &2 to show in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.\n\n"
    },
    "RPR_SETMASTERTRACKVISIBILITY python": {
        "prefix": "RPR_SetMasterTrackVisibility",
        "scope": "python",
        "body": "RPR_SetMasterTrackVisibility(${1:Int flag})$0",
        "description": "set &1 to show the master track in the TCP, &2 to show in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.\n\n"
    },
    "REAPER.SETMEDIAITEMINFO_VALUE lua": {
        "prefix": "reaper.SetMediaItemInfo_Value",
        "scope": "lua",
        "body": "reaper.SetMediaItemInfo_Value(${1:MediaItem item}, ${2:string parmname}, ${3:number newvalue})$0",
        "description": "Set media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (&1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)\n\n"
    },
    "SETMEDIAITEMINFO_VALUE eel2": {
        "prefix": "SetMediaItemInfo_Value",
        "scope": "eel2",
        "body": "SetMediaItemInfo_Value(${1:MediaItem item}, \"${2:parmname}\", ${3:newvalue})$0",
        "description": "Set media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (&1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)\n\n"
    },
    "RPR_SETMEDIAITEMINFO_VALUE python": {
        "prefix": "RPR_SetMediaItemInfo_Value",
        "scope": "python",
        "body": "RPR_SetMediaItemInfo_Value(${1:MediaItem item}, ${2:String parmname}, ${3:Float newvalue})$0",
        "description": "Set media item numerical-value attributes.\n\nB_MUTE : bool * to muted state\n\nB_LOOPSRC : bool * to loop source\n\nB_ALLTAKESPLAY : bool * to all takes play\n\nB_UISEL : bool * to ui selected\n\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\n\nC_LOCK : char * to one char of lock flags (&1 is locked, currently)\n\nD_VOL : double * of item volume (volume bar)\n\nD_POSITION : double * of item position (seconds)\n\nD_LENGTH : double * of item length (seconds)\n\nD_SNAPOFFSET : double * of item snap offset (seconds)\n\nD_FADEINLEN : double * of item fade in length (manual, seconds)\n\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\n\nD_FADEINDIR : double * of item fade in curve [-1; 1]\n\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\n\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\n\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\n\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\n\nC_FADEOUTSHAPE : int * to fadeout shape\n\nI_GROUPID : int * to group ID (0 = no group)\n\nI_LASTY : int * to last y position in track (readonly)\n\nI_LASTH : int * to last height in track (readonly)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_CURTAKE : int * to active take\n\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\n\nF_FREEMODE_Y : float * to free mode y position (0..1)\n\nF_FREEMODE_H : float * to free mode height (0..1)\n\n"
    },
    "REAPER.SETMEDIAITEMLENGTH lua": {
        "prefix": "reaper.SetMediaItemLength",
        "scope": "lua",
        "body": "reaper.SetMediaItemLength(${1:MediaItem item}, ${2:number length}, ${3:boolean refreshUI})$0",
        "description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange().\n\n"
    },
    "SETMEDIAITEMLENGTH eel2": {
        "prefix": "SetMediaItemLength",
        "scope": "eel2",
        "body": "SetMediaItemLength(${1:MediaItem item}, ${2:length}, ${3:bool refreshUI})$0",
        "description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange().\n\n"
    },
    "RPR_SETMEDIAITEMLENGTH python": {
        "prefix": "RPR_SetMediaItemLength",
        "scope": "python",
        "body": "RPR_SetMediaItemLength(${1:MediaItem item}, ${2:Float length}, ${3:Boolean refreshUI})$0",
        "description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange().\n\n"
    },
    "REAPER.SETMEDIAITEMPOSITION lua": {
        "prefix": "reaper.SetMediaItemPosition",
        "scope": "lua",
        "body": "reaper.SetMediaItemPosition(${1:MediaItem item}, ${2:number position}, ${3:boolean refreshUI})$0",
        "description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange().\n\n"
    },
    "SETMEDIAITEMPOSITION eel2": {
        "prefix": "SetMediaItemPosition",
        "scope": "eel2",
        "body": "SetMediaItemPosition(${1:MediaItem item}, ${2:position}, ${3:bool refreshUI})$0",
        "description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange().\n\n"
    },
    "RPR_SETMEDIAITEMPOSITION python": {
        "prefix": "RPR_SetMediaItemPosition",
        "scope": "python",
        "body": "RPR_SetMediaItemPosition(${1:MediaItem item}, ${2:Float position}, ${3:Boolean refreshUI})$0",
        "description": "Redraws the screen only if refreshUI == true.\n\nSee UpdateArrange().\n\n"
    },
    "REAPER.SETMEDIAITEMSELECTED lua": {
        "prefix": "reaper.SetMediaItemSelected",
        "scope": "lua",
        "body": "reaper.SetMediaItemSelected(${1:MediaItem item}, ${2:boolean selected})$0",
        "description": ""
    },
    "SETMEDIAITEMSELECTED eel2": {
        "prefix": "SetMediaItemSelected",
        "scope": "eel2",
        "body": "SetMediaItemSelected(${1:MediaItem item}, ${2:bool selected})$0",
        "description": ""
    },
    "RPR_SETMEDIAITEMSELECTED python": {
        "prefix": "RPR_SetMediaItemSelected",
        "scope": "python",
        "body": "RPR_SetMediaItemSelected(${1:MediaItem item}, ${2:Boolean selected})$0",
        "description": ""
    },
    "REAPER.SETMEDIAITEMTAKE_SOURCE lua": {
        "prefix": "reaper.SetMediaItemTake_Source",
        "scope": "lua",
        "body": "reaper.SetMediaItemTake_Source(${1:MediaItem_Take take}, ${2:PCM_source source})$0",
        "description": "Set media source of media item take\n\n"
    },
    "SETMEDIAITEMTAKE_SOURCE eel2": {
        "prefix": "SetMediaItemTake_Source",
        "scope": "eel2",
        "body": "SetMediaItemTake_Source(${1:MediaItem_Take take}, ${2:PCM_source source})$0",
        "description": "Set media source of media item take\n\n"
    },
    "RPR_SETMEDIAITEMTAKE_SOURCE python": {
        "prefix": "RPR_SetMediaItemTake_Source",
        "scope": "python",
        "body": "RPR_SetMediaItemTake_Source(${1:MediaItem_Take take}, ${2:PCM_source source})$0",
        "description": "Set media source of media item take\n\n"
    },
    "REAPER.SETMEDIAITEMTAKEINFO_VALUE lua": {
        "prefix": "reaper.SetMediaItemTakeInfo_Value",
        "scope": "lua",
        "body": "reaper.SetMediaItemTakeInfo_Value(${1:MediaItem_Take take}, ${2:string parmname}, ${3:number newvalue})$0",
        "description": "Set media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)\n\n"
    },
    "SETMEDIAITEMTAKEINFO_VALUE eel2": {
        "prefix": "SetMediaItemTakeInfo_Value",
        "scope": "eel2",
        "body": "SetMediaItemTakeInfo_Value(${1:MediaItem_Take take}, \"${2:parmname}\", ${3:newvalue})$0",
        "description": "Set media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)\n\n"
    },
    "RPR_SETMEDIAITEMTAKEINFO_VALUE python": {
        "prefix": "RPR_SetMediaItemTakeInfo_Value",
        "scope": "python",
        "body": "RPR_SetMediaItemTakeInfo_Value(${1:MediaItem_Take take}, ${2:String parmname}, ${3:Float newvalue})$0",
        "description": "Set media item take numerical-value attributes.\n\nD_STARTOFFS : double *, start offset in take of item\n\nD_VOL : double *, take volume\n\nD_PAN : double *, take pan\n\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\n\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\n\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\n\nB_PPITCH, bool *, preserve pitch when changing rate\n\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\n\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\n\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)\n\n"
    },
    "REAPER.SETMEDIATRACKINFO_VALUE lua": {
        "prefix": "reaper.SetMediaTrackInfo_Value",
        "scope": "lua",
        "body": "reaper.SetMediaTrackInfo_Value(${1:MediaTrack tr}, ${2:string parmname}, ${3:number newvalue})$0",
        "description": "Set track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (&1=no media buffering, &2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)\n\n"
    },
    "SETMEDIATRACKINFO_VALUE eel2": {
        "prefix": "SetMediaTrackInfo_Value",
        "scope": "eel2",
        "body": "SetMediaTrackInfo_Value(${1:MediaTrack tr}, \"${2:parmname}\", ${3:newvalue})$0",
        "description": "Set track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (&1=no media buffering, &2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)\n\n"
    },
    "RPR_SETMEDIATRACKINFO_VALUE python": {
        "prefix": "RPR_SetMediaTrackInfo_Value",
        "scope": "python",
        "body": "RPR_SetMediaTrackInfo_Value(${1:MediaTrack tr}, ${2:String parmname}, ${3:Float newvalue})$0",
        "description": "Set track numerical-value attributes.\n\nB_MUTE : bool * : mute flag\n\nB_PHASE : bool * : invert track phase\n\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\n\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\n\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\n\nI_RECARM : int * : 0=not record armed, 1=record armed\n\nI_RECINPUT : int * : record input. <0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\n\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\n\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\n\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\n\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_NCHAN : int * : number of track channels, must be 2-64, even\n\nI_SELECTED : int * : track selected? 0 or 1\n\nI_WNDH : int * : current TCP window height (Read-only)\n\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\n\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\n\nI_MIDIHWOUT : int * : track midi hardware output index (<0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\n\nI_PERFFLAGS : int * : track perf flags (&1=no media buffering, &2=no anticipative FX)\n\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\n\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\n\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\n\nD_PAN : double * : trim pan of track (-1..1)\n\nD_WIDTH : double * : width of track (-1..1)\n\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\n\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\n\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\n\nD_PANLAW : double * : pan law of track. <0 for project default, 1.0 for +0dB, etc\n\nP_ENV : read only, returns TrackEnvelope *, setNewValue=<VOLENV, <PANENV, etc\n\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\n\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\n\nB_MAINSEND : bool * : track sends audio to parent\n\nC_MAINSEND_OFFS : char * : track send to parent channel offset\n\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\n\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\n\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\n\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)\n\n"
    },
    "REAPER.SETMIDIEDITORGRID lua": {
        "prefix": "reaper.SetMIDIEditorGrid",
        "scope": "lua",
        "body": "reaper.SetMIDIEditorGrid(${1:ReaProject project}, ${2:number division})$0",
        "description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.\n\n"
    },
    "SETMIDIEDITORGRID eel2": {
        "prefix": "SetMIDIEditorGrid",
        "scope": "eel2",
        "body": "SetMIDIEditorGrid(${1:ReaProject project}, ${2:division})$0",
        "description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.\n\n"
    },
    "RPR_SETMIDIEDITORGRID python": {
        "prefix": "RPR_SetMIDIEditorGrid",
        "scope": "python",
        "body": "RPR_SetMIDIEditorGrid(${1:ReaProject project}, ${2:Float division})$0",
        "description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.\n\n"
    },
    "REAPER.SETMIXERSCROLL lua": {
        "prefix": "reaper.SetMixerScroll",
        "scope": "lua",
        "body": "reaper.SetMixerScroll(${1:MediaTrack leftmosttrack})$0",
        "description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.\n\n"
    },
    "SETMIXERSCROLL eel2": {
        "prefix": "SetMixerScroll",
        "scope": "eel2",
        "body": "SetMixerScroll(${1:MediaTrack leftmosttrack})$0",
        "description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.\n\n"
    },
    "RPR_SETMIXERSCROLL python": {
        "prefix": "RPR_SetMixerScroll",
        "scope": "python",
        "body": "RPR_SetMixerScroll(${1:MediaTrack leftmosttrack})$0",
        "description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.\n\n"
    },
    "REAPER.SETMOUSEMODIFIER lua": {
        "prefix": "reaper.SetMouseModifier",
        "scope": "lua",
        "body": "reaper.SetMouseModifier(${1:string context}, ${2:integer modifier_flag}, ${3:string action})$0",
        "description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\nContext is a string like \"MM_CTX_ITEM\". Find these strings by modifying an assignment in \n\nPreferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\n\nFor left-click and double-click contexts, the action can be any built-in command ID number\n\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n\n(enable \"show action IDs\" in the context menu), and find custom action ID strings in reaper-kb.ini.\n\nFor built-in mouse modifier behaviors, find action IDs (which will be low numbers)\n\nby modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nAssigning an action of -1 will reset that mouse modifier behavior to factory default.\n\nSee GetMouseModifier.\n\n"
    },
    "SETMOUSEMODIFIER eel2": {
        "prefix": "SetMouseModifier",
        "scope": "eel2",
        "body": "SetMouseModifier(\"${1:context}\", ${2:int modifier_flag}, \"${3:action}\")$0",
        "description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\nContext is a string like \"MM_CTX_ITEM\". Find these strings by modifying an assignment in \n\nPreferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\n\nFor left-click and double-click contexts, the action can be any built-in command ID number\n\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n\n(enable \"show action IDs\" in the context menu), and find custom action ID strings in reaper-kb.ini.\n\nFor built-in mouse modifier behaviors, find action IDs (which will be low numbers)\n\nby modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nAssigning an action of -1 will reset that mouse modifier behavior to factory default.\n\nSee GetMouseModifier.\n\n"
    },
    "RPR_SETMOUSEMODIFIER python": {
        "prefix": "RPR_SetMouseModifier",
        "scope": "python",
        "body": "RPR_SetMouseModifier(${1:String context}, ${2:Int modifier_flag}, ${3:String action})$0",
        "description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\n\nContext is a string like \"MM_CTX_ITEM\". Find these strings by modifying an assignment in \n\nPreferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\n\nFor left-click and double-click contexts, the action can be any built-in command ID number\n\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n\n(enable \"show action IDs\" in the context menu), and find custom action ID strings in reaper-kb.ini.\n\nFor built-in mouse modifier behaviors, find action IDs (which will be low numbers)\n\nby modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\n\nAssigning an action of -1 will reset that mouse modifier behavior to factory default.\n\nSee GetMouseModifier.\n\n"
    },
    "REAPER.SETONLYTRACKSELECTED lua": {
        "prefix": "reaper.SetOnlyTrackSelected",
        "scope": "lua",
        "body": "reaper.SetOnlyTrackSelected(${1:MediaTrack track})$0",
        "description": "Set exactly one track selected, deselect all others\n\n"
    },
    "SETONLYTRACKSELECTED eel2": {
        "prefix": "SetOnlyTrackSelected",
        "scope": "eel2",
        "body": "SetOnlyTrackSelected(${1:MediaTrack track})$0",
        "description": "Set exactly one track selected, deselect all others\n\n"
    },
    "RPR_SETONLYTRACKSELECTED python": {
        "prefix": "RPR_SetOnlyTrackSelected",
        "scope": "python",
        "body": "RPR_SetOnlyTrackSelected(${1:MediaTrack track})$0",
        "description": "Set exactly one track selected, deselect all others\n\n"
    },
    "REAPER.SETPROJECTGRID lua": {
        "prefix": "reaper.SetProjectGrid",
        "scope": "lua",
        "body": "reaper.SetProjectGrid(${1:ReaProject project}, ${2:number division})$0",
        "description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.\n\n"
    },
    "SETPROJECTGRID eel2": {
        "prefix": "SetProjectGrid",
        "scope": "eel2",
        "body": "SetProjectGrid(${1:ReaProject project}, ${2:division})$0",
        "description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.\n\n"
    },
    "RPR_SETPROJECTGRID python": {
        "prefix": "RPR_SetProjectGrid",
        "scope": "python",
        "body": "RPR_SetProjectGrid(${1:ReaProject project}, ${2:Float division})$0",
        "description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.\n\n"
    },
    "REAPER.SETPROJECTMARKER lua": {
        "prefix": "reaper.SetProjectMarker",
        "scope": "lua",
        "body": "reaper.SetProjectMarker(${1:integer markrgnindexnumber}, ${2:boolean isrgn}, ${3:number pos}, ${4:number rgnend}, ${5:string name})$0",
        "description": ""
    },
    "SETPROJECTMARKER eel2": {
        "prefix": "SetProjectMarker",
        "scope": "eel2",
        "body": "SetProjectMarker(${1:int markrgnindexnumber}, ${2:bool isrgn}, ${3:pos}, ${4:rgnend}, \"${5:name}\")$0",
        "description": ""
    },
    "RPR_SETPROJECTMARKER python": {
        "prefix": "RPR_SetProjectMarker",
        "scope": "python",
        "body": "RPR_SetProjectMarker(${1:Int markrgnindexnumber}, ${2:Boolean isrgn}, ${3:Float pos}, ${4:Float rgnend}, ${5:String name})$0",
        "description": ""
    },
    "REAPER.SETPROJECTMARKER2 lua": {
        "prefix": "reaper.SetProjectMarker2",
        "scope": "lua",
        "body": "reaper.SetProjectMarker2(${1:ReaProject proj}, ${2:integer markrgnindexnumber}, ${3:boolean isrgn}, ${4:number pos}, ${5:number rgnend}, ${6:string name})$0",
        "description": ""
    },
    "SETPROJECTMARKER2 eel2": {
        "prefix": "SetProjectMarker2",
        "scope": "eel2",
        "body": "SetProjectMarker2(${1:ReaProject proj}, ${2:int markrgnindexnumber}, ${3:bool isrgn}, ${4:pos}, ${5:rgnend}, \"${6:name}\")$0",
        "description": ""
    },
    "RPR_SETPROJECTMARKER2 python": {
        "prefix": "RPR_SetProjectMarker2",
        "scope": "python",
        "body": "RPR_SetProjectMarker2(${1:ReaProject proj}, ${2:Int markrgnindexnumber}, ${3:Boolean isrgn}, ${4:Float pos}, ${5:Float rgnend}, ${6:String name})$0",
        "description": ""
    },
    "REAPER.SETPROJECTMARKER3 lua": {
        "prefix": "reaper.SetProjectMarker3",
        "scope": "lua",
        "body": "reaper.SetProjectMarker3(${1:ReaProject proj}, ${2:integer markrgnindexnumber}, ${3:boolean isrgn}, ${4:number pos}, ${5:number rgnend}, ${6:string name}, ${7:integer color})$0",
        "description": ""
    },
    "SETPROJECTMARKER3 eel2": {
        "prefix": "SetProjectMarker3",
        "scope": "eel2",
        "body": "SetProjectMarker3(${1:ReaProject proj}, ${2:int markrgnindexnumber}, ${3:bool isrgn}, ${4:pos}, ${5:rgnend}, \"${6:name}\", ${7:int color})$0",
        "description": ""
    },
    "RPR_SETPROJECTMARKER3 python": {
        "prefix": "RPR_SetProjectMarker3",
        "scope": "python",
        "body": "RPR_SetProjectMarker3(${1:ReaProject proj}, ${2:Int markrgnindexnumber}, ${3:Boolean isrgn}, ${4:Float pos}, ${5:Float rgnend}, ${6:String name}, ${7:Int color})$0",
        "description": ""
    },
    "REAPER.SETPROJECTMARKER4 lua": {
        "prefix": "reaper.SetProjectMarker4",
        "scope": "lua",
        "body": "reaper.SetProjectMarker4(${1:ReaProject proj}, ${2:integer markrgnindexnumber}, ${3:boolean isrgn}, ${4:number pos}, ${5:number rgnend}, ${6:string name}, ${7:integer color}, ${8:integer flags})$0",
        "description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name\n\n"
    },
    "SETPROJECTMARKER4 eel2": {
        "prefix": "SetProjectMarker4",
        "scope": "eel2",
        "body": "SetProjectMarker4(${1:ReaProject proj}, ${2:int markrgnindexnumber}, ${3:bool isrgn}, ${4:pos}, ${5:rgnend}, \"${6:name}\", ${7:int color}, ${8:int flags})$0",
        "description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name\n\n"
    },
    "RPR_SETPROJECTMARKER4 python": {
        "prefix": "RPR_SetProjectMarker4",
        "scope": "python",
        "body": "RPR_SetProjectMarker4(${1:ReaProject proj}, ${2:Int markrgnindexnumber}, ${3:Boolean isrgn}, ${4:Float pos}, ${5:Float rgnend}, ${6:String name}, ${7:Int color}, ${8:Int flags})$0",
        "description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name\n\n"
    },
    "REAPER.SETPROJECTMARKERBYINDEX lua": {
        "prefix": "reaper.SetProjectMarkerByIndex",
        "scope": "lua",
        "body": "reaper.SetProjectMarkerByIndex(${1:ReaProject proj}, ${2:integer markrgnidx}, ${3:boolean isrgn}, ${4:number pos}, ${5:number rgnend}, ${6:integer IDnumber}, ${7:string name}, ${8:integer color})$0",
        "description": "See SetProjectMarkerByIndex2.\n\n"
    },
    "SETPROJECTMARKERBYINDEX eel2": {
        "prefix": "SetProjectMarkerByIndex",
        "scope": "eel2",
        "body": "SetProjectMarkerByIndex(${1:ReaProject proj}, ${2:int markrgnidx}, ${3:bool isrgn}, ${4:pos}, ${5:rgnend}, ${6:int IDnumber}, \"${7:name}\", ${8:int color})$0",
        "description": "See SetProjectMarkerByIndex2.\n\n"
    },
    "RPR_SETPROJECTMARKERBYINDEX python": {
        "prefix": "RPR_SetProjectMarkerByIndex",
        "scope": "python",
        "body": "RPR_SetProjectMarkerByIndex(${1:ReaProject proj}, ${2:Int markrgnidx}, ${3:Boolean isrgn}, ${4:Float pos}, ${5:Float rgnend}, ${6:Int IDnumber}, ${7:String name}, ${8:Int color})$0",
        "description": "See SetProjectMarkerByIndex2.\n\n"
    },
    "REAPER.SETPROJECTMARKERBYINDEX2 lua": {
        "prefix": "reaper.SetProjectMarkerByIndex2",
        "scope": "lua",
        "body": "reaper.SetProjectMarkerByIndex2(${1:ReaProject proj}, ${2:integer markrgnidx}, ${3:boolean isrgn}, ${4:number pos}, ${5:number rgnend}, ${6:integer IDnumber}, ${7:string name}, ${8:integer color}, ${9:integer flags})$0",
        "description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&1 to clear name.\n\n"
    },
    "SETPROJECTMARKERBYINDEX2 eel2": {
        "prefix": "SetProjectMarkerByIndex2",
        "scope": "eel2",
        "body": "SetProjectMarkerByIndex2(${1:ReaProject proj}, ${2:int markrgnidx}, ${3:bool isrgn}, ${4:pos}, ${5:rgnend}, ${6:int IDnumber}, \"${7:name}\", ${8:int color}, ${9:int flags})$0",
        "description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&1 to clear name.\n\n"
    },
    "RPR_SETPROJECTMARKERBYINDEX2 python": {
        "prefix": "RPR_SetProjectMarkerByIndex2",
        "scope": "python",
        "body": "RPR_SetProjectMarkerByIndex2(${1:ReaProject proj}, ${2:Int markrgnidx}, ${3:Boolean isrgn}, ${4:Float pos}, ${5:Float rgnend}, ${6:Int IDnumber}, ${7:String name}, ${8:Int color}, ${9:Int flags})$0",
        "description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&1 to clear name.\n\n"
    },
    "REAPER.SETPROJEXTSTATE lua": {
        "prefix": "reaper.SetProjExtState",
        "scope": "lua",
        "body": "reaper.SetProjExtState(${1:ReaProject proj}, ${2:string extname}, ${3:string key}, ${4:string value})$0",
        "description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or \"\", all extended data for that extname will be deleted. If val is NULL or \"\", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState.\n\n"
    },
    "SETPROJEXTSTATE eel2": {
        "prefix": "SetProjExtState",
        "scope": "eel2",
        "body": "SetProjExtState(${1:ReaProject proj}, \"${2:extname}\", \"${3:key}\", \"${4:value}\")$0",
        "description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or \"\", all extended data for that extname will be deleted. If val is NULL or \"\", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState.\n\n"
    },
    "RPR_SETPROJEXTSTATE python": {
        "prefix": "RPR_SetProjExtState",
        "scope": "python",
        "body": "RPR_SetProjExtState(${1:ReaProject proj}, ${2:String extname}, ${3:String key}, ${4:String value})$0",
        "description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or \"\", all extended data for that extname will be deleted. If val is NULL or \"\", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState.\n\n"
    },
    "REAPER.SETREGIONRENDERMATRIX lua": {
        "prefix": "reaper.SetRegionRenderMatrix",
        "scope": "lua",
        "body": "reaper.SetRegionRenderMatrix(${1:ReaProject proj}, ${2:integer regionindex}, ${3:MediaTrack track}, ${4:integer addorremove})$0",
        "description": "Add (addorremove > 0) or remove (addorremove < 0) a track from this region when using the region render matrix.\n\n"
    },
    "SETREGIONRENDERMATRIX eel2": {
        "prefix": "SetRegionRenderMatrix",
        "scope": "eel2",
        "body": "SetRegionRenderMatrix(${1:ReaProject proj}, ${2:int regionindex}, ${3:MediaTrack track}, ${4:int addorremove})$0",
        "description": "Add (addorremove > 0) or remove (addorremove < 0) a track from this region when using the region render matrix.\n\n"
    },
    "RPR_SETREGIONRENDERMATRIX python": {
        "prefix": "RPR_SetRegionRenderMatrix",
        "scope": "python",
        "body": "RPR_SetRegionRenderMatrix(${1:ReaProject proj}, ${2:Int regionindex}, ${3:MediaTrack track}, ${4:Int addorremove})$0",
        "description": "Add (addorremove > 0) or remove (addorremove < 0) a track from this region when using the region render matrix.\n\n"
    },
    "REAPER.SETTAKESTRETCHMARKER lua": {
        "prefix": "reaper.SetTakeStretchMarker",
        "scope": "lua",
        "body": "reaper.SetTakeStretchMarker(${1:MediaItem_Take take}, ${2:integer idx}, ${3:number pos}, ${4:optional number srcposIn})$0",
        "description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).\n\n"
    },
    "SETTAKESTRETCHMARKER eel2": {
        "prefix": "SetTakeStretchMarker",
        "scope": "eel2",
        "body": "SetTakeStretchMarker(${1:MediaItem_Take take}, ${2:int idx}, ${3:pos}, ${4:optional srcposIn})$0",
        "description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).\n\n"
    },
    "RPR_SETTAKESTRETCHMARKER python": {
        "prefix": "RPR_SetTakeStretchMarker",
        "scope": "python",
        "body": "RPR_SetTakeStretchMarker(${1:MediaItem_Take take}, ${2:Int idx}, ${3:Float pos}, ${4:const double srcposInOptional})$0",
        "description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).\n\n"
    },
    "REAPER.SETTAKESTRETCHMARKERSLOPE lua": {
        "prefix": "reaper.SetTakeStretchMarkerSlope",
        "scope": "lua",
        "body": "reaper.SetTakeStretchMarkerSlope(${1:MediaItem_Take take}, ${2:integer idx}, ${3:number slope})$0",
        "description": "See GetTakeStretchMarkerSlope\n\n"
    },
    "SETTAKESTRETCHMARKERSLOPE eel2": {
        "prefix": "SetTakeStretchMarkerSlope",
        "scope": "eel2",
        "body": "SetTakeStretchMarkerSlope(${1:MediaItem_Take take}, ${2:int idx}, ${3:slope})$0",
        "description": "See GetTakeStretchMarkerSlope\n\n"
    },
    "RPR_SETTAKESTRETCHMARKERSLOPE python": {
        "prefix": "RPR_SetTakeStretchMarkerSlope",
        "scope": "python",
        "body": "RPR_SetTakeStretchMarkerSlope(${1:MediaItem_Take take}, ${2:Int idx}, ${3:Float slope})$0",
        "description": "See GetTakeStretchMarkerSlope\n\n"
    },
    "REAPER.SETTEMPOTIMESIGMARKER lua": {
        "prefix": "reaper.SetTempoTimeSigMarker",
        "scope": "lua",
        "body": "reaper.SetTempoTimeSigMarker(${1:ReaProject proj}, ${2:integer ptidx}, ${3:number timepos}, ${4:integer measurepos}, ${5:number beatpos}, ${6:number bpm}, ${7:integer timesig_num}, ${8:integer timesig_denom}, ${9:boolean lineartempo})$0",
        "description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "SETTEMPOTIMESIGMARKER eel2": {
        "prefix": "SetTempoTimeSigMarker",
        "scope": "eel2",
        "body": "SetTempoTimeSigMarker(${1:ReaProject proj}, ${2:int ptidx}, ${3:timepos}, ${4:int measurepos}, ${5:beatpos}, ${6:bpm}, ${7:int timesig_num}, ${8:int timesig_denom}, ${9:bool lineartempo})$0",
        "description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "RPR_SETTEMPOTIMESIGMARKER python": {
        "prefix": "RPR_SetTempoTimeSigMarker",
        "scope": "python",
        "body": "RPR_SetTempoTimeSigMarker(${1:ReaProject proj}, ${2:Int ptidx}, ${3:Float timepos}, ${4:Int measurepos}, ${5:Float beatpos}, ${6:Float bpm}, ${7:Int timesig_num}, ${8:Int timesig_denom}, ${9:Boolean lineartempo})$0",
        "description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
    },
    "REAPER.SETTOGGLECOMMANDSTATE lua": {
        "prefix": "reaper.SetToggleCommandState",
        "scope": "lua",
        "body": "reaper.SetToggleCommandState(${1:integer section_id}, ${2:integer command_id}, ${3:integer state})$0",
        "description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.\n\n"
    },
    "SETTOGGLECOMMANDSTATE eel2": {
        "prefix": "SetToggleCommandState",
        "scope": "eel2",
        "body": "SetToggleCommandState(${1:int section_id}, ${2:int command_id}, ${3:int state})$0",
        "description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.\n\n"
    },
    "RPR_SETTOGGLECOMMANDSTATE python": {
        "prefix": "RPR_SetToggleCommandState",
        "scope": "python",
        "body": "RPR_SetToggleCommandState(${1:Int section_id}, ${2:Int command_id}, ${3:Int state})$0",
        "description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.\n\n"
    },
    "REAPER.SETTRACKAUTOMATIONMODE lua": {
        "prefix": "reaper.SetTrackAutomationMode",
        "scope": "lua",
        "body": "reaper.SetTrackAutomationMode(${1:MediaTrack tr}, ${2:integer mode})$0",
        "description": ""
    },
    "SETTRACKAUTOMATIONMODE eel2": {
        "prefix": "SetTrackAutomationMode",
        "scope": "eel2",
        "body": "SetTrackAutomationMode(${1:MediaTrack tr}, ${2:int mode})$0",
        "description": ""
    },
    "RPR_SETTRACKAUTOMATIONMODE python": {
        "prefix": "RPR_SetTrackAutomationMode",
        "scope": "python",
        "body": "RPR_SetTrackAutomationMode(${1:MediaTrack tr}, ${2:Int mode})$0",
        "description": ""
    },
    "REAPER.SETTRACKCOLOR lua": {
        "prefix": "reaper.SetTrackColor",
        "scope": "lua",
        "body": "reaper.SetTrackColor(${1:MediaTrack track}, ${2:integer color})$0",
        "description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b).\n\n"
    },
    "SETTRACKCOLOR eel2": {
        "prefix": "SetTrackColor",
        "scope": "eel2",
        "body": "SetTrackColor(${1:MediaTrack track}, ${2:int color})$0",
        "description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b).\n\n"
    },
    "RPR_SETTRACKCOLOR python": {
        "prefix": "RPR_SetTrackColor",
        "scope": "python",
        "body": "RPR_SetTrackColor(${1:MediaTrack track}, ${2:Int color})$0",
        "description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b).\n\n"
    },
    "REAPER.SETTRACKMIDILYRICS lua": {
        "prefix": "reaper.SetTrackMIDILyrics",
        "scope": "lua",
        "body": "reaper.SetTrackMIDILyrics(${1:MediaTrack track}, ${2:integer flag}, ${3:string str})$0",
        "description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t\u0002.1.1\\tLyric for measure 2 beat 1\t\"). See GetTrackMIDILyrics\n\n"
    },
    "SETTRACKMIDILYRICS eel2": {
        "prefix": "SetTrackMIDILyrics",
        "scope": "eel2",
        "body": "SetTrackMIDILyrics(${1:MediaTrack track}, ${2:int flag}, \"${3:str}\")$0",
        "description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t\u0002.1.1\\tLyric for measure 2 beat 1\t\"). See GetTrackMIDILyrics\n\n"
    },
    "RPR_SETTRACKMIDILYRICS python": {
        "prefix": "RPR_SetTrackMIDILyrics",
        "scope": "python",
        "body": "RPR_SetTrackMIDILyrics(${1:MediaTrack track}, ${2:Int flag}, ${3:String str})$0",
        "description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t\u0002.1.1\\tLyric for measure 2 beat 1\t\"). See GetTrackMIDILyrics\n\n"
    },
    "REAPER.SETTRACKMIDINOTENAME lua": {
        "prefix": "reaper.SetTrackMIDINoteName",
        "scope": "lua",
        "body": "reaper.SetTrackMIDINoteName(${1:integer track}, ${2:integer pitch}, ${3:integer chan}, ${4:string name})$0",
        "description": "channel < 0 assigns these note names to all channels.\n\n"
    },
    "SETTRACKMIDINOTENAME eel2": {
        "prefix": "SetTrackMIDINoteName",
        "scope": "eel2",
        "body": "SetTrackMIDINoteName(${1:int track}, ${2:int pitch}, ${3:int chan}, \"${4:name}\")$0",
        "description": "channel < 0 assigns these note names to all channels.\n\n"
    },
    "RPR_SETTRACKMIDINOTENAME python": {
        "prefix": "RPR_SetTrackMIDINoteName",
        "scope": "python",
        "body": "RPR_SetTrackMIDINoteName(${1:Int track}, ${2:Int pitch}, ${3:Int chan}, ${4:String name})$0",
        "description": "channel < 0 assigns these note names to all channels.\n\n"
    },
    "REAPER.SETTRACKMIDINOTENAMEEX lua": {
        "prefix": "reaper.SetTrackMIDINoteNameEx",
        "scope": "lua",
        "body": "reaper.SetTrackMIDINoteNameEx(${1:ReaProject proj}, ${2:MediaTrack track}, ${3:integer pitch}, ${4:integer chan}, ${5:string name})$0",
        "description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.\n\n"
    },
    "SETTRACKMIDINOTENAMEEX eel2": {
        "prefix": "SetTrackMIDINoteNameEx",
        "scope": "eel2",
        "body": "SetTrackMIDINoteNameEx(${1:ReaProject proj}, ${2:MediaTrack track}, ${3:int pitch}, ${4:int chan}, \"${5:name}\")$0",
        "description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.\n\n"
    },
    "RPR_SETTRACKMIDINOTENAMEEX python": {
        "prefix": "RPR_SetTrackMIDINoteNameEx",
        "scope": "python",
        "body": "RPR_SetTrackMIDINoteNameEx(${1:ReaProject proj}, ${2:MediaTrack track}, ${3:Int pitch}, ${4:Int chan}, ${5:String name})$0",
        "description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.\n\n"
    },
    "REAPER.SETTRACKSELECTED lua": {
        "prefix": "reaper.SetTrackSelected",
        "scope": "lua",
        "body": "reaper.SetTrackSelected(${1:MediaTrack track}, ${2:boolean selected})$0",
        "description": ""
    },
    "SETTRACKSELECTED eel2": {
        "prefix": "SetTrackSelected",
        "scope": "eel2",
        "body": "SetTrackSelected(${1:MediaTrack track}, ${2:bool selected})$0",
        "description": ""
    },
    "RPR_SETTRACKSELECTED python": {
        "prefix": "RPR_SetTrackSelected",
        "scope": "python",
        "body": "RPR_SetTrackSelected(${1:MediaTrack track}, ${2:Boolean selected})$0",
        "description": ""
    },
    "REAPER.SETTRACKSENDINFO_VALUE lua": {
        "prefix": "reaper.SetTrackSendInfo_Value",
        "scope": "lua",
        "body": "reaper.SetTrackSendInfo_Value(${1:MediaTrack tr}, ${2:integer category}, ${3:integer sendidx}, ${4:string parmname}, ${5:number newvalue})$0",
        "description": "Set send/receive/hardware output numerical-value attributes, return true on success.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,&1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\n\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
    },
    "SETTRACKSENDINFO_VALUE eel2": {
        "prefix": "SetTrackSendInfo_Value",
        "scope": "eel2",
        "body": "SetTrackSendInfo_Value(${1:MediaTrack tr}, ${2:int category}, ${3:int sendidx}, \"${4:parmname}\", ${5:newvalue})$0",
        "description": "Set send/receive/hardware output numerical-value attributes, return true on success.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,&1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\n\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
    },
    "RPR_SETTRACKSENDINFO_VALUE python": {
        "prefix": "RPR_SetTrackSendInfo_Value",
        "scope": "python",
        "body": "RPR_SetTrackSendInfo_Value(${1:MediaTrack tr}, ${2:Int category}, ${3:Int sendidx}, ${4:String parmname}, ${5:Float newvalue})$0",
        "description": "Set send/receive/hardware output numerical-value attributes, return true on success.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nparameter names:\n\nB_MUTE : returns bool *\n\nB_PHASE : returns bool *, true to flip phase\n\nB_MONO : returns bool *\n\nD_VOL : returns double *, 1.0 = +0dB etc\n\nD_PAN : returns double *, -1..+1\n\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n\nI_SRCCHAN : returns int *, index,&1024=mono, -1 for none\n\nI_DSTCHAN : returns int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\n\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\n\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
    },
    "REAPER.SETTRACKSENDUIPAN lua": {
        "prefix": "reaper.SetTrackSendUIPan",
        "scope": "lua",
        "body": "reaper.SetTrackSendUIPan(${1:MediaTrack track}, ${2:integer send_idx}, ${3:number pan}, ${4:integer isend})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
    },
    "SETTRACKSENDUIPAN eel2": {
        "prefix": "SetTrackSendUIPan",
        "scope": "eel2",
        "body": "SetTrackSendUIPan(${1:MediaTrack track}, ${2:int send_idx}, ${3:pan}, ${4:int isend})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
    },
    "RPR_SETTRACKSENDUIPAN python": {
        "prefix": "RPR_SetTrackSendUIPan",
        "scope": "python",
        "body": "RPR_SetTrackSendUIPan(${1:MediaTrack track}, ${2:Int send_idx}, ${3:Float pan}, ${4:Int isend})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
    },
    "REAPER.SETTRACKSENDUIVOL lua": {
        "prefix": "reaper.SetTrackSendUIVol",
        "scope": "lua",
        "body": "reaper.SetTrackSendUIVol(${1:MediaTrack track}, ${2:integer send_idx}, ${3:number vol}, ${4:integer isend})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
    },
    "SETTRACKSENDUIVOL eel2": {
        "prefix": "SetTrackSendUIVol",
        "scope": "eel2",
        "body": "SetTrackSendUIVol(${1:MediaTrack track}, ${2:int send_idx}, ${3:vol}, ${4:int isend})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
    },
    "RPR_SETTRACKSENDUIVOL python": {
        "prefix": "RPR_SetTrackSendUIVol",
        "scope": "python",
        "body": "RPR_SetTrackSendUIVol(${1:MediaTrack track}, ${2:Int send_idx}, ${3:Float vol}, ${4:Int isend})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
    },
    "REAPER.SETTRACKSTATECHUNK lua": {
        "prefix": "reaper.SetTrackStateChunk",
        "scope": "lua",
        "body": "reaper.SetTrackStateChunk(${1:MediaTrack track}, ${2:string str}, ${3:boolean isundo})$0",
        "description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "SETTRACKSTATECHUNK eel2": {
        "prefix": "SetTrackStateChunk",
        "scope": "eel2",
        "body": "SetTrackStateChunk(${1:MediaTrack track}, \"${2:str}\", ${3:bool isundo})$0",
        "description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "RPR_SETTRACKSTATECHUNK python": {
        "prefix": "RPR_SetTrackStateChunk",
        "scope": "python",
        "body": "RPR_SetTrackStateChunk(${1:MediaTrack track}, ${2:String str}, ${3:Boolean isundoOptional})$0",
        "description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
    },
    "REAPER.SHOWACTIONLIST lua": {
        "prefix": "reaper.ShowActionList",
        "scope": "lua",
        "body": "reaper.ShowActionList(${1:KbdSectionInfo caller}, ${2:HWND callerWnd})$0",
        "description": ""
    },
    "SHOWACTIONLIST eel2": {
        "prefix": "ShowActionList",
        "scope": "eel2",
        "body": "ShowActionList(${1:KbdSectionInfo caller}, ${2:HWND callerWnd})$0",
        "description": ""
    },
    "RPR_SHOWACTIONLIST python": {
        "prefix": "RPR_ShowActionList",
        "scope": "python",
        "body": "RPR_ShowActionList(${1:KbdSectionInfo caller}, ${2:HWND callerWnd})$0",
        "description": ""
    },
    "REAPER.SHOWCONSOLEMSG lua": {
        "prefix": "reaper.ShowConsoleMsg",
        "scope": "lua",
        "body": "reaper.ShowConsoleMsg(${1:string msg})$0",
        "description": "Show a message to the user (also useful for debugging). Send \"\\n\" for newline, \"\" to clear the console. See ClearConsole\n\n"
    },
    "SHOWCONSOLEMSG eel2": {
        "prefix": "ShowConsoleMsg",
        "scope": "eel2",
        "body": "ShowConsoleMsg(\"${1:msg}\")$0",
        "description": "Show a message to the user (also useful for debugging). Send \"\\n\" for newline, \"\" to clear the console. See ClearConsole\n\n"
    },
    "RPR_SHOWCONSOLEMSG python": {
        "prefix": "RPR_ShowConsoleMsg",
        "scope": "python",
        "body": "RPR_ShowConsoleMsg(${1:String msg})$0",
        "description": "Show a message to the user (also useful for debugging). Send \"\\n\" for newline, \"\" to clear the console. See ClearConsole\n\n"
    },
    "REAPER.SHOWMESSAGEBOX lua": {
        "prefix": "reaper.ShowMessageBox",
        "scope": "lua",
        "body": "reaper.ShowMessageBox(${1:string msg}, ${2:string title}, ${3:integer type})$0",
        "description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\n"
    },
    "SHOWMESSAGEBOX eel2": {
        "prefix": "ShowMessageBox",
        "scope": "eel2",
        "body": "ShowMessageBox(\"${1:msg}\", \"${2:title}\", ${3:int type})$0",
        "description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\n"
    },
    "RPR_SHOWMESSAGEBOX python": {
        "prefix": "RPR_ShowMessageBox",
        "scope": "python",
        "body": "RPR_ShowMessageBox(${1:String msg}, ${2:String title}, ${3:Int type})$0",
        "description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\n"
    },
    "REAPER.SHOWPOPUPMENU lua": {
        "prefix": "reaper.ShowPopupMenu",
        "scope": "lua",
        "body": "reaper.ShowPopupMenu(${1:string name}, ${2:integer x}, ${3:integer y}, ${4:HWND hwndParent}, ${5:identifier ctx}, ${6:integer ctx2}, ${7:integer ctx3})$0",
        "description": "shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)\n\n"
    },
    "SHOWPOPUPMENU eel2": {
        "prefix": "ShowPopupMenu",
        "scope": "eel2",
        "body": "ShowPopupMenu(\"${1:name}\", ${2:int x}, ${3:int y}, ${4:HWND hwndParent}, ${5:void* ctx}, ${6:int ctx2}, ${7:int ctx3})$0",
        "description": "shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)\n\n"
    },
    "RPR_SHOWPOPUPMENU python": {
        "prefix": "RPR_ShowPopupMenu",
        "scope": "python",
        "body": "RPR_ShowPopupMenu(${1:String name}, ${2:Int x}, ${3:Int y}, ${4:HWND hwndParentOptional}, ${5:void ctxOptional}, ${6:Int ctx2Optional}, ${7:Int ctx3Optional})$0",
        "description": "shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)\n\n"
    },
    "REAPER.SLIDER2DB lua": {
        "prefix": "reaper.SLIDER2DB",
        "scope": "lua",
        "body": "reaper.SLIDER2DB(${1:number y})$0",
        "description": ""
    },
    "SLIDER2DB eel2": {
        "prefix": "SLIDER2DB",
        "scope": "eel2",
        "body": "SLIDER2DB(${1:y})$0",
        "description": ""
    },
    "RPR_SLIDER2DB python": {
        "prefix": "RPR_SLIDER2DB",
        "scope": "python",
        "body": "RPR_SLIDER2DB(${1:Float y})$0",
        "description": ""
    },
    "REAPER.SNAPTOGRID lua": {
        "prefix": "reaper.SnapToGrid",
        "scope": "lua",
        "body": "reaper.SnapToGrid(${1:ReaProject project}, ${2:number time_pos})$0",
        "description": ""
    },
    "SNAPTOGRID eel2": {
        "prefix": "SnapToGrid",
        "scope": "eel2",
        "body": "SnapToGrid(${1:ReaProject project}, ${2:time_pos})$0",
        "description": ""
    },
    "RPR_SNAPTOGRID python": {
        "prefix": "RPR_SnapToGrid",
        "scope": "python",
        "body": "RPR_SnapToGrid(${1:ReaProject project}, ${2:Float time_pos})$0",
        "description": ""
    },
    "REAPER.SOLOALLTRACKS lua": {
        "prefix": "reaper.SoloAllTracks",
        "scope": "lua",
        "body": "reaper.SoloAllTracks(${1:integer solo})$0",
        "description": "solo=2 for SIP\n\n"
    },
    "SOLOALLTRACKS eel2": {
        "prefix": "SoloAllTracks",
        "scope": "eel2",
        "body": "SoloAllTracks(${1:int solo})$0",
        "description": "solo=2 for SIP\n\n"
    },
    "RPR_SOLOALLTRACKS python": {
        "prefix": "RPR_SoloAllTracks",
        "scope": "python",
        "body": "RPR_SoloAllTracks(${1:Int solo})$0",
        "description": "solo=2 for SIP\n\n"
    },
    "REAPER.SPLASH_GETWND lua": {
        "prefix": "reaper.Splash_GetWnd",
        "scope": "lua",
        "body": "reaper.Splash_GetWnd()$0",
        "description": "gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed.\n\n"
    },
    "SPLASH_GETWND eel2": {
        "prefix": "Splash_GetWnd",
        "scope": "eel2",
        "body": "Splash_GetWnd()$0",
        "description": "gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed.\n\n"
    },
    "RPR_SPLASH_GETWND python": {
        "prefix": "RPR_Splash_GetWnd",
        "scope": "python",
        "body": "RPR_Splash_GetWnd()$0",
        "description": "gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed.\n\n"
    },
    "REAPER.SPLITMEDIAITEM lua": {
        "prefix": "reaper.SplitMediaItem",
        "scope": "lua",
        "body": "reaper.SplitMediaItem(${1:MediaItem item}, ${2:number position})$0",
        "description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)\n\n"
    },
    "SPLITMEDIAITEM eel2": {
        "prefix": "SplitMediaItem",
        "scope": "eel2",
        "body": "SplitMediaItem(${1:MediaItem item}, ${2:position})$0",
        "description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)\n\n"
    },
    "RPR_SPLITMEDIAITEM python": {
        "prefix": "RPR_SplitMediaItem",
        "scope": "python",
        "body": "RPR_SplitMediaItem(${1:MediaItem item}, ${2:Float position})$0",
        "description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)\n\n"
    },
    "REAPER.STRINGTOGUID lua": {
        "prefix": "reaper.stringToGuid",
        "scope": "lua",
        "body": "reaper.stringToGuid(${1:string str}, ${2:string gGUID})$0",
        "description": ""
    },
    "STRINGTOGUID eel2": {
        "prefix": "stringToGuid",
        "scope": "eel2",
        "body": "stringToGuid(\"${1:str}\", ${2:#gGUID})$0",
        "description": ""
    },
    "RPR_STRINGTOGUID python": {
        "prefix": "RPR_stringToGuid",
        "scope": "python",
        "body": "RPR_stringToGuid(${1:String str}, ${2:GUID g})$0",
        "description": ""
    },
    "REAPER.STUFFMIDIMESSAGE lua": {
        "prefix": "reaper.StuffMIDIMessage",
        "scope": "lua",
        "body": "reaper.StuffMIDIMessage(${1:integer mode}, ${2:integer msg1}, ${3:integer msg2}, ${4:integer msg3})$0",
        "description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.\n\n"
    },
    "STUFFMIDIMESSAGE eel2": {
        "prefix": "StuffMIDIMessage",
        "scope": "eel2",
        "body": "StuffMIDIMessage(${1:int mode}, ${2:int msg1}, ${3:int msg2}, ${4:int msg3})$0",
        "description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.\n\n"
    },
    "RPR_STUFFMIDIMESSAGE python": {
        "prefix": "RPR_StuffMIDIMessage",
        "scope": "python",
        "body": "RPR_StuffMIDIMessage(${1:Int mode}, ${2:Int msg1}, ${3:Int msg2}, ${4:Int msg3})$0",
        "description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.\n\n"
    },
    "REAPER.TAKEFX_ADDBYNAME lua": {
        "prefix": "reaper.TakeFX_AddByName",
        "scope": "lua",
        "body": "reaper.TakeFX_AddByName(${1:MediaItem_Take take}, ${2:string fxname}, ${3:integer instantiate})$0",
        "description": "Adds or queries the position of a named FX in a take. Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found.\n\n"
    },
    "TAKEFX_ADDBYNAME eel2": {
        "prefix": "TakeFX_AddByName",
        "scope": "eel2",
        "body": "TakeFX_AddByName(${1:MediaItem_Take take}, \"${2:fxname}\", ${3:int instantiate})$0",
        "description": "Adds or queries the position of a named FX in a take. Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found.\n\n"
    },
    "RPR_TAKEFX_ADDBYNAME python": {
        "prefix": "RPR_TakeFX_AddByName",
        "scope": "python",
        "body": "RPR_TakeFX_AddByName(${1:MediaItem_Take take}, ${2:String fxname}, ${3:Int instantiate})$0",
        "description": "Adds or queries the position of a named FX in a take. Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found.\n\n"
    },
    "REAPER.TAKEFX_ENDPARAMEDIT lua": {
        "prefix": "reaper.TakeFX_EndParamEdit",
        "scope": "lua",
        "body": "reaper.TakeFX_EndParamEdit(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer param})$0",
        "description": ""
    },
    "TAKEFX_ENDPARAMEDIT eel2": {
        "prefix": "TakeFX_EndParamEdit",
        "scope": "eel2",
        "body": "TakeFX_EndParamEdit(${1:MediaItem_Take take}, ${2:int fx}, ${3:int param})$0",
        "description": ""
    },
    "RPR_TAKEFX_ENDPARAMEDIT python": {
        "prefix": "RPR_TakeFX_EndParamEdit",
        "scope": "python",
        "body": "RPR_TakeFX_EndParamEdit(${1:MediaItem_Take take}, ${2:Int fx}, ${3:Int param})$0",
        "description": ""
    },
    "REAPER.TAKEFX_FORMATPARAMVALUE lua": {
        "prefix": "reaper.TakeFX_FormatParamValue",
        "scope": "lua",
        "body": "reaper.TakeFX_FormatParamValue(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer param}, ${4:number val}, ${5:string buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "TAKEFX_FORMATPARAMVALUE eel2": {
        "prefix": "TakeFX_FormatParamValue",
        "scope": "eel2",
        "body": "TakeFX_FormatParamValue(${1:MediaItem_Take take}, ${2:int fx}, ${3:int param}, ${4:val}, ${5:#buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "RPR_TAKEFX_FORMATPARAMVALUE python": {
        "prefix": "RPR_TakeFX_FormatParamValue",
        "scope": "python",
        "body": "RPR_TakeFX_FormatParamValue(${1:take}, ${2:fx}, ${3:param}, ${4:val}, ${5:buf}, ${6:buf_sz})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "REAPER.TAKEFX_FORMATPARAMVALUENORMALIZED lua": {
        "prefix": "reaper.TakeFX_FormatParamValueNormalized",
        "scope": "lua",
        "body": "reaper.TakeFX_FormatParamValueNormalized(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer param}, ${4:number value}, ${5:string buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "TAKEFX_FORMATPARAMVALUENORMALIZED eel2": {
        "prefix": "TakeFX_FormatParamValueNormalized",
        "scope": "eel2",
        "body": "TakeFX_FormatParamValueNormalized(${1:MediaItem_Take take}, ${2:int fx}, ${3:int param}, ${4:value}, ${5:#buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "RPR_TAKEFX_FORMATPARAMVALUENORMALIZED python": {
        "prefix": "RPR_TakeFX_FormatParamValueNormalized",
        "scope": "python",
        "body": "RPR_TakeFX_FormatParamValueNormalized(${1:take}, ${2:fx}, ${3:param}, ${4:value}, ${5:buf}, ${6:buf_sz})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "REAPER.TAKEFX_GETCHAINVISIBLE lua": {
        "prefix": "reaper.TakeFX_GetChainVisible",
        "scope": "lua",
        "body": "reaper.TakeFX_GetChainVisible(${1:MediaItem_Take take})$0",
        "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "TAKEFX_GETCHAINVISIBLE eel2": {
        "prefix": "TakeFX_GetChainVisible",
        "scope": "eel2",
        "body": "TakeFX_GetChainVisible(${1:MediaItem_Take take})$0",
        "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "RPR_TAKEFX_GETCHAINVISIBLE python": {
        "prefix": "RPR_TakeFX_GetChainVisible",
        "scope": "python",
        "body": "RPR_TakeFX_GetChainVisible(${1:MediaItem_Take take})$0",
        "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "REAPER.TAKEFX_GETCOUNT lua": {
        "prefix": "reaper.TakeFX_GetCount",
        "scope": "lua",
        "body": "reaper.TakeFX_GetCount(${1:MediaItem_Take take})$0",
        "description": ""
    },
    "TAKEFX_GETCOUNT eel2": {
        "prefix": "TakeFX_GetCount",
        "scope": "eel2",
        "body": "TakeFX_GetCount(${1:MediaItem_Take take})$0",
        "description": ""
    },
    "RPR_TAKEFX_GETCOUNT python": {
        "prefix": "RPR_TakeFX_GetCount",
        "scope": "python",
        "body": "RPR_TakeFX_GetCount(${1:MediaItem_Take take})$0",
        "description": ""
    },
    "REAPER.TAKEFX_GETENABLED lua": {
        "prefix": "reaper.TakeFX_GetEnabled",
        "scope": "lua",
        "body": "reaper.TakeFX_GetEnabled(${1:MediaItem_Take take}, ${2:integer fx})$0",
        "description": "See TakeFX_SetEnabled\n\n"
    },
    "TAKEFX_GETENABLED eel2": {
        "prefix": "TakeFX_GetEnabled",
        "scope": "eel2",
        "body": "TakeFX_GetEnabled(${1:MediaItem_Take take}, ${2:int fx})$0",
        "description": "See TakeFX_SetEnabled\n\n"
    },
    "RPR_TAKEFX_GETENABLED python": {
        "prefix": "RPR_TakeFX_GetEnabled",
        "scope": "python",
        "body": "RPR_TakeFX_GetEnabled(${1:MediaItem_Take take}, ${2:Int fx})$0",
        "description": "See TakeFX_SetEnabled\n\n"
    },
    "REAPER.TAKEFX_GETENVELOPE lua": {
        "prefix": "reaper.TakeFX_GetEnvelope",
        "scope": "lua",
        "body": "reaper.TakeFX_GetEnvelope(${1:MediaItem_Take take}, ${2:integer fxindex}, ${3:integer parameterindex}, ${4:boolean create})$0",
        "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
    },
    "TAKEFX_GETENVELOPE eel2": {
        "prefix": "TakeFX_GetEnvelope",
        "scope": "eel2",
        "body": "TakeFX_GetEnvelope(${1:MediaItem_Take take}, ${2:int fxindex}, ${3:int parameterindex}, ${4:bool create})$0",
        "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
    },
    "RPR_TAKEFX_GETENVELOPE python": {
        "prefix": "RPR_TakeFX_GetEnvelope",
        "scope": "python",
        "body": "RPR_TakeFX_GetEnvelope(${1:MediaItem_Take take}, ${2:Int fxindex}, ${3:Int parameterindex}, ${4:Boolean create})$0",
        "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
    },
    "REAPER.TAKEFX_GETFLOATINGWINDOW lua": {
        "prefix": "reaper.TakeFX_GetFloatingWindow",
        "scope": "lua",
        "body": "reaper.TakeFX_GetFloatingWindow(${1:MediaItem_Take take}, ${2:integer index})$0",
        "description": "returns HWND of floating window for effect index, if any\n\n"
    },
    "TAKEFX_GETFLOATINGWINDOW eel2": {
        "prefix": "TakeFX_GetFloatingWindow",
        "scope": "eel2",
        "body": "TakeFX_GetFloatingWindow(${1:MediaItem_Take take}, ${2:int index})$0",
        "description": "returns HWND of floating window for effect index, if any\n\n"
    },
    "RPR_TAKEFX_GETFLOATINGWINDOW python": {
        "prefix": "RPR_TakeFX_GetFloatingWindow",
        "scope": "python",
        "body": "RPR_TakeFX_GetFloatingWindow(${1:MediaItem_Take take}, ${2:Int index})$0",
        "description": "returns HWND of floating window for effect index, if any\n\n"
    },
    "REAPER.TAKEFX_GETFORMATTEDPARAMVALUE lua": {
        "prefix": "reaper.TakeFX_GetFormattedParamValue",
        "scope": "lua",
        "body": "reaper.TakeFX_GetFormattedParamValue(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer param}, ${4:string buf})$0",
        "description": ""
    },
    "TAKEFX_GETFORMATTEDPARAMVALUE eel2": {
        "prefix": "TakeFX_GetFormattedParamValue",
        "scope": "eel2",
        "body": "TakeFX_GetFormattedParamValue(${1:MediaItem_Take take}, ${2:int fx}, ${3:int param}, ${4:#buf})$0",
        "description": ""
    },
    "RPR_TAKEFX_GETFORMATTEDPARAMVALUE python": {
        "prefix": "RPR_TakeFX_GetFormattedParamValue",
        "scope": "python",
        "body": "RPR_TakeFX_GetFormattedParamValue(${1:take}, ${2:fx}, ${3:param}, ${4:buf}, ${5:buf_sz})$0",
        "description": ""
    },
    "REAPER.TAKEFX_GETFXGUID lua": {
        "prefix": "reaper.TakeFX_GetFXGUID",
        "scope": "lua",
        "body": "reaper.TakeFX_GetFXGUID(${1:MediaItem_Take take}, ${2:integer fx})$0",
        "description": ""
    },
    "TAKEFX_GETFXGUID eel2": {
        "prefix": "TakeFX_GetFXGUID",
        "scope": "eel2",
        "body": "TakeFX_GetFXGUID(${1:#retguid}, ${2:MediaItem_Take take}, ${3:int fx})$0",
        "description": ""
    },
    "RPR_TAKEFX_GETFXGUID python": {
        "prefix": "RPR_TakeFX_GetFXGUID",
        "scope": "python",
        "body": "RPR_TakeFX_GetFXGUID(${1:MediaItem_Take take}, ${2:Int fx})$0",
        "description": ""
    },
    "REAPER.TAKEFX_GETFXNAME lua": {
        "prefix": "reaper.TakeFX_GetFXName",
        "scope": "lua",
        "body": "reaper.TakeFX_GetFXName(${1:MediaItem_Take take}, ${2:integer fx}, ${3:string buf})$0",
        "description": ""
    },
    "TAKEFX_GETFXNAME eel2": {
        "prefix": "TakeFX_GetFXName",
        "scope": "eel2",
        "body": "TakeFX_GetFXName(${1:MediaItem_Take take}, ${2:int fx}, ${3:#buf})$0",
        "description": ""
    },
    "RPR_TAKEFX_GETFXNAME python": {
        "prefix": "RPR_TakeFX_GetFXName",
        "scope": "python",
        "body": "RPR_TakeFX_GetFXName(${1:take}, ${2:fx}, ${3:buf}, ${4:buf_sz})$0",
        "description": ""
    },
    "REAPER.TAKEFX_GETIOSIZE lua": {
        "prefix": "reaper.TakeFX_GetIOSize",
        "scope": "lua",
        "body": "reaper.TakeFX_GetIOSize(${1:MediaItem_Take take}, ${2:integer fx})$0",
        "description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
    },
    "TAKEFX_GETIOSIZE eel2": {
        "prefix": "TakeFX_GetIOSize",
        "scope": "eel2",
        "body": "TakeFX_GetIOSize(${1:MediaItem_Take take}, ${2:int fx}, ${3:optional int &inputPins}, ${4:optional int &outputPins})$0",
        "description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
    },
    "RPR_TAKEFX_GETIOSIZE python": {
        "prefix": "RPR_TakeFX_GetIOSize",
        "scope": "python",
        "body": "RPR_TakeFX_GetIOSize(${1:take}, ${2:fx}, ${3:inputPinsOutOptional}, ${4:outputPinsOutOptional})$0",
        "description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
    },
    "REAPER.TAKEFX_GETNAMEDCONFIGPARM lua": {
        "prefix": "reaper.TakeFX_GetNamedConfigParm",
        "scope": "lua",
        "body": "reaper.TakeFX_GetNamedConfigParm(${1:MediaItem_Take take}, ${2:integer fx}, ${3:string parmname})$0",
        "description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm\n\n"
    },
    "TAKEFX_GETNAMEDCONFIGPARM eel2": {
        "prefix": "TakeFX_GetNamedConfigParm",
        "scope": "eel2",
        "body": "TakeFX_GetNamedConfigParm(${1:MediaItem_Take take}, ${2:int fx}, \"${3:parmname}\", ${4:#buf})$0",
        "description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm\n\n"
    },
    "RPR_TAKEFX_GETNAMEDCONFIGPARM python": {
        "prefix": "RPR_TakeFX_GetNamedConfigParm",
        "scope": "python",
        "body": "RPR_TakeFX_GetNamedConfigParm(${1:take}, ${2:fx}, ${3:parmname}, ${4:bufOut}, ${5:bufOut_sz})$0",
        "description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm\n\n"
    },
    "REAPER.TAKEFX_GETNUMPARAMS lua": {
        "prefix": "reaper.TakeFX_GetNumParams",
        "scope": "lua",
        "body": "reaper.TakeFX_GetNumParams(${1:MediaItem_Take take}, ${2:integer fx})$0",
        "description": ""
    },
    "TAKEFX_GETNUMPARAMS eel2": {
        "prefix": "TakeFX_GetNumParams",
        "scope": "eel2",
        "body": "TakeFX_GetNumParams(${1:MediaItem_Take take}, ${2:int fx})$0",
        "description": ""
    },
    "RPR_TAKEFX_GETNUMPARAMS python": {
        "prefix": "RPR_TakeFX_GetNumParams",
        "scope": "python",
        "body": "RPR_TakeFX_GetNumParams(${1:MediaItem_Take take}, ${2:Int fx})$0",
        "description": ""
    },
    "REAPER.TAKEFX_GETOPEN lua": {
        "prefix": "reaper.TakeFX_GetOpen",
        "scope": "lua",
        "body": "reaper.TakeFX_GetOpen(${1:MediaItem_Take take}, ${2:integer fx})$0",
        "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen\n\n"
    },
    "TAKEFX_GETOPEN eel2": {
        "prefix": "TakeFX_GetOpen",
        "scope": "eel2",
        "body": "TakeFX_GetOpen(${1:MediaItem_Take take}, ${2:int fx})$0",
        "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen\n\n"
    },
    "RPR_TAKEFX_GETOPEN python": {
        "prefix": "RPR_TakeFX_GetOpen",
        "scope": "python",
        "body": "RPR_TakeFX_GetOpen(${1:MediaItem_Take take}, ${2:Int fx})$0",
        "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen\n\n"
    },
    "REAPER.TAKEFX_GETPARAM lua": {
        "prefix": "reaper.TakeFX_GetParam",
        "scope": "lua",
        "body": "reaper.TakeFX_GetParam(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer param})$0",
        "description": ""
    },
    "TAKEFX_GETPARAM eel2": {
        "prefix": "TakeFX_GetParam",
        "scope": "eel2",
        "body": "TakeFX_GetParam(${1:MediaItem_Take take}, ${2:int fx}, ${3:int param}, ${4:&minval}, ${5:&maxval})$0",
        "description": ""
    },
    "RPR_TAKEFX_GETPARAM python": {
        "prefix": "RPR_TakeFX_GetParam",
        "scope": "python",
        "body": "RPR_TakeFX_GetParam(${1:take}, ${2:fx}, ${3:param}, ${4:minvalOut}, ${5:maxvalOut})$0",
        "description": ""
    },
    "REAPER.TAKEFX_GETPARAMETERSTEPSIZES lua": {
        "prefix": "reaper.TakeFX_GetParameterStepSizes",
        "scope": "lua",
        "body": "reaper.TakeFX_GetParameterStepSizes(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer param})$0",
        "description": ""
    },
    "TAKEFX_GETPARAMETERSTEPSIZES eel2": {
        "prefix": "TakeFX_GetParameterStepSizes",
        "scope": "eel2",
        "body": "TakeFX_GetParameterStepSizes(${1:MediaItem_Take take}, ${2:int fx}, ${3:int param}, ${4:&step}, ${5:&smallstep}, ${6:&largestep}, ${7:bool &istoggle})$0",
        "description": ""
    },
    "RPR_TAKEFX_GETPARAMETERSTEPSIZES python": {
        "prefix": "RPR_TakeFX_GetParameterStepSizes",
        "scope": "python",
        "body": "RPR_TakeFX_GetParameterStepSizes(${1:take}, ${2:fx}, ${3:param}, ${4:stepOut}, ${5:smallstepOut}, ${6:largestepOut}, ${7:istoggleOut})$0",
        "description": ""
    },
    "REAPER.TAKEFX_GETPARAMEX lua": {
        "prefix": "reaper.TakeFX_GetParamEx",
        "scope": "lua",
        "body": "reaper.TakeFX_GetParamEx(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer param})$0",
        "description": ""
    },
    "TAKEFX_GETPARAMEX eel2": {
        "prefix": "TakeFX_GetParamEx",
        "scope": "eel2",
        "body": "TakeFX_GetParamEx(${1:MediaItem_Take take}, ${2:int fx}, ${3:int param}, ${4:&minval}, ${5:&maxval}, ${6:&midval})$0",
        "description": ""
    },
    "RPR_TAKEFX_GETPARAMEX python": {
        "prefix": "RPR_TakeFX_GetParamEx",
        "scope": "python",
        "body": "RPR_TakeFX_GetParamEx(${1:take}, ${2:fx}, ${3:param}, ${4:minvalOut}, ${5:maxvalOut}, ${6:midvalOut})$0",
        "description": ""
    },
    "REAPER.TAKEFX_GETPARAMNAME lua": {
        "prefix": "reaper.TakeFX_GetParamName",
        "scope": "lua",
        "body": "reaper.TakeFX_GetParamName(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer param}, ${4:string buf})$0",
        "description": ""
    },
    "TAKEFX_GETPARAMNAME eel2": {
        "prefix": "TakeFX_GetParamName",
        "scope": "eel2",
        "body": "TakeFX_GetParamName(${1:MediaItem_Take take}, ${2:int fx}, ${3:int param}, ${4:#buf})$0",
        "description": ""
    },
    "RPR_TAKEFX_GETPARAMNAME python": {
        "prefix": "RPR_TakeFX_GetParamName",
        "scope": "python",
        "body": "RPR_TakeFX_GetParamName(${1:take}, ${2:fx}, ${3:param}, ${4:buf}, ${5:buf_sz})$0",
        "description": ""
    },
    "REAPER.TAKEFX_GETPARAMNORMALIZED lua": {
        "prefix": "reaper.TakeFX_GetParamNormalized",
        "scope": "lua",
        "body": "reaper.TakeFX_GetParamNormalized(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer param})$0",
        "description": ""
    },
    "TAKEFX_GETPARAMNORMALIZED eel2": {
        "prefix": "TakeFX_GetParamNormalized",
        "scope": "eel2",
        "body": "TakeFX_GetParamNormalized(${1:MediaItem_Take take}, ${2:int fx}, ${3:int param})$0",
        "description": ""
    },
    "RPR_TAKEFX_GETPARAMNORMALIZED python": {
        "prefix": "RPR_TakeFX_GetParamNormalized",
        "scope": "python",
        "body": "RPR_TakeFX_GetParamNormalized(${1:MediaItem_Take take}, ${2:Int fx}, ${3:Int param})$0",
        "description": ""
    },
    "REAPER.TAKEFX_GETPINMAPPINGS lua": {
        "prefix": "reaper.TakeFX_GetPinMappings",
        "scope": "lua",
        "body": "reaper.TakeFX_GetPinMappings(${1:MediaItem_Take tr}, ${2:integer fx}, ${3:integer isoutput}, ${4:integer pin})$0",
        "description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits\n\n"
    },
    "TAKEFX_GETPINMAPPINGS eel2": {
        "prefix": "TakeFX_GetPinMappings",
        "scope": "eel2",
        "body": "TakeFX_GetPinMappings(${1:MediaItem_Take tr}, ${2:int fx}, ${3:int isoutput}, ${4:int pin}, ${5:optional int &high32})$0",
        "description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits\n\n"
    },
    "RPR_TAKEFX_GETPINMAPPINGS python": {
        "prefix": "RPR_TakeFX_GetPinMappings",
        "scope": "python",
        "body": "RPR_TakeFX_GetPinMappings(${1:tr}, ${2:fx}, ${3:isoutput}, ${4:pin}, ${5:high32OutOptional})$0",
        "description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits\n\n"
    },
    "REAPER.TAKEFX_GETPRESET lua": {
        "prefix": "reaper.TakeFX_GetPreset",
        "scope": "lua",
        "body": "reaper.TakeFX_GetPreset(${1:MediaItem_Take take}, ${2:integer fx}, ${3:string presetname})$0",
        "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TakeFX_SetPreset.\n\n"
    },
    "TAKEFX_GETPRESET eel2": {
        "prefix": "TakeFX_GetPreset",
        "scope": "eel2",
        "body": "TakeFX_GetPreset(${1:MediaItem_Take take}, ${2:int fx}, ${3:#presetname})$0",
        "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TakeFX_SetPreset.\n\n"
    },
    "RPR_TAKEFX_GETPRESET python": {
        "prefix": "RPR_TakeFX_GetPreset",
        "scope": "python",
        "body": "RPR_TakeFX_GetPreset(${1:take}, ${2:fx}, ${3:presetname}, ${4:presetname_sz})$0",
        "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TakeFX_SetPreset.\n\n"
    },
    "REAPER.TAKEFX_GETPRESETINDEX lua": {
        "prefix": "reaper.TakeFX_GetPresetIndex",
        "scope": "lua",
        "body": "reaper.TakeFX_GetPresetIndex(${1:MediaItem_Take take}, ${2:integer fx})$0",
        "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex\n\n"
    },
    "TAKEFX_GETPRESETINDEX eel2": {
        "prefix": "TakeFX_GetPresetIndex",
        "scope": "eel2",
        "body": "TakeFX_GetPresetIndex(${1:MediaItem_Take take}, ${2:int fx}, ${3:int &numberOfPresets})$0",
        "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex\n\n"
    },
    "RPR_TAKEFX_GETPRESETINDEX python": {
        "prefix": "RPR_TakeFX_GetPresetIndex",
        "scope": "python",
        "body": "RPR_TakeFX_GetPresetIndex(${1:take}, ${2:fx}, ${3:numberOfPresetsOut})$0",
        "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex\n\n"
    },
    "REAPER.TAKEFX_GETUSERPRESETFILENAME lua": {
        "prefix": "reaper.TakeFX_GetUserPresetFilename",
        "scope": "lua",
        "body": "reaper.TakeFX_GetUserPresetFilename(${1:MediaItem_Take take}, ${2:integer fx}, ${3:string fn})$0",
        "description": ""
    },
    "TAKEFX_GETUSERPRESETFILENAME eel2": {
        "prefix": "TakeFX_GetUserPresetFilename",
        "scope": "eel2",
        "body": "TakeFX_GetUserPresetFilename(${1:MediaItem_Take take}, ${2:int fx}, ${3:#fn})$0",
        "description": ""
    },
    "RPR_TAKEFX_GETUSERPRESETFILENAME python": {
        "prefix": "RPR_TakeFX_GetUserPresetFilename",
        "scope": "python",
        "body": "RPR_TakeFX_GetUserPresetFilename(${1:take}, ${2:fx}, ${3:fn}, ${4:fn_sz})$0",
        "description": ""
    },
    "REAPER.TAKEFX_NAVIGATEPRESETS lua": {
        "prefix": "reaper.TakeFX_NavigatePresets",
        "scope": "lua",
        "body": "reaper.TakeFX_NavigatePresets(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer presetmove})$0",
        "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
    },
    "TAKEFX_NAVIGATEPRESETS eel2": {
        "prefix": "TakeFX_NavigatePresets",
        "scope": "eel2",
        "body": "TakeFX_NavigatePresets(${1:MediaItem_Take take}, ${2:int fx}, ${3:int presetmove})$0",
        "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
    },
    "RPR_TAKEFX_NAVIGATEPRESETS python": {
        "prefix": "RPR_TakeFX_NavigatePresets",
        "scope": "python",
        "body": "RPR_TakeFX_NavigatePresets(${1:MediaItem_Take take}, ${2:Int fx}, ${3:Int presetmove})$0",
        "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
    },
    "REAPER.TAKEFX_SETENABLED lua": {
        "prefix": "reaper.TakeFX_SetEnabled",
        "scope": "lua",
        "body": "reaper.TakeFX_SetEnabled(${1:MediaItem_Take take}, ${2:integer fx}, ${3:boolean enabled})$0",
        "description": "See TakeFX_GetEnabled\n\n"
    },
    "TAKEFX_SETENABLED eel2": {
        "prefix": "TakeFX_SetEnabled",
        "scope": "eel2",
        "body": "TakeFX_SetEnabled(${1:MediaItem_Take take}, ${2:int fx}, ${3:bool enabled})$0",
        "description": "See TakeFX_GetEnabled\n\n"
    },
    "RPR_TAKEFX_SETENABLED python": {
        "prefix": "RPR_TakeFX_SetEnabled",
        "scope": "python",
        "body": "RPR_TakeFX_SetEnabled(${1:MediaItem_Take take}, ${2:Int fx}, ${3:Boolean enabled})$0",
        "description": "See TakeFX_GetEnabled\n\n"
    },
    "REAPER.TAKEFX_SETNAMEDCONFIGPARM lua": {
        "prefix": "reaper.TakeFX_SetNamedConfigParm",
        "scope": "lua",
        "body": "reaper.TakeFX_SetNamedConfigParm(${1:MediaItem_Take take}, ${2:integer fx}, ${3:string parmname}, ${4:string value})$0",
        "description": "gets plug-in specific named configuration value (returns true on success)\n\n"
    },
    "TAKEFX_SETNAMEDCONFIGPARM eel2": {
        "prefix": "TakeFX_SetNamedConfigParm",
        "scope": "eel2",
        "body": "TakeFX_SetNamedConfigParm(${1:MediaItem_Take take}, ${2:int fx}, \"${3:parmname}\", \"${4:value}\")$0",
        "description": "gets plug-in specific named configuration value (returns true on success)\n\n"
    },
    "RPR_TAKEFX_SETNAMEDCONFIGPARM python": {
        "prefix": "RPR_TakeFX_SetNamedConfigParm",
        "scope": "python",
        "body": "RPR_TakeFX_SetNamedConfigParm(${1:MediaItem_Take take}, ${2:Int fx}, ${3:String parmname}, ${4:String value})$0",
        "description": "gets plug-in specific named configuration value (returns true on success)\n\n"
    },
    "REAPER.TAKEFX_SETOPEN lua": {
        "prefix": "reaper.TakeFX_SetOpen",
        "scope": "lua",
        "body": "reaper.TakeFX_SetOpen(${1:MediaItem_Take take}, ${2:integer fx}, ${3:boolean open})$0",
        "description": "Open this FX UI. See TakeFX_GetOpen\n\n"
    },
    "TAKEFX_SETOPEN eel2": {
        "prefix": "TakeFX_SetOpen",
        "scope": "eel2",
        "body": "TakeFX_SetOpen(${1:MediaItem_Take take}, ${2:int fx}, ${3:bool open})$0",
        "description": "Open this FX UI. See TakeFX_GetOpen\n\n"
    },
    "RPR_TAKEFX_SETOPEN python": {
        "prefix": "RPR_TakeFX_SetOpen",
        "scope": "python",
        "body": "RPR_TakeFX_SetOpen(${1:MediaItem_Take take}, ${2:Int fx}, ${3:Boolean open})$0",
        "description": "Open this FX UI. See TakeFX_GetOpen\n\n"
    },
    "REAPER.TAKEFX_SETPARAM lua": {
        "prefix": "reaper.TakeFX_SetParam",
        "scope": "lua",
        "body": "reaper.TakeFX_SetParam(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer param}, ${4:number val})$0",
        "description": ""
    },
    "TAKEFX_SETPARAM eel2": {
        "prefix": "TakeFX_SetParam",
        "scope": "eel2",
        "body": "TakeFX_SetParam(${1:MediaItem_Take take}, ${2:int fx}, ${3:int param}, ${4:val})$0",
        "description": ""
    },
    "RPR_TAKEFX_SETPARAM python": {
        "prefix": "RPR_TakeFX_SetParam",
        "scope": "python",
        "body": "RPR_TakeFX_SetParam(${1:MediaItem_Take take}, ${2:Int fx}, ${3:Int param}, ${4:Float val})$0",
        "description": ""
    },
    "REAPER.TAKEFX_SETPARAMNORMALIZED lua": {
        "prefix": "reaper.TakeFX_SetParamNormalized",
        "scope": "lua",
        "body": "reaper.TakeFX_SetParamNormalized(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer param}, ${4:number value})$0",
        "description": ""
    },
    "TAKEFX_SETPARAMNORMALIZED eel2": {
        "prefix": "TakeFX_SetParamNormalized",
        "scope": "eel2",
        "body": "TakeFX_SetParamNormalized(${1:MediaItem_Take take}, ${2:int fx}, ${3:int param}, ${4:value})$0",
        "description": ""
    },
    "RPR_TAKEFX_SETPARAMNORMALIZED python": {
        "prefix": "RPR_TakeFX_SetParamNormalized",
        "scope": "python",
        "body": "RPR_TakeFX_SetParamNormalized(${1:MediaItem_Take take}, ${2:Int fx}, ${3:Int param}, ${4:Float value})$0",
        "description": ""
    },
    "REAPER.TAKEFX_SETPINMAPPINGS lua": {
        "prefix": "reaper.TakeFX_SetPinMappings",
        "scope": "lua",
        "body": "reaper.TakeFX_SetPinMappings(${1:MediaItem_Take tr}, ${2:integer fx}, ${3:integer isoutput}, ${4:integer pin}, ${5:integer low32bits}, ${6:integer hi32bits})$0",
        "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
    },
    "TAKEFX_SETPINMAPPINGS eel2": {
        "prefix": "TakeFX_SetPinMappings",
        "scope": "eel2",
        "body": "TakeFX_SetPinMappings(${1:MediaItem_Take tr}, ${2:int fx}, ${3:int isoutput}, ${4:int pin}, ${5:int low32bits}, ${6:int hi32bits})$0",
        "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
    },
    "RPR_TAKEFX_SETPINMAPPINGS python": {
        "prefix": "RPR_TakeFX_SetPinMappings",
        "scope": "python",
        "body": "RPR_TakeFX_SetPinMappings(${1:MediaItem_Take tr}, ${2:Int fx}, ${3:Int isoutput}, ${4:Int pin}, ${5:Int low32bits}, ${6:Int hi32bits})$0",
        "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
    },
    "REAPER.TAKEFX_SETPRESET lua": {
        "prefix": "reaper.TakeFX_SetPreset",
        "scope": "lua",
        "body": "reaper.TakeFX_SetPreset(${1:MediaItem_Take take}, ${2:integer fx}, ${3:string presetname})$0",
        "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset.\n\n"
    },
    "TAKEFX_SETPRESET eel2": {
        "prefix": "TakeFX_SetPreset",
        "scope": "eel2",
        "body": "TakeFX_SetPreset(${1:MediaItem_Take take}, ${2:int fx}, \"${3:presetname}\")$0",
        "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset.\n\n"
    },
    "RPR_TAKEFX_SETPRESET python": {
        "prefix": "RPR_TakeFX_SetPreset",
        "scope": "python",
        "body": "RPR_TakeFX_SetPreset(${1:MediaItem_Take take}, ${2:Int fx}, ${3:String presetname})$0",
        "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset.\n\n"
    },
    "REAPER.TAKEFX_SETPRESETBYINDEX lua": {
        "prefix": "reaper.TakeFX_SetPresetByIndex",
        "scope": "lua",
        "body": "reaper.TakeFX_SetPresetByIndex(${1:MediaItem_Take take}, ${2:integer fx}, ${3:integer idx})$0",
        "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex.\n\n"
    },
    "TAKEFX_SETPRESETBYINDEX eel2": {
        "prefix": "TakeFX_SetPresetByIndex",
        "scope": "eel2",
        "body": "TakeFX_SetPresetByIndex(${1:MediaItem_Take take}, ${2:int fx}, ${3:int idx})$0",
        "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex.\n\n"
    },
    "RPR_TAKEFX_SETPRESETBYINDEX python": {
        "prefix": "RPR_TakeFX_SetPresetByIndex",
        "scope": "python",
        "body": "RPR_TakeFX_SetPresetByIndex(${1:MediaItem_Take take}, ${2:Int fx}, ${3:Int idx})$0",
        "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex.\n\n"
    },
    "REAPER.TAKEFX_SHOW lua": {
        "prefix": "reaper.TakeFX_Show",
        "scope": "lua",
        "body": "reaper.TakeFX_Show(${1:MediaItem_Take take}, ${2:integer index}, ${3:integer showFlag})$0",
        "description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
    },
    "TAKEFX_SHOW eel2": {
        "prefix": "TakeFX_Show",
        "scope": "eel2",
        "body": "TakeFX_Show(${1:MediaItem_Take take}, ${2:int index}, ${3:int showFlag})$0",
        "description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
    },
    "RPR_TAKEFX_SHOW python": {
        "prefix": "RPR_TakeFX_Show",
        "scope": "python",
        "body": "RPR_TakeFX_Show(${1:MediaItem_Take take}, ${2:Int index}, ${3:Int showFlag})$0",
        "description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
    },
    "REAPER.TAKEISMIDI lua": {
        "prefix": "reaper.TakeIsMIDI",
        "scope": "lua",
        "body": "reaper.TakeIsMIDI(${1:MediaItem_Take take})$0",
        "description": "Returns true if the active take contains MIDI.\n\n"
    },
    "TAKEISMIDI eel2": {
        "prefix": "TakeIsMIDI",
        "scope": "eel2",
        "body": "TakeIsMIDI(${1:MediaItem_Take take})$0",
        "description": "Returns true if the active take contains MIDI.\n\n"
    },
    "RPR_TAKEISMIDI python": {
        "prefix": "RPR_TakeIsMIDI",
        "scope": "python",
        "body": "RPR_TakeIsMIDI(${1:MediaItem_Take take})$0",
        "description": "Returns true if the active take contains MIDI.\n\n"
    },
    "REAPER.TIME_PRECISE lua": {
        "prefix": "reaper.time_precise",
        "scope": "lua",
        "body": "reaper.time_precise()$0",
        "description": "Gets a precise system timestamp in seconds\n\n"
    },
    "RPR_TIME_PRECISE python": {
        "prefix": "RPR_time_precise",
        "scope": "python",
        "body": "RPR_time_precise()$0",
        "description": "Gets a precise system timestamp in seconds\n\n"
    },
    "REAPER.TIMEMAP2_BEATSTOTIME lua": {
        "prefix": "reaper.TimeMap2_beatsToTime",
        "scope": "lua",
        "body": "reaper.TimeMap2_beatsToTime(${1:ReaProject proj}, ${2:number tpos}, ${3:optional number measuresIn})$0",
        "description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.\n\n"
    },
    "TIMEMAP2_BEATSTOTIME eel2": {
        "prefix": "TimeMap2_beatsToTime",
        "scope": "eel2",
        "body": "TimeMap2_beatsToTime(${1:ReaProject proj}, ${2:tpos}, ${3:optional int measuresIn})$0",
        "description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.\n\n"
    },
    "RPR_TIMEMAP2_BEATSTOTIME python": {
        "prefix": "RPR_TimeMap2_beatsToTime",
        "scope": "python",
        "body": "RPR_TimeMap2_beatsToTime(${1:ReaProject proj}, ${2:Float tpos}, ${3:const int measuresInOptional})$0",
        "description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.\n\n"
    },
    "REAPER.TIMEMAP2_GETDIVIDEDBPMATTIME lua": {
        "prefix": "reaper.TimeMap2_GetDividedBpmAtTime",
        "scope": "lua",
        "body": "reaper.TimeMap2_GetDividedBpmAtTime(${1:ReaProject proj}, ${2:number time})$0",
        "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
    },
    "TIMEMAP2_GETDIVIDEDBPMATTIME eel2": {
        "prefix": "TimeMap2_GetDividedBpmAtTime",
        "scope": "eel2",
        "body": "TimeMap2_GetDividedBpmAtTime(${1:ReaProject proj}, ${2:time})$0",
        "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
    },
    "RPR_TIMEMAP2_GETDIVIDEDBPMATTIME python": {
        "prefix": "RPR_TimeMap2_GetDividedBpmAtTime",
        "scope": "python",
        "body": "RPR_TimeMap2_GetDividedBpmAtTime(${1:ReaProject proj}, ${2:Float time})$0",
        "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
    },
    "REAPER.TIMEMAP2_GETNEXTCHANGETIME lua": {
        "prefix": "reaper.TimeMap2_GetNextChangeTime",
        "scope": "lua",
        "body": "reaper.TimeMap2_GetNextChangeTime(${1:ReaProject proj}, ${2:number time})$0",
        "description": "when does the next time map (tempo or time sig) change occur\n\n"
    },
    "TIMEMAP2_GETNEXTCHANGETIME eel2": {
        "prefix": "TimeMap2_GetNextChangeTime",
        "scope": "eel2",
        "body": "TimeMap2_GetNextChangeTime(${1:ReaProject proj}, ${2:time})$0",
        "description": "when does the next time map (tempo or time sig) change occur\n\n"
    },
    "RPR_TIMEMAP2_GETNEXTCHANGETIME python": {
        "prefix": "RPR_TimeMap2_GetNextChangeTime",
        "scope": "python",
        "body": "RPR_TimeMap2_GetNextChangeTime(${1:ReaProject proj}, ${2:Float time})$0",
        "description": "when does the next time map (tempo or time sig) change occur\n\n"
    },
    "REAPER.TIMEMAP2_QNTOTIME lua": {
        "prefix": "reaper.TimeMap2_QNToTime",
        "scope": "lua",
        "body": "reaper.TimeMap2_QNToTime(${1:ReaProject proj}, ${2:number qn})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "TIMEMAP2_QNTOTIME eel2": {
        "prefix": "TimeMap2_QNToTime",
        "scope": "eel2",
        "body": "TimeMap2_QNToTime(${1:ReaProject proj}, ${2:qn})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "RPR_TIMEMAP2_QNTOTIME python": {
        "prefix": "RPR_TimeMap2_QNToTime",
        "scope": "python",
        "body": "RPR_TimeMap2_QNToTime(${1:ReaProject proj}, ${2:Float qn})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "REAPER.TIMEMAP2_TIMETOBEATS lua": {
        "prefix": "reaper.TimeMap2_timeToBeats",
        "scope": "lua",
        "body": "reaper.TimeMap2_timeToBeats(${1:ReaProject proj}, ${2:number tpos})$0",
        "description": "convert a time into beats.\n\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\n\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\n\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\n\nif cdenom is non-NULL, will be set to the current time signature denominator.\n\n"
    },
    "TIMEMAP2_TIMETOBEATS eel2": {
        "prefix": "TimeMap2_timeToBeats",
        "scope": "eel2",
        "body": "TimeMap2_timeToBeats(${1:ReaProject proj}, ${2:tpos}, ${3:optional int &measures}, ${4:optional int &cml}, ${5:optional &fullbeats}, ${6:optional int &cdenom})$0",
        "description": "convert a time into beats.\n\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\n\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\n\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\n\nif cdenom is non-NULL, will be set to the current time signature denominator.\n\n"
    },
    "RPR_TIMEMAP2_TIMETOBEATS python": {
        "prefix": "RPR_TimeMap2_timeToBeats",
        "scope": "python",
        "body": "RPR_TimeMap2_timeToBeats(${1:proj}, ${2:tpos}, ${3:measuresOutOptional}, ${4:cmlOutOptional}, ${5:fullbeatsOutOptional}, ${6:cdenomOutOptional})$0",
        "description": "convert a time into beats.\n\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\n\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\n\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\n\nif cdenom is non-NULL, will be set to the current time signature denominator.\n\n"
    },
    "REAPER.TIMEMAP2_TIMETOQN lua": {
        "prefix": "reaper.TimeMap2_timeToQN",
        "scope": "lua",
        "body": "reaper.TimeMap2_timeToQN(${1:ReaProject proj}, ${2:number tpos})$0",
        "description": "converts project time position to QN position.\n\n"
    },
    "TIMEMAP2_TIMETOQN eel2": {
        "prefix": "TimeMap2_timeToQN",
        "scope": "eel2",
        "body": "TimeMap2_timeToQN(${1:ReaProject proj}, ${2:tpos})$0",
        "description": "converts project time position to QN position.\n\n"
    },
    "RPR_TIMEMAP2_TIMETOQN python": {
        "prefix": "RPR_TimeMap2_timeToQN",
        "scope": "python",
        "body": "RPR_TimeMap2_timeToQN(${1:ReaProject proj}, ${2:Float tpos})$0",
        "description": "converts project time position to QN position.\n\n"
    },
    "REAPER.TIMEMAP_CURFRAMERATE lua": {
        "prefix": "reaper.TimeMap_curFrameRate",
        "scope": "lua",
        "body": "reaper.TimeMap_curFrameRate(${1:ReaProject proj})$0",
        "description": "Gets project framerate, and optionally whether it is drop-frame timecode\n\n"
    },
    "TIMEMAP_CURFRAMERATE eel2": {
        "prefix": "TimeMap_curFrameRate",
        "scope": "eel2",
        "body": "TimeMap_curFrameRate(${1:ReaProject proj}, ${2:optional bool &dropFrame})$0",
        "description": "Gets project framerate, and optionally whether it is drop-frame timecode\n\n"
    },
    "RPR_TIMEMAP_CURFRAMERATE python": {
        "prefix": "RPR_TimeMap_curFrameRate",
        "scope": "python",
        "body": "RPR_TimeMap_curFrameRate(${1:proj}, ${2:dropFrameOutOptional})$0",
        "description": "Gets project framerate, and optionally whether it is drop-frame timecode\n\n"
    },
    "REAPER.TIMEMAP_GETDIVIDEDBPMATTIME lua": {
        "prefix": "reaper.TimeMap_GetDividedBpmAtTime",
        "scope": "lua",
        "body": "reaper.TimeMap_GetDividedBpmAtTime(${1:number time})$0",
        "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
    },
    "TIMEMAP_GETDIVIDEDBPMATTIME eel2": {
        "prefix": "TimeMap_GetDividedBpmAtTime",
        "scope": "eel2",
        "body": "TimeMap_GetDividedBpmAtTime(${1:time})$0",
        "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
    },
    "RPR_TIMEMAP_GETDIVIDEDBPMATTIME python": {
        "prefix": "RPR_TimeMap_GetDividedBpmAtTime",
        "scope": "python",
        "body": "RPR_TimeMap_GetDividedBpmAtTime(${1:Float time})$0",
        "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
    },
    "REAPER.TIMEMAP_GETMEASUREINFO lua": {
        "prefix": "reaper.TimeMap_GetMeasureInfo",
        "scope": "lua",
        "body": "reaper.TimeMap_GetMeasureInfo(${1:ReaProject proj}, ${2:integer measure})$0",
        "description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.\n\n"
    },
    "TIMEMAP_GETMEASUREINFO eel2": {
        "prefix": "TimeMap_GetMeasureInfo",
        "scope": "eel2",
        "body": "TimeMap_GetMeasureInfo(${1:ReaProject proj}, ${2:int measure}, ${3:&qn_start}, ${4:&qn_end}, ${5:int &timesig_num}, ${6:int &timesig_denom}, ${7:&tempo})$0",
        "description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.\n\n"
    },
    "RPR_TIMEMAP_GETMEASUREINFO python": {
        "prefix": "RPR_TimeMap_GetMeasureInfo",
        "scope": "python",
        "body": "RPR_TimeMap_GetMeasureInfo(${1:proj}, ${2:measure}, ${3:qn_startOut}, ${4:qn_endOut}, ${5:timesig_numOut}, ${6:timesig_denomOut}, ${7:tempoOut})$0",
        "description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.\n\n"
    },
    "REAPER.TIMEMAP_GETMETRONOMEPATTERN lua": {
        "prefix": "reaper.TimeMap_GetMetronomePattern",
        "scope": "lua",
        "body": "reaper.TimeMap_GetMetronomePattern(${1:ReaProject proj}, ${2:number time}, ${3:string pattern})$0",
        "description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\". The length of the string is the time signature numerator, and the function returns the time signature denominator.\n\n"
    },
    "TIMEMAP_GETMETRONOMEPATTERN eel2": {
        "prefix": "TimeMap_GetMetronomePattern",
        "scope": "eel2",
        "body": "TimeMap_GetMetronomePattern(${1:ReaProject proj}, ${2:time}, ${3:#pattern})$0",
        "description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\". The length of the string is the time signature numerator, and the function returns the time signature denominator.\n\n"
    },
    "RPR_TIMEMAP_GETMETRONOMEPATTERN python": {
        "prefix": "RPR_TimeMap_GetMetronomePattern",
        "scope": "python",
        "body": "RPR_TimeMap_GetMetronomePattern(${1:proj}, ${2:time}, ${3:pattern}, ${4:pattern_sz})$0",
        "description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\". The length of the string is the time signature numerator, and the function returns the time signature denominator.\n\n"
    },
    "REAPER.TIMEMAP_GETTIMESIGATTIME lua": {
        "prefix": "reaper.TimeMap_GetTimeSigAtTime",
        "scope": "lua",
        "body": "reaper.TimeMap_GetTimeSigAtTime(${1:ReaProject proj}, ${2:number time})$0",
        "description": "get the effective time signature and tempo\n\n"
    },
    "TIMEMAP_GETTIMESIGATTIME eel2": {
        "prefix": "TimeMap_GetTimeSigAtTime",
        "scope": "eel2",
        "body": "TimeMap_GetTimeSigAtTime(${1:ReaProject proj}, ${2:time}, ${3:int &timesig_num}, ${4:int &timesig_denom}, ${5:&tempo})$0",
        "description": "get the effective time signature and tempo\n\n"
    },
    "RPR_TIMEMAP_GETTIMESIGATTIME python": {
        "prefix": "RPR_TimeMap_GetTimeSigAtTime",
        "scope": "python",
        "body": "RPR_TimeMap_GetTimeSigAtTime(${1:proj}, ${2:time}, ${3:timesig_numOut}, ${4:timesig_denomOut}, ${5:tempoOut})$0",
        "description": "get the effective time signature and tempo\n\n"
    },
    "REAPER.TIMEMAP_QNTOMEASURES lua": {
        "prefix": "reaper.TimeMap_QNToMeasures",
        "scope": "lua",
        "body": "reaper.TimeMap_QNToMeasures(${1:ReaProject proj}, ${2:number qn})$0",
        "description": "Find which measure the given QN position falls in.\n\n"
    },
    "TIMEMAP_QNTOMEASURES eel2": {
        "prefix": "TimeMap_QNToMeasures",
        "scope": "eel2",
        "body": "TimeMap_QNToMeasures(${1:ReaProject proj}, ${2:qn}, ${3:optional &qnMeasureStart}, ${4:optional &qnMeasureEnd})$0",
        "description": "Find which measure the given QN position falls in.\n\n"
    },
    "RPR_TIMEMAP_QNTOMEASURES python": {
        "prefix": "RPR_TimeMap_QNToMeasures",
        "scope": "python",
        "body": "RPR_TimeMap_QNToMeasures(${1:proj}, ${2:qn}, ${3:qnMeasureStartOutOptional}, ${4:qnMeasureEndOutOptional})$0",
        "description": "Find which measure the given QN position falls in.\n\n"
    },
    "REAPER.TIMEMAP_QNTOTIME lua": {
        "prefix": "reaper.TimeMap_QNToTime",
        "scope": "lua",
        "body": "reaper.TimeMap_QNToTime(${1:number qn})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "TIMEMAP_QNTOTIME eel2": {
        "prefix": "TimeMap_QNToTime",
        "scope": "eel2",
        "body": "TimeMap_QNToTime(${1:qn})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "RPR_TIMEMAP_QNTOTIME python": {
        "prefix": "RPR_TimeMap_QNToTime",
        "scope": "python",
        "body": "RPR_TimeMap_QNToTime(${1:Float qn})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "REAPER.TIMEMAP_QNTOTIME_ABS lua": {
        "prefix": "reaper.TimeMap_QNToTime_abs",
        "scope": "lua",
        "body": "reaper.TimeMap_QNToTime_abs(${1:ReaProject proj}, ${2:number qn})$0",
        "description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime\n\n"
    },
    "TIMEMAP_QNTOTIME_ABS eel2": {
        "prefix": "TimeMap_QNToTime_abs",
        "scope": "eel2",
        "body": "TimeMap_QNToTime_abs(${1:ReaProject proj}, ${2:qn})$0",
        "description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime\n\n"
    },
    "RPR_TIMEMAP_QNTOTIME_ABS python": {
        "prefix": "RPR_TimeMap_QNToTime_abs",
        "scope": "python",
        "body": "RPR_TimeMap_QNToTime_abs(${1:ReaProject proj}, ${2:Float qn})$0",
        "description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime\n\n"
    },
    "REAPER.TIMEMAP_TIMETOQN lua": {
        "prefix": "reaper.TimeMap_timeToQN",
        "scope": "lua",
        "body": "reaper.TimeMap_timeToQN(${1:number tpos})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "TIMEMAP_TIMETOQN eel2": {
        "prefix": "TimeMap_timeToQN",
        "scope": "eel2",
        "body": "TimeMap_timeToQN(${1:tpos})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "RPR_TIMEMAP_TIMETOQN python": {
        "prefix": "RPR_TimeMap_timeToQN",
        "scope": "python",
        "body": "RPR_TimeMap_timeToQN(${1:Float tpos})$0",
        "description": "converts project QN position to time.\n\n"
    },
    "REAPER.TIMEMAP_TIMETOQN_ABS lua": {
        "prefix": "reaper.TimeMap_timeToQN_abs",
        "scope": "lua",
        "body": "reaper.TimeMap_timeToQN_abs(${1:ReaProject proj}, ${2:number tpos})$0",
        "description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN\n\n"
    },
    "TIMEMAP_TIMETOQN_ABS eel2": {
        "prefix": "TimeMap_timeToQN_abs",
        "scope": "eel2",
        "body": "TimeMap_timeToQN_abs(${1:ReaProject proj}, ${2:tpos})$0",
        "description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN\n\n"
    },
    "RPR_TIMEMAP_TIMETOQN_ABS python": {
        "prefix": "RPR_TimeMap_timeToQN_abs",
        "scope": "python",
        "body": "RPR_TimeMap_timeToQN_abs(${1:ReaProject proj}, ${2:Float tpos})$0",
        "description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN\n\n"
    },
    "REAPER.TOGGLETRACKSENDUIMUTE lua": {
        "prefix": "reaper.ToggleTrackSendUIMute",
        "scope": "lua",
        "body": "reaper.ToggleTrackSendUIMute(${1:MediaTrack track}, ${2:integer send_idx})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.\n\n"
    },
    "TOGGLETRACKSENDUIMUTE eel2": {
        "prefix": "ToggleTrackSendUIMute",
        "scope": "eel2",
        "body": "ToggleTrackSendUIMute(${1:MediaTrack track}, ${2:int send_idx})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.\n\n"
    },
    "RPR_TOGGLETRACKSENDUIMUTE python": {
        "prefix": "RPR_ToggleTrackSendUIMute",
        "scope": "python",
        "body": "RPR_ToggleTrackSendUIMute(${1:MediaTrack track}, ${2:Int send_idx})$0",
        "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.\n\n"
    },
    "REAPER.TRACK_GETPEAKHOLDDB lua": {
        "prefix": "reaper.Track_GetPeakHoldDB",
        "scope": "lua",
        "body": "reaper.Track_GetPeakHoldDB(${1:MediaTrack track}, ${2:integer channel}, ${3:boolean clear})$0",
        "description": ""
    },
    "TRACK_GETPEAKHOLDDB eel2": {
        "prefix": "Track_GetPeakHoldDB",
        "scope": "eel2",
        "body": "Track_GetPeakHoldDB(${1:MediaTrack track}, ${2:int channel}, ${3:bool clear})$0",
        "description": ""
    },
    "RPR_TRACK_GETPEAKHOLDDB python": {
        "prefix": "RPR_Track_GetPeakHoldDB",
        "scope": "python",
        "body": "RPR_Track_GetPeakHoldDB(${1:MediaTrack track}, ${2:Int channel}, ${3:Boolean clear})$0",
        "description": ""
    },
    "REAPER.TRACK_GETPEAKINFO lua": {
        "prefix": "reaper.Track_GetPeakInfo",
        "scope": "lua",
        "body": "reaper.Track_GetPeakInfo(${1:MediaTrack track}, ${2:integer channel})$0",
        "description": ""
    },
    "TRACK_GETPEAKINFO eel2": {
        "prefix": "Track_GetPeakInfo",
        "scope": "eel2",
        "body": "Track_GetPeakInfo(${1:MediaTrack track}, ${2:int channel})$0",
        "description": ""
    },
    "RPR_TRACK_GETPEAKINFO python": {
        "prefix": "RPR_Track_GetPeakInfo",
        "scope": "python",
        "body": "RPR_Track_GetPeakInfo(${1:MediaTrack track}, ${2:Int channel})$0",
        "description": ""
    },
    "REAPER.TRACKCTL_SETTOOLTIP lua": {
        "prefix": "reaper.TrackCtl_SetToolTip",
        "scope": "lua",
        "body": "reaper.TrackCtl_SetToolTip(${1:string fmt}, ${2:integer xpos}, ${3:integer ypos}, ${4:boolean topmost})$0",
        "description": "displays tooltip at location, or removes if empty string\n\n"
    },
    "TRACKCTL_SETTOOLTIP eel2": {
        "prefix": "TrackCtl_SetToolTip",
        "scope": "eel2",
        "body": "TrackCtl_SetToolTip(\"${1:fmt}\", ${2:int xpos}, ${3:int ypos}, ${4:bool topmost})$0",
        "description": "displays tooltip at location, or removes if empty string\n\n"
    },
    "RPR_TRACKCTL_SETTOOLTIP python": {
        "prefix": "RPR_TrackCtl_SetToolTip",
        "scope": "python",
        "body": "RPR_TrackCtl_SetToolTip(${1:String fmt}, ${2:Int xpos}, ${3:Int ypos}, ${4:Boolean topmost})$0",
        "description": "displays tooltip at location, or removes if empty string\n\n"
    },
    "REAPER.TRACKFX_ADDBYNAME lua": {
        "prefix": "reaper.TrackFX_AddByName",
        "scope": "lua",
        "body": "reaper.TrackFX_AddByName(${1:MediaTrack track}, ${2:string fxname}, ${3:boolean recFX}, ${4:integer instantiate})$0",
        "description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:.\n\n"
    },
    "TRACKFX_ADDBYNAME eel2": {
        "prefix": "TrackFX_AddByName",
        "scope": "eel2",
        "body": "TrackFX_AddByName(${1:MediaTrack track}, \"${2:fxname}\", ${3:bool recFX}, ${4:int instantiate})$0",
        "description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:.\n\n"
    },
    "RPR_TRACKFX_ADDBYNAME python": {
        "prefix": "RPR_TrackFX_AddByName",
        "scope": "python",
        "body": "RPR_TrackFX_AddByName(${1:MediaTrack track}, ${2:String fxname}, ${3:Boolean recFX}, ${4:Int instantiate})$0",
        "description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:.\n\n"
    },
    "REAPER.TRACKFX_ENDPARAMEDIT lua": {
        "prefix": "reaper.TrackFX_EndParamEdit",
        "scope": "lua",
        "body": "reaper.TrackFX_EndParamEdit(${1:MediaTrack track}, ${2:integer fx}, ${3:integer param})$0",
        "description": ""
    },
    "TRACKFX_ENDPARAMEDIT eel2": {
        "prefix": "TrackFX_EndParamEdit",
        "scope": "eel2",
        "body": "TrackFX_EndParamEdit(${1:MediaTrack track}, ${2:int fx}, ${3:int param})$0",
        "description": ""
    },
    "RPR_TRACKFX_ENDPARAMEDIT python": {
        "prefix": "RPR_TrackFX_EndParamEdit",
        "scope": "python",
        "body": "RPR_TrackFX_EndParamEdit(${1:MediaTrack track}, ${2:Int fx}, ${3:Int param})$0",
        "description": ""
    },
    "REAPER.TRACKFX_FORMATPARAMVALUE lua": {
        "prefix": "reaper.TrackFX_FormatParamValue",
        "scope": "lua",
        "body": "reaper.TrackFX_FormatParamValue(${1:MediaTrack track}, ${2:integer fx}, ${3:integer param}, ${4:number val}, ${5:string buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "TRACKFX_FORMATPARAMVALUE eel2": {
        "prefix": "TrackFX_FormatParamValue",
        "scope": "eel2",
        "body": "TrackFX_FormatParamValue(${1:MediaTrack track}, ${2:int fx}, ${3:int param}, ${4:val}, ${5:#buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "RPR_TRACKFX_FORMATPARAMVALUE python": {
        "prefix": "RPR_TrackFX_FormatParamValue",
        "scope": "python",
        "body": "RPR_TrackFX_FormatParamValue(${1:track}, ${2:fx}, ${3:param}, ${4:val}, ${5:buf}, ${6:buf_sz})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "REAPER.TRACKFX_FORMATPARAMVALUENORMALIZED lua": {
        "prefix": "reaper.TrackFX_FormatParamValueNormalized",
        "scope": "lua",
        "body": "reaper.TrackFX_FormatParamValueNormalized(${1:MediaTrack track}, ${2:integer fx}, ${3:integer param}, ${4:number value}, ${5:string buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "TRACKFX_FORMATPARAMVALUENORMALIZED eel2": {
        "prefix": "TrackFX_FormatParamValueNormalized",
        "scope": "eel2",
        "body": "TrackFX_FormatParamValueNormalized(${1:MediaTrack track}, ${2:int fx}, ${3:int param}, ${4:value}, ${5:#buf})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "RPR_TRACKFX_FORMATPARAMVALUENORMALIZED python": {
        "prefix": "RPR_TrackFX_FormatParamValueNormalized",
        "scope": "python",
        "body": "RPR_TrackFX_FormatParamValueNormalized(${1:track}, ${2:fx}, ${3:param}, ${4:value}, ${5:buf}, ${6:buf_sz})$0",
        "description": "Note: only works with FX that support Cockos VST extensions.\n\n"
    },
    "REAPER.TRACKFX_GETBYNAME lua": {
        "prefix": "reaper.TrackFX_GetByName",
        "scope": "lua",
        "body": "reaper.TrackFX_GetByName(${1:MediaTrack track}, ${2:string fxname}, ${3:boolean instantiate})$0",
        "description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.\n\n"
    },
    "TRACKFX_GETBYNAME eel2": {
        "prefix": "TrackFX_GetByName",
        "scope": "eel2",
        "body": "TrackFX_GetByName(${1:MediaTrack track}, \"${2:fxname}\", ${3:bool instantiate})$0",
        "description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.\n\n"
    },
    "RPR_TRACKFX_GETBYNAME python": {
        "prefix": "RPR_TrackFX_GetByName",
        "scope": "python",
        "body": "RPR_TrackFX_GetByName(${1:MediaTrack track}, ${2:String fxname}, ${3:Boolean instantiate})$0",
        "description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.\n\n"
    },
    "REAPER.TRACKFX_GETCHAINVISIBLE lua": {
        "prefix": "reaper.TrackFX_GetChainVisible",
        "scope": "lua",
        "body": "reaper.TrackFX_GetChainVisible(${1:MediaTrack track})$0",
        "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "TRACKFX_GETCHAINVISIBLE eel2": {
        "prefix": "TrackFX_GetChainVisible",
        "scope": "eel2",
        "body": "TrackFX_GetChainVisible(${1:MediaTrack track})$0",
        "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "RPR_TRACKFX_GETCHAINVISIBLE python": {
        "prefix": "RPR_TrackFX_GetChainVisible",
        "scope": "python",
        "body": "RPR_TrackFX_GetChainVisible(${1:MediaTrack track})$0",
        "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "REAPER.TRACKFX_GETCOUNT lua": {
        "prefix": "reaper.TrackFX_GetCount",
        "scope": "lua",
        "body": "reaper.TrackFX_GetCount(${1:MediaTrack track})$0",
        "description": ""
    },
    "TRACKFX_GETCOUNT eel2": {
        "prefix": "TrackFX_GetCount",
        "scope": "eel2",
        "body": "TrackFX_GetCount(${1:MediaTrack track})$0",
        "description": ""
    },
    "RPR_TRACKFX_GETCOUNT python": {
        "prefix": "RPR_TrackFX_GetCount",
        "scope": "python",
        "body": "RPR_TrackFX_GetCount(${1:MediaTrack track})$0",
        "description": ""
    },
    "REAPER.TRACKFX_GETENABLED lua": {
        "prefix": "reaper.TrackFX_GetEnabled",
        "scope": "lua",
        "body": "reaper.TrackFX_GetEnabled(${1:MediaTrack track}, ${2:integer fx})$0",
        "description": "See TrackFX_SetEnabled\n\n"
    },
    "TRACKFX_GETENABLED eel2": {
        "prefix": "TrackFX_GetEnabled",
        "scope": "eel2",
        "body": "TrackFX_GetEnabled(${1:MediaTrack track}, ${2:int fx})$0",
        "description": "See TrackFX_SetEnabled\n\n"
    },
    "RPR_TRACKFX_GETENABLED python": {
        "prefix": "RPR_TrackFX_GetEnabled",
        "scope": "python",
        "body": "RPR_TrackFX_GetEnabled(${1:MediaTrack track}, ${2:Int fx})$0",
        "description": "See TrackFX_SetEnabled\n\n"
    },
    "REAPER.TRACKFX_GETEQ lua": {
        "prefix": "reaper.TrackFX_GetEQ",
        "scope": "lua",
        "body": "reaper.TrackFX_GetEQ(${1:MediaTrack track}, ${2:boolean instantiate})$0",
        "description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.\n\n"
    },
    "TRACKFX_GETEQ eel2": {
        "prefix": "TrackFX_GetEQ",
        "scope": "eel2",
        "body": "TrackFX_GetEQ(${1:MediaTrack track}, ${2:bool instantiate})$0",
        "description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.\n\n"
    },
    "RPR_TRACKFX_GETEQ python": {
        "prefix": "RPR_TrackFX_GetEQ",
        "scope": "python",
        "body": "RPR_TrackFX_GetEQ(${1:MediaTrack track}, ${2:Boolean instantiate})$0",
        "description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.\n\n"
    },
    "REAPER.TRACKFX_GETEQBANDENABLED lua": {
        "prefix": "reaper.TrackFX_GetEQBandEnabled",
        "scope": "lua",
        "body": "reaper.TrackFX_GetEQBandEnabled(${1:MediaTrack track}, ${2:integer fxidx}, ${3:integer bandtype}, ${4:integer bandidx})$0",
        "description": "Returns true if the EQ band is enabled.\n\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled.\n\n"
    },
    "TRACKFX_GETEQBANDENABLED eel2": {
        "prefix": "TrackFX_GetEQBandEnabled",
        "scope": "eel2",
        "body": "TrackFX_GetEQBandEnabled(${1:MediaTrack track}, ${2:int fxidx}, ${3:int bandtype}, ${4:int bandidx})$0",
        "description": "Returns true if the EQ band is enabled.\n\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled.\n\n"
    },
    "RPR_TRACKFX_GETEQBANDENABLED python": {
        "prefix": "RPR_TrackFX_GetEQBandEnabled",
        "scope": "python",
        "body": "RPR_TrackFX_GetEQBandEnabled(${1:MediaTrack track}, ${2:Int fxidx}, ${3:Int bandtype}, ${4:Int bandidx})$0",
        "description": "Returns true if the EQ band is enabled.\n\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled.\n\n"
    },
    "REAPER.TRACKFX_GETEQPARAM lua": {
        "prefix": "reaper.TrackFX_GetEQParam",
        "scope": "lua",
        "body": "reaper.TrackFX_GetEQParam(${1:MediaTrack track}, ${2:integer fxidx}, ${3:integer paramidx})$0",
        "description": "Returns false if track/fxidx is not ReaEQ.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
    },
    "TRACKFX_GETEQPARAM eel2": {
        "prefix": "TrackFX_GetEQParam",
        "scope": "eel2",
        "body": "TrackFX_GetEQParam(${1:MediaTrack track}, ${2:int fxidx}, ${3:int paramidx}, ${4:int &bandtype}, ${5:int &bandidx}, ${6:int &paramtype}, ${7:&normval})$0",
        "description": "Returns false if track/fxidx is not ReaEQ.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
    },
    "RPR_TRACKFX_GETEQPARAM python": {
        "prefix": "RPR_TrackFX_GetEQParam",
        "scope": "python",
        "body": "RPR_TrackFX_GetEQParam(${1:track}, ${2:fxidx}, ${3:paramidx}, ${4:bandtypeOut}, ${5:bandidxOut}, ${6:paramtypeOut}, ${7:normvalOut})$0",
        "description": "Returns false if track/fxidx is not ReaEQ.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
    },
    "REAPER.TRACKFX_GETFLOATINGWINDOW lua": {
        "prefix": "reaper.TrackFX_GetFloatingWindow",
        "scope": "lua",
        "body": "reaper.TrackFX_GetFloatingWindow(${1:MediaTrack track}, ${2:integer index})$0",
        "description": "returns HWND of floating window for effect index, if any\n\n"
    },
    "TRACKFX_GETFLOATINGWINDOW eel2": {
        "prefix": "TrackFX_GetFloatingWindow",
        "scope": "eel2",
        "body": "TrackFX_GetFloatingWindow(${1:MediaTrack track}, ${2:int index})$0",
        "description": "returns HWND of floating window for effect index, if any\n\n"
    },
    "RPR_TRACKFX_GETFLOATINGWINDOW python": {
        "prefix": "RPR_TrackFX_GetFloatingWindow",
        "scope": "python",
        "body": "RPR_TrackFX_GetFloatingWindow(${1:MediaTrack track}, ${2:Int index})$0",
        "description": "returns HWND of floating window for effect index, if any\n\n"
    },
    "REAPER.TRACKFX_GETFORMATTEDPARAMVALUE lua": {
        "prefix": "reaper.TrackFX_GetFormattedParamValue",
        "scope": "lua",
        "body": "reaper.TrackFX_GetFormattedParamValue(${1:MediaTrack track}, ${2:integer fx}, ${3:integer param}, ${4:string buf})$0",
        "description": ""
    },
    "TRACKFX_GETFORMATTEDPARAMVALUE eel2": {
        "prefix": "TrackFX_GetFormattedParamValue",
        "scope": "eel2",
        "body": "TrackFX_GetFormattedParamValue(${1:MediaTrack track}, ${2:int fx}, ${3:int param}, ${4:#buf})$0",
        "description": ""
    },
    "RPR_TRACKFX_GETFORMATTEDPARAMVALUE python": {
        "prefix": "RPR_TrackFX_GetFormattedParamValue",
        "scope": "python",
        "body": "RPR_TrackFX_GetFormattedParamValue(${1:track}, ${2:fx}, ${3:param}, ${4:buf}, ${5:buf_sz})$0",
        "description": ""
    },
    "REAPER.TRACKFX_GETFXGUID lua": {
        "prefix": "reaper.TrackFX_GetFXGUID",
        "scope": "lua",
        "body": "reaper.TrackFX_GetFXGUID(${1:MediaTrack track}, ${2:integer fx})$0",
        "description": ""
    },
    "TRACKFX_GETFXGUID eel2": {
        "prefix": "TrackFX_GetFXGUID",
        "scope": "eel2",
        "body": "TrackFX_GetFXGUID(${1:#retguid}, ${2:MediaTrack track}, ${3:int fx})$0",
        "description": ""
    },
    "RPR_TRACKFX_GETFXGUID python": {
        "prefix": "RPR_TrackFX_GetFXGUID",
        "scope": "python",
        "body": "RPR_TrackFX_GetFXGUID(${1:MediaTrack track}, ${2:Int fx})$0",
        "description": ""
    },
    "REAPER.TRACKFX_GETFXNAME lua": {
        "prefix": "reaper.TrackFX_GetFXName",
        "scope": "lua",
        "body": "reaper.TrackFX_GetFXName(${1:MediaTrack track}, ${2:integer fx}, ${3:string buf})$0",
        "description": ""
    },
    "TRACKFX_GETFXNAME eel2": {
        "prefix": "TrackFX_GetFXName",
        "scope": "eel2",
        "body": "TrackFX_GetFXName(${1:MediaTrack track}, ${2:int fx}, ${3:#buf})$0",
        "description": ""
    },
    "RPR_TRACKFX_GETFXNAME python": {
        "prefix": "RPR_TrackFX_GetFXName",
        "scope": "python",
        "body": "RPR_TrackFX_GetFXName(${1:track}, ${2:fx}, ${3:buf}, ${4:buf_sz})$0",
        "description": ""
    },
    "REAPER.TRACKFX_GETINSTRUMENT lua": {
        "prefix": "reaper.TrackFX_GetInstrument",
        "scope": "lua",
        "body": "reaper.TrackFX_GetInstrument(${1:MediaTrack track})$0",
        "description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.\n\n"
    },
    "TRACKFX_GETINSTRUMENT eel2": {
        "prefix": "TrackFX_GetInstrument",
        "scope": "eel2",
        "body": "TrackFX_GetInstrument(${1:MediaTrack track})$0",
        "description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.\n\n"
    },
    "RPR_TRACKFX_GETINSTRUMENT python": {
        "prefix": "RPR_TrackFX_GetInstrument",
        "scope": "python",
        "body": "RPR_TrackFX_GetInstrument(${1:MediaTrack track})$0",
        "description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.\n\n"
    },
    "REAPER.TRACKFX_GETIOSIZE lua": {
        "prefix": "reaper.TrackFX_GetIOSize",
        "scope": "lua",
        "body": "reaper.TrackFX_GetIOSize(${1:MediaTrack track}, ${2:integer fx})$0",
        "description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
    },
    "TRACKFX_GETIOSIZE eel2": {
        "prefix": "TrackFX_GetIOSize",
        "scope": "eel2",
        "body": "TrackFX_GetIOSize(${1:MediaTrack track}, ${2:int fx}, ${3:optional int &inputPins}, ${4:optional int &outputPins})$0",
        "description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
    },
    "RPR_TRACKFX_GETIOSIZE python": {
        "prefix": "RPR_TrackFX_GetIOSize",
        "scope": "python",
        "body": "RPR_TrackFX_GetIOSize(${1:track}, ${2:fx}, ${3:inputPinsOutOptional}, ${4:outputPinsOutOptional})$0",
        "description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
    },
    "REAPER.TRACKFX_GETNAMEDCONFIGPARM lua": {
        "prefix": "reaper.TrackFX_GetNamedConfigParm",
        "scope": "lua",
        "body": "reaper.TrackFX_GetNamedConfigParm(${1:MediaTrack track}, ${2:integer fx}, ${3:string parmname})$0",
        "description": "gets plug-in specific named configuration value (returns true on success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns name of first input pin (if available), 'out_pin_0' returns name of first output pin (if available), etc.\n\n"
    },
    "TRACKFX_GETNAMEDCONFIGPARM eel2": {
        "prefix": "TrackFX_GetNamedConfigParm",
        "scope": "eel2",
        "body": "TrackFX_GetNamedConfigParm(${1:MediaTrack track}, ${2:int fx}, \"${3:parmname}\", ${4:#buf})$0",
        "description": "gets plug-in specific named configuration value (returns true on success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns name of first input pin (if available), 'out_pin_0' returns name of first output pin (if available), etc.\n\n"
    },
    "RPR_TRACKFX_GETNAMEDCONFIGPARM python": {
        "prefix": "RPR_TrackFX_GetNamedConfigParm",
        "scope": "python",
        "body": "RPR_TrackFX_GetNamedConfigParm(${1:track}, ${2:fx}, ${3:parmname}, ${4:bufOut}, ${5:bufOut_sz})$0",
        "description": "gets plug-in specific named configuration value (returns true on success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns name of first input pin (if available), 'out_pin_0' returns name of first output pin (if available), etc.\n\n"
    },
    "REAPER.TRACKFX_GETNUMPARAMS lua": {
        "prefix": "reaper.TrackFX_GetNumParams",
        "scope": "lua",
        "body": "reaper.TrackFX_GetNumParams(${1:MediaTrack track}, ${2:integer fx})$0",
        "description": ""
    },
    "TRACKFX_GETNUMPARAMS eel2": {
        "prefix": "TrackFX_GetNumParams",
        "scope": "eel2",
        "body": "TrackFX_GetNumParams(${1:MediaTrack track}, ${2:int fx})$0",
        "description": ""
    },
    "RPR_TRACKFX_GETNUMPARAMS python": {
        "prefix": "RPR_TrackFX_GetNumParams",
        "scope": "python",
        "body": "RPR_TrackFX_GetNumParams(${1:MediaTrack track}, ${2:Int fx})$0",
        "description": ""
    },
    "REAPER.TRACKFX_GETOPEN lua": {
        "prefix": "reaper.TrackFX_GetOpen",
        "scope": "lua",
        "body": "reaper.TrackFX_GetOpen(${1:MediaTrack track}, ${2:integer fx})$0",
        "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen\n\n"
    },
    "TRACKFX_GETOPEN eel2": {
        "prefix": "TrackFX_GetOpen",
        "scope": "eel2",
        "body": "TrackFX_GetOpen(${1:MediaTrack track}, ${2:int fx})$0",
        "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen\n\n"
    },
    "RPR_TRACKFX_GETOPEN python": {
        "prefix": "RPR_TrackFX_GetOpen",
        "scope": "python",
        "body": "RPR_TrackFX_GetOpen(${1:MediaTrack track}, ${2:Int fx})$0",
        "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen\n\n"
    },
    "REAPER.TRACKFX_GETPARAM lua": {
        "prefix": "reaper.TrackFX_GetParam",
        "scope": "lua",
        "body": "reaper.TrackFX_GetParam(${1:MediaTrack track}, ${2:integer fx}, ${3:integer param})$0",
        "description": ""
    },
    "TRACKFX_GETPARAM eel2": {
        "prefix": "TrackFX_GetParam",
        "scope": "eel2",
        "body": "TrackFX_GetParam(${1:MediaTrack track}, ${2:int fx}, ${3:int param}, ${4:&minval}, ${5:&maxval})$0",
        "description": ""
    },
    "RPR_TRACKFX_GETPARAM python": {
        "prefix": "RPR_TrackFX_GetParam",
        "scope": "python",
        "body": "RPR_TrackFX_GetParam(${1:track}, ${2:fx}, ${3:param}, ${4:minvalOut}, ${5:maxvalOut})$0",
        "description": ""
    },
    "REAPER.TRACKFX_GETPARAMETERSTEPSIZES lua": {
        "prefix": "reaper.TrackFX_GetParameterStepSizes",
        "scope": "lua",
        "body": "reaper.TrackFX_GetParameterStepSizes(${1:MediaTrack track}, ${2:integer fx}, ${3:integer param})$0",
        "description": ""
    },
    "TRACKFX_GETPARAMETERSTEPSIZES eel2": {
        "prefix": "TrackFX_GetParameterStepSizes",
        "scope": "eel2",
        "body": "TrackFX_GetParameterStepSizes(${1:MediaTrack track}, ${2:int fx}, ${3:int param}, ${4:&step}, ${5:&smallstep}, ${6:&largestep}, ${7:bool &istoggle})$0",
        "description": ""
    },
    "RPR_TRACKFX_GETPARAMETERSTEPSIZES python": {
        "prefix": "RPR_TrackFX_GetParameterStepSizes",
        "scope": "python",
        "body": "RPR_TrackFX_GetParameterStepSizes(${1:track}, ${2:fx}, ${3:param}, ${4:stepOut}, ${5:smallstepOut}, ${6:largestepOut}, ${7:istoggleOut})$0",
        "description": ""
    },
    "REAPER.TRACKFX_GETPARAMEX lua": {
        "prefix": "reaper.TrackFX_GetParamEx",
        "scope": "lua",
        "body": "reaper.TrackFX_GetParamEx(${1:MediaTrack track}, ${2:integer fx}, ${3:integer param})$0",
        "description": ""
    },
    "TRACKFX_GETPARAMEX eel2": {
        "prefix": "TrackFX_GetParamEx",
        "scope": "eel2",
        "body": "TrackFX_GetParamEx(${1:MediaTrack track}, ${2:int fx}, ${3:int param}, ${4:&minval}, ${5:&maxval}, ${6:&midval})$0",
        "description": ""
    },
    "RPR_TRACKFX_GETPARAMEX python": {
        "prefix": "RPR_TrackFX_GetParamEx",
        "scope": "python",
        "body": "RPR_TrackFX_GetParamEx(${1:track}, ${2:fx}, ${3:param}, ${4:minvalOut}, ${5:maxvalOut}, ${6:midvalOut})$0",
        "description": ""
    },
    "REAPER.TRACKFX_GETPARAMNAME lua": {
        "prefix": "reaper.TrackFX_GetParamName",
        "scope": "lua",
        "body": "reaper.TrackFX_GetParamName(${1:MediaTrack track}, ${2:integer fx}, ${3:integer param}, ${4:string buf})$0",
        "description": ""
    },
    "TRACKFX_GETPARAMNAME eel2": {
        "prefix": "TrackFX_GetParamName",
        "scope": "eel2",
        "body": "TrackFX_GetParamName(${1:MediaTrack track}, ${2:int fx}, ${3:int param}, ${4:#buf})$0",
        "description": ""
    },
    "RPR_TRACKFX_GETPARAMNAME python": {
        "prefix": "RPR_TrackFX_GetParamName",
        "scope": "python",
        "body": "RPR_TrackFX_GetParamName(${1:track}, ${2:fx}, ${3:param}, ${4:buf}, ${5:buf_sz})$0",
        "description": ""
    },
    "REAPER.TRACKFX_GETPARAMNORMALIZED lua": {
        "prefix": "reaper.TrackFX_GetParamNormalized",
        "scope": "lua",
        "body": "reaper.TrackFX_GetParamNormalized(${1:MediaTrack track}, ${2:integer fx}, ${3:integer param})$0",
        "description": ""
    },
    "TRACKFX_GETPARAMNORMALIZED eel2": {
        "prefix": "TrackFX_GetParamNormalized",
        "scope": "eel2",
        "body": "TrackFX_GetParamNormalized(${1:MediaTrack track}, ${2:int fx}, ${3:int param})$0",
        "description": ""
    },
    "RPR_TRACKFX_GETPARAMNORMALIZED python": {
        "prefix": "RPR_TrackFX_GetParamNormalized",
        "scope": "python",
        "body": "RPR_TrackFX_GetParamNormalized(${1:MediaTrack track}, ${2:Int fx}, ${3:Int param})$0",
        "description": ""
    },
    "REAPER.TRACKFX_GETPINMAPPINGS lua": {
        "prefix": "reaper.TrackFX_GetPinMappings",
        "scope": "lua",
        "body": "reaper.TrackFX_GetPinMappings(${1:MediaTrack tr}, ${2:integer fx}, ${3:integer isoutput}, ${4:integer pin})$0",
        "description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits\n\n"
    },
    "TRACKFX_GETPINMAPPINGS eel2": {
        "prefix": "TrackFX_GetPinMappings",
        "scope": "eel2",
        "body": "TrackFX_GetPinMappings(${1:MediaTrack tr}, ${2:int fx}, ${3:int isoutput}, ${4:int pin}, ${5:optional int &high32})$0",
        "description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits\n\n"
    },
    "RPR_TRACKFX_GETPINMAPPINGS python": {
        "prefix": "RPR_TrackFX_GetPinMappings",
        "scope": "python",
        "body": "RPR_TrackFX_GetPinMappings(${1:tr}, ${2:fx}, ${3:isoutput}, ${4:pin}, ${5:high32OutOptional})$0",
        "description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits\n\n"
    },
    "REAPER.TRACKFX_GETPRESET lua": {
        "prefix": "reaper.TrackFX_GetPreset",
        "scope": "lua",
        "body": "reaper.TrackFX_GetPreset(${1:MediaTrack track}, ${2:integer fx}, ${3:string presetname})$0",
        "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TrackFX_SetPreset.\n\n"
    },
    "TRACKFX_GETPRESET eel2": {
        "prefix": "TrackFX_GetPreset",
        "scope": "eel2",
        "body": "TrackFX_GetPreset(${1:MediaTrack track}, ${2:int fx}, ${3:#presetname})$0",
        "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TrackFX_SetPreset.\n\n"
    },
    "RPR_TRACKFX_GETPRESET python": {
        "prefix": "RPR_TrackFX_GetPreset",
        "scope": "python",
        "body": "RPR_TrackFX_GetPreset(${1:track}, ${2:fx}, ${3:presetname}, ${4:presetname_sz})$0",
        "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TrackFX_SetPreset.\n\n"
    },
    "REAPER.TRACKFX_GETPRESETINDEX lua": {
        "prefix": "reaper.TrackFX_GetPresetIndex",
        "scope": "lua",
        "body": "reaper.TrackFX_GetPresetIndex(${1:MediaTrack track}, ${2:integer fx})$0",
        "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex\n\n"
    },
    "TRACKFX_GETPRESETINDEX eel2": {
        "prefix": "TrackFX_GetPresetIndex",
        "scope": "eel2",
        "body": "TrackFX_GetPresetIndex(${1:MediaTrack track}, ${2:int fx}, ${3:int &numberOfPresets})$0",
        "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex\n\n"
    },
    "RPR_TRACKFX_GETPRESETINDEX python": {
        "prefix": "RPR_TrackFX_GetPresetIndex",
        "scope": "python",
        "body": "RPR_TrackFX_GetPresetIndex(${1:track}, ${2:fx}, ${3:numberOfPresetsOut})$0",
        "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex\n\n"
    },
    "REAPER.TRACKFX_GETRECCHAINVISIBLE lua": {
        "prefix": "reaper.TrackFX_GetRecChainVisible",
        "scope": "lua",
        "body": "reaper.TrackFX_GetRecChainVisible(${1:MediaTrack track})$0",
        "description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "TRACKFX_GETRECCHAINVISIBLE eel2": {
        "prefix": "TrackFX_GetRecChainVisible",
        "scope": "eel2",
        "body": "TrackFX_GetRecChainVisible(${1:MediaTrack track})$0",
        "description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "RPR_TRACKFX_GETRECCHAINVISIBLE python": {
        "prefix": "RPR_TrackFX_GetRecChainVisible",
        "scope": "python",
        "body": "RPR_TrackFX_GetRecChainVisible(${1:MediaTrack track})$0",
        "description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
    },
    "REAPER.TRACKFX_GETRECCOUNT lua": {
        "prefix": "reaper.TrackFX_GetRecCount",
        "scope": "lua",
        "body": "reaper.TrackFX_GetRecCount(${1:MediaTrack track})$0",
        "description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.\n\n"
    },
    "TRACKFX_GETRECCOUNT eel2": {
        "prefix": "TrackFX_GetRecCount",
        "scope": "eel2",
        "body": "TrackFX_GetRecCount(${1:MediaTrack track})$0",
        "description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.\n\n"
    },
    "RPR_TRACKFX_GETRECCOUNT python": {
        "prefix": "RPR_TrackFX_GetRecCount",
        "scope": "python",
        "body": "RPR_TrackFX_GetRecCount(${1:MediaTrack track})$0",
        "description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.\n\n"
    },
    "REAPER.TRACKFX_GETUSERPRESETFILENAME lua": {
        "prefix": "reaper.TrackFX_GetUserPresetFilename",
        "scope": "lua",
        "body": "reaper.TrackFX_GetUserPresetFilename(${1:MediaTrack track}, ${2:integer fx}, ${3:string fn})$0",
        "description": ""
    },
    "TRACKFX_GETUSERPRESETFILENAME eel2": {
        "prefix": "TrackFX_GetUserPresetFilename",
        "scope": "eel2",
        "body": "TrackFX_GetUserPresetFilename(${1:MediaTrack track}, ${2:int fx}, ${3:#fn})$0",
        "description": ""
    },
    "RPR_TRACKFX_GETUSERPRESETFILENAME python": {
        "prefix": "RPR_TrackFX_GetUserPresetFilename",
        "scope": "python",
        "body": "RPR_TrackFX_GetUserPresetFilename(${1:track}, ${2:fx}, ${3:fn}, ${4:fn_sz})$0",
        "description": ""
    },
    "REAPER.TRACKFX_NAVIGATEPRESETS lua": {
        "prefix": "reaper.TrackFX_NavigatePresets",
        "scope": "lua",
        "body": "reaper.TrackFX_NavigatePresets(${1:MediaTrack track}, ${2:integer fx}, ${3:integer presetmove})$0",
        "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
    },
    "TRACKFX_NAVIGATEPRESETS eel2": {
        "prefix": "TrackFX_NavigatePresets",
        "scope": "eel2",
        "body": "TrackFX_NavigatePresets(${1:MediaTrack track}, ${2:int fx}, ${3:int presetmove})$0",
        "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
    },
    "RPR_TRACKFX_NAVIGATEPRESETS python": {
        "prefix": "RPR_TrackFX_NavigatePresets",
        "scope": "python",
        "body": "RPR_TrackFX_NavigatePresets(${1:MediaTrack track}, ${2:Int fx}, ${3:Int presetmove})$0",
        "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
    },
    "REAPER.TRACKFX_SETENABLED lua": {
        "prefix": "reaper.TrackFX_SetEnabled",
        "scope": "lua",
        "body": "reaper.TrackFX_SetEnabled(${1:MediaTrack track}, ${2:integer fx}, ${3:boolean enabled})$0",
        "description": "See TrackFX_GetEnabled\n\n"
    },
    "TRACKFX_SETENABLED eel2": {
        "prefix": "TrackFX_SetEnabled",
        "scope": "eel2",
        "body": "TrackFX_SetEnabled(${1:MediaTrack track}, ${2:int fx}, ${3:bool enabled})$0",
        "description": "See TrackFX_GetEnabled\n\n"
    },
    "RPR_TRACKFX_SETENABLED python": {
        "prefix": "RPR_TrackFX_SetEnabled",
        "scope": "python",
        "body": "RPR_TrackFX_SetEnabled(${1:MediaTrack track}, ${2:Int fx}, ${3:Boolean enabled})$0",
        "description": "See TrackFX_GetEnabled\n\n"
    },
    "REAPER.TRACKFX_SETEQBANDENABLED lua": {
        "prefix": "reaper.TrackFX_SetEQBandEnabled",
        "scope": "lua",
        "body": "reaper.TrackFX_SetEQBandEnabled(${1:MediaTrack track}, ${2:integer fxidx}, ${3:integer bandtype}, ${4:integer bandidx}, ${5:boolean enable})$0",
        "description": "Enable or disable a ReaEQ band.\n\nReturns false if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled.\n\n"
    },
    "TRACKFX_SETEQBANDENABLED eel2": {
        "prefix": "TrackFX_SetEQBandEnabled",
        "scope": "eel2",
        "body": "TrackFX_SetEQBandEnabled(${1:MediaTrack track}, ${2:int fxidx}, ${3:int bandtype}, ${4:int bandidx}, ${5:bool enable})$0",
        "description": "Enable or disable a ReaEQ band.\n\nReturns false if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled.\n\n"
    },
    "RPR_TRACKFX_SETEQBANDENABLED python": {
        "prefix": "RPR_TrackFX_SetEQBandEnabled",
        "scope": "python",
        "body": "RPR_TrackFX_SetEQBandEnabled(${1:MediaTrack track}, ${2:Int fxidx}, ${3:Int bandtype}, ${4:Int bandidx}, ${5:Boolean enable})$0",
        "description": "Enable or disable a ReaEQ band.\n\nReturns false if track/fxidx is not ReaEQ.\n\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled.\n\n"
    },
    "REAPER.TRACKFX_SETEQPARAM lua": {
        "prefix": "reaper.TrackFX_SetEQParam",
        "scope": "lua",
        "body": "reaper.TrackFX_SetEQParam(${1:MediaTrack track}, ${2:integer fxidx}, ${3:integer bandtype}, ${4:integer bandidx}, ${5:integer paramtype}, ${6:number val}, ${7:boolean isnorm})$0",
        "description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
    },
    "TRACKFX_SETEQPARAM eel2": {
        "prefix": "TrackFX_SetEQParam",
        "scope": "eel2",
        "body": "TrackFX_SetEQParam(${1:MediaTrack track}, ${2:int fxidx}, ${3:int bandtype}, ${4:int bandidx}, ${5:int paramtype}, ${6:val}, ${7:bool isnorm})$0",
        "description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
    },
    "RPR_TRACKFX_SETEQPARAM python": {
        "prefix": "RPR_TrackFX_SetEQParam",
        "scope": "python",
        "body": "RPR_TrackFX_SetEQParam(${1:MediaTrack track}, ${2:Int fxidx}, ${3:Int bandtype}, ${4:Int bandidx}, ${5:Int paramtype}, ${6:Float val}, ${7:Boolean isnorm})$0",
        "description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\n\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\n\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\n\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
    },
    "REAPER.TRACKFX_SETNAMEDCONFIGPARM lua": {
        "prefix": "reaper.TrackFX_SetNamedConfigParm",
        "scope": "lua",
        "body": "reaper.TrackFX_SetNamedConfigParm(${1:MediaTrack track}, ${2:integer fx}, ${3:string parmname}, ${4:string value})$0",
        "description": "sets plug-in specific named configuration value (returns true on success)\n\n"
    },
    "TRACKFX_SETNAMEDCONFIGPARM eel2": {
        "prefix": "TrackFX_SetNamedConfigParm",
        "scope": "eel2",
        "body": "TrackFX_SetNamedConfigParm(${1:MediaTrack track}, ${2:int fx}, \"${3:parmname}\", \"${4:value}\")$0",
        "description": "sets plug-in specific named configuration value (returns true on success)\n\n"
    },
    "RPR_TRACKFX_SETNAMEDCONFIGPARM python": {
        "prefix": "RPR_TrackFX_SetNamedConfigParm",
        "scope": "python",
        "body": "RPR_TrackFX_SetNamedConfigParm(${1:MediaTrack track}, ${2:Int fx}, ${3:String parmname}, ${4:String value})$0",
        "description": "sets plug-in specific named configuration value (returns true on success)\n\n"
    },
    "REAPER.TRACKFX_SETOPEN lua": {
        "prefix": "reaper.TrackFX_SetOpen",
        "scope": "lua",
        "body": "reaper.TrackFX_SetOpen(${1:MediaTrack track}, ${2:integer fx}, ${3:boolean open})$0",
        "description": "Open this FX UI. See TrackFX_GetOpen\n\n"
    },
    "TRACKFX_SETOPEN eel2": {
        "prefix": "TrackFX_SetOpen",
        "scope": "eel2",
        "body": "TrackFX_SetOpen(${1:MediaTrack track}, ${2:int fx}, ${3:bool open})$0",
        "description": "Open this FX UI. See TrackFX_GetOpen\n\n"
    },
    "RPR_TRACKFX_SETOPEN python": {
        "prefix": "RPR_TrackFX_SetOpen",
        "scope": "python",
        "body": "RPR_TrackFX_SetOpen(${1:MediaTrack track}, ${2:Int fx}, ${3:Boolean open})$0",
        "description": "Open this FX UI. See TrackFX_GetOpen\n\n"
    },
    "REAPER.TRACKFX_SETPARAM lua": {
        "prefix": "reaper.TrackFX_SetParam",
        "scope": "lua",
        "body": "reaper.TrackFX_SetParam(${1:MediaTrack track}, ${2:integer fx}, ${3:integer param}, ${4:number val})$0",
        "description": ""
    },
    "TRACKFX_SETPARAM eel2": {
        "prefix": "TrackFX_SetParam",
        "scope": "eel2",
        "body": "TrackFX_SetParam(${1:MediaTrack track}, ${2:int fx}, ${3:int param}, ${4:val})$0",
        "description": ""
    },
    "RPR_TRACKFX_SETPARAM python": {
        "prefix": "RPR_TrackFX_SetParam",
        "scope": "python",
        "body": "RPR_TrackFX_SetParam(${1:MediaTrack track}, ${2:Int fx}, ${3:Int param}, ${4:Float val})$0",
        "description": ""
    },
    "REAPER.TRACKFX_SETPARAMNORMALIZED lua": {
        "prefix": "reaper.TrackFX_SetParamNormalized",
        "scope": "lua",
        "body": "reaper.TrackFX_SetParamNormalized(${1:MediaTrack track}, ${2:integer fx}, ${3:integer param}, ${4:number value})$0",
        "description": ""
    },
    "TRACKFX_SETPARAMNORMALIZED eel2": {
        "prefix": "TrackFX_SetParamNormalized",
        "scope": "eel2",
        "body": "TrackFX_SetParamNormalized(${1:MediaTrack track}, ${2:int fx}, ${3:int param}, ${4:value})$0",
        "description": ""
    },
    "RPR_TRACKFX_SETPARAMNORMALIZED python": {
        "prefix": "RPR_TrackFX_SetParamNormalized",
        "scope": "python",
        "body": "RPR_TrackFX_SetParamNormalized(${1:MediaTrack track}, ${2:Int fx}, ${3:Int param}, ${4:Float value})$0",
        "description": ""
    },
    "REAPER.TRACKFX_SETPINMAPPINGS lua": {
        "prefix": "reaper.TrackFX_SetPinMappings",
        "scope": "lua",
        "body": "reaper.TrackFX_SetPinMappings(${1:MediaTrack tr}, ${2:integer fx}, ${3:integer isoutput}, ${4:integer pin}, ${5:integer low32bits}, ${6:integer hi32bits})$0",
        "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
    },
    "TRACKFX_SETPINMAPPINGS eel2": {
        "prefix": "TrackFX_SetPinMappings",
        "scope": "eel2",
        "body": "TrackFX_SetPinMappings(${1:MediaTrack tr}, ${2:int fx}, ${3:int isoutput}, ${4:int pin}, ${5:int low32bits}, ${6:int hi32bits})$0",
        "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
    },
    "RPR_TRACKFX_SETPINMAPPINGS python": {
        "prefix": "RPR_TrackFX_SetPinMappings",
        "scope": "python",
        "body": "RPR_TrackFX_SetPinMappings(${1:MediaTrack tr}, ${2:Int fx}, ${3:Int isoutput}, ${4:Int pin}, ${5:Int low32bits}, ${6:Int hi32bits})$0",
        "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
    },
    "REAPER.TRACKFX_SETPRESET lua": {
        "prefix": "reaper.TrackFX_SetPreset",
        "scope": "lua",
        "body": "reaper.TrackFX_SetPreset(${1:MediaTrack track}, ${2:integer fx}, ${3:string presetname})$0",
        "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset.\n\n"
    },
    "TRACKFX_SETPRESET eel2": {
        "prefix": "TrackFX_SetPreset",
        "scope": "eel2",
        "body": "TrackFX_SetPreset(${1:MediaTrack track}, ${2:int fx}, \"${3:presetname}\")$0",
        "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset.\n\n"
    },
    "RPR_TRACKFX_SETPRESET python": {
        "prefix": "RPR_TrackFX_SetPreset",
        "scope": "python",
        "body": "RPR_TrackFX_SetPreset(${1:MediaTrack track}, ${2:Int fx}, ${3:String presetname})$0",
        "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset.\n\n"
    },
    "REAPER.TRACKFX_SETPRESETBYINDEX lua": {
        "prefix": "reaper.TrackFX_SetPresetByIndex",
        "scope": "lua",
        "body": "reaper.TrackFX_SetPresetByIndex(${1:MediaTrack track}, ${2:integer fx}, ${3:integer idx})$0",
        "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex.\n\n"
    },
    "TRACKFX_SETPRESETBYINDEX eel2": {
        "prefix": "TrackFX_SetPresetByIndex",
        "scope": "eel2",
        "body": "TrackFX_SetPresetByIndex(${1:MediaTrack track}, ${2:int fx}, ${3:int idx})$0",
        "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex.\n\n"
    },
    "RPR_TRACKFX_SETPRESETBYINDEX python": {
        "prefix": "RPR_TrackFX_SetPresetByIndex",
        "scope": "python",
        "body": "RPR_TrackFX_SetPresetByIndex(${1:MediaTrack track}, ${2:Int fx}, ${3:Int idx})$0",
        "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex.\n\n"
    },
    "REAPER.TRACKFX_SHOW lua": {
        "prefix": "reaper.TrackFX_Show",
        "scope": "lua",
        "body": "reaper.TrackFX_Show(${1:MediaTrack track}, ${2:integer index}, ${3:integer showFlag})$0",
        "description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
    },
    "TRACKFX_SHOW eel2": {
        "prefix": "TrackFX_Show",
        "scope": "eel2",
        "body": "TrackFX_Show(${1:MediaTrack track}, ${2:int index}, ${3:int showFlag})$0",
        "description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
    },
    "RPR_TRACKFX_SHOW python": {
        "prefix": "RPR_TrackFX_Show",
        "scope": "python",
        "body": "RPR_TrackFX_Show(${1:MediaTrack track}, ${2:Int index}, ${3:Int showFlag})$0",
        "description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
    },
    "REAPER.TRACKLIST_ADJUSTWINDOWS lua": {
        "prefix": "reaper.TrackList_AdjustWindows",
        "scope": "lua",
        "body": "reaper.TrackList_AdjustWindows(${1:boolean isMinor})$0",
        "description": ""
    },
    "TRACKLIST_ADJUSTWINDOWS eel2": {
        "prefix": "TrackList_AdjustWindows",
        "scope": "eel2",
        "body": "TrackList_AdjustWindows(${1:bool isMinor})$0",
        "description": ""
    },
    "RPR_TRACKLIST_ADJUSTWINDOWS python": {
        "prefix": "RPR_TrackList_AdjustWindows",
        "scope": "python",
        "body": "RPR_TrackList_AdjustWindows(${1:Boolean isMinor})$0",
        "description": ""
    },
    "REAPER.TRACKLIST_UPDATEALLEXTERNALSURFACES lua": {
        "prefix": "reaper.TrackList_UpdateAllExternalSurfaces",
        "scope": "lua",
        "body": "reaper.TrackList_UpdateAllExternalSurfaces()$0",
        "description": ""
    },
    "TRACKLIST_UPDATEALLEXTERNALSURFACES eel2": {
        "prefix": "TrackList_UpdateAllExternalSurfaces",
        "scope": "eel2",
        "body": "TrackList_UpdateAllExternalSurfaces()$0",
        "description": ""
    },
    "RPR_TRACKLIST_UPDATEALLEXTERNALSURFACES python": {
        "prefix": "RPR_TrackList_UpdateAllExternalSurfaces",
        "scope": "python",
        "body": "RPR_TrackList_UpdateAllExternalSurfaces()$0",
        "description": ""
    },
    "REAPER.UNDO_BEGINBLOCK lua": {
        "prefix": "reaper.Undo_BeginBlock",
        "scope": "lua",
        "body": "reaper.Undo_BeginBlock()$0",
        "description": "call to start a new block\n\n"
    },
    "UNDO_BEGINBLOCK eel2": {
        "prefix": "Undo_BeginBlock",
        "scope": "eel2",
        "body": "Undo_BeginBlock()$0",
        "description": "call to start a new block\n\n"
    },
    "RPR_UNDO_BEGINBLOCK python": {
        "prefix": "RPR_Undo_BeginBlock",
        "scope": "python",
        "body": "RPR_Undo_BeginBlock()$0",
        "description": "call to start a new block\n\n"
    },
    "REAPER.UNDO_BEGINBLOCK2 lua": {
        "prefix": "reaper.Undo_BeginBlock2",
        "scope": "lua",
        "body": "reaper.Undo_BeginBlock2(${1:ReaProject proj})$0",
        "description": "call to start a new block\n\n"
    },
    "UNDO_BEGINBLOCK2 eel2": {
        "prefix": "Undo_BeginBlock2",
        "scope": "eel2",
        "body": "Undo_BeginBlock2(${1:ReaProject proj})$0",
        "description": "call to start a new block\n\n"
    },
    "RPR_UNDO_BEGINBLOCK2 python": {
        "prefix": "RPR_Undo_BeginBlock2",
        "scope": "python",
        "body": "RPR_Undo_BeginBlock2(${1:ReaProject proj})$0",
        "description": "call to start a new block\n\n"
    },
    "REAPER.UNDO_CANREDO2 lua": {
        "prefix": "reaper.Undo_CanRedo2",
        "scope": "lua",
        "body": "reaper.Undo_CanRedo2(${1:ReaProject proj})$0",
        "description": "returns string of next action,if able,NULL if not\n\n"
    },
    "UNDO_CANREDO2 eel2": {
        "prefix": "Undo_CanRedo2",
        "scope": "eel2",
        "body": "Undo_CanRedo2(${1:#retval}, ${2:ReaProject proj})$0",
        "description": "returns string of next action,if able,NULL if not\n\n"
    },
    "RPR_UNDO_CANREDO2 python": {
        "prefix": "RPR_Undo_CanRedo2",
        "scope": "python",
        "body": "RPR_Undo_CanRedo2(${1:ReaProject proj})$0",
        "description": "returns string of next action,if able,NULL if not\n\n"
    },
    "REAPER.UNDO_CANUNDO2 lua": {
        "prefix": "reaper.Undo_CanUndo2",
        "scope": "lua",
        "body": "reaper.Undo_CanUndo2(${1:ReaProject proj})$0",
        "description": "returns string of last action,if able,NULL if not\n\n"
    },
    "UNDO_CANUNDO2 eel2": {
        "prefix": "Undo_CanUndo2",
        "scope": "eel2",
        "body": "Undo_CanUndo2(${1:#retval}, ${2:ReaProject proj})$0",
        "description": "returns string of last action,if able,NULL if not\n\n"
    },
    "RPR_UNDO_CANUNDO2 python": {
        "prefix": "RPR_Undo_CanUndo2",
        "scope": "python",
        "body": "RPR_Undo_CanUndo2(${1:ReaProject proj})$0",
        "description": "returns string of last action,if able,NULL if not\n\n"
    },
    "REAPER.UNDO_DOREDO2 lua": {
        "prefix": "reaper.Undo_DoRedo2",
        "scope": "lua",
        "body": "reaper.Undo_DoRedo2(${1:ReaProject proj})$0",
        "description": "nonzero if success\n\n"
    },
    "UNDO_DOREDO2 eel2": {
        "prefix": "Undo_DoRedo2",
        "scope": "eel2",
        "body": "Undo_DoRedo2(${1:ReaProject proj})$0",
        "description": "nonzero if success\n\n"
    },
    "RPR_UNDO_DOREDO2 python": {
        "prefix": "RPR_Undo_DoRedo2",
        "scope": "python",
        "body": "RPR_Undo_DoRedo2(${1:ReaProject proj})$0",
        "description": "nonzero if success\n\n"
    },
    "REAPER.UNDO_DOUNDO2 lua": {
        "prefix": "reaper.Undo_DoUndo2",
        "scope": "lua",
        "body": "reaper.Undo_DoUndo2(${1:ReaProject proj})$0",
        "description": "nonzero if success\n\n"
    },
    "UNDO_DOUNDO2 eel2": {
        "prefix": "Undo_DoUndo2",
        "scope": "eel2",
        "body": "Undo_DoUndo2(${1:ReaProject proj})$0",
        "description": "nonzero if success\n\n"
    },
    "RPR_UNDO_DOUNDO2 python": {
        "prefix": "RPR_Undo_DoUndo2",
        "scope": "python",
        "body": "RPR_Undo_DoUndo2(${1:ReaProject proj})$0",
        "description": "nonzero if success\n\n"
    },
    "REAPER.UNDO_ENDBLOCK lua": {
        "prefix": "reaper.Undo_EndBlock",
        "scope": "lua",
        "body": "reaper.Undo_EndBlock(${1:string descchange}, ${2:integer extraflags})$0",
        "description": "call to end the block,with extra flags if any,and a description\n\n"
    },
    "UNDO_ENDBLOCK eel2": {
        "prefix": "Undo_EndBlock",
        "scope": "eel2",
        "body": "Undo_EndBlock(\"${1:descchange}\", ${2:int extraflags})$0",
        "description": "call to end the block,with extra flags if any,and a description\n\n"
    },
    "RPR_UNDO_ENDBLOCK python": {
        "prefix": "RPR_Undo_EndBlock",
        "scope": "python",
        "body": "RPR_Undo_EndBlock(${1:String descchange}, ${2:Int extraflags})$0",
        "description": "call to end the block,with extra flags if any,and a description\n\n"
    },
    "REAPER.UNDO_ENDBLOCK2 lua": {
        "prefix": "reaper.Undo_EndBlock2",
        "scope": "lua",
        "body": "reaper.Undo_EndBlock2(${1:ReaProject proj}, ${2:string descchange}, ${3:integer extraflags})$0",
        "description": "call to end the block,with extra flags if any,and a description\n\n"
    },
    "UNDO_ENDBLOCK2 eel2": {
        "prefix": "Undo_EndBlock2",
        "scope": "eel2",
        "body": "Undo_EndBlock2(${1:ReaProject proj}, \"${2:descchange}\", ${3:int extraflags})$0",
        "description": "call to end the block,with extra flags if any,and a description\n\n"
    },
    "RPR_UNDO_ENDBLOCK2 python": {
        "prefix": "RPR_Undo_EndBlock2",
        "scope": "python",
        "body": "RPR_Undo_EndBlock2(${1:ReaProject proj}, ${2:String descchange}, ${3:Int extraflags})$0",
        "description": "call to end the block,with extra flags if any,and a description\n\n"
    },
    "REAPER.UNDO_ONSTATECHANGE lua": {
        "prefix": "reaper.Undo_OnStateChange",
        "scope": "lua",
        "body": "reaper.Undo_OnStateChange(${1:string descchange})$0",
        "description": "limited state change to items\n\n"
    },
    "UNDO_ONSTATECHANGE eel2": {
        "prefix": "Undo_OnStateChange",
        "scope": "eel2",
        "body": "Undo_OnStateChange(\"${1:descchange}\")$0",
        "description": "limited state change to items\n\n"
    },
    "RPR_UNDO_ONSTATECHANGE python": {
        "prefix": "RPR_Undo_OnStateChange",
        "scope": "python",
        "body": "RPR_Undo_OnStateChange(${1:String descchange})$0",
        "description": "limited state change to items\n\n"
    },
    "REAPER.UNDO_ONSTATECHANGE2 lua": {
        "prefix": "reaper.Undo_OnStateChange2",
        "scope": "lua",
        "body": "reaper.Undo_OnStateChange2(${1:ReaProject proj}, ${2:string descchange})$0",
        "description": "limited state change to items\n\n"
    },
    "UNDO_ONSTATECHANGE2 eel2": {
        "prefix": "Undo_OnStateChange2",
        "scope": "eel2",
        "body": "Undo_OnStateChange2(${1:ReaProject proj}, \"${2:descchange}\")$0",
        "description": "limited state change to items\n\n"
    },
    "RPR_UNDO_ONSTATECHANGE2 python": {
        "prefix": "RPR_Undo_OnStateChange2",
        "scope": "python",
        "body": "RPR_Undo_OnStateChange2(${1:ReaProject proj}, ${2:String descchange})$0",
        "description": "limited state change to items\n\n"
    },
    "REAPER.UNDO_ONSTATECHANGE_ITEM lua": {
        "prefix": "reaper.Undo_OnStateChange_Item",
        "scope": "lua",
        "body": "reaper.Undo_OnStateChange_Item(${1:ReaProject proj}, ${2:string name}, ${3:MediaItem item})$0",
        "description": ""
    },
    "UNDO_ONSTATECHANGE_ITEM eel2": {
        "prefix": "Undo_OnStateChange_Item",
        "scope": "eel2",
        "body": "Undo_OnStateChange_Item(${1:ReaProject proj}, \"${2:name}\", ${3:MediaItem item})$0",
        "description": ""
    },
    "RPR_UNDO_ONSTATECHANGE_ITEM python": {
        "prefix": "RPR_Undo_OnStateChange_Item",
        "scope": "python",
        "body": "RPR_Undo_OnStateChange_Item(${1:ReaProject proj}, ${2:String name}, ${3:MediaItem item})$0",
        "description": ""
    },
    "REAPER.UNDO_ONSTATECHANGEEX lua": {
        "prefix": "reaper.Undo_OnStateChangeEx",
        "scope": "lua",
        "body": "reaper.Undo_OnStateChangeEx(${1:string descchange}, ${2:integer whichStates}, ${3:integer trackparm})$0",
        "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
    },
    "UNDO_ONSTATECHANGEEX eel2": {
        "prefix": "Undo_OnStateChangeEx",
        "scope": "eel2",
        "body": "Undo_OnStateChangeEx(\"${1:descchange}\", ${2:int whichStates}, ${3:int trackparm})$0",
        "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
    },
    "RPR_UNDO_ONSTATECHANGEEX python": {
        "prefix": "RPR_Undo_OnStateChangeEx",
        "scope": "python",
        "body": "RPR_Undo_OnStateChangeEx(${1:String descchange}, ${2:Int whichStates}, ${3:Int trackparm})$0",
        "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
    },
    "REAPER.UNDO_ONSTATECHANGEEX2 lua": {
        "prefix": "reaper.Undo_OnStateChangeEx2",
        "scope": "lua",
        "body": "reaper.Undo_OnStateChangeEx2(${1:ReaProject proj}, ${2:string descchange}, ${3:integer whichStates}, ${4:integer trackparm})$0",
        "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
    },
    "UNDO_ONSTATECHANGEEX2 eel2": {
        "prefix": "Undo_OnStateChangeEx2",
        "scope": "eel2",
        "body": "Undo_OnStateChangeEx2(${1:ReaProject proj}, \"${2:descchange}\", ${3:int whichStates}, ${4:int trackparm})$0",
        "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
    },
    "RPR_UNDO_ONSTATECHANGEEX2 python": {
        "prefix": "RPR_Undo_OnStateChangeEx2",
        "scope": "python",
        "body": "RPR_Undo_OnStateChangeEx2(${1:ReaProject proj}, ${2:String descchange}, ${3:Int whichStates}, ${4:Int trackparm})$0",
        "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
    },
    "REAPER.UPDATEARRANGE lua": {
        "prefix": "reaper.UpdateArrange",
        "scope": "lua",
        "body": "reaper.UpdateArrange()$0",
        "description": "Redraw the arrange view\n\n"
    },
    "UPDATEARRANGE eel2": {
        "prefix": "UpdateArrange",
        "scope": "eel2",
        "body": "UpdateArrange()$0",
        "description": "Redraw the arrange view\n\n"
    },
    "RPR_UPDATEARRANGE python": {
        "prefix": "RPR_UpdateArrange",
        "scope": "python",
        "body": "RPR_UpdateArrange()$0",
        "description": "Redraw the arrange view\n\n"
    },
    "REAPER.UPDATEITEMINPROJECT lua": {
        "prefix": "reaper.UpdateItemInProject",
        "scope": "lua",
        "body": "reaper.UpdateItemInProject(${1:MediaItem item})$0",
        "description": ""
    },
    "UPDATEITEMINPROJECT eel2": {
        "prefix": "UpdateItemInProject",
        "scope": "eel2",
        "body": "UpdateItemInProject(${1:MediaItem item})$0",
        "description": ""
    },
    "RPR_UPDATEITEMINPROJECT python": {
        "prefix": "RPR_UpdateItemInProject",
        "scope": "python",
        "body": "RPR_UpdateItemInProject(${1:MediaItem item})$0",
        "description": ""
    },
    "REAPER.UPDATETIMELINE lua": {
        "prefix": "reaper.UpdateTimeline",
        "scope": "lua",
        "body": "reaper.UpdateTimeline()$0",
        "description": "Redraw the arrange view and ruler\n\n"
    },
    "UPDATETIMELINE eel2": {
        "prefix": "UpdateTimeline",
        "scope": "eel2",
        "body": "UpdateTimeline()$0",
        "description": "Redraw the arrange view and ruler\n\n"
    },
    "RPR_UPDATETIMELINE python": {
        "prefix": "RPR_UpdateTimeline",
        "scope": "python",
        "body": "RPR_UpdateTimeline()$0",
        "description": "Redraw the arrange view and ruler\n\n"
    },
    "REAPER.VALIDATEPTR lua": {
        "prefix": "reaper.ValidatePtr",
        "scope": "lua",
        "body": "reaper.ValidatePtr(${1:identifier pointer}, ${2:string ctypename})$0",
        "description": "see ValidatePtr2\n\n"
    },
    "VALIDATEPTR eel2": {
        "prefix": "ValidatePtr",
        "scope": "eel2",
        "body": "ValidatePtr(${1:void* pointer}, \"${2:ctypename}\")$0",
        "description": "see ValidatePtr2\n\n"
    },
    "RPR_VALIDATEPTR python": {
        "prefix": "RPR_ValidatePtr",
        "scope": "python",
        "body": "RPR_ValidatePtr(${1:void pointer}, ${2:String ctypename})$0",
        "description": "see ValidatePtr2\n\n"
    },
    "REAPER.VALIDATEPTR2 lua": {
        "prefix": "reaper.ValidatePtr2",
        "scope": "lua",
        "body": "reaper.ValidatePtr2(${1:ReaProject proj}, ${2:identifier pointer}, ${3:string ctypename})$0",
        "description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.\n\n"
    },
    "VALIDATEPTR2 eel2": {
        "prefix": "ValidatePtr2",
        "scope": "eel2",
        "body": "ValidatePtr2(${1:ReaProject proj}, ${2:void* pointer}, \"${3:ctypename}\")$0",
        "description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.\n\n"
    },
    "RPR_VALIDATEPTR2 python": {
        "prefix": "RPR_ValidatePtr2",
        "scope": "python",
        "body": "RPR_ValidatePtr2(${1:ReaProject proj}, ${2:void pointer}, ${3:String ctypename})$0",
        "description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.\n\n"
    },
    "REAPER.VIEWPREFS lua": {
        "prefix": "reaper.ViewPrefs",
        "scope": "lua",
        "body": "reaper.ViewPrefs(${1:integer page}, ${2:string pageByName})$0",
        "description": "Opens the prefs to a page, use pageByName if page is 0.\n\n"
    },
    "VIEWPREFS eel2": {
        "prefix": "ViewPrefs",
        "scope": "eel2",
        "body": "ViewPrefs(${1:int page}, \"${2:pageByName}\")$0",
        "description": "Opens the prefs to a page, use pageByName if page is 0.\n\n"
    },
    "RPR_VIEWPREFS python": {
        "prefix": "RPR_ViewPrefs",
        "scope": "python",
        "body": "RPR_ViewPrefs(${1:Int page}, ${2:String pageByName})$0",
        "description": "Opens the prefs to a page, use pageByName if page is 0.\n\n"
    },
    "REAPER.BR_ENVALLOC lua": {
        "prefix": "reaper.BR_EnvAlloc",
        "scope": "lua",
        "body": "reaper.BR_EnvAlloc(${1:TrackEnvelope envelope}, ${2:boolean takeEnvelopesUseProjectTime})$0",
        "description": "[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.\n\ntakeEnvelopesUseProjectTime: take envelope points' positions are counted from take position, not project start time. If you want to work with project time instead, pass this as true.\n\nFor further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.\n\n"
    },
    "EXTENSION_API eel2": {
        "prefix": "extension_api",
        "scope": "eel2",
        "body": "extension_api(\"${1:function_name}\", ${2:[,...]})$0",
        "description": "Used to call functions exported by extension plugins. The first parameter must be the exported function name, then its own parameters (as if the function was called directly).\n\n"
    },
    "BR_ENVALLOC python": {
        "prefix": "BR_EnvAlloc",
        "scope": "python",
        "body": "BR_EnvAlloc(${1:TrackEnvelope envelope}, ${2:Boolean takeEnvelopesUseProjectTime})$0",
        "description": "[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.\n\ntakeEnvelopesUseProjectTime: take envelope points' positions are counted from take position, not project start time. If you want to work with project time instead, pass this as true.\n\nFor further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.\n\n"
    },
    "REAPER.BR_ENVCOUNTPOINTS lua": {
        "prefix": "reaper.BR_EnvCountPoints",
        "scope": "lua",
        "body": "reaper.BR_EnvCountPoints(${1:BR_Envelope envelope})$0",
        "description": "[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.\n\n"
    },
    "BR_ENVCOUNTPOINTS python": {
        "prefix": "BR_EnvCountPoints",
        "scope": "python",
        "body": "BR_EnvCountPoints(${1:BR_Envelope envelope})$0",
        "description": "[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.\n\n"
    },
    "REAPER.BR_ENVDELETEPOINT lua": {
        "prefix": "reaper.BR_EnvDeletePoint",
        "scope": "lua",
        "body": "reaper.BR_EnvDeletePoint(${1:BR_Envelope envelope}, ${2:integer id})$0",
        "description": "[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success.\n\n"
    },
    "BR_ENVDELETEPOINT python": {
        "prefix": "BR_EnvDeletePoint",
        "scope": "python",
        "body": "BR_EnvDeletePoint(${1:BR_Envelope envelope}, ${2:Int id})$0",
        "description": "[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success.\n\n"
    },
    "REAPER.BR_ENVFIND lua": {
        "prefix": "reaper.BR_EnvFind",
        "scope": "lua",
        "body": "reaper.BR_EnvFind(${1:BR_Envelope envelope}, ${2:number position}, ${3:number delta})$0",
        "description": "[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc. Pass delta > 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
    },
    "BR_ENVFIND python": {
        "prefix": "BR_EnvFind",
        "scope": "python",
        "body": "BR_EnvFind(${1:BR_Envelope envelope}, ${2:Float position}, ${3:Float delta})$0",
        "description": "[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc. Pass delta > 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
    },
    "REAPER.BR_ENVFINDNEXT lua": {
        "prefix": "reaper.BR_EnvFindNext",
        "scope": "lua",
        "body": "reaper.BR_EnvFindNext(${1:BR_Envelope envelope}, ${2:number position})$0",
        "description": "[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
    },
    "BR_ENVFINDNEXT python": {
        "prefix": "BR_EnvFindNext",
        "scope": "python",
        "body": "BR_EnvFindNext(${1:BR_Envelope envelope}, ${2:Float position})$0",
        "description": "[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
    },
    "REAPER.BR_ENVFINDPREVIOUS lua": {
        "prefix": "reaper.BR_EnvFindPrevious",
        "scope": "lua",
        "body": "reaper.BR_EnvFindPrevious(${1:BR_Envelope envelope}, ${2:number position})$0",
        "description": "[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
    },
    "BR_ENVFINDPREVIOUS python": {
        "prefix": "BR_EnvFindPrevious",
        "scope": "python",
        "body": "BR_EnvFindPrevious(${1:BR_Envelope envelope}, ${2:Float position})$0",
        "description": "[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
    },
    "REAPER.BR_ENVFREE lua": {
        "prefix": "reaper.BR_EnvFree",
        "scope": "lua",
        "body": "reaper.BR_EnvFree(${1:BR_Envelope envelope}, ${2:boolean commit})$0",
        "description": "[BR] Free envelope object allocated with BR_EnvAlloc and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false.\n\n"
    },
    "BR_ENVFREE python": {
        "prefix": "BR_EnvFree",
        "scope": "python",
        "body": "BR_EnvFree(${1:BR_Envelope envelope}, ${2:Boolean commit})$0",
        "description": "[BR] Free envelope object allocated with BR_EnvAlloc and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false.\n\n"
    },
    "REAPER.BR_ENVGETPARENTTAKE lua": {
        "prefix": "reaper.BR_EnvGetParentTake",
        "scope": "lua",
        "body": "reaper.BR_EnvGetParentTake(${1:BR_Envelope envelope})$0",
        "description": "[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.\n\n"
    },
    "BR_ENVGETPARENTTAKE python": {
        "prefix": "BR_EnvGetParentTake",
        "scope": "python",
        "body": "BR_EnvGetParentTake(${1:BR_Envelope envelope})$0",
        "description": "[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.\n\n"
    },
    "REAPER.BR_ENVGETPARENTTRACK lua": {
        "prefix": "reaper.BR_EnvGetParentTrack",
        "scope": "lua",
        "body": "reaper.BR_EnvGetParentTrack(${1:BR_Envelope envelope})$0",
        "description": "[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.\n\n"
    },
    "BR_ENVGETPARENTTRACK python": {
        "prefix": "BR_EnvGetParentTrack",
        "scope": "python",
        "body": "BR_EnvGetParentTrack(${1:BR_Envelope envelope})$0",
        "description": "[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.\n\n"
    },
    "REAPER.BR_ENVGETPOINT lua": {
        "prefix": "reaper.BR_EnvGetPoint",
        "scope": "lua",
        "body": "reaper.BR_EnvGetPoint(${1:BR_Envelope envelope}, ${2:integer id})$0",
        "description": "[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success.\n\n"
    },
    "BR_ENVGETPOINT python": {
        "prefix": "BR_EnvGetPoint",
        "scope": "python",
        "body": "BR_EnvGetPoint(${1:envelope}, ${2:id}, ${3:positionOut}, ${4:valueOut}, ${5:shapeOut}, ${6:selectedOut}, ${7:bezierOut})$0",
        "description": "[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success.\n\n"
    },
    "REAPER.BR_ENVGETPROPERTIES lua": {
        "prefix": "reaper.BR_EnvGetProperties",
        "scope": "lua",
        "body": "reaper.BR_EnvGetProperties(${1:BR_Envelope envelope})$0",
        "description": "[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.\n\nactive: true if envelope is active\n\nvisible: true if envelope is visible\n\narmed: true if envelope is armed\n\ninLane: true if envelope has it's own envelope lane\n\nlaneHeight: envelope lane override height. 0 for none, otherwise size in pixels\n\ndefaultShape: default point shape: 0->Linear, 1->Square, 2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier\n\nminValue: minimum envelope value\n\nmaxValue: maximum envelope value\n\ntype: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan, 3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute, 7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter\n\nfaderScaling: true if envelope uses fader scaling\n\n"
    },
    "BR_ENVGETPROPERTIES python": {
        "prefix": "BR_EnvGetProperties",
        "scope": "python",
        "body": "BR_EnvGetProperties(${1:envelope}, ${2:activeOut}, ${3:visibleOut}, ${4:armedOut}, ${5:inLaneOut}, ${6:laneHeightOut}, ${7:defaultShapeOut}, ${8:minValueOut}, ${9:maxValueOut}, ${10:centerValueOut}, ${11:typeOut}, ${12:faderScalingOut})$0",
        "description": "[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.\n\nactive: true if envelope is active\n\nvisible: true if envelope is visible\n\narmed: true if envelope is armed\n\ninLane: true if envelope has it's own envelope lane\n\nlaneHeight: envelope lane override height. 0 for none, otherwise size in pixels\n\ndefaultShape: default point shape: 0->Linear, 1->Square, 2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier\n\nminValue: minimum envelope value\n\nmaxValue: maximum envelope value\n\ntype: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan, 3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute, 7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter\n\nfaderScaling: true if envelope uses fader scaling\n\n"
    },
    "REAPER.BR_ENVSETPOINT lua": {
        "prefix": "reaper.BR_EnvSetPoint",
        "scope": "lua",
        "body": "reaper.BR_EnvSetPoint(${1:BR_Envelope envelope}, ${2:integer id}, ${3:number position}, ${4:number value}, ${5:integer shape}, ${6:boolean selected}, ${7:number bezier})$0",
        "description": "[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc. To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see BR_EnvSortPoints.\n\nReturns true on success.\n\n"
    },
    "BR_ENVSETPOINT python": {
        "prefix": "BR_EnvSetPoint",
        "scope": "python",
        "body": "BR_EnvSetPoint(${1:BR_Envelope envelope}, ${2:Int id}, ${3:Float position}, ${4:Float value}, ${5:Int shape}, ${6:Boolean selected}, ${7:Float bezier})$0",
        "description": "[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc. To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see BR_EnvSortPoints.\n\nReturns true on success.\n\n"
    },
    "REAPER.BR_ENVSETPROPERTIES lua": {
        "prefix": "reaper.BR_EnvSetProperties",
        "scope": "lua",
        "body": "reaper.BR_EnvSetProperties(${1:BR_Envelope envelope}, ${2:boolean active}, ${3:boolean visible}, ${4:boolean armed}, ${5:boolean inLane}, ${6:integer laneHeight}, ${7:integer defaultShape}, ${8:boolean faderScaling})$0",
        "description": "[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.\n\n"
    },
    "BR_ENVSETPROPERTIES python": {
        "prefix": "BR_EnvSetProperties",
        "scope": "python",
        "body": "BR_EnvSetProperties(${1:BR_Envelope envelope}, ${2:Boolean active}, ${3:Boolean visible}, ${4:Boolean armed}, ${5:Boolean inLane}, ${6:Int laneHeight}, ${7:Int defaultShape}, ${8:Boolean faderScaling})$0",
        "description": "[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.\n\n"
    },
    "REAPER.BR_ENVSORTPOINTS lua": {
        "prefix": "reaper.BR_EnvSortPoints",
        "scope": "lua",
        "body": "reaper.BR_EnvSortPoints(${1:BR_Envelope envelope})$0",
        "description": "[BR] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.\n\n"
    },
    "BR_ENVSORTPOINTS python": {
        "prefix": "BR_EnvSortPoints",
        "scope": "python",
        "body": "BR_EnvSortPoints(${1:BR_Envelope envelope})$0",
        "description": "[BR] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.\n\n"
    },
    "REAPER.BR_ENVVALUEATPOS lua": {
        "prefix": "reaper.BR_EnvValueAtPos",
        "scope": "lua",
        "body": "reaper.BR_EnvValueAtPos(${1:BR_Envelope envelope}, ${2:number position})$0",
        "description": "[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.\n\n"
    },
    "BR_ENVVALUEATPOS python": {
        "prefix": "BR_EnvValueAtPos",
        "scope": "python",
        "body": "BR_EnvValueAtPos(${1:BR_Envelope envelope}, ${2:Float position})$0",
        "description": "[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.\n\n"
    },
    "REAPER.BR_GETARRANGEVIEW lua": {
        "prefix": "reaper.BR_GetArrangeView",
        "scope": "lua",
        "body": "reaper.BR_GetArrangeView(${1:ReaProject proj})$0",
        "description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView.\n\n"
    },
    "BR_GETARRANGEVIEW python": {
        "prefix": "BR_GetArrangeView",
        "scope": "python",
        "body": "BR_GetArrangeView(${1:proj}, ${2:startTimeOut}, ${3:endTimeOut})$0",
        "description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView.\n\n"
    },
    "REAPER.BR_GETCLOSESTGRIDDIVISION lua": {
        "prefix": "reaper.BR_GetClosestGridDivision",
        "scope": "lua",
        "body": "reaper.BR_GetClosestGridDivision(${1:number position})$0",
        "description": "[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.\n\n"
    },
    "BR_GETCLOSESTGRIDDIVISION python": {
        "prefix": "BR_GetClosestGridDivision",
        "scope": "python",
        "body": "BR_GetClosestGridDivision(${1:Float position})$0",
        "description": "[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.\n\n"
    },
    "REAPER.BR_GETCURRENTTHEME lua": {
        "prefix": "reaper.BR_GetCurrentTheme",
        "scope": "lua",
        "body": "reaper.BR_GetCurrentTheme()$0",
        "description": "[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension\n\n"
    },
    "BR_GETCURRENTTHEME python": {
        "prefix": "BR_GetCurrentTheme",
        "scope": "python",
        "body": "BR_GetCurrentTheme(${1:themePathOut}, ${2:themePathOut_sz}, ${3:themeNameOut}, ${4:themeNameOut_sz})$0",
        "description": "[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension\n\n"
    },
    "REAPER.BR_GETMEDIAITEMBYGUID lua": {
        "prefix": "reaper.BR_GetMediaItemByGUID",
        "scope": "lua",
        "body": "reaper.BR_GetMediaItemByGUID(${1:ReaProject proj}, ${2:string guidStringIn})$0",
        "description": "[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID.\n\n"
    },
    "BR_GETMEDIAITEMBYGUID python": {
        "prefix": "BR_GetMediaItemByGUID",
        "scope": "python",
        "body": "BR_GetMediaItemByGUID(${1:ReaProject proj}, ${2:String guidStringIn})$0",
        "description": "[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID.\n\n"
    },
    "REAPER.BR_GETMEDIAITEMGUID lua": {
        "prefix": "reaper.BR_GetMediaItemGUID",
        "scope": "lua",
        "body": "reaper.BR_GetMediaItemGUID(${1:MediaItem item})$0",
        "description": "[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID.\n\n"
    },
    "BR_GETMEDIAITEMGUID python": {
        "prefix": "BR_GetMediaItemGUID",
        "scope": "python",
        "body": "BR_GetMediaItemGUID(${1:item}, ${2:guidStringOut}, ${3:guidStringOut_sz})$0",
        "description": "[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID.\n\n"
    },
    "REAPER.BR_GETMEDIAITEMIMAGERESOURCE lua": {
        "prefix": "reaper.BR_GetMediaItemImageResource",
        "scope": "lua",
        "body": "reaper.BR_GetMediaItemImageResource(${1:MediaItem item})$0",
        "description": "[BR] Get currently loaded image resource and it's flags for a given item. Returns false if there is no image resource set. To set image resource, see BR_SetMediaItemImageResource.\n\n"
    },
    "BR_GETMEDIAITEMIMAGERESOURCE python": {
        "prefix": "BR_GetMediaItemImageResource",
        "scope": "python",
        "body": "BR_GetMediaItemImageResource(${1:item}, ${2:imageOut}, ${3:imageOut_sz}, ${4:imageFlagsOut})$0",
        "description": "[BR] Get currently loaded image resource and it's flags for a given item. Returns false if there is no image resource set. To set image resource, see BR_SetMediaItemImageResource.\n\n"
    },
    "REAPER.BR_GETMEDIAITEMTAKEGUID lua": {
        "prefix": "reaper.BR_GetMediaItemTakeGUID",
        "scope": "lua",
        "body": "reaper.BR_GetMediaItemTakeGUID(${1:MediaItem_Take take})$0",
        "description": "[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID.\n\n"
    },
    "BR_GETMEDIAITEMTAKEGUID python": {
        "prefix": "BR_GetMediaItemTakeGUID",
        "scope": "python",
        "body": "BR_GetMediaItemTakeGUID(${1:take}, ${2:guidStringOut}, ${3:guidStringOut_sz})$0",
        "description": "[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID.\n\n"
    },
    "REAPER.BR_GETMEDIASOURCEPROPERTIES lua": {
        "prefix": "reaper.BR_GetMediaSourceProperties",
        "scope": "lua",
        "body": "reaper.BR_GetMediaSourceProperties(${1:MediaItem_Take take})$0",
        "description": "[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).\n\nTo set source properties, see BR_SetMediaSourceProperties.\n\n"
    },
    "BR_GETMEDIASOURCEPROPERTIES python": {
        "prefix": "BR_GetMediaSourceProperties",
        "scope": "python",
        "body": "BR_GetMediaSourceProperties(${1:take}, ${2:sectionOut}, ${3:startOut}, ${4:lengthOut}, ${5:fadeOut}, ${6:reverseOut})$0",
        "description": "[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).\n\nTo set source properties, see BR_SetMediaSourceProperties.\n\n"
    },
    "REAPER.BR_GETMEDIATRACKBYGUID lua": {
        "prefix": "reaper.BR_GetMediaTrackByGUID",
        "scope": "lua",
        "body": "reaper.BR_GetMediaTrackByGUID(${1:ReaProject proj}, ${2:string guidStringIn})$0",
        "description": "[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see BR_GetMediaTrackGUID.\n\n"
    },
    "BR_GETMEDIATRACKBYGUID python": {
        "prefix": "BR_GetMediaTrackByGUID",
        "scope": "python",
        "body": "BR_GetMediaTrackByGUID(${1:ReaProject proj}, ${2:String guidStringIn})$0",
        "description": "[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see BR_GetMediaTrackGUID.\n\n"
    },
    "REAPER.BR_GETMEDIATRACKFREEZECOUNT lua": {
        "prefix": "reaper.BR_GetMediaTrackFreezeCount",
        "scope": "lua",
        "body": "reaper.BR_GetMediaTrackFreezeCount(${1:MediaTrack track})$0",
        "description": "[BR] Get media track freeze count (if track isn't frozen at all, returns 0).\n\n"
    },
    "BR_GETMEDIATRACKFREEZECOUNT python": {
        "prefix": "BR_GetMediaTrackFreezeCount",
        "scope": "python",
        "body": "BR_GetMediaTrackFreezeCount(${1:MediaTrack track})$0",
        "description": "[BR] Get media track freeze count (if track isn't frozen at all, returns 0).\n\n"
    },
    "REAPER.BR_GETMEDIATRACKGUID lua": {
        "prefix": "reaper.BR_GetMediaTrackGUID",
        "scope": "lua",
        "body": "reaper.BR_GetMediaTrackGUID(${1:MediaTrack track})$0",
        "description": "[BR] Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID.\n\n"
    },
    "BR_GETMEDIATRACKGUID python": {
        "prefix": "BR_GetMediaTrackGUID",
        "scope": "python",
        "body": "BR_GetMediaTrackGUID(${1:track}, ${2:guidStringOut}, ${3:guidStringOut_sz})$0",
        "description": "[BR] Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID.\n\n"
    },
    "REAPER.BR_GETMEDIATRACKLAYOUTS lua": {
        "prefix": "reaper.BR_GetMediaTrackLayouts",
        "scope": "lua",
        "body": "reaper.BR_GetMediaTrackLayouts(${1:MediaTrack track})$0",
        "description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string (\"\") means that layout is set to the default layout. To set media track layouts, see BR_SetMediaTrackLayouts.\n\n"
    },
    "BR_GETMEDIATRACKLAYOUTS python": {
        "prefix": "BR_GetMediaTrackLayouts",
        "scope": "python",
        "body": "BR_GetMediaTrackLayouts(${1:track}, ${2:mcpLayoutNameOut}, ${3:mcpLayoutNameOut_sz}, ${4:tcpLayoutNameOut}, ${5:tcpLayoutNameOut_sz})$0",
        "description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string (\"\") means that layout is set to the default layout. To set media track layouts, see BR_SetMediaTrackLayouts.\n\n"
    },
    "REAPER.BR_GETMEDIATRACKSENDINFO_ENVELOPE lua": {
        "prefix": "reaper.BR_GetMediaTrackSendInfo_Envelope",
        "scope": "lua",
        "body": "reaper.BR_GetMediaTrackSendInfo_Envelope(${1:MediaTrack track}, ${2:integer category}, ${3:integer sendidx}, ${4:integer envelopeType})$0",
        "description": "[BR] Get track envelope for send/receive/hardware output.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\n\nenvelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)\n\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track.\n\n"
    },
    "BR_GETMEDIATRACKSENDINFO_ENVELOPE python": {
        "prefix": "BR_GetMediaTrackSendInfo_Envelope",
        "scope": "python",
        "body": "BR_GetMediaTrackSendInfo_Envelope(${1:MediaTrack track}, ${2:Int category}, ${3:Int sendidx}, ${4:Int envelopeType})$0",
        "description": "[BR] Get track envelope for send/receive/hardware output.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\n\nenvelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)\n\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track.\n\n"
    },
    "REAPER.BR_GETMEDIATRACKSENDINFO_TRACK lua": {
        "prefix": "reaper.BR_GetMediaTrackSendInfo_Track",
        "scope": "lua",
        "body": "reaper.BR_GetMediaTrackSendInfo_Track(${1:MediaTrack track}, ${2:integer category}, ${3:integer sendidx}, ${4:integer trackType})$0",
        "description": "[BR] Get source or destination media track for send/receive.\n\ncategory is <0 for receives, 0=sends\n\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives)\n\ntrackType determines which track is returned (0=source track, 1=destination track)\n\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope.\n\n"
    },
    "BR_GETMEDIATRACKSENDINFO_TRACK python": {
        "prefix": "BR_GetMediaTrackSendInfo_Track",
        "scope": "python",
        "body": "BR_GetMediaTrackSendInfo_Track(${1:MediaTrack track}, ${2:Int category}, ${3:Int sendidx}, ${4:Int trackType})$0",
        "description": "[BR] Get source or destination media track for send/receive.\n\ncategory is <0 for receives, 0=sends\n\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives)\n\ntrackType determines which track is returned (0=source track, 1=destination track)\n\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope.\n\n"
    },
    "REAPER.BR_GETMIDISOURCELENPPQ lua": {
        "prefix": "reaper.BR_GetMidiSourceLenPPQ",
        "scope": "lua",
        "body": "reaper.BR_GetMidiSourceLenPPQ(${1:MediaItem_Take take})$0",
        "description": "[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.\n\n"
    },
    "BR_GETMIDISOURCELENPPQ python": {
        "prefix": "BR_GetMidiSourceLenPPQ",
        "scope": "python",
        "body": "BR_GetMidiSourceLenPPQ(${1:MediaItem_Take take})$0",
        "description": "[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.\n\n"
    },
    "REAPER.BR_GETMIDITAKEPOOLGUID lua": {
        "prefix": "reaper.BR_GetMidiTakePoolGUID",
        "scope": "lua",
        "body": "reaper.BR_GetMidiTakePoolGUID(${1:MediaItem_Take take})$0",
        "description": "[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.\n\n"
    },
    "BR_GETMIDITAKEPOOLGUID python": {
        "prefix": "BR_GetMidiTakePoolGUID",
        "scope": "python",
        "body": "BR_GetMidiTakePoolGUID(${1:take}, ${2:guidStringOut}, ${3:guidStringOut_sz})$0",
        "description": "[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.\n\n"
    },
    "REAPER.BR_GETMIDITAKETEMPOINFO lua": {
        "prefix": "reaper.BR_GetMidiTakeTempoInfo",
        "scope": "lua",
        "body": "reaper.BR_GetMidiTakeTempoInfo(${1:MediaItem_Take take})$0",
        "description": "[BR] Get \"ignore project tempo\" information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.\n\n"
    },
    "BR_GETMIDITAKETEMPOINFO python": {
        "prefix": "BR_GetMidiTakeTempoInfo",
        "scope": "python",
        "body": "BR_GetMidiTakeTempoInfo(${1:take}, ${2:ignoreProjTempoOut}, ${3:bpmOut}, ${4:numOut}, ${5:denOut})$0",
        "description": "[BR] Get \"ignore project tempo\" information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.\n\n"
    },
    "REAPER.BR_GETMOUSECURSORCONTEXT lua": {
        "prefix": "reaper.BR_GetMouseCursorContext",
        "scope": "lua",
        "body": "reaper.BR_GetMouseCursorContext()$0",
        "description": "[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.\n\nTo get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track \n\nWindow\tSegment\tDetails\n\nunknown\t\"\"\t\"\"\n\nruler\tregion_lane\t\"\"\n\nmarker_lane\t\"\"\n\ntempo_lane\t\"\"\n\ntimeline\t\"\"\n\ntransport\t\"\"\t\"\"\n\ntcp\ttrack\t\"\"\n\nenvelope\t\"\"\n\nempty\t\"\"\n\nmcp\ttrack\t\"\"\n\nempty\t\"\"\n\narrange\ttrack\tempty,\n\nitem, item_stretch_marker,\n\nenv_point, env_segment\n\nenvelope\tempty, env_point, env_segment\n\nempty\t\"\"\n\nmidi_editor\tunknown\t\"\"\n\nruler\t\"\"\n\npiano\t\"\"\n\nnotes\t\"\"\n\ncc_lane\tcc_selector, cc_lane\n\n"
    },
    "BR_GETMOUSECURSORCONTEXT python": {
        "prefix": "BR_GetMouseCursorContext",
        "scope": "python",
        "body": "BR_GetMouseCursorContext(${1:windowOut}, ${2:windowOut_sz}, ${3:segmentOut}, ${4:segmentOut_sz}, ${5:detailsOut}, ${6:detailsOut_sz})$0",
        "description": "[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.\n\nTo get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track \n\nWindow\tSegment\tDetails\n\nunknown\t\"\"\t\"\"\n\nruler\tregion_lane\t\"\"\n\nmarker_lane\t\"\"\n\ntempo_lane\t\"\"\n\ntimeline\t\"\"\n\ntransport\t\"\"\t\"\"\n\ntcp\ttrack\t\"\"\n\nenvelope\t\"\"\n\nempty\t\"\"\n\nmcp\ttrack\t\"\"\n\nempty\t\"\"\n\narrange\ttrack\tempty,\n\nitem, item_stretch_marker,\n\nenv_point, env_segment\n\nenvelope\tempty, env_point, env_segment\n\nempty\t\"\"\n\nmidi_editor\tunknown\t\"\"\n\nruler\t\"\"\n\npiano\t\"\"\n\nnotes\t\"\"\n\ncc_lane\tcc_selector, cc_lane\n\n"
    },
    "REAPER.BR_GETMOUSECURSORCONTEXT_ENVELOPE lua": {
        "prefix": "reaper.BR_GetMouseCursorContext_Envelope",
        "scope": "lua",
        "body": "reaper.BR_GetMouseCursorContext_Envelope()$0",
        "description": "[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true.\n\n"
    },
    "BR_GETMOUSECURSORCONTEXT_ENVELOPE python": {
        "prefix": "BR_GetMouseCursorContext_Envelope",
        "scope": "python",
        "body": "BR_GetMouseCursorContext_Envelope(${1:takeEnvelopeOut})$0",
        "description": "[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true.\n\n"
    },
    "REAPER.BR_GETMOUSECURSORCONTEXT_ITEM lua": {
        "prefix": "reaper.BR_GetMouseCursorContext_Item",
        "scope": "lua",
        "body": "reaper.BR_GetMouseCursorContext_Item()$0",
        "description": "[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext. Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.\n\n"
    },
    "BR_GETMOUSECURSORCONTEXT_ITEM python": {
        "prefix": "BR_GetMouseCursorContext_Item",
        "scope": "python",
        "body": "BR_GetMouseCursorContext_Item()$0",
        "description": "[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext. Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.\n\n"
    },
    "REAPER.BR_GETMOUSECURSORCONTEXT_MIDI lua": {
        "prefix": "reaper.BR_GetMouseCursorContext_MIDI",
        "scope": "lua",
        "body": "reaper.BR_GetMouseCursorContext_MIDI()$0",
        "description": "[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\ninlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)\n\nnoteRow: note row or piano key under mouse cursor (0-127)\n\nccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity)\n\nccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)\n\nccLaneId: lane position, counting from the top (0 based)\n\nNote: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1\n\n"
    },
    "BR_GETMOUSECURSORCONTEXT_MIDI python": {
        "prefix": "BR_GetMouseCursorContext_MIDI",
        "scope": "python",
        "body": "BR_GetMouseCursorContext_MIDI(${1:inlineEditorOut}, ${2:noteRowOut}, ${3:ccLaneOut}, ${4:ccLaneValOut}, ${5:ccLaneIdOut})$0",
        "description": "[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\ninlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)\n\nnoteRow: note row or piano key under mouse cursor (0-127)\n\nccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity)\n\nccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)\n\nccLaneId: lane position, counting from the top (0 based)\n\nNote: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1\n\n"
    },
    "REAPER.BR_GETMOUSECURSORCONTEXT_POSITION lua": {
        "prefix": "reaper.BR_GetMouseCursorContext_Position",
        "scope": "lua",
        "body": "reaper.BR_GetMouseCursorContext_Position()$0",
        "description": "[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
    },
    "BR_GETMOUSECURSORCONTEXT_POSITION python": {
        "prefix": "BR_GetMouseCursorContext_Position",
        "scope": "python",
        "body": "BR_GetMouseCursorContext_Position()$0",
        "description": "[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
    },
    "REAPER.BR_GETMOUSECURSORCONTEXT_STRETCHMARKER lua": {
        "prefix": "reaper.BR_GetMouseCursorContext_StretchMarker",
        "scope": "lua",
        "body": "reaper.BR_GetMouseCursorContext_StretchMarker()$0",
        "description": "[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
    },
    "BR_GETMOUSECURSORCONTEXT_STRETCHMARKER python": {
        "prefix": "BR_GetMouseCursorContext_StretchMarker",
        "scope": "python",
        "body": "BR_GetMouseCursorContext_StretchMarker()$0",
        "description": "[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
    },
    "REAPER.BR_GETMOUSECURSORCONTEXT_TAKE lua": {
        "prefix": "reaper.BR_GetMouseCursorContext_Take",
        "scope": "lua",
        "body": "reaper.BR_GetMouseCursorContext_Take()$0",
        "description": "[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
    },
    "BR_GETMOUSECURSORCONTEXT_TAKE python": {
        "prefix": "BR_GetMouseCursorContext_Take",
        "scope": "python",
        "body": "BR_GetMouseCursorContext_Take()$0",
        "description": "[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
    },
    "REAPER.BR_GETMOUSECURSORCONTEXT_TRACK lua": {
        "prefix": "reaper.BR_GetMouseCursorContext_Track",
        "scope": "lua",
        "body": "reaper.BR_GetMouseCursorContext_Track()$0",
        "description": "[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
    },
    "BR_GETMOUSECURSORCONTEXT_TRACK python": {
        "prefix": "BR_GetMouseCursorContext_Track",
        "scope": "python",
        "body": "BR_GetMouseCursorContext_Track()$0",
        "description": "[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
    },
    "REAPER.BR_GETNEXTGRIDDIVISION lua": {
        "prefix": "reaper.BR_GetNextGridDivision",
        "scope": "lua",
        "body": "reaper.BR_GetNextGridDivision(${1:number position})$0",
        "description": "[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision.\n\n"
    },
    "BR_GETNEXTGRIDDIVISION python": {
        "prefix": "BR_GetNextGridDivision",
        "scope": "python",
        "body": "BR_GetNextGridDivision(${1:Float position})$0",
        "description": "[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision.\n\n"
    },
    "REAPER.BR_GETPREVGRIDDIVISION lua": {
        "prefix": "reaper.BR_GetPrevGridDivision",
        "scope": "lua",
        "body": "reaper.BR_GetPrevGridDivision(${1:number position})$0",
        "description": "[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision.\n\n"
    },
    "BR_GETPREVGRIDDIVISION python": {
        "prefix": "BR_GetPrevGridDivision",
        "scope": "python",
        "body": "BR_GetPrevGridDivision(${1:Float position})$0",
        "description": "[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision.\n\n"
    },
    "REAPER.BR_GETSETTRACKSENDINFO lua": {
        "prefix": "reaper.BR_GetSetTrackSendInfo",
        "scope": "lua",
        "body": "reaper.BR_GetSetTrackSendInfo(${1:MediaTrack track}, ${2:integer category}, ${3:integer sendidx}, ${4:string parmname}, ${5:boolean setNewValue}, ${6:number newValue})$0",
        "description": "[BR] Get or set send attributes.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\n\nTo set attribute, pass setNewValue as true\n\nList of possible parameters:\n\nB_MUTE : send mute state (1.0 if muted, otherwise 0.0)\n\nB_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)\n\nB_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)\n\nD_VOL : send volume (1.0=+0dB etc...)\n\nD_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)\n\nD_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)\n\nI_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)\n\nI_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)\n\nI_DSTCHAN : audio destination starting channel index (&1024=mono (and in case of hardware output &512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)\n\nI_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)\n\nI_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)\n\nI_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\n\nI_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\n\nI_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI\n\nNote: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track.\n\n"
    },
    "BR_GETSETTRACKSENDINFO python": {
        "prefix": "BR_GetSetTrackSendInfo",
        "scope": "python",
        "body": "BR_GetSetTrackSendInfo(${1:MediaTrack track}, ${2:Int category}, ${3:Int sendidx}, ${4:String parmname}, ${5:Boolean setNewValue}, ${6:Float newValue})$0",
        "description": "[BR] Get or set send attributes.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\n\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\n\nTo set attribute, pass setNewValue as true\n\nList of possible parameters:\n\nB_MUTE : send mute state (1.0 if muted, otherwise 0.0)\n\nB_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)\n\nB_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)\n\nD_VOL : send volume (1.0=+0dB etc...)\n\nD_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)\n\nD_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)\n\nI_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)\n\nI_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)\n\nI_DSTCHAN : audio destination starting channel index (&1024=mono (and in case of hardware output &512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)\n\nI_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)\n\nI_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)\n\nI_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\n\nI_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\n\nI_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI\n\nNote: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track.\n\n"
    },
    "REAPER.BR_GETTAKEFXCOUNT lua": {
        "prefix": "reaper.BR_GetTakeFXCount",
        "scope": "lua",
        "body": "reaper.BR_GetTakeFXCount(${1:MediaItem_Take take})$0",
        "description": "[BR] Returns FX count for supplied take\n\n"
    },
    "BR_GETTAKEFXCOUNT python": {
        "prefix": "BR_GetTakeFXCount",
        "scope": "python",
        "body": "BR_GetTakeFXCount(${1:MediaItem_Take take})$0",
        "description": "[BR] Returns FX count for supplied take\n\n"
    },
    "REAPER.BR_ISMIDIOPENININLINEEDITOR lua": {
        "prefix": "reaper.BR_IsMidiOpenInInlineEditor",
        "scope": "lua",
        "body": "reaper.BR_IsMidiOpenInInlineEditor(${1:MediaItem_Take take})$0",
        "description": "[SWS] Check if take has MIDI inline editor open and returns true or false.\n\n"
    },
    "BR_ISMIDIOPENININLINEEDITOR python": {
        "prefix": "BR_IsMidiOpenInInlineEditor",
        "scope": "python",
        "body": "BR_IsMidiOpenInInlineEditor(${1:MediaItem_Take take})$0",
        "description": "[SWS] Check if take has MIDI inline editor open and returns true or false.\n\n"
    },
    "REAPER.BR_ISTAKEMIDI lua": {
        "prefix": "reaper.BR_IsTakeMidi",
        "scope": "lua",
        "body": "reaper.BR_IsTakeMidi(${1:MediaItem_Take take})$0",
        "description": "[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.\n\n"
    },
    "BR_ISTAKEMIDI python": {
        "prefix": "BR_IsTakeMidi",
        "scope": "python",
        "body": "BR_IsTakeMidi(${1:take}, ${2:inProjectMidiOut})$0",
        "description": "[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.\n\n"
    },
    "REAPER.BR_ITEMATMOUSECURSOR lua": {
        "prefix": "reaper.BR_ItemAtMouseCursor",
        "scope": "lua",
        "body": "reaper.BR_ItemAtMouseCursor()$0",
        "description": "[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.\n\n"
    },
    "BR_ITEMATMOUSECURSOR python": {
        "prefix": "BR_ItemAtMouseCursor",
        "scope": "python",
        "body": "BR_ItemAtMouseCursor(${1:positionOut})$0",
        "description": "[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.\n\n"
    },
    "REAPER.BR_MIDI_CCLANEREMOVE lua": {
        "prefix": "reaper.BR_MIDI_CCLaneRemove",
        "scope": "lua",
        "body": "reaper.BR_MIDI_CCLaneRemove(${1:HWND midiEditor}, ${2:integer laneId})$0",
        "description": "[BR] Remove CC lane in midi editor. Returns true on success\n\n"
    },
    "BR_MIDI_CCLANEREMOVE python": {
        "prefix": "BR_MIDI_CCLaneRemove",
        "scope": "python",
        "body": "BR_MIDI_CCLaneRemove(${1:HWND midiEditor}, ${2:Int laneId})$0",
        "description": "[BR] Remove CC lane in midi editor. Returns true on success\n\n"
    },
    "REAPER.BR_MIDI_CCLANEREPLACE lua": {
        "prefix": "reaper.BR_MIDI_CCLaneReplace",
        "scope": "lua",
        "body": "reaper.BR_MIDI_CCLaneReplace(${1:HWND midiEditor}, ${2:integer laneId}, ${3:integer newCC})$0",
        "description": "[BR] Replace CC lane in midi editor. Returns true on success.\n\nValid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207\n\n"
    },
    "BR_MIDI_CCLANEREPLACE python": {
        "prefix": "BR_MIDI_CCLaneReplace",
        "scope": "python",
        "body": "BR_MIDI_CCLaneReplace(${1:HWND midiEditor}, ${2:Int laneId}, ${3:Int newCC})$0",
        "description": "[BR] Replace CC lane in midi editor. Returns true on success.\n\nValid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207\n\n"
    },
    "REAPER.BR_POSITIONATMOUSECURSOR lua": {
        "prefix": "reaper.BR_PositionAtMouseCursor",
        "scope": "lua",
        "body": "reaper.BR_PositionAtMouseCursor(${1:boolean checkRuler})$0",
        "description": "[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.\n\n"
    },
    "BR_POSITIONATMOUSECURSOR python": {
        "prefix": "BR_PositionAtMouseCursor",
        "scope": "python",
        "body": "BR_PositionAtMouseCursor(${1:Boolean checkRuler})$0",
        "description": "[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.\n\n"
    },
    "REAPER.BR_SETARRANGEVIEW lua": {
        "prefix": "reaper.BR_SetArrangeView",
        "scope": "lua",
        "body": "reaper.BR_SetArrangeView(${1:ReaProject proj}, ${2:number startTime}, ${3:number endTime})$0",
        "description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView.\n\n"
    },
    "BR_SETARRANGEVIEW python": {
        "prefix": "BR_SetArrangeView",
        "scope": "python",
        "body": "BR_SetArrangeView(${1:ReaProject proj}, ${2:Float startTime}, ${3:Float endTime})$0",
        "description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView.\n\n"
    },
    "REAPER.BR_SETITEMEDGES lua": {
        "prefix": "reaper.BR_SetItemEdges",
        "scope": "lua",
        "body": "reaper.BR_SetItemEdges(${1:MediaItem item}, ${2:number startTime}, ${3:number endTime})$0",
        "description": "[BR] Set item start and end edges' position - returns true in case of any changes\n\n"
    },
    "BR_SETITEMEDGES python": {
        "prefix": "BR_SetItemEdges",
        "scope": "python",
        "body": "BR_SetItemEdges(${1:MediaItem item}, ${2:Float startTime}, ${3:Float endTime})$0",
        "description": "[BR] Set item start and end edges' position - returns true in case of any changes\n\n"
    },
    "REAPER.BR_SETMEDIAITEMIMAGERESOURCE lua": {
        "prefix": "reaper.BR_SetMediaItemImageResource",
        "scope": "lua",
        "body": "reaper.BR_SetMediaItemImageResource(${1:MediaItem item}, ${2:string imageIn}, ${3:integer imageFlags})$0",
        "description": "[BR] Set image resource and it's flags for a given item. To clear current image resource, pass imageIn as . To get image resource, see BR_GetMediaItemImageResource.\n\n"
    },
    "BR_SETMEDIAITEMIMAGERESOURCE python": {
        "prefix": "BR_SetMediaItemImageResource",
        "scope": "python",
        "body": "BR_SetMediaItemImageResource(${1:MediaItem item}, ${2:String imageIn}, ${3:Int imageFlags})$0",
        "description": "[BR] Set image resource and it's flags for a given item. To clear current image resource, pass imageIn as . To get image resource, see BR_GetMediaItemImageResource.\n\n"
    },
    "REAPER.BR_SETMEDIASOURCEPROPERTIES lua": {
        "prefix": "reaper.BR_SetMediaSourceProperties",
        "scope": "lua",
        "body": "reaper.BR_SetMediaSourceProperties(${1:MediaItem_Take take}, ${2:boolean section}, ${3:number start}, ${4:number length}, ${5:number fade}, ${6:boolean reverse})$0",
        "description": "[BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.\n\nTo get source properties, see BR_GetMediaSourceProperties.\n\n"
    },
    "BR_SETMEDIASOURCEPROPERTIES python": {
        "prefix": "BR_SetMediaSourceProperties",
        "scope": "python",
        "body": "BR_SetMediaSourceProperties(${1:MediaItem_Take take}, ${2:Boolean section}, ${3:Float start}, ${4:Float length}, ${5:Float fade}, ${6:Boolean reverse})$0",
        "description": "[BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.\n\nTo get source properties, see BR_GetMediaSourceProperties.\n\n"
    },
    "REAPER.BR_SETMEDIATRACKLAYOUTS lua": {
        "prefix": "reaper.BR_SetMediaTrackLayouts",
        "scope": "lua",
        "body": "reaper.BR_SetMediaTrackLayouts(${1:MediaTrack track}, ${2:string mcpLayoutNameIn}, ${3:string tcpLayoutNameIn})$0",
        "description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string (\"\") as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).\n\nTo get media track layouts, see BR_GetMediaTrackLayouts.\n\n"
    },
    "BR_SETMEDIATRACKLAYOUTS python": {
        "prefix": "BR_SetMediaTrackLayouts",
        "scope": "python",
        "body": "BR_SetMediaTrackLayouts(${1:MediaTrack track}, ${2:String mcpLayoutNameIn}, ${3:String tcpLayoutNameIn})$0",
        "description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string (\"\") as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).\n\nTo get media track layouts, see BR_GetMediaTrackLayouts.\n\n"
    },
    "REAPER.BR_SETMIDITAKETEMPOINFO lua": {
        "prefix": "reaper.BR_SetMidiTakeTempoInfo",
        "scope": "lua",
        "body": "reaper.BR_SetMidiTakeTempoInfo(${1:MediaItem_Take take}, ${2:boolean ignoreProjTempo}, ${3:number bpm}, ${4:integer num}, ${5:integer den})$0",
        "description": "[BR] Set \"ignore project tempo\" information for MIDI take. Returns true in case the take was successfully updated.\n\n"
    },
    "BR_SETMIDITAKETEMPOINFO python": {
        "prefix": "BR_SetMidiTakeTempoInfo",
        "scope": "python",
        "body": "BR_SetMidiTakeTempoInfo(${1:MediaItem_Take take}, ${2:Boolean ignoreProjTempo}, ${3:Float bpm}, ${4:Int num}, ${5:Int den})$0",
        "description": "[BR] Set \"ignore project tempo\" information for MIDI take. Returns true in case the take was successfully updated.\n\n"
    },
    "REAPER.BR_SETTAKESOURCEFROMFILE lua": {
        "prefix": "reaper.BR_SetTakeSourceFromFile",
        "scope": "lua",
        "body": "reaper.BR_SetTakeSourceFromFile(${1:MediaItem_Take take}, ${2:string filenameIn}, ${3:boolean inProjectData})$0",
        "description": "[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.\n\nAny take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.\n\nNote: To set source from existing take, see SNM_GetSetSourceState2.\n\n"
    },
    "BR_SETTAKESOURCEFROMFILE python": {
        "prefix": "BR_SetTakeSourceFromFile",
        "scope": "python",
        "body": "BR_SetTakeSourceFromFile(${1:MediaItem_Take take}, ${2:String filenameIn}, ${3:Boolean inProjectData})$0",
        "description": "[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.\n\nAny take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.\n\nNote: To set source from existing take, see SNM_GetSetSourceState2.\n\n"
    },
    "REAPER.BR_SETTAKESOURCEFROMFILE2 lua": {
        "prefix": "reaper.BR_SetTakeSourceFromFile2",
        "scope": "lua",
        "body": "reaper.BR_SetTakeSourceFromFile2(${1:MediaItem_Take take}, ${2:string filenameIn}, ${3:boolean inProjectData}, ${4:boolean keepSourceProperties})$0",
        "description": "[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties.\n\n"
    },
    "BR_SETTAKESOURCEFROMFILE2 python": {
        "prefix": "BR_SetTakeSourceFromFile2",
        "scope": "python",
        "body": "BR_SetTakeSourceFromFile2(${1:MediaItem_Take take}, ${2:String filenameIn}, ${3:Boolean inProjectData}, ${4:Boolean keepSourceProperties})$0",
        "description": "[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties.\n\n"
    },
    "REAPER.BR_TAKEATMOUSECURSOR lua": {
        "prefix": "reaper.BR_TakeAtMouseCursor",
        "scope": "lua",
        "body": "reaper.BR_TakeAtMouseCursor()$0",
        "description": "[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.\n\n"
    },
    "BR_TAKEATMOUSECURSOR python": {
        "prefix": "BR_TakeAtMouseCursor",
        "scope": "python",
        "body": "BR_TakeAtMouseCursor(${1:positionOut})$0",
        "description": "[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.\n\n"
    },
    "REAPER.BR_TRACKATMOUSECURSOR lua": {
        "prefix": "reaper.BR_TrackAtMouseCursor",
        "scope": "lua",
        "body": "reaper.BR_TrackAtMouseCursor()$0",
        "description": "[BR] Get track under mouse cursor.\n\nContext signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.\n\nPosition will hold mouse cursor position in arrange if applicable.\n\n"
    },
    "BR_TRACKATMOUSECURSOR python": {
        "prefix": "BR_TrackAtMouseCursor",
        "scope": "python",
        "body": "BR_TrackAtMouseCursor(${1:contextOut}, ${2:positionOut})$0",
        "description": "[BR] Get track under mouse cursor.\n\nContext signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.\n\nPosition will hold mouse cursor position in arrange if applicable.\n\n"
    },
    "REAPER.BR_TRACKFX_GETFXMODULENAME lua": {
        "prefix": "reaper.BR_TrackFX_GetFXModuleName",
        "scope": "lua",
        "body": "reaper.BR_TrackFX_GetFXModuleName(${1:MediaTrack track}, ${2:integer fx})$0",
        "description": "[BR] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.\n\n"
    },
    "BR_TRACKFX_GETFXMODULENAME python": {
        "prefix": "BR_TrackFX_GetFXModuleName",
        "scope": "python",
        "body": "BR_TrackFX_GetFXModuleName(${1:track}, ${2:fx}, ${3:nameOut}, ${4:nameOutSz})$0",
        "description": "[BR] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.\n\n"
    },
    "REAPER.BR_WIN32_GETPRIVATEPROFILESTRING lua": {
        "prefix": "reaper.BR_Win32_GetPrivateProfileString",
        "scope": "lua",
        "body": "reaper.BR_Win32_GetPrivateProfileString(${1:string sectionName}, ${2:string keyName}, ${3:string defaultString}, ${4:string filePath})$0",
        "description": "[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini\n\n"
    },
    "BR_WIN32_GETPRIVATEPROFILESTRING python": {
        "prefix": "BR_Win32_GetPrivateProfileString",
        "scope": "python",
        "body": "BR_Win32_GetPrivateProfileString(${1:sectionName}, ${2:keyName}, ${3:defaultString}, ${4:filePath}, ${5:stringOut}, ${6:stringOut_sz})$0",
        "description": "[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini\n\n"
    },
    "REAPER.BR_WIN32_SHELLEXECUTE lua": {
        "prefix": "reaper.BR_Win32_ShellExecute",
        "scope": "lua",
        "body": "reaper.BR_Win32_ShellExecute(${1:string operation}, ${2:string file}, ${3:string parameters}, ${4:string directory}, ${5:integer showFlags})$0",
        "description": "[BR] Equivalent to win32 API ShellExecute() with HWND set to main window\n\n"
    },
    "BR_WIN32_SHELLEXECUTE python": {
        "prefix": "BR_Win32_ShellExecute",
        "scope": "python",
        "body": "BR_Win32_ShellExecute(${1:String operation}, ${2:String file}, ${3:String parameters}, ${4:String directory}, ${5:Int showFlags})$0",
        "description": "[BR] Equivalent to win32 API ShellExecute() with HWND set to main window\n\n"
    },
    "REAPER.BR_WIN32_WRITEPRIVATEPROFILESTRING lua": {
        "prefix": "reaper.BR_Win32_WritePrivateProfileString",
        "scope": "lua",
        "body": "reaper.BR_Win32_WritePrivateProfileString(${1:string sectionName}, ${2:string keyName}, ${3:string value}, ${4:string filePath})$0",
        "description": "[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini\n\n"
    },
    "BR_WIN32_WRITEPRIVATEPROFILESTRING python": {
        "prefix": "BR_Win32_WritePrivateProfileString",
        "scope": "python",
        "body": "BR_Win32_WritePrivateProfileString(${1:String sectionName}, ${2:String keyName}, ${3:String value}, ${4:String filePath})$0",
        "description": "[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini\n\n"
    },
    "REAPER.CF_GETCLIPBOARD lua": {
        "prefix": "reaper.CF_GetClipboard",
        "scope": "lua",
        "body": "reaper.CF_GetClipboard(${1:string buf})$0",
        "description": "Read the contents of the system clipboard (limited to 1023 characters in Lua).\n\n"
    },
    "CF_GETCLIPBOARD python": {
        "prefix": "CF_GetClipboard",
        "scope": "python",
        "body": "CF_GetClipboard(${1:buf}, ${2:buf_sz})$0",
        "description": "Read the contents of the system clipboard (limited to 1023 characters in Lua).\n\n"
    },
    "REAPER.CF_GETCLIPBOARDBIG lua": {
        "prefix": "reaper.CF_GetClipboardBig",
        "scope": "lua",
        "body": "reaper.CF_GetClipboardBig(${1:WDL_FastString output})$0",
        "description": "Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString.\n\n"
    },
    "CF_GETCLIPBOARDBIG python": {
        "prefix": "CF_GetClipboardBig",
        "scope": "python",
        "body": "CF_GetClipboardBig(${1:WDL_FastString output})$0",
        "description": "Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString.\n\n"
    },
    "REAPER.CF_SETCLIPBOARD lua": {
        "prefix": "reaper.CF_SetClipboard",
        "scope": "lua",
        "body": "reaper.CF_SetClipboard(${1:string str})$0",
        "description": "Write the given string into the system clipboard.\n\n"
    },
    "CF_SETCLIPBOARD python": {
        "prefix": "CF_SetClipboard",
        "scope": "python",
        "body": "CF_SetClipboard(${1:String str})$0",
        "description": "Write the given string into the system clipboard.\n\n"
    },
    "REAPER.FNG_ADDMIDINOTE lua": {
        "prefix": "reaper.FNG_AddMidiNote",
        "scope": "lua",
        "body": "reaper.FNG_AddMidiNote(${1:RprMidiTake midiTake})$0",
        "description": "[FNG] Add MIDI note to MIDI take\n\n"
    },
    "FNG_ADDMIDINOTE python": {
        "prefix": "FNG_AddMidiNote",
        "scope": "python",
        "body": "FNG_AddMidiNote(${1:RprMidiTake midiTake})$0",
        "description": "[FNG] Add MIDI note to MIDI take\n\n"
    },
    "REAPER.FNG_ALLOCMIDITAKE lua": {
        "prefix": "reaper.FNG_AllocMidiTake",
        "scope": "lua",
        "body": "reaper.FNG_AllocMidiTake(${1:MediaItem_Take take})$0",
        "description": "[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take\n\n"
    },
    "FNG_ALLOCMIDITAKE python": {
        "prefix": "FNG_AllocMidiTake",
        "scope": "python",
        "body": "FNG_AllocMidiTake(${1:MediaItem_Take take})$0",
        "description": "[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take\n\n"
    },
    "REAPER.FNG_COUNTMIDINOTES lua": {
        "prefix": "reaper.FNG_CountMidiNotes",
        "scope": "lua",
        "body": "reaper.FNG_CountMidiNotes(${1:RprMidiTake midiTake})$0",
        "description": "[FNG] Count of how many MIDI notes are in the MIDI take\n\n"
    },
    "FNG_COUNTMIDINOTES python": {
        "prefix": "FNG_CountMidiNotes",
        "scope": "python",
        "body": "FNG_CountMidiNotes(${1:RprMidiTake midiTake})$0",
        "description": "[FNG] Count of how many MIDI notes are in the MIDI take\n\n"
    },
    "REAPER.FNG_FREEMIDITAKE lua": {
        "prefix": "reaper.FNG_FreeMidiTake",
        "scope": "lua",
        "body": "reaper.FNG_FreeMidiTake(${1:RprMidiTake midiTake})$0",
        "description": "[FNG] Commit changes to MIDI take and free allocated memory\n\n"
    },
    "FNG_FREEMIDITAKE python": {
        "prefix": "FNG_FreeMidiTake",
        "scope": "python",
        "body": "FNG_FreeMidiTake(${1:RprMidiTake midiTake})$0",
        "description": "[FNG] Commit changes to MIDI take and free allocated memory\n\n"
    },
    "REAPER.FNG_GETMIDINOTE lua": {
        "prefix": "reaper.FNG_GetMidiNote",
        "scope": "lua",
        "body": "reaper.FNG_GetMidiNote(${1:RprMidiTake midiTake}, ${2:integer index})$0",
        "description": "[FNG] Get a MIDI note from a MIDI take at specified index\n\n"
    },
    "FNG_GETMIDINOTE python": {
        "prefix": "FNG_GetMidiNote",
        "scope": "python",
        "body": "FNG_GetMidiNote(${1:RprMidiTake midiTake}, ${2:Int index})$0",
        "description": "[FNG] Get a MIDI note from a MIDI take at specified index\n\n"
    },
    "REAPER.FNG_GETMIDINOTEINTPROPERTY lua": {
        "prefix": "reaper.FNG_GetMidiNoteIntProperty",
        "scope": "lua",
        "body": "reaper.FNG_GetMidiNoteIntProperty(${1:RprMidiNote midiNote}, ${2:string property})$0",
        "description": "[FNG] Get MIDI note property\n\n"
    },
    "FNG_GETMIDINOTEINTPROPERTY python": {
        "prefix": "FNG_GetMidiNoteIntProperty",
        "scope": "python",
        "body": "FNG_GetMidiNoteIntProperty(${1:RprMidiNote midiNote}, ${2:String property})$0",
        "description": "[FNG] Get MIDI note property\n\n"
    },
    "REAPER.FNG_SETMIDINOTEINTPROPERTY lua": {
        "prefix": "reaper.FNG_SetMidiNoteIntProperty",
        "scope": "lua",
        "body": "reaper.FNG_SetMidiNoteIntProperty(${1:RprMidiNote midiNote}, ${2:string property}, ${3:integer value})$0",
        "description": "[FNG] Set MIDI note property\n\n"
    },
    "FNG_SETMIDINOTEINTPROPERTY python": {
        "prefix": "FNG_SetMidiNoteIntProperty",
        "scope": "python",
        "body": "FNG_SetMidiNoteIntProperty(${1:RprMidiNote midiNote}, ${2:String property}, ${3:Int value})$0",
        "description": "[FNG] Set MIDI note property\n\n"
    },
    "REAPER.NF_ANALYZETAKELOUDNESS lua": {
        "prefix": "reaper.NF_AnalyzeTakeLoudness",
        "scope": "lua",
        "body": "reaper.NF_AnalyzeTakeLoudness(${1:MediaItem_Take take}, ${2:boolean analyzeTruePeak})$0",
        "description": "Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value and true peak position which can be jumped to with SetEditCurPos(). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated. Momentary uses a time window of 0.4 sec. \n\n"
    },
    "NF_ANALYZETAKELOUDNESS python": {
        "prefix": "NF_AnalyzeTakeLoudness",
        "scope": "python",
        "body": "NF_AnalyzeTakeLoudness(${1:take}, ${2:analyzeTruePeak}, ${3:lufsIntegratedOut}, ${4:rangeOut}, ${5:truePeakOut}, ${6:truePeakPosOut}, ${7:shortTermMaxOut}, ${8:momentaryMaxOut})$0",
        "description": "Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value and true peak position which can be jumped to with SetEditCurPos(). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated. Momentary uses a time window of 0.4 sec. \n\n"
    },
    "REAPER.NF_ANALYZETAKELOUDNESS2 lua": {
        "prefix": "reaper.NF_AnalyzeTakeLoudness2",
        "scope": "lua",
        "body": "reaper.NF_AnalyzeTakeLoudness2(${1:MediaItem_Take take}, ${2:boolean analyzeTruePeak})$0",
        "description": "Same as NF_AnalyzeTakeLoudness but additionally returns shortTermMaxPos and momentaryMaxPos which can be jumped to with SetEditCurPos(). Note: shortTermMaxPos and momentaryMaxPos actaully indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.). \n\n"
    },
    "NF_ANALYZETAKELOUDNESS2 python": {
        "prefix": "NF_AnalyzeTakeLoudness2",
        "scope": "python",
        "body": "NF_AnalyzeTakeLoudness2(${1:take}, ${2:analyzeTruePeak}, ${3:lufsIntegratedOut}, ${4:rangeOut}, ${5:truePeakOut}, ${6:truePeakPosOut}, ${7:shortTermMaxOut}, ${8:momentaryMaxOut}, ${9:shortTermMaxPosOut}, ${10:momentaryMaxPosOut})$0",
        "description": "Same as NF_AnalyzeTakeLoudness but additionally returns shortTermMaxPos and momentaryMaxPos which can be jumped to with SetEditCurPos(). Note: shortTermMaxPos and momentaryMaxPos actaully indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.). \n\n"
    },
    "REAPER.NF_ANALYZETAKELOUDNESS_INTEGRATEDONLY lua": {
        "prefix": "reaper.NF_AnalyzeTakeLoudness_IntegratedOnly",
        "scope": "lua",
        "body": "reaper.NF_AnalyzeTakeLoudness_IntegratedOnly(${1:MediaItem_Take take})$0",
        "description": "Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required.\n\n"
    },
    "NF_ANALYZETAKELOUDNESS_INTEGRATEDONLY python": {
        "prefix": "NF_AnalyzeTakeLoudness_IntegratedOnly",
        "scope": "python",
        "body": "NF_AnalyzeTakeLoudness_IntegratedOnly(${1:take}, ${2:lufsIntegratedOut})$0",
        "description": "Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required.\n\n"
    },
    "REAPER.NF_GETMEDIAITEMAVERAGERMS lua": {
        "prefix": "reaper.NF_GetMediaItemAverageRMS",
        "scope": "lua",
        "body": "reaper.NF_GetMediaItemAverageRMS(${1:MediaItem item})$0",
        "description": "Returns the average overall (non-windowed) RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n\nReturns -150.0 if MIDI take or empty item.\n\n"
    },
    "NF_GETMEDIAITEMAVERAGERMS python": {
        "prefix": "NF_GetMediaItemAverageRMS",
        "scope": "python",
        "body": "NF_GetMediaItemAverageRMS(${1:MediaItem item})$0",
        "description": "Returns the average overall (non-windowed) RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n\nReturns -150.0 if MIDI take or empty item.\n\n"
    },
    "REAPER.NF_GETMEDIAITEMMAXPEAK lua": {
        "prefix": "reaper.NF_GetMediaItemMaxPeak",
        "scope": "lua",
        "body": "reaper.NF_GetMediaItemMaxPeak(${1:MediaItem item})$0",
        "description": "Returns the greatest max. peak value of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n\nReturns -150.0 if MIDI take or empty item.\n\n"
    },
    "NF_GETMEDIAITEMMAXPEAK python": {
        "prefix": "NF_GetMediaItemMaxPeak",
        "scope": "python",
        "body": "NF_GetMediaItemMaxPeak(${1:MediaItem item})$0",
        "description": "Returns the greatest max. peak value of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n\nReturns -150.0 if MIDI take or empty item.\n\n"
    },
    "REAPER.NF_GETMEDIAITEMPEAKRMS_NONWINDOWED lua": {
        "prefix": "reaper.NF_GetMediaItemPeakRMS_NonWindowed",
        "scope": "lua",
        "body": "reaper.NF_GetMediaItemPeakRMS_NonWindowed(${1:MediaItem item})$0",
        "description": "Returns the greatest overall (non-windowed) RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n\nReturns -150.0 if MIDI take or empty item.\n\n"
    },
    "NF_GETMEDIAITEMPEAKRMS_NONWINDOWED python": {
        "prefix": "NF_GetMediaItemPeakRMS_NonWindowed",
        "scope": "python",
        "body": "NF_GetMediaItemPeakRMS_NonWindowed(${1:MediaItem item})$0",
        "description": "Returns the greatest overall (non-windowed) RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n\nReturns -150.0 if MIDI take or empty item.\n\n"
    },
    "REAPER.NF_GETMEDIAITEMPEAKRMS_WINDOWED lua": {
        "prefix": "reaper.NF_GetMediaItemPeakRMS_Windowed",
        "scope": "lua",
        "body": "reaper.NF_GetMediaItemPeakRMS_Windowed(${1:MediaItem item})$0",
        "description": "Returns the average RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n\nObeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.\n\n"
    },
    "NF_GETMEDIAITEMPEAKRMS_WINDOWED python": {
        "prefix": "NF_GetMediaItemPeakRMS_Windowed",
        "scope": "python",
        "body": "NF_GetMediaItemPeakRMS_Windowed(${1:MediaItem item})$0",
        "description": "Returns the average RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n\nObeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.\n\n"
    },
    "REAPER.REAPACK_ABOUTINSTALLEDPACKAGE lua": {
        "prefix": "reaper.ReaPack_AboutInstalledPackage",
        "scope": "lua",
        "body": "reaper.ReaPack_AboutInstalledPackage(${1:PackageEntry entry})$0",
        "description": "Show the about dialog of the given package entry.\n\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.\n\n"
    },
    "REAPACK_ABOUTINSTALLEDPACKAGE python": {
        "prefix": "ReaPack_AboutInstalledPackage",
        "scope": "python",
        "body": "ReaPack_AboutInstalledPackage(${1:PackageEntry entry})$0",
        "description": "Show the about dialog of the given package entry.\n\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.\n\n"
    },
    "REAPER.REAPACK_ABOUTREPOSITORY lua": {
        "prefix": "reaper.ReaPack_AboutRepository",
        "scope": "lua",
        "body": "reaper.ReaPack_AboutRepository(${1:string repoName})$0",
        "description": "Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.\n\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.\n\n"
    },
    "REAPACK_ABOUTREPOSITORY python": {
        "prefix": "ReaPack_AboutRepository",
        "scope": "python",
        "body": "ReaPack_AboutRepository(${1:String repoName})$0",
        "description": "Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.\n\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.\n\n"
    },
    "REAPER.REAPACK_ADDSETREPOSITORY lua": {
        "prefix": "reaper.ReaPack_AddSetRepository",
        "scope": "lua",
        "body": "reaper.ReaPack_AddSetRepository(${1:string name}, ${2:string url}, ${3:boolean enable}, ${4:integer autoInstall})$0",
        "description": "Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.\n\nautoInstall: usually set to 2 (obey user setting).\n\n"
    },
    "REAPACK_ADDSETREPOSITORY python": {
        "prefix": "ReaPack_AddSetRepository",
        "scope": "python",
        "body": "ReaPack_AddSetRepository(${1:name}, ${2:url}, ${3:enable}, ${4:autoInstall}, ${5:errorOut}, ${6:errorOut_sz})$0",
        "description": "Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.\n\nautoInstall: usually set to 2 (obey user setting).\n\n"
    },
    "REAPER.REAPACK_BROWSEPACKAGES lua": {
        "prefix": "reaper.ReaPack_BrowsePackages",
        "scope": "lua",
        "body": "reaper.ReaPack_BrowsePackages(${1:string filter})$0",
        "description": "Opens the package browser with the given filter string.\n\n"
    },
    "REAPACK_BROWSEPACKAGES python": {
        "prefix": "ReaPack_BrowsePackages",
        "scope": "python",
        "body": "ReaPack_BrowsePackages(${1:String filter})$0",
        "description": "Opens the package browser with the given filter string.\n\n"
    },
    "REAPER.REAPACK_COMPAREVERSIONS lua": {
        "prefix": "reaper.ReaPack_CompareVersions",
        "scope": "lua",
        "body": "reaper.ReaPack_CompareVersions(${1:string ver1}, ${2:string ver2})$0",
        "description": "Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.\n\n"
    },
    "REAPACK_COMPAREVERSIONS python": {
        "prefix": "ReaPack_CompareVersions",
        "scope": "python",
        "body": "ReaPack_CompareVersions(${1:ver1}, ${2:ver2}, ${3:errorOut}, ${4:errorOut_sz})$0",
        "description": "Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.\n\n"
    },
    "REAPER.REAPACK_ENUMOWNEDFILES lua": {
        "prefix": "reaper.ReaPack_EnumOwnedFiles",
        "scope": "lua",
        "body": "reaper.ReaPack_EnumOwnedFiles(${1:PackageEntry entry}, ${2:integer index})$0",
        "description": "Enumerate the files owned by the given package. Returns false when there is no more data.\n\nsections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor\n\ntype: see ReaPack_GetEntryInfo.\n\n"
    },
    "REAPACK_ENUMOWNEDFILES python": {
        "prefix": "ReaPack_EnumOwnedFiles",
        "scope": "python",
        "body": "ReaPack_EnumOwnedFiles(${1:entry}, ${2:index}, ${3:pathOut}, ${4:pathOut_sz}, ${5:sectionsOut}, ${6:typeOut})$0",
        "description": "Enumerate the files owned by the given package. Returns false when there is no more data.\n\nsections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor\n\ntype: see ReaPack_GetEntryInfo.\n\n"
    },
    "REAPER.REAPACK_FREEENTRY lua": {
        "prefix": "reaper.ReaPack_FreeEntry",
        "scope": "lua",
        "body": "reaper.ReaPack_FreeEntry(${1:PackageEntry entry})$0",
        "description": "Free resources allocated for the given package entry.\n\n"
    },
    "REAPACK_FREEENTRY python": {
        "prefix": "ReaPack_FreeEntry",
        "scope": "python",
        "body": "ReaPack_FreeEntry(${1:PackageEntry entry})$0",
        "description": "Free resources allocated for the given package entry.\n\n"
    },
    "REAPER.REAPACK_GETENTRYINFO lua": {
        "prefix": "reaper.ReaPack_GetEntryInfo",
        "scope": "lua",
        "body": "reaper.ReaPack_GetEntryInfo(${1:PackageEntry entry})$0",
        "description": "Get the repository name, category, package name, package description, package type, the currently installed version, author name, pinned status and how many files are owned by the given package entry.\n\ntype: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface\n\n"
    },
    "REAPACK_GETENTRYINFO python": {
        "prefix": "ReaPack_GetEntryInfo",
        "scope": "python",
        "body": "ReaPack_GetEntryInfo(${1:entry}, ${2:repoOut}, ${3:repoOut_sz}, ${4:catOut}, ${5:catOut_sz}, ${6:pkgOut}, ${7:pkgOut_sz}, ${8:descOut}, ${9:descOut_sz}, ${10:typeOut}, ${11:verOut}, ${12:verOut_sz}, ${13:authorOut}, ${14:authorOut_sz}, ${15:pinnedOut}, ${16:fileCountOut})$0",
        "description": "Get the repository name, category, package name, package description, package type, the currently installed version, author name, pinned status and how many files are owned by the given package entry.\n\ntype: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface\n\n"
    },
    "REAPER.REAPACK_GETOWNER lua": {
        "prefix": "reaper.ReaPack_GetOwner",
        "scope": "lua",
        "body": "reaper.ReaPack_GetOwner(${1:string fn})$0",
        "description": "Returns the package entry owning the given file.\n\nDelete the returned object from memory after use with ReaPack_FreeEntry.\n\n"
    },
    "REAPACK_GETOWNER python": {
        "prefix": "ReaPack_GetOwner",
        "scope": "python",
        "body": "ReaPack_GetOwner(${1:fn}, ${2:errorOut}, ${3:errorOut_sz})$0",
        "description": "Returns the package entry owning the given file.\n\nDelete the returned object from memory after use with ReaPack_FreeEntry.\n\n"
    },
    "REAPER.REAPACK_GETREPOSITORYINFO lua": {
        "prefix": "reaper.ReaPack_GetRepositoryInfo",
        "scope": "lua",
        "body": "reaper.ReaPack_GetRepositoryInfo(${1:string name})$0",
        "description": "Get the infos of the given repository.\n\nautoInstall: 0=manual, 1=when sychronizing, 2=obey user setting\n\n"
    },
    "REAPACK_GETREPOSITORYINFO python": {
        "prefix": "ReaPack_GetRepositoryInfo",
        "scope": "python",
        "body": "ReaPack_GetRepositoryInfo(${1:name}, ${2:urlOut}, ${3:urlOut_sz}, ${4:enabledOut}, ${5:autoInstallOut})$0",
        "description": "Get the infos of the given repository.\n\nautoInstall: 0=manual, 1=when sychronizing, 2=obey user setting\n\n"
    },
    "REAPER.REAPACK_PROCESSQUEUE lua": {
        "prefix": "reaper.ReaPack_ProcessQueue",
        "scope": "lua",
        "body": "reaper.ReaPack_ProcessQueue(${1:boolean refreshUI})$0",
        "description": "Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue).\n\n"
    },
    "REAPACK_PROCESSQUEUE python": {
        "prefix": "ReaPack_ProcessQueue",
        "scope": "python",
        "body": "ReaPack_ProcessQueue(${1:Boolean refreshUI})$0",
        "description": "Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue).\n\n"
    },
    "REAPER.SNM_ADDRECEIVE lua": {
        "prefix": "reaper.SNM_AddReceive",
        "scope": "lua",
        "body": "reaper.SNM_AddReceive(${1:MediaTrack src}, ${2:MediaTrack dest}, ${3:integer type})$0",
        "description": "[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.\n\ntype -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).\n\nNote: obeys default sends preferences, supports frozen tracks, etc..\n\n"
    },
    "SNM_ADDRECEIVE python": {
        "prefix": "SNM_AddReceive",
        "scope": "python",
        "body": "SNM_AddReceive(${1:MediaTrack src}, ${2:MediaTrack dest}, ${3:Int type})$0",
        "description": "[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.\n\ntype -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).\n\nNote: obeys default sends preferences, supports frozen tracks, etc..\n\n"
    },
    "REAPER.SNM_ADDTCPFXPARM lua": {
        "prefix": "reaper.SNM_AddTCPFXParm",
        "scope": "lua",
        "body": "reaper.SNM_AddTCPFXParm(${1:MediaTrack tr}, ${2:integer fxId}, ${3:integer prmId})$0",
        "description": "[S&M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)\n\n"
    },
    "SNM_ADDTCPFXPARM python": {
        "prefix": "SNM_AddTCPFXParm",
        "scope": "python",
        "body": "SNM_AddTCPFXParm(${1:MediaTrack tr}, ${2:Int fxId}, ${3:Int prmId})$0",
        "description": "[S&M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)\n\n"
    },
    "REAPER.SNM_CREATEFASTSTRING lua": {
        "prefix": "reaper.SNM_CreateFastString",
        "scope": "lua",
        "body": "reaper.SNM_CreateFastString(${1:string str})$0",
        "description": "[S&M] Instantiates a new \"fast string\". You must delete this string, see SNM_DeleteFastString.\n\n"
    },
    "SNM_CREATEFASTSTRING python": {
        "prefix": "SNM_CreateFastString",
        "scope": "python",
        "body": "SNM_CreateFastString(${1:String str})$0",
        "description": "[S&M] Instantiates a new \"fast string\". You must delete this string, see SNM_DeleteFastString.\n\n"
    },
    "REAPER.SNM_DELETEFASTSTRING lua": {
        "prefix": "reaper.SNM_DeleteFastString",
        "scope": "lua",
        "body": "reaper.SNM_DeleteFastString(${1:WDL_FastString str})$0",
        "description": "[S&M] Deletes a \"fast string\" instance.\n\n"
    },
    "SNM_DELETEFASTSTRING python": {
        "prefix": "SNM_DeleteFastString",
        "scope": "python",
        "body": "SNM_DeleteFastString(${1:WDL_FastString str})$0",
        "description": "[S&M] Deletes a \"fast string\" instance.\n\n"
    },
    "REAPER.SNM_GETDOUBLECONFIGVAR lua": {
        "prefix": "reaper.SNM_GetDoubleConfigVar",
        "scope": "lua",
        "body": "reaper.SNM_GetDoubleConfigVar(${1:string varname}, ${2:number errvalue})$0",
        "description": "[S&M] Returns a double preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\n"
    },
    "SNM_GETDOUBLECONFIGVAR python": {
        "prefix": "SNM_GetDoubleConfigVar",
        "scope": "python",
        "body": "SNM_GetDoubleConfigVar(${1:String varname}, ${2:Float errvalue})$0",
        "description": "[S&M] Returns a double preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\n"
    },
    "REAPER.SNM_GETFASTSTRING lua": {
        "prefix": "reaper.SNM_GetFastString",
        "scope": "lua",
        "body": "reaper.SNM_GetFastString(${1:WDL_FastString str})$0",
        "description": "[S&M] Gets the \"fast string\" content.\n\n"
    },
    "SNM_GETFASTSTRING python": {
        "prefix": "SNM_GetFastString",
        "scope": "python",
        "body": "SNM_GetFastString(${1:WDL_FastString str})$0",
        "description": "[S&M] Gets the \"fast string\" content.\n\n"
    },
    "REAPER.SNM_GETFASTSTRINGLENGTH lua": {
        "prefix": "reaper.SNM_GetFastStringLength",
        "scope": "lua",
        "body": "reaper.SNM_GetFastStringLength(${1:WDL_FastString str})$0",
        "description": "[S&M] Gets the \"fast string\" length.\n\n"
    },
    "SNM_GETFASTSTRINGLENGTH python": {
        "prefix": "SNM_GetFastStringLength",
        "scope": "python",
        "body": "SNM_GetFastStringLength(${1:WDL_FastString str})$0",
        "description": "[S&M] Gets the \"fast string\" length.\n\n"
    },
    "REAPER.SNM_GETINTCONFIGVAR lua": {
        "prefix": "reaper.SNM_GetIntConfigVar",
        "scope": "lua",
        "body": "reaper.SNM_GetIntConfigVar(${1:string varname}, ${2:integer errvalue})$0",
        "description": "[S&M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\n"
    },
    "SNM_GETINTCONFIGVAR python": {
        "prefix": "SNM_GetIntConfigVar",
        "scope": "python",
        "body": "SNM_GetIntConfigVar(${1:String varname}, ${2:Int errvalue})$0",
        "description": "[S&M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\n"
    },
    "REAPER.SNM_GETMEDIAITEMTAKEBYGUID lua": {
        "prefix": "reaper.SNM_GetMediaItemTakeByGUID",
        "scope": "lua",
        "body": "reaper.SNM_GetMediaItemTakeByGUID(${1:ReaProject project}, ${2:string guid})$0",
        "description": "[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID\n\n"
    },
    "SNM_GETMEDIAITEMTAKEBYGUID python": {
        "prefix": "SNM_GetMediaItemTakeByGUID",
        "scope": "python",
        "body": "SNM_GetMediaItemTakeByGUID(${1:ReaProject project}, ${2:String guid})$0",
        "description": "[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID\n\n"
    },
    "REAPER.SNM_GETPROJECTMARKERNAME lua": {
        "prefix": "reaper.SNM_GetProjectMarkerName",
        "scope": "lua",
        "body": "reaper.SNM_GetProjectMarkerName(${1:ReaProject proj}, ${2:integer num}, ${3:boolean isrgnWDL_FastString name})$0",
        "description": "[S&M] Gets a marker/region name. Returns true if marker/region found.\n\n"
    },
    "SNM_GETPROJECTMARKERNAME python": {
        "prefix": "SNM_GetProjectMarkerName",
        "scope": "python",
        "body": "SNM_GetProjectMarkerName(${1:ReaProject proj}, ${2:Int num}, ${3:Boolean isrgn}, ${4:WDL_FastString name})$0",
        "description": "[S&M] Gets a marker/region name. Returns true if marker/region found.\n\n"
    },
    "REAPER.SNM_GETSETOBJECTSTATE lua": {
        "prefix": "reaper.SNM_GetSetObjectState",
        "scope": "lua",
        "body": "reaper.SNM_GetSetObjectState(${1:identifier objWDL_FastString state}, ${2:boolean setnewvalue}, ${3:boolean wantminimalstate})$0",
        "description": "[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.\n\nWhen getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!\n\nNote: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.\n\n"
    },
    "SNM_GETSETOBJECTSTATE python": {
        "prefix": "SNM_GetSetObjectState",
        "scope": "python",
        "body": "SNM_GetSetObjectState(${1:void obj}, ${2:WDL_FastString state}, ${3:Boolean setnewvalue}, ${4:Boolean wantminimalstate})$0",
        "description": "[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.\n\nWhen getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!\n\nNote: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.\n\n"
    },
    "REAPER.SNM_GETSETSOURCESTATE lua": {
        "prefix": "reaper.SNM_GetSetSourceState",
        "scope": "lua",
        "body": "reaper.SNM_GetSetSourceState(${1:MediaItem item}, ${2:integer takeidxWDL_FastString state}, ${3:boolean setnewvalue})$0",
        "description": "[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.\n\nNote: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2.\n\n"
    },
    "SNM_GETSETSOURCESTATE python": {
        "prefix": "SNM_GetSetSourceState",
        "scope": "python",
        "body": "SNM_GetSetSourceState(${1:MediaItem item}, ${2:Int takeidx}, ${3:WDL_FastString state}, ${4:Boolean setnewvalue})$0",
        "description": "[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.\n\nNote: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2.\n\n"
    },
    "REAPER.SNM_GETSETSOURCESTATE2 lua": {
        "prefix": "reaper.SNM_GetSetSourceState2",
        "scope": "lua",
        "body": "reaper.SNM_GetSetSourceState2(${1:MediaItem_Take takeWDL_FastString state}, ${2:boolean setnewvalue})$0",
        "description": "[S&M] Gets or sets a take source state. Returns false if failed.\n\nNote: this function cannot deal with empty takes, see SNM_GetSetSourceState.\n\n"
    },
    "SNM_GETSETSOURCESTATE2 python": {
        "prefix": "SNM_GetSetSourceState2",
        "scope": "python",
        "body": "SNM_GetSetSourceState2(${1:MediaItem_Take take}, ${2:WDL_FastString state}, ${3:Boolean setnewvalue})$0",
        "description": "[S&M] Gets or sets a take source state. Returns false if failed.\n\nNote: this function cannot deal with empty takes, see SNM_GetSetSourceState.\n\n"
    },
    "REAPER.SNM_GETSOURCETYPE lua": {
        "prefix": "reaper.SNM_GetSourceType",
        "scope": "lua",
        "body": "reaper.SNM_GetSourceType(${1:MediaItem_Take takeWDL_FastString type})$0",
        "description": "[S&M] Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)\n\n"
    },
    "SNM_GETSOURCETYPE python": {
        "prefix": "SNM_GetSourceType",
        "scope": "python",
        "body": "SNM_GetSourceType(${1:MediaItem_Take take}, ${2:WDL_FastString type})$0",
        "description": "[S&M] Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)\n\n"
    },
    "REAPER.SNM_MOVEORREMOVETRACKFX lua": {
        "prefix": "reaper.SNM_MoveOrRemoveTrackFX",
        "scope": "lua",
        "body": "reaper.SNM_MoveOrRemoveTrackFX(${1:MediaTrack tr}, ${2:integer fxId}, ${3:integer what})$0",
        "description": "[S&M] Move or removes a track FX. Returns true if tr has been updated.\n\nfxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.\n\n"
    },
    "SNM_MOVEORREMOVETRACKFX python": {
        "prefix": "SNM_MoveOrRemoveTrackFX",
        "scope": "python",
        "body": "SNM_MoveOrRemoveTrackFX(${1:MediaTrack tr}, ${2:Int fxId}, ${3:Int what})$0",
        "description": "[S&M] Move or removes a track FX. Returns true if tr has been updated.\n\nfxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.\n\n"
    },
    "REAPER.SNM_READMEDIAFILETAG lua": {
        "prefix": "reaper.SNM_ReadMediaFileTag",
        "scope": "lua",
        "body": "reaper.SNM_ReadMediaFileTag(${1:string fn}, ${2:string tag}, ${3:string tagval})$0",
        "description": "[S&M] Reads a media file tag. Supported tags: \"artist\", \"album\", \"genre\", \"comment\", \"title\", or \"year\". Returns false if tag was not found. See SNM_TagMediaFile.\n\n"
    },
    "SNM_READMEDIAFILETAG python": {
        "prefix": "SNM_ReadMediaFileTag",
        "scope": "python",
        "body": "SNM_ReadMediaFileTag(${1:fn}, ${2:tag}, ${3:tagval}, ${4:tagval_sz})$0",
        "description": "[S&M] Reads a media file tag. Supported tags: \"artist\", \"album\", \"genre\", \"comment\", \"title\", or \"year\". Returns false if tag was not found. See SNM_TagMediaFile.\n\n"
    },
    "REAPER.SNM_REMOVERECEIVE lua": {
        "prefix": "reaper.SNM_RemoveReceive",
        "scope": "lua",
        "body": "reaper.SNM_RemoveReceive(${1:MediaTrack tr}, ${2:integer rcvidx})$0",
        "description": "[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated.\n\n"
    },
    "SNM_REMOVERECEIVE python": {
        "prefix": "SNM_RemoveReceive",
        "scope": "python",
        "body": "SNM_RemoveReceive(${1:MediaTrack tr}, ${2:Int rcvidx})$0",
        "description": "[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated.\n\n"
    },
    "REAPER.SNM_REMOVERECEIVESFROM lua": {
        "prefix": "reaper.SNM_RemoveReceivesFrom",
        "scope": "lua",
        "body": "reaper.SNM_RemoveReceivesFrom(${1:MediaTrack tr}, ${2:MediaTrack srctr})$0",
        "description": "[S&M] Removes all receives from srctr. Returns false if nothing updated.\n\n"
    },
    "SNM_REMOVERECEIVESFROM python": {
        "prefix": "SNM_RemoveReceivesFrom",
        "scope": "python",
        "body": "SNM_RemoveReceivesFrom(${1:MediaTrack tr}, ${2:MediaTrack srctr})$0",
        "description": "[S&M] Removes all receives from srctr. Returns false if nothing updated.\n\n"
    },
    "REAPER.SNM_SELECTRESOURCEBOOKMARK lua": {
        "prefix": "reaper.SNM_SelectResourceBookmark",
        "scope": "lua",
        "body": "reaper.SNM_SelectResourceBookmark(${1:string name})$0",
        "description": "[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).\n\n"
    },
    "SNM_SELECTRESOURCEBOOKMARK python": {
        "prefix": "SNM_SelectResourceBookmark",
        "scope": "python",
        "body": "SNM_SelectResourceBookmark(${1:String name})$0",
        "description": "[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).\n\n"
    },
    "REAPER.SNM_SETDOUBLECONFIGVAR lua": {
        "prefix": "reaper.SNM_SetDoubleConfigVar",
        "scope": "lua",
        "body": "reaper.SNM_SetDoubleConfigVar(${1:string varname}, ${2:number newvalue})$0",
        "description": "[S&M] Sets a double preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\n"
    },
    "SNM_SETDOUBLECONFIGVAR python": {
        "prefix": "SNM_SetDoubleConfigVar",
        "scope": "python",
        "body": "SNM_SetDoubleConfigVar(${1:String varname}, ${2:Float newvalue})$0",
        "description": "[S&M] Sets a double preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\n"
    },
    "REAPER.SNM_SETFASTSTRING lua": {
        "prefix": "reaper.SNM_SetFastString",
        "scope": "lua",
        "body": "reaper.SNM_SetFastString(${1:WDL_FastString str}, ${2:string newstr})$0",
        "description": "[S&M] Sets the \"fast string\" content. Returns str for facility.\n\n"
    },
    "SNM_SETFASTSTRING python": {
        "prefix": "SNM_SetFastString",
        "scope": "python",
        "body": "SNM_SetFastString(${1:WDL_FastString str}, ${2:String newstr})$0",
        "description": "[S&M] Sets the \"fast string\" content. Returns str for facility.\n\n"
    },
    "REAPER.SNM_SETINTCONFIGVAR lua": {
        "prefix": "reaper.SNM_SetIntConfigVar",
        "scope": "lua",
        "body": "reaper.SNM_SetIntConfigVar(${1:string varname}, ${2:integer newvalue})$0",
        "description": "[S&M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\n"
    },
    "SNM_SETINTCONFIGVAR python": {
        "prefix": "SNM_SetIntConfigVar",
        "scope": "python",
        "body": "SNM_SetIntConfigVar(${1:String varname}, ${2:Int newvalue})$0",
        "description": "[S&M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\n"
    },
    "REAPER.SNM_SETPROJECTMARKER lua": {
        "prefix": "reaper.SNM_SetProjectMarker",
        "scope": "lua",
        "body": "reaper.SNM_SetProjectMarker(${1:ReaProject proj}, ${2:integer num}, ${3:boolean isrgn}, ${4:number pos}, ${5:number rgnend}, ${6:string name}, ${7:integer color})$0",
        "description": "[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names \"\".\n\n"
    },
    "SNM_SETPROJECTMARKER python": {
        "prefix": "SNM_SetProjectMarker",
        "scope": "python",
        "body": "SNM_SetProjectMarker(${1:ReaProject proj}, ${2:Int num}, ${3:Boolean isrgn}, ${4:Float pos}, ${5:Float rgnend}, ${6:String name}, ${7:Int color})$0",
        "description": "[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names \"\".\n\n"
    },
    "REAPER.SNM_TAGMEDIAFILE lua": {
        "prefix": "reaper.SNM_TagMediaFile",
        "scope": "lua",
        "body": "reaper.SNM_TagMediaFile(${1:string fn}, ${2:string tag}, ${3:string tagval})$0",
        "description": "[S&M] Tags a media file thanks to TagLib. Supported tags: \"artist\", \"album\", \"genre\", \"comment\", \"title\", or \"year\". Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See SNM_ReadMediaFileTag.\n\n"
    },
    "SNM_TAGMEDIAFILE python": {
        "prefix": "SNM_TagMediaFile",
        "scope": "python",
        "body": "SNM_TagMediaFile(${1:String fn}, ${2:String tag}, ${3:String tagval})$0",
        "description": "[S&M] Tags a media file thanks to TagLib. Supported tags: \"artist\", \"album\", \"genre\", \"comment\", \"title\", or \"year\". Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See SNM_ReadMediaFileTag.\n\n"
    },
    "REAPER.SNM_TIERESOURCESLOTACTIONS lua": {
        "prefix": "reaper.SNM_TieResourceSlotActions",
        "scope": "lua",
        "body": "reaper.SNM_TieResourceSlotActions(${1:integer bookmarkId})$0",
        "description": "[S&M] Attach Resources slot actions to a given bookmark.\n\n"
    },
    "SNM_TIERESOURCESLOTACTIONS python": {
        "prefix": "SNM_TieResourceSlotActions",
        "scope": "python",
        "body": "SNM_TieResourceSlotActions(${1:Int bookmarkId})$0",
        "description": "[S&M] Attach Resources slot actions to a given bookmark.\n\n"
    },
    "REAPER.SN_FOCUSMIDIEDITOR lua": {
        "prefix": "reaper.SN_FocusMIDIEditor",
        "scope": "lua",
        "body": "reaper.SN_FocusMIDIEditor()$0",
        "description": "Focuses the active/open MIDI editor.\n\n"
    },
    "SN_FOCUSMIDIEDITOR python": {
        "prefix": "SN_FocusMIDIEditor",
        "scope": "python",
        "body": "SN_FocusMIDIEditor()$0",
        "description": "Focuses the active/open MIDI editor.\n\n"
    },
    "REAPER.ULT_GETMEDIAITEMNOTE lua": {
        "prefix": "reaper.ULT_GetMediaItemNote",
        "scope": "lua",
        "body": "reaper.ULT_GetMediaItemNote(${1:MediaItem item})$0",
        "description": "[ULT] Get item notes.\n\n"
    },
    "ULT_GETMEDIAITEMNOTE python": {
        "prefix": "ULT_GetMediaItemNote",
        "scope": "python",
        "body": "ULT_GetMediaItemNote(${1:MediaItem item})$0",
        "description": "[ULT] Get item notes.\n\n"
    },
    "REAPER.ULT_SETMEDIAITEMNOTE lua": {
        "prefix": "reaper.ULT_SetMediaItemNote",
        "scope": "lua",
        "body": "reaper.ULT_SetMediaItemNote(${1:MediaItem item}, ${2:string note})$0",
        "description": "[ULT] Set item notes.\n\n"
    },
    "ULT_SETMEDIAITEMNOTE python": {
        "prefix": "ULT_SetMediaItemNote",
        "scope": "python",
        "body": "ULT_SetMediaItemNote(${1:MediaItem item}, ${2:String note})$0",
        "description": "[ULT] Set item notes.\n\n"
    },
    "ABS eel2": {
        "prefix": "abs",
        "scope": "eel2",
        "body": "abs(${1:value})$0",
        "description": "Returns the absolute value of the parameter.\n\n"
    },
    "ACOS eel2": {
        "prefix": "acos",
        "scope": "eel2",
        "body": "acos(${1:value})$0",
        "description": "Returns the arc cosine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.\n\n"
    },
    "ASIN eel2": {
        "prefix": "asin",
        "scope": "eel2",
        "body": "asin(${1:value})$0",
        "description": "Returns the arc sine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.\n\n"
    },
    "ATAN eel2": {
        "prefix": "atan",
        "scope": "eel2",
        "body": "atan(${1:value})$0",
        "description": "Returns the arc tangent of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.\n\n"
    },
    "ATAN2 eel2": {
        "prefix": "atan2",
        "scope": "eel2",
        "body": "atan2(${1:numerator}, ${2:denominator})$0",
        "description": "Returns the arc tangent of the numerator divided by the denominator, allowing the denominator to be 0, and using their signs to produce a more meaningful result.\n\n"
    },
    "ATEXIT eel2": {
        "prefix": "atexit",
        "scope": "eel2",
        "body": "atexit(\"${1:code}\")$0",
        "description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.\n\n"
    },
    "CEIL eel2": {
        "prefix": "ceil",
        "scope": "eel2",
        "body": "ceil(${1:value})$0",
        "description": "Returns the value rounded to the next highest integer (ceil(3.1)==4, ceil(-3.9)==-3).\n\n"
    },
    "CONVOLVE_C eel2": {
        "prefix": "convolve_c",
        "scope": "eel2",
        "body": "convolve_c(${1:dest}, ${2:src}, ${3:size})$0",
        "description": "Multiplies each of size complex pairs in dest by the complex pairs in src. Often used for convolution.\n\n"
    },
    "COS eel2": {
        "prefix": "cos",
        "scope": "eel2",
        "body": "cos(${1:angle})$0",
        "description": "Returns the cosine of the angle specified (specified in radians).\n\n"
    },
    "DEFER eel2": {
        "prefix": "defer",
        "scope": "eel2",
        "body": "defer(\"${1:code}\")$0",
        "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\n\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\n"
    },
    "EVAL eel2": {
        "prefix": "eval",
        "scope": "eel2",
        "body": "eval(\"${1:code}\")$0",
        "description": "Executes code passed in. Code can use functions, but functions created in code can't be used elsewhere.\n\n"
    },
    "EXP eel2": {
        "prefix": "exp",
        "scope": "eel2",
        "body": "exp(${1:exponent})$0",
        "description": "Returns the number e ($e, approximately 2.718) raised to the parameter-th power. This function is significantly faster than pow() or the ^ operator.\n\n"
    },
    "FCLOSE eel2": {
        "prefix": "fclose",
        "scope": "eel2",
        "body": "fclose(${1:fp})$0",
        "description": "Closes a file previously opened with fopen().\n\n"
    },
    "FEOF eel2": {
        "prefix": "feof",
        "scope": "eel2",
        "body": "feof(${1:fp})$0",
        "description": "Returns nonzero if the file fp is at the end of file.\n\n"
    },
    "FFLUSH eel2": {
        "prefix": "fflush",
        "scope": "eel2",
        "body": "fflush(${1:fp})$0",
        "description": "If file fp is open for writing, flushes out any buffered data to disk.\n\n"
    },
    "FFT eel2": {
        "prefix": "fft",
        "scope": "eel2",
        "body": "fft(${1:buffer}, ${2:size})$0",
        "description": "Performs a FFT on the data in the local memory buffer at the offset specified by the first parameter. The size of the FFT is specified by the second parameter, which must be 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The outputs are permuted, so if you plan to use them in-order, call fft_permute(buffer, size) before and fft_ipermute(buffer,size) after your in-order use. Your inputs or outputs will need to be scaled down by 1/size, if used.\n\nNote that fft()/ifft() require real / imaginary input pairs, so a 256 point FFT actually works with 512 items.\n\nNote that fft()/ifft() must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.\n\n"
    },
    "FFT_IPERMUTE eel2": {
        "prefix": "fft_ipermute",
        "scope": "eel2",
        "body": "fft_ipermute(${1:buffer}, ${2:size})$0",
        "description": "Permute the input for ifft(), taking bands from in-order to the order ifft() requires. See fft() for more information.\n\n"
    },
    "FFT_PERMUTE eel2": {
        "prefix": "fft_permute",
        "scope": "eel2",
        "body": "fft_permute(${1:buffer}, ${2:size})$0",
        "description": "Permute the output of fft() to have bands in-order. See fft() for more information.\n\n"
    },
    "FFT_REAL eel2": {
        "prefix": "fft_real",
        "scope": "eel2",
        "body": "fft_real(${1:buffer}, ${2:size})$0",
        "description": "Performs an FFT, but takes size input samples and produces size/2 complex output pairs. Usually used along with fft_permute(size/2). Inputs/outputs will need to be scaled by 0.5/size.\n\n"
    },
    "FGETC eel2": {
        "prefix": "fgetc",
        "scope": "eel2",
        "body": "fgetc(${1:fp})$0",
        "description": "Reads a character from file fp, returns -1 if EOF.\n\n"
    },
    "FGETS eel2": {
        "prefix": "fgets",
        "scope": "eel2",
        "body": "fgets(${1:fp}, ${2:#str})$0",
        "description": "Reads a line from file fp into #str. Returns length of #str read.\n\n"
    },
    "FLOOR eel2": {
        "prefix": "floor",
        "scope": "eel2",
        "body": "floor(${1:value})$0",
        "description": "Returns the value rounded to the next lowest integer (floor(3.9)==3, floor(-3.1)==-4).\n\n"
    },
    "FOPEN eel2": {
        "prefix": "fopen",
        "scope": "eel2",
        "body": "fopen(\"${1:fn}\", \"${2:mode}\")$0",
        "description": "Opens a file \"fn\" with mode \"mode\". For read, use \"r\" or \"rb\", write \"w\" or \"wb\". Returns a positive integer on success.\n\n"
    },
    "FPRINTF eel2": {
        "prefix": "fprintf",
        "scope": "eel2",
        "body": "fprintf(${1:fp}, \"${2:format}\", ${3:[,...]})$0",
        "description": "Formats a string and writes it to file fp. For more information on format specifiers, see sprintf(). Returns bytes written to file.\n\n"
    },
    "FREAD eel2": {
        "prefix": "fread",
        "scope": "eel2",
        "body": "fread(${1:fp}, ${2:#str}, ${3:length})$0",
        "description": "Reads from file fp into #str, up to length bytes. Returns actual length read, or negative if error.\n\n"
    },
    "FREEMBUF eel2": {
        "prefix": "freembuf",
        "scope": "eel2",
        "body": "freembuf(${1:address})$0",
        "description": "Hints the runtime that memory above the address specified may no longer be used. The runtime may, at its leisure, choose to lose the contents of memory above the address specified.\n\n"
    },
    "FSEEK eel2": {
        "prefix": "fseek",
        "scope": "eel2",
        "body": "fseek(${1:fp}, ${2:offset}, ${3:whence})$0",
        "description": "Seeks file fp, offset bytes from whence reference. Whence negative specifies start of file, positive whence specifies end of file, and zero whence specifies current file position.\n\n"
    },
    "FTELL eel2": {
        "prefix": "ftell",
        "scope": "eel2",
        "body": "ftell(${1:fp})$0",
        "description": "Retunrs the current file position.\n\n"
    },
    "FWRITE eel2": {
        "prefix": "fwrite",
        "scope": "eel2",
        "body": "fwrite(${1:fp}, ${2:#str}, ${3:len})$0",
        "description": "Writes up to len characters of #str to file fp. If len is less than 1, the full contents of #str will be written. Returns the number of bytes written to file.\n\n"
    },
    "GET_ACTION_CONTEXT eel2": {
        "prefix": "get_action_context",
        "scope": "eel2",
        "body": "get_action_context(${1:#filename}, ${2:sectionID}, ${3:cmdID}, ${4:mode}, ${5:resolution}, ${6:val})$0",
        "description": "Queries contextual information about the script, typically MIDI/OSC input values.\n\nReturns true if a new value has been updated.\n\nval will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.\n\nNotes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.\n\n"
    },
    "GFX_R eel2": {
        "prefix": "gfx_r",
        "scope": "eel2",
        "body": "gfx_r$0",
        "description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
    },
    "GFX_G eel2": {
        "prefix": "gfx_g",
        "scope": "eel2",
        "body": "gfx_g$0",
        "description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
    },
    "GFX_B eel2": {
        "prefix": "gfx_b",
        "scope": "eel2",
        "body": "gfx_b$0",
        "description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
    },
    "GFX_A eel2": {
        "prefix": "gfx_a",
        "scope": "eel2",
        "body": "gfx_a$0",
        "description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
    },
    "GFX_W eel2": {
        "prefix": "gfx_w",
        "scope": "eel2",
        "body": "gfx_w$0",
        "description": "These are set to the current width and height of the UI framebuffer. "
    },
    "GFX_H eel2": {
        "prefix": "gfx_h",
        "scope": "eel2",
        "body": "gfx_h$0",
        "description": "These are set to the current width and height of the UI framebuffer. "
    },
    "GFX_X eel2": {
        "prefix": "gfx_x",
        "scope": "eel2",
        "body": "gfx_x$0",
        "description": "These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. "
    },
    "GFX_Y eel2": {
        "prefix": "gfx_y",
        "scope": "eel2",
        "body": "gfx_y$0",
        "description": "These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. "
    },
    "GFX_MODE eel2": {
        "prefix": "gfx_mode",
        "scope": "eel2",
        "body": "gfx_mode$0",
        "description": "Set to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx_a to negative and use gfx_mode as additive). Add 2.0 to disable source alpha for gfx_blit(). Add 4.0 to disable filtering for gfx_blit(). "
    },
    "GFX_CLEAR eel2": {
        "prefix": "gfx_clear",
        "scope": "eel2",
        "body": "gfx_clear$0",
        "description": "If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). "
    },
    "GFX_DEST eel2": {
        "prefix": "gfx_dest",
        "scope": "eel2",
        "body": "gfx_dest$0",
        "description": "Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image)."
    },
    "GFX_TEXTH eel2": {
        "prefix": "gfx_texth",
        "scope": "eel2",
        "body": "gfx_texth$0",
        "description": "Set to the height of a line of text in the current font. Do not modify this variable."
    },
    "GFX_EXT_RETINA eel2": {
        "prefix": "gfx_ext_retina",
        "scope": "eel2",
        "body": "gfx_ext_retina$0",
        "description": "If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx_w/gfx_h/etc will be doubled."
    },
    "MOUSE_X eel2": {
        "prefix": "mouse_x",
        "scope": "eel2",
        "body": "mouse_x$0",
        "description": "mouse_x and mouse_y are set to the coordinates of the mouse relative to the graphics window."
    },
    "MOUSE_Y eel2": {
        "prefix": "mouse_y",
        "scope": "eel2",
        "body": "mouse_y$0",
        "description": "mouse_x and mouse_y are set to the coordinates of the mouse relative to the graphics window."
    },
    "MOUSE_WHEEL eel2": {
        "prefix": "mouse_wheel",
        "scope": "eel2",
        "body": "mouse_wheel$0",
        "description": "mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it."
    },
    "MOUSE_HWHEEL eel2": {
        "prefix": "mouse_hwheel",
        "scope": "eel2",
        "body": "mouse_hwheel$0",
        "description": "mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it."
    },
    "GFX_ARC eel2": {
        "prefix": "gfx_arc",
        "scope": "eel2",
        "body": "gfx_arc(${1:x}, ${2:y}, ${3:r}, ${4:ang1}, ${5:ang2}, ${6:[,antialias]})$0",
        "description": "Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.\n\n"
    },
    "GFX_BLIT eel2": {
        "prefix": "gfx_blit",
        "scope": "eel2",
        "body": "gfx_blit(${1:source}, ${2:scale}, ${3:rotation})$0",
        "description": "If three parameters are specified, copies the entirity of the source bitmap to gfx_x,gfx_y using current opacity and copy mode (set with gfx_a, gfx_mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians).\n\nFor the \"source\" parameter specify -1 to use the main framebuffer as source, or an image index (see gfx_loadimg()).\n\n"
    },
    "GFX_BLITEXT eel2": {
        "prefix": "gfx_blitext",
        "scope": "eel2",
        "body": "gfx_blitext(${1:source}, ${2:coordinatelist}, ${3:rotation})$0",
        "description": "Deprecated, use gfx_blit instead.\n\n"
    },
    "GFX_BLURTO eel2": {
        "prefix": "gfx_blurto",
        "scope": "eel2",
        "body": "gfx_blurto(${1:x}, ${2:y})$0",
        "description": "Blurs the region of the screen between gfx_x,gfx_y and x,y, and updates gfx_x,gfx_y to x,y.\n\n"
    },
    "GFX_CIRCLE eel2": {
        "prefix": "gfx_circle",
        "scope": "eel2",
        "body": "gfx_circle(${1:x}, ${2:y}, ${3:r}, ${4:[,fill,antialias]})$0",
        "description": "Draws a circle, optionally filling/antialiasing. \n\n"
    },
    "GFX_CLIENTTOSCREEN eel2": {
        "prefix": "gfx_clienttoscreen",
        "scope": "eel2",
        "body": "gfx_clienttoscreen(${1:x}, ${2:y})$0",
        "description": "Converts client coordinates x,y to screen coordinates.\n\n"
    },
    "GFX_DELTABLIT eel2": {
        "prefix": "gfx_deltablit",
        "scope": "eel2",
        "body": "gfx_deltablit(${1:srcimg}, ${2:srcx}, ${3:srcy}, ${4:srcw}, ${5:srch}, ${6:destx}, ${7:desty}, ${8:destw}, ${9:desth}, ${10:dsdx}, ${11:dtdx}, ${12:dsdy}, ${13:dtdy}, ${14:dsdxdy}, ${15:dtdxdy})$0",
        "description": "Blits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. \n\n"
    },
    "GFX_DOCK eel2": {
        "prefix": "gfx_dock",
        "scope": "eel2",
        "body": "gfx_dock(${1:v}, ${2:[,wx,wy,ww,wh]})$0",
        "description": "Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh are specified, they will be filled with the undocked window position/size\n\n"
    },
    "GFX_DRAWCHAR eel2": {
        "prefix": "gfx_drawchar",
        "scope": "eel2",
        "body": "gfx_drawchar(${1:char})$0",
        "description": "Draws the character (can be a numeric ASCII code as well), to gfx_x, gfx_y, and moves gfx_x over by the size of the character.\n\n"
    },
    "GFX_DRAWNUMBER eel2": {
        "prefix": "gfx_drawnumber",
        "scope": "eel2",
        "body": "gfx_drawnumber(${1:n}, ${2:ndigits})$0",
        "description": "Draws the number n with ndigits of precision to gfx_x, gfx_y, and updates gfx_x to the right side of the drawing. The text height is gfx_texth.\n\n"
    },
    "GFX_DRAWSTR eel2": {
        "prefix": "gfx_drawstr",
        "scope": "eel2",
        "body": "gfx_drawstr(\"${1:str}\", ${2:[,flags,right,bottom]})$0",
        "description": "Draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y so that subsequent draws will occur in a similar place.\n\nIf flags, right ,bottom passed in:\n\nflags&1: center horizontally\n\nflags&2: right justify\n\nflags&4: center vertically\n\nflags&8: bottom justify\n\nflags&256: ignore right/bottom, otherwise text is clipped to (gfx_x, gfx_y, right, bottom)\n\n"
    },
    "GFX_GETCHAR eel2": {
        "prefix": "gfx_getchar",
        "scope": "eel2",
        "body": "gfx_getchar(${1:[char]})$0",
        "description": "If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.\n\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. \n\nModified and special keys can also be returned, including:\n\nCtrl/Cmd+A..Ctrl+Z as 1..26\n\nCtrl/Cmd+Alt+A..Z as 257..282\n\nAlt+A..Z as 'A'+256..'Z'+256\n\n27 for ESC\n\n13 for Enter\n\n' ' for space\n\n"
    },
    "GFX_GETDROPFILE eel2": {
        "prefix": "gfx_getdropfile",
        "scope": "eel2",
        "body": "gfx_getdropfile(${1:idx}, ${2:[,#str]})$0",
        "description": "Enumerates any drag/dropped files. call gfx_dropfile(-1) to clear the list when finished. Returns 1 if idx is valid, 0 if idx is out of range.\n\n"
    },
    "GFX_GETFONT eel2": {
        "prefix": "gfx_getfont",
        "scope": "eel2",
        "body": "gfx_getfont(${1:[#str]})$0",
        "description": "Returns current font index. If a string is passed, it will receive the actual font face used by this font, if available.\n\n"
    },
    "GFX_GETIMGDIM eel2": {
        "prefix": "gfx_getimgdim",
        "scope": "eel2",
        "body": "gfx_getimgdim(${1:image}, ${2:w}, ${3:h})$0",
        "description": "Retreives the dimensions of image (representing a filename: index number) into w and h. Sets these values to 0 if an image failed loading (or if the filename index is invalid).\n\n"
    },
    "GFX_GETPIXEL eel2": {
        "prefix": "gfx_getpixel",
        "scope": "eel2",
        "body": "gfx_getpixel(${1:r}, ${2:g}, ${3:b})$0",
        "description": "Gets the value of the pixel at gfx_x,gfx_y into r,g,b. \n\n"
    },
    "GFX_GRADRECT eel2": {
        "prefix": "gfx_gradrect",
        "scope": "eel2",
        "body": "gfx_gradrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:r}, ${6:g}, ${7:b}, ${8:a}, ${9:[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady]})$0",
        "description": "Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.\n\n"
    },
    "GFX_INIT eel2": {
        "prefix": "gfx_init",
        "scope": "eel2",
        "body": "gfx_init(\"${1:name}\", ${2:[,width,height,dockstate,xpos,ypos]})$0",
        "description": "Initializes the graphics window with title name. Suggested width and height can be specified.\n\nOnce the graphics window is open, gfx_update() should be called periodically. \n\n"
    },
    "GFX_LINE eel2": {
        "prefix": "gfx_line",
        "scope": "eel2",
        "body": "gfx_line(${1:x}, ${2:y}, ${3:x2}, ${4:y2}, ${5:[,aa]})$0",
        "description": "Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased. \n\n"
    },
    "GFX_LINETO eel2": {
        "prefix": "gfx_lineto",
        "scope": "eel2",
        "body": "gfx_lineto(${1:x}, ${2:y}, ${3:[,aa]})$0",
        "description": "Draws a line from gfx_x,gfx_y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx_x and gfx_y to x,y.\n\n"
    },
    "GFX_LOADIMG eel2": {
        "prefix": "gfx_loadimg",
        "scope": "eel2",
        "body": "gfx_loadimg(${1:image}, \"${2:filename}\")$0",
        "description": "Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. \n\n"
    },
    "GFX_MEASURECHAR eel2": {
        "prefix": "gfx_measurechar",
        "scope": "eel2",
        "body": "gfx_measurechar(${1:character}, ${2:&w}, ${3:&h})$0",
        "description": "Measures the drawing dimensions of a character with the current font (as set by gfx_setfont). \n\n"
    },
    "GFX_MEASURESTR eel2": {
        "prefix": "gfx_measurestr",
        "scope": "eel2",
        "body": "gfx_measurestr(\"${1:str}\", ${2:&w}, ${3:&h})$0",
        "description": "Measures the drawing dimensions of a string with the current font (as set by gfx_setfont). \n\n"
    },
    "GFX_MULADDRECT eel2": {
        "prefix": "gfx_muladdrect",
        "scope": "eel2",
        "body": "gfx_muladdrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:mul_r}, ${6:mul_g}, ${7:mul_b}, ${8:[,mul_a,add_r,add_g,add_b,add_a]})$0",
        "description": "Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.\n\n"
    },
    "GFX_PRINTF eel2": {
        "prefix": "gfx_printf",
        "scope": "eel2",
        "body": "gfx_printf(\"${1:format}\", ${2:[, ...]})$0",
        "description": "Formats and draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()\n\n"
    },
    "GFX_QUIT eel2": {
        "prefix": "gfx_quit",
        "scope": "eel2",
        "body": "gfx_quit()$0",
        "description": "Closes the graphics window.\n\n"
    },
    "GFX_RECT eel2": {
        "prefix": "gfx_rect",
        "scope": "eel2",
        "body": "gfx_rect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:[,filled]})$0",
        "description": "Fills a rectangle at x,y, w,h pixels in dimension, filled by default. \n\n"
    },
    "GFX_RECTTO eel2": {
        "prefix": "gfx_rectto",
        "scope": "eel2",
        "body": "gfx_rectto(${1:x}, ${2:y})$0",
        "description": "Fills a rectangle from gfx_x,gfx_y to x,y. Updates gfx_x,gfx_y to x,y. \n\n"
    },
    "GFX_ROUNDRECT eel2": {
        "prefix": "gfx_roundrect",
        "scope": "eel2",
        "body": "gfx_roundrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:radius}, ${6:[,antialias]})$0",
        "description": "Draws a rectangle with rounded corners. \n\n"
    },
    "GFX_SCREENTOCLIENT eel2": {
        "prefix": "gfx_screentoclient",
        "scope": "eel2",
        "body": "gfx_screentoclient(${1:x}, ${2:y})$0",
        "description": "Converts screen coordinates x,y to client coordinates.\n\n"
    },
    "GFX_SET eel2": {
        "prefix": "gfx_set",
        "scope": "eel2",
        "body": "gfx_set(${1:r}, ${2:[,g,b,a,mode,dest]})$0",
        "description": "Sets gfx_r/gfx_g/gfx_b/gfx_a/gfx_mode, sets gfx_dest if final parameter specified\n\n"
    },
    "GFX_SETCURSOR eel2": {
        "prefix": "gfx_setcursor",
        "scope": "eel2",
        "body": "gfx_setcursor(${1:resource_id}, ${2:custom_cursor_name})$0",
        "description": "Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like \"arrow\" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.\n\n"
    },
    "GFX_SETFONT eel2": {
        "prefix": "gfx_setfont",
        "scope": "eel2",
        "body": "gfx_setfont(${1:idx}, \"${2:[,fontface, sz, flags]}\")$0",
        "description": "Can select a font and optionally configure it. idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font, specify fontface such as \"Arial\", sz of 8-100, and optionally specify flags, which is a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. These flags may or may not be supported depending on the font and OS. After calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.\n\n"
    },
    "GFX_SETIMGDIM eel2": {
        "prefix": "gfx_setimgdim",
        "scope": "eel2",
        "body": "gfx_setimgdim(${1:image}, ${2:w}, ${3:h})$0",
        "description": "Resize image referenced by index 0..1024-1, width and height must be 0-2048. The contents of the image will be undefined after the resize.\n\n"
    },
    "GFX_SETPIXEL eel2": {
        "prefix": "gfx_setpixel",
        "scope": "eel2",
        "body": "gfx_setpixel(${1:r}, ${2:g}, ${3:b})$0",
        "description": "Writes a pixel of r,g,b to gfx_x,gfx_y.\n\n"
    },
    "GFX_SHOWMENU eel2": {
        "prefix": "gfx_showmenu",
        "scope": "eel2",
        "body": "gfx_showmenu(\"${1:str}\")$0",
        "description": "Shows a popup menu at gfx_x,gfx_y. str is a list of fields separated by | characters. Each field represents a menu item.\n\nFields can start with special characters:\n\n# : grayed out\n\n! : checked\n\n> : this menu item shows a submenu\n\n< : last item in the current submenu\n\nAn empty field will appear as a separator in the menu. gfx_showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.\n\nExample:\n\ngfx_showmenu(\"first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu\")\n\n"
    },
    "GFX_TRANSFORMBLIT eel2": {
        "prefix": "gfx_transformblit",
        "scope": "eel2",
        "body": "gfx_transformblit(${1:srcimg}, ${2:destx}, ${3:desty}, ${4:destw}, ${5:desth}, ${6:div_w}, ${7:div_h}, ${8:table})$0",
        "description": "Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (this table must not cross a 65536 item boundary). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.\n\n"
    },
    "GFX_TRIANGLE eel2": {
        "prefix": "gfx_triangle",
        "scope": "eel2",
        "body": "gfx_triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:[x4,y4...]})$0",
        "description": "Draws a filled triangle, or any convex polygon. \n\n"
    },
    "GFX_UPDATE eel2": {
        "prefix": "gfx_update",
        "scope": "eel2",
        "body": "gfx_update()$0",
        "description": "Updates the graphics display, if opened\n\n"
    },
    "IFFT eel2": {
        "prefix": "ifft",
        "scope": "eel2",
        "body": "ifft(${1:buffer}, ${2:size})$0",
        "description": "Perform an inverse FFT. For more information see fft().\n\n"
    },
    "IFFT_REAL eel2": {
        "prefix": "ifft_real",
        "scope": "eel2",
        "body": "ifft_real(${1:buffer}, ${2:size})$0",
        "description": "Performs an inverse FFT, but takes size/2 complex input pairs and produces size real output values. Usually used along with fft_ipermute(size/2).\n\n"
    },
    "INVSQRT eel2": {
        "prefix": "invsqrt",
        "scope": "eel2",
        "body": "invsqrt(${1:value})$0",
        "description": "Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter.\n\n"
    },
    "LOG eel2": {
        "prefix": "log",
        "scope": "eel2",
        "body": "log(${1:value})$0",
        "description": "Returns the natural logarithm (base e) of the parameter. If the value is not greater than 0, the return value is undefined.\n\n"
    },
    "LOG10 eel2": {
        "prefix": "log10",
        "scope": "eel2",
        "body": "log10(${1:value})$0",
        "description": "Returns the base-10 logarithm of the parameter. If the value is not greater than 0, the return value is undefined.\n\n"
    },
    "LOOP eel2": {
        "prefix": "loop",
        "scope": "eel2",
        "body": "loop(${1:count}, ${2:expression})$0",
        "description": "Evaluates count once, and then executes expression count, but not more than 1048576, times.\n\n"
    },
    "MATCH eel2": {
        "prefix": "match",
        "scope": "eel2",
        "body": "match(\"${1:needle}\", \"${2:haystack}\", ${3:[, ...]})$0",
        "description": "Searches for the first parameter in the second parameter, using a simplified regular expression syntax.\n\n* = match 0 or more characters\n\n*? = match 0 or more characters, lazy\n\n+ = match 1 or more characters\n\n+? = match 1 or more characters, lazy\n\n? = match one character\n\nYou can also use format specifiers to match certain types of data, and optionally put that into a variable:\n\n%s means 1 or more chars\n\n%0s means 0 or more chars\n\n%5s means exactly 5 chars\n\n%5-s means 5 or more chars\n\n%-10s means 1-10 chars\n\n%3-5s means 3-5 chars\n\n%0-5s means 0-5 chars\n\n%x, %d, %u, and %f are available for use similarly\n\n%c can be used, but can't take any length modifiers\n\nUse uppercase (%S, %D, etc) for lazy matching\n\nSee also sprintf() for other notes, including specifying direct variable references via {}.\n\n"
    },
    "MATCHI eel2": {
        "prefix": "matchi",
        "scope": "eel2",
        "body": "matchi(\"${1:needle}\", \"${2:haystack}\", ${3:[, ...]})$0",
        "description": "Case-insensitive version of match().\n\n"
    },
    "MAX eel2": {
        "prefix": "max",
        "scope": "eel2",
        "body": "max(${1:&value}, ${2:&value})$0",
        "description": "Returns (by reference) the maximum value of the two parameters. Since max() returns by reference, expressions such as max(x,y) = 5 are possible.\n\n"
    },
    "MEM_GET_VALUES eel2": {
        "prefix": "mem_get_values",
        "scope": "eel2",
        "body": "mem_get_values(${1:offset}, ${2:...})$0",
        "description": "Reads values from memory starting at offset into variables specified. Slower than regular memory reads for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.\n\n"
    },
    "MEM_SET_VALUES eel2": {
        "prefix": "mem_set_values",
        "scope": "eel2",
        "body": "mem_set_values(${1:offset}, ${2:...})$0",
        "description": "Writes values to memory starting at offset from variables specified. Slower than regular memory writes for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.\n\n"
    },
    "MEMCPY eel2": {
        "prefix": "memcpy",
        "scope": "eel2",
        "body": "memcpy(${1:dest}, ${2:src}, ${3:length})$0",
        "description": "Copies length items of memory from src to dest. Regions are permitted to overlap.\n\n"
    },
    "MEMSET eel2": {
        "prefix": "memset",
        "scope": "eel2",
        "body": "memset(${1:offset}, ${2:value}, ${3:length})$0",
        "description": "Sets length items of memory at offset to value.\n\n"
    },
    "MIN eel2": {
        "prefix": "min",
        "scope": "eel2",
        "body": "min(${1:&value}, ${2:&value})$0",
        "description": "Returns (by reference) the minimum value of the two parameters. Since min() returns by reference, expressions such as min(x,y) = 5 are possible.\n\n"
    },
    "PRINTF eel2": {
        "prefix": "printf",
        "scope": "eel2",
        "body": "printf(\"${1:format}\", ${2:[, ...]})$0",
        "description": "Output formatted string to system-specific destination, see sprintf() for more information\n\n"
    },
    "RAND eel2": {
        "prefix": "rand",
        "scope": "eel2",
        "body": "rand(${1:[max]})$0",
        "description": "Returns a psuedorandom real number between 0 and the parameter, inclusive. If the parameter is omitted or less than 1.0, 1.0 is used as a maximum instead.\n\n"
    },
    "RUNLOOP eel2": {
        "prefix": "runloop",
        "scope": "eel2",
        "body": "runloop(\"${1:code}\")$0",
        "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\n\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\n"
    },
    "SIGN eel2": {
        "prefix": "sign",
        "scope": "eel2",
        "body": "sign(${1:value})$0",
        "description": "Returns 1.0 if the parameter is greater than 0, -1.0 if the parameter is less than 0, or 0 if the parameter is 0.\n\n"
    },
    "SIN eel2": {
        "prefix": "sin",
        "scope": "eel2",
        "body": "sin(${1:angle})$0",
        "description": "Returns the sine of the angle specified (specified in radians -- to convert from degrees to radians, multiply by $pi/180, or 0.017453).\n\n"
    },
    "SLEEP eel2": {
        "prefix": "sleep",
        "scope": "eel2",
        "body": "sleep(${1:ms})$0",
        "description": "Yields the CPU for the millisecond count specified, calling Sleep() on Windows or usleep() on other platforms.\n\n"
    },
    "SPRINTF eel2": {
        "prefix": "sprintf",
        "scope": "eel2",
        "body": "sprintf(${1:#dest}, \"${2:format}\", ${3:[, ...]})$0",
        "description": "Formats a string and stores it in #dest. Format specifiers begin with %, and may include:\n\n%% = %\n\n%s = string from parameter\n\n%d = parameter as integer\n\n%i = parameter as integer\n\n%u = parameter as unsigned integer\n\n%x = parameter as hex (lowercase) integer\n\n%X = parameter as hex (uppercase) integer\n\n%c = parameter as character\n\n%f = parameter as floating point\n\n%e = parameter as floating point (scientific notation, lowercase)\n\n%E = parameter as floating point (scientific notation, uppercase)\n\n%g = parameter as floating point (shortest representation, lowercase)\n\n%G = parameter as floating point (shortest representation, uppercase)\n\nMany standard C printf() modifiers can be used, including:\n\n%.10s = string, but only print up to 10 characters\n\n%-10s = string, left justified to 10 characters\n\n%10s = string, right justified to 10 characters\n\n%+f = floating point, always show sign\n\n%.4f = floating point, minimum of 4 digits after decimal point\n\n%10d = integer, minimum of 10 digits (space padded)\n\n%010f = integer, minimum of 10 digits (zero padded)\n\nValues for format specifiers can be specified as additional parameters to sprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).\n\n"
    },
    "SQR eel2": {
        "prefix": "sqr",
        "scope": "eel2",
        "body": "sqr(${1:value})$0",
        "description": "Returns the square of the parameter (similar to value*value, but only evaluating value once).\n\n"
    },
    "SQRT eel2": {
        "prefix": "sqrt",
        "scope": "eel2",
        "body": "sqrt(${1:value})$0",
        "description": "Returns the square root of the parameter. If the parameter is negative, the return value is undefined.\n\n"
    },
    "STACK_EXCH eel2": {
        "prefix": "stack_exch",
        "scope": "eel2",
        "body": "stack_exch(${1:&value})$0",
        "description": "Exchanges a value with the top of the stack, and returns a reference to the parameter (with the new value).\n\n"
    },
    "STACK_PEEK eel2": {
        "prefix": "stack_peek",
        "scope": "eel2",
        "body": "stack_peek(${1:index})$0",
        "description": "Returns a reference to the item on the top of the stack (if index is 0), or to the Nth item on the stack if index is greater than 0. \n\n"
    },
    "STACK_POP eel2": {
        "prefix": "stack_pop",
        "scope": "eel2",
        "body": "stack_pop(${1:&value})$0",
        "description": "Pops a value from the user stack into value, or into a temporary buffer if value is not specified, and returns a reference to where the stack was popped. Note that no checking is done to determine if the stack is empty, and as such stack_pop() will never fail.\n\n"
    },
    "STACK_PUSH eel2": {
        "prefix": "stack_push",
        "scope": "eel2",
        "body": "stack_push(${1:&value})$0",
        "description": "Pushes value onto the user stack, returns a reference to the parameter.\n\n"
    },
    "STR_DELSUB eel2": {
        "prefix": "str_delsub",
        "scope": "eel2",
        "body": "str_delsub(${1:#str}, ${2:pos}, ${3:len})$0",
        "description": "Deletes len characters at offset pos from #str, and returns #str.\n\n"
    },
    "STR_GETCHAR eel2": {
        "prefix": "str_getchar",
        "scope": "eel2",
        "body": "str_getchar(\"${1:str}\", ${2:offset}, ${3:[,type]})$0",
        "description": "Returns the data at byte-offset offset of str. If offset is negative, position is relative to end of string.type defaults to signed char, but can be specified to read raw binary data in other formats (note the single quotes, these are single/multi-byte characters):\n\n'c' - signed char\n\n'cu' - unsigned char\n\n's' - signed short\n\n'S' - signed short, big endian\n\n'su' - unsigned short\n\n'Su' - unsigned short, big endian\n\n'i' - signed int\n\n'I' - signed int, big endian\n\n'iu' - unsigned int\n\n'Iu' - unsigned int, big endian\n\n'f' - float\n\n'F' - float, big endian\n\n'd' - double\n\n'D' - double, big endian\n\n"
    },
    "STR_INSERT eel2": {
        "prefix": "str_insert",
        "scope": "eel2",
        "body": "str_insert(${1:#str}, \"${2:srcstr}\", ${3:pos})$0",
        "description": "Inserts srcstr into #str at offset pos. Returns #str\n\n"
    },
    "STR_SETCHAR eel2": {
        "prefix": "str_setchar",
        "scope": "eel2",
        "body": "str_setchar(${1:#str}, ${2:offset}, ${3:val}, ${4:[,type]}, ${5:)})$0",
        "description": "Sets value at offset offset, type optional. offset may be negative to refer to offset relative to end of string, or between 0 and length, inclusive, and if set to length it will lengthen string. See str_getchar() for more information on types.\n\n"
    },
    "STR_SETLEN eel2": {
        "prefix": "str_setlen",
        "scope": "eel2",
        "body": "str_setlen(${1:#str}, ${2:len})$0",
        "description": "Sets length of #str (if increasing, will be space-padded), and returns #str.\n\n"
    },
    "STRCAT eel2": {
        "prefix": "strcat",
        "scope": "eel2",
        "body": "strcat(${1:#str}, \"${2:srcstr}\")$0",
        "description": "Appends srcstr to #str, and returns #str\n\n"
    },
    "STRCMP eel2": {
        "prefix": "strcmp",
        "scope": "eel2",
        "body": "strcmp(\"${1:str}\", \"${2:str2}\")$0",
        "description": "Compares strings, returning 0 if equal\n\n"
    },
    "STRCPY eel2": {
        "prefix": "strcpy",
        "scope": "eel2",
        "body": "strcpy(${1:#str}, \"${2:srcstr}\")$0",
        "description": "Copies the contents of srcstr to #str, and returns #str\n\n"
    },
    "STRCPY_FROM eel2": {
        "prefix": "strcpy_from",
        "scope": "eel2",
        "body": "strcpy_from(${1:#str}, \"${2:srcstr}\", ${3:offset})$0",
        "description": "Copies srcstr to #str, but starts reading srcstr at offset offset\n\n"
    },
    "STRCPY_SUBSTR eel2": {
        "prefix": "strcpy_substr",
        "scope": "eel2",
        "body": "strcpy_substr(${1:#str}, \"${2:srcstr}\", ${3:offs}, ${4:ml)})$0",
        "description": "PHP-style (start at offs, offs<0 means from end, ml for maxlen, ml<0 = reduce length by this amt)\n\n"
    },
    "STRICMP eel2": {
        "prefix": "stricmp",
        "scope": "eel2",
        "body": "stricmp(\"${1:str}\", \"${2:str2}\")$0",
        "description": "Compares strings ignoring case, returning 0 if equal\n\n"
    },
    "STRLEN eel2": {
        "prefix": "strlen",
        "scope": "eel2",
        "body": "strlen(\"${1:str}\")$0",
        "description": "Returns the length of the string passed as a parameter\n\n"
    },
    "STRNCAT eel2": {
        "prefix": "strncat",
        "scope": "eel2",
        "body": "strncat(${1:#str}, \"${2:srcstr}\", ${3:maxlen})$0",
        "description": "Appends srcstr to #str, stopping after maxlen characters of srcstr. Returns #str.\n\n"
    },
    "STRNCMP eel2": {
        "prefix": "strncmp",
        "scope": "eel2",
        "body": "strncmp(\"${1:str}\", \"${2:str2}\", ${3:maxlen})$0",
        "description": "Compares strings giving up after maxlen characters, returning 0 if equal\n\n"
    },
    "STRNCPY eel2": {
        "prefix": "strncpy",
        "scope": "eel2",
        "body": "strncpy(${1:#str}, \"${2:srcstr}\", ${3:maxlen})$0",
        "description": "Copies srcstr to #str, stopping after maxlen characters. Returns #str.\n\n"
    },
    "STRNICMP eel2": {
        "prefix": "strnicmp",
        "scope": "eel2",
        "body": "strnicmp(\"${1:str}\", \"${2:str2}\", ${3:maxlen})$0",
        "description": "Compares strings giving up after maxlen characters, ignoring case, returning 0 if equal\n\n"
    },
    "TAN eel2": {
        "prefix": "tan",
        "scope": "eel2",
        "body": "tan(${1:angle})$0",
        "description": "Returns the tangent of the angle specified (specified in radians).\n\n"
    },
    "TCP_CLOSE eel2": {
        "prefix": "tcp_close",
        "scope": "eel2",
        "body": "tcp_close(${1:connection})$0",
        "description": "Closes a TCP connection created by tcp_listen() or tcp_connect().\n\n"
    },
    "TCP_CONNECT eel2": {
        "prefix": "tcp_connect",
        "scope": "eel2",
        "body": "tcp_connect(\"${1:address}\", ${2:port}, ${3:[,block]})$0",
        "description": "Create a new TCP connection to address:port. If block is specified and 0, connection will be made nonblocking. Returns TCP connection ID greater than 0 on success.\n\n"
    },
    "TCP_LISTEN eel2": {
        "prefix": "tcp_listen",
        "scope": "eel2",
        "body": "tcp_listen(${1:port}, \"${2:[,interface,#ip_out]}\")$0",
        "description": "Listens on port specified. Returns less than 0 if could not listen, 0 if no new connection available, or greater than 0 (as a TCP connection ID) if a new connection was made. If a connection made and #ip_out specified, it will be set to the remote IP. interface can be empty for all interfaces, otherwise an interface IP as a string.\n\n"
    },
    "TCP_LISTEN_END eel2": {
        "prefix": "tcp_listen_end",
        "scope": "eel2",
        "body": "tcp_listen_end(${1:port})$0",
        "description": "Ends listening on port specified.\n\n"
    },
    "TCP_RECV eel2": {
        "prefix": "tcp_recv",
        "scope": "eel2",
        "body": "tcp_recv(${1:connection}, ${2:#str}, ${3:[,maxlen]})$0",
        "description": "Receives data from a connection to #str. If maxlen is specified, no more than maxlen bytes will be received. If non-blocking, 0 will be returned if would block. Returns less than 0 if error.\n\n"
    },
    "TCP_SEND eel2": {
        "prefix": "tcp_send",
        "scope": "eel2",
        "body": "tcp_send(${1:connection}, \"${2:str}\", ${3:[,len]})$0",
        "description": "Sends a string to connection. Returns -1 on error, 0 if connection is non-blocking and would block, otherwise returns length sent. If len is specified and not less than 1, only the first len bytes of the string parameter will be sent.\n\n"
    },
    "TCP_SET_BLOCK eel2": {
        "prefix": "tcp_set_block",
        "scope": "eel2",
        "body": "tcp_set_block(${1:connection}, ${2:block})$0",
        "description": "Sets whether a connection blocks.\n\n"
    },
    "TIME eel2": {
        "prefix": "time",
        "scope": "eel2",
        "body": "time(${1:[&val]})$0",
        "description": "Sets the parameter (or a temporary buffer if omitted) to the number of seconds since January 1, 1970, and returns a reference to that value. The granularity of the value returned is 1 second.\n\n"
    },
    "TIME_PRECISE eel2": {
        "prefix": "time_precise",
        "scope": "eel2",
        "body": "time_precise(${1:[&val]})$0",
        "description": "Sets the parameter (or a temporary buffer if omitted) to a system-local timestamp in seconds, and returns a reference to that value. The granularity of the value returned is system defined (but generally significantly smaller than one second).\n\n"
    },
    "WHILE eel2": {
        "prefix": "while",
        "scope": "eel2",
        "body": "while(${1:expression})$0",
        "description": "Executes expression until expression evaluates to zero, or until 1048576iterations occur. An alternate and more useful syntax is while (expression) ( statements ), which evaluates statements after every non-zero evaluation of expression.\n\n"
    },
    "REAPER.ATEXIT lua": {
        "prefix": "reaper.atexit",
        "scope": "lua",
        "body": "reaper.atexit(${1:function})$0",
        "description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.\n\n"
    },
    "REAPER.DEFER lua": {
        "prefix": "reaper.defer",
        "scope": "lua",
        "body": "reaper.defer(${1:function})$0",
        "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\n\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\n"
    },
    "REAPER.GET_ACTION_CONTEXT lua": {
        "prefix": "reaper.get_action_context",
        "scope": "lua",
        "body": "reaper.get_action_context()$0",
        "description": "is_new_value,filename,sectionID,cmdID,mode,resolution,val = reaper.get_action_context()\n\nReturns contextual information about the script, typically MIDI/OSC input values.\n\nval will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.\n\nNotes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.\n\n"
    },
    "GFX.R lua": {
        "prefix": "gfx.r",
        "scope": "lua",
        "body": "gfx.r$0",
        "description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
    },
    "GFX.G lua": {
        "prefix": "gfx.g",
        "scope": "lua",
        "body": "gfx.g$0",
        "description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
    },
    "GFX.B lua": {
        "prefix": "gfx.b",
        "scope": "lua",
        "body": "gfx.b$0",
        "description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
    },
    "GFX.A lua": {
        "prefix": "gfx.a",
        "scope": "lua",
        "body": "gfx.a$0",
        "description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
    },
    "GFX.W lua": {
        "prefix": "gfx.w",
        "scope": "lua",
        "body": "gfx.w$0",
        "description": "These are set to the current width and height of the UI framebuffer. "
    },
    "GFX.H lua": {
        "prefix": "gfx.h",
        "scope": "lua",
        "body": "gfx.h$0",
        "description": "These are set to the current width and height of the UI framebuffer. "
    },
    "GFX.X lua": {
        "prefix": "gfx.x",
        "scope": "lua",
        "body": "gfx.x$0",
        "description": "These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. "
    },
    "GFX.Y lua": {
        "prefix": "gfx.y",
        "scope": "lua",
        "body": "gfx.y$0",
        "description": "These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. "
    },
    "GFX.MODE lua": {
        "prefix": "gfx.mode",
        "scope": "lua",
        "body": "gfx.mode$0",
        "description": "Set to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit(). "
    },
    "GFX.CLEAR lua": {
        "prefix": "gfx.clear",
        "scope": "lua",
        "body": "gfx.clear$0",
        "description": "If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). "
    },
    "GFX.DEST lua": {
        "prefix": "gfx.dest",
        "scope": "lua",
        "body": "gfx.dest$0",
        "description": "Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image)."
    },
    "GFX.TEXTH lua": {
        "prefix": "gfx.texth",
        "scope": "lua",
        "body": "gfx.texth$0",
        "description": "Set to the height of a line of text in the current font. Do not modify this variable."
    },
    "GFX.EXT_RETINA lua": {
        "prefix": "gfx.ext_retina",
        "scope": "lua",
        "body": "gfx.ext_retina$0",
        "description": "If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx.w/gfx.h/etc will be doubled."
    },
    "GFX.MOUSE_X lua": {
        "prefix": "gfx.mouse_x",
        "scope": "lua",
        "body": "gfx.mouse_x$0",
        "description": "gfx.mouse_x and gfx.mouse_y are set to the coordinates of the mouse relative to the graphics window."
    },
    "GFX.MOUSE_Y lua": {
        "prefix": "gfx.mouse_y",
        "scope": "lua",
        "body": "gfx.mouse_y$0",
        "description": "gfx.mouse_x and gfx.mouse_y are set to the coordinates of the mouse relative to the graphics window."
    },
    "GFX.MOUSE_WHEEL lua": {
        "prefix": "gfx.mouse_wheel",
        "scope": "lua",
        "body": "gfx.mouse_wheel$0",
        "description": "mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it."
    },
    "GFX.MOUSE_HWHEEL lua": {
        "prefix": "gfx.mouse_hwheel",
        "scope": "lua",
        "body": "gfx.mouse_hwheel$0",
        "description": "mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it."
    },
    "GFX.ARC lua": {
        "prefix": "gfx.arc",
        "scope": "lua",
        "body": "gfx.arc(${1:x}, ${2:y}, ${3:r}, ${4:ang1}, ${5:ang2}, ${6:[,antialias]})$0",
        "description": "Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.\n\n"
    },
    "GFX.BLIT lua": {
        "prefix": "gfx.blit",
        "scope": "lua",
        "body": "gfx.blit(${1:source}, ${2:scale}, ${3:rotation})$0",
        "description": "If three parameters are specified, copies the entirity of the source bitmap to gfx.x,gfx.y using current opacity and copy mode (set with gfx.a, gfx.mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians).\n\nFor the \"source\" parameter specify -1 to use the main framebuffer as source, or an image index (see gfx.loadimg()).\n\n"
    },
    "GFX.BLITEXT lua": {
        "prefix": "gfx.blitext",
        "scope": "lua",
        "body": "gfx.blitext(${1:source}, ${2:coordinatelist}, ${3:rotation})$0",
        "description": "Deprecated, use gfx.blit instead.\n\n"
    },
    "GFX.BLURTO lua": {
        "prefix": "gfx.blurto",
        "scope": "lua",
        "body": "gfx.blurto(${1:x}, ${2:y})$0",
        "description": "Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y.\n\n"
    },
    "GFX.CIRCLE lua": {
        "prefix": "gfx.circle",
        "scope": "lua",
        "body": "gfx.circle(${1:x}, ${2:y}, ${3:r}, ${4:[,fill,antialias]})$0",
        "description": "Draws a circle, optionally filling/antialiasing. \n\n"
    },
    "GFX.CLIENTTOSCREEN lua": {
        "prefix": "gfx.clienttoscreen",
        "scope": "lua",
        "body": "gfx.clienttoscreen(${1:x}, ${2:y})$0",
        "description": "Converts the coordinates x,y to screen coordinates, returns those values.\n\n"
    },
    "GFX.DELTABLIT lua": {
        "prefix": "gfx.deltablit",
        "scope": "lua",
        "body": "gfx.deltablit(${1:srcimg}, ${2:srcx}, ${3:srcy}, ${4:srcw}, ${5:srch}, ${6:destx}, ${7:desty}, ${8:destw}, ${9:desth}, ${10:dsdx}, ${11:dtdx}, ${12:dsdy}, ${13:dtdy}, ${14:dsdxdy}, ${15:dtdxdy})$0",
        "description": "Blits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. \n\n"
    },
    "GFX.DOCK lua": {
        "prefix": "gfx.dock",
        "scope": "lua",
        "body": "gfx.dock(${1:v}, ${2:[,wx,wy,ww,wh]})$0",
        "description": "Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh specified, additional values will be returned with the undocked window position/size\n\n"
    },
    "GFX.DRAWCHAR lua": {
        "prefix": "gfx.drawchar",
        "scope": "lua",
        "body": "gfx.drawchar(${1:char})$0",
        "description": "Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character.\n\n"
    },
    "GFX.DRAWNUMBER lua": {
        "prefix": "gfx.drawnumber",
        "scope": "lua",
        "body": "gfx.drawnumber(${1:n}, ${2:ndigits})$0",
        "description": "Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth.\n\n"
    },
    "GFX.DRAWSTR lua": {
        "prefix": "gfx.drawstr",
        "scope": "lua",
        "body": "gfx.drawstr(\"${1:str}\", ${2:[,flags,right,bottom]})$0",
        "description": "Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.\n\nIf flags, right ,bottom passed in:\n\nflags&1: center horizontally\n\nflags&2: right justify\n\nflags&4: center vertically\n\nflags&8: bottom justify\n\nflags&256: ignore right/bottom, otherwise text is clipped to (gfx.x, gfx.y, right, bottom)\n\n"
    },
    "GFX.GETCHAR lua": {
        "prefix": "gfx.getchar",
        "scope": "lua",
        "body": "gfx.getchar(${1:[char]})$0",
        "description": "If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.\n\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. \n\nModified and special keys can also be returned, including:\n\nCtrl/Cmd+A..Ctrl+Z as 1..26\n\nCtrl/Cmd+Alt+A..Z as 257..282\n\nAlt+A..Z as 'A'+256..'Z'+256\n\n27 for ESC\n\n13 for Enter\n\n' ' for space\n\n"
    },
    "GFX.GETDROPFILE lua": {
        "prefix": "gfx.getdropfile",
        "scope": "lua",
        "body": "gfx.getdropfile(${1:idx})$0",
        "description": "Returns success,string for dropped file index idx. call gfx.dropfile(-1) to clear the list when finished.\n\n"
    },
    "GFX.GETFONT lua": {
        "prefix": "gfx.getfont",
        "scope": "lua",
        "body": "gfx.getfont()$0",
        "description": "Returns current font index, and the actual font face used by this font (if available).\n\n"
    },
    "GFX.GETIMGDIM lua": {
        "prefix": "gfx.getimgdim",
        "scope": "lua",
        "body": "gfx.getimgdim(${1:handle})$0",
        "description": "Retreives the dimensions of an image specified by handle, returns w, h pair.\n\n"
    },
    "GFX.GETPIXEL lua": {
        "prefix": "gfx.getpixel",
        "scope": "lua",
        "body": "gfx.getpixel()$0",
        "description": "Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)\n\n"
    },
    "GFX.GRADRECT lua": {
        "prefix": "gfx.gradrect",
        "scope": "lua",
        "body": "gfx.gradrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:r}, ${6:g}, ${7:b}, ${8:a}, ${9:[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady]})$0",
        "description": "Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.\n\n"
    },
    "GFX.INIT lua": {
        "prefix": "gfx.init",
        "scope": "lua",
        "body": "gfx.init(\"${1:name}\", ${2:[,width,height,dockstate,xpos,ypos]})$0",
        "description": "Initializes the graphics window with title name. Suggested width and height can be specified.\n\nOnce the graphics window is open, gfx.update() should be called periodically. \n\n"
    },
    "GFX.LINE lua": {
        "prefix": "gfx.line",
        "scope": "lua",
        "body": "gfx.line(${1:x}, ${2:y}, ${3:x2}, ${4:y2}, ${5:[,aa]})$0",
        "description": "Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased. \n\n"
    },
    "GFX.LINETO lua": {
        "prefix": "gfx.lineto",
        "scope": "lua",
        "body": "gfx.lineto(${1:x}, ${2:y}, ${3:[,aa]})$0",
        "description": "Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y.\n\n"
    },
    "GFX.LOADIMG lua": {
        "prefix": "gfx.loadimg",
        "scope": "lua",
        "body": "gfx.loadimg(${1:image}, \"${2:filename}\")$0",
        "description": "Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. \n\n"
    },
    "GFX.MEASURECHAR lua": {
        "prefix": "gfx.measurechar",
        "scope": "lua",
        "body": "gfx.measurechar(${1:char})$0",
        "description": "Measures the drawing dimensions of a character with the current font (as set by gfx.setfont). Returns width and height of character.\n\n"
    },
    "GFX.MEASURESTR lua": {
        "prefix": "gfx.measurestr",
        "scope": "lua",
        "body": "gfx.measurestr(\"${1:str}\")$0",
        "description": "Measures the drawing dimensions of a string with the current font (as set by gfx.setfont). Returns width and height of string.\n\n"
    },
    "GFX.MULADDRECT lua": {
        "prefix": "gfx.muladdrect",
        "scope": "lua",
        "body": "gfx.muladdrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:mul_r}, ${6:mul_g}, ${7:mul_b}, ${8:[,mul_a,add_r,add_g,add_b,add_a]})$0",
        "description": "Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.\n\n"
    },
    "GFX.PRINTF lua": {
        "prefix": "gfx.printf",
        "scope": "lua",
        "body": "gfx.printf(\"${1:format}\", ${2:[, ...]})$0",
        "description": "Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()\n\n"
    },
    "GFX.QUIT lua": {
        "prefix": "gfx.quit",
        "scope": "lua",
        "body": "gfx.quit()$0",
        "description": "Closes the graphics window.\n\n"
    },
    "GFX.RECT lua": {
        "prefix": "gfx.rect",
        "scope": "lua",
        "body": "gfx.rect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:[,filled]})$0",
        "description": "Fills a rectangle at x,y, w,h pixels in dimension, filled by default. \n\n"
    },
    "GFX.RECTTO lua": {
        "prefix": "gfx.rectto",
        "scope": "lua",
        "body": "gfx.rectto(${1:x}, ${2:y})$0",
        "description": "Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y. \n\n"
    },
    "GFX.ROUNDRECT lua": {
        "prefix": "gfx.roundrect",
        "scope": "lua",
        "body": "gfx.roundrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:radius}, ${6:[,antialias]})$0",
        "description": "Draws a rectangle with rounded corners. \n\n"
    },
    "GFX.SCREENTOCLIENT lua": {
        "prefix": "gfx.screentoclient",
        "scope": "lua",
        "body": "gfx.screentoclient(${1:x}, ${2:y})$0",
        "description": "Converts the screen coordinates x,y to client coordinates, returns those values.\n\n"
    },
    "GFX.SET lua": {
        "prefix": "gfx.set",
        "scope": "lua",
        "body": "gfx.set(${1:r}, ${2:[,g,b,a,mode,dest]})$0",
        "description": "Sets gfx.r/gfx.g/gfx.b/gfx.a/gfx.mode, sets gfx.dest if final parameter specified\n\n"
    },
    "GFX.SETCURSOR lua": {
        "prefix": "gfx.setcursor",
        "scope": "lua",
        "body": "gfx.setcursor(${1:resource_id}, ${2:custom_cursor_name})$0",
        "description": "Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like \"arrow\" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.\n\n"
    },
    "GFX.SETFONT lua": {
        "prefix": "gfx.setfont",
        "scope": "lua",
        "body": "gfx.setfont(${1:idx}, \"${2:[,fontface, sz, flags]}\")$0",
        "description": "Can select a font and optionally configure it. idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font, specify fontface such as \"Arial\", sz of 8-100, and optionally specify flags, which is a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. These flags may or may not be supported depending on the font and OS. After calling gfx.setfont(), gfx.texth may be updated to reflect the new average line height.\n\n"
    },
    "GFX.SETIMGDIM lua": {
        "prefix": "gfx.setimgdim",
        "scope": "lua",
        "body": "gfx.setimgdim(${1:image}, ${2:w}, ${3:h})$0",
        "description": "Resize image referenced by index 0..1024-1, width and height must be 0-2048. The contents of the image will be undefined after the resize.\n\n"
    },
    "GFX.SETPIXEL lua": {
        "prefix": "gfx.setpixel",
        "scope": "lua",
        "body": "gfx.setpixel(${1:r}, ${2:g}, ${3:b})$0",
        "description": "Writes a pixel of r,g,b to gfx.x,gfx.y.\n\n"
    },
    "GFX.SHOWMENU lua": {
        "prefix": "gfx.showmenu",
        "scope": "lua",
        "body": "gfx.showmenu(\"${1:str}\")$0",
        "description": "Shows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. Each field represents a menu item.\n\nFields can start with special characters:\n\n# : grayed out\n\n! : checked\n\n> : this menu item shows a submenu\n\n< : last item in the current submenu\n\nAn empty field will appear as a separator in the menu. gfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.\n\nExample:\n\ngfx.showmenu(\"first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu\")\n\n"
    },
    "GFX.TRANSFORMBLIT lua": {
        "prefix": "gfx.transformblit",
        "scope": "lua",
        "body": "gfx.transformblit(${1:srcimg}, ${2:destx}, ${3:desty}, ${4:destw}, ${5:desth}, ${6:div_w}, ${7:div_h}, ${8:table})$0",
        "description": "Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a reaper.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.\n\n"
    },
    "GFX.TRIANGLE lua": {
        "prefix": "gfx.triangle",
        "scope": "lua",
        "body": "gfx.triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:[x4,y4...]})$0",
        "description": "Draws a filled triangle, or any convex polygon. \n\n"
    },
    "GFX.UPDATE lua": {
        "prefix": "gfx.update",
        "scope": "lua",
        "body": "gfx.update()$0",
        "description": "Updates the graphics display, if opened\n\n"
    },
    "REAPER.NEW_ARRAY lua": {
        "prefix": "reaper.new_array",
        "scope": "lua",
        "body": "reaper.new_array(${1:[table|array][size]})$0",
        "description": "Creates a new reaper.array object of maximum and initial size size, if specified, or from the size/values of a table/array. Both size and table/array can be specified, the size parameter will override the table/array size.\n\n"
    },
    "REAPER.RUNLOOP lua": {
        "prefix": "reaper.runloop",
        "scope": "lua",
        "body": "reaper.runloop(${1:function})$0",
        "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\n\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\n"
    },
    "{REAPER.ARRAY}.CLEAR lua": {
        "prefix": "{reaper.array}.clear",
        "scope": "lua",
        "body": "{reaper.array}.clear(${1:[value, offset, size]})$0",
        "description": "Sets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set.\n\n"
    },
    "{REAPER.ARRAY}.CONVOLVE lua": {
        "prefix": "{reaper.array}.convolve",
        "scope": "lua",
        "body": "{reaper.array}.convolve(${1:[src, srcoffs, size, destoffs]})$0",
        "description": "Convolves complex value pairs from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)\n\n"
    },
    "{REAPER.ARRAY}.COPY lua": {
        "prefix": "{reaper.array}.copy",
        "scope": "lua",
        "body": "{reaper.array}.copy(${1:[src, srcoffs, size, destoffs]})$0",
        "description": "Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs.\n\n"
    },
    "{REAPER.ARRAY}.FFT lua": {
        "prefix": "{reaper.array}.fft",
        "scope": "lua",
        "body": "{reaper.array}.fft(${1:size}, ${2:[, permute, offset]})$0",
        "description": "Performs a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.\n\n"
    },
    "{REAPER.ARRAY}.FFT_REAL lua": {
        "prefix": "{reaper.array}.fft_real",
        "scope": "lua",
        "body": "{reaper.array}.fft_real(${1:size}, ${2:[, permute, offset]})$0",
        "description": "Performs a forward real->complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.\n\n"
    },
    "{REAPER.ARRAY}.GET_ALLOC lua": {
        "prefix": "{reaper.array}.get_alloc",
        "scope": "lua",
        "body": "{reaper.array}.get_alloc()$0",
        "description": "Returns the maximum (allocated) size of the array.\n\n"
    },
    "{REAPER.ARRAY}.IFFT lua": {
        "prefix": "{reaper.array}.ifft",
        "scope": "lua",
        "body": "{reaper.array}.ifft(${1:size}, ${2:[, permute, offset]})$0",
        "description": "Performs a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.\n\n"
    },
    "{REAPER.ARRAY}.IFFT_REAL lua": {
        "prefix": "{reaper.array}.ifft_real",
        "scope": "lua",
        "body": "{reaper.array}.ifft_real(${1:size}, ${2:[, permute, offset]})$0",
        "description": "Performs a backwards complex->real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.\n\n"
    },
    "{REAPER.ARRAY}.MULTIPLY lua": {
        "prefix": "{reaper.array}.multiply",
        "scope": "lua",
        "body": "{reaper.array}.multiply(${1:[src, srcoffs, size, destoffs]})$0",
        "description": "Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs.\n\n"
    },
    "{REAPER.ARRAY}.RESIZE lua": {
        "prefix": "{reaper.array}.resize",
        "scope": "lua",
        "body": "{reaper.array}.resize(${1:size})$0",
        "description": "Resizes an array object to size. size must be [0..max_size].\n\n"
    },
    "{REAPER.ARRAY}.TABLE lua": {
        "prefix": "{reaper.array}.table",
        "scope": "lua",
        "body": "{reaper.array}.table(${1:[offset, size]})$0",
        "description": "Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used.\n\n"
    },
    "RPR_ATEXIT python": {
        "prefix": "RPR_atexit",
        "scope": "python",
        "body": "RPR_atexit(${1:String})$0",
        "description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.\n\n"
    },
    "RPR_DEFER python": {
        "prefix": "RPR_defer",
        "scope": "python",
        "body": "RPR_defer(${1:String code})$0",
        "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\n\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\n"
    },
    "RPR_RUNLOOP python": {
        "prefix": "RPR_runloop",
        "scope": "python",
        "body": "RPR_runloop$0",
        "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\n\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\nView: [all] [C/C++] [EEL] [Lua] [Python]\n"
    }
}